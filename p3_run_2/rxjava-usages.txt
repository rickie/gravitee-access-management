1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(group)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getReferenceType(), createdGroup.getReferenceId(), createdGroup.getId())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Group> testUpdate = RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(toUpdate.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdGroup.getId())).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testDelete = RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdGroup.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member1).collectList()).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member2).collectList()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(repository.findByIdIn_migrated(ids).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findByName_migrated(group.getReferenceType(), group.getReferenceId(), group.getName())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToMaybe(repository.findByName_migrated(group.getReferenceType(), group.getReferenceId(), "unknown")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(apCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(apCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_SINGLE, 0, 20)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 0, totalCount + 1)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 0, totalCount / 2)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN10, 1, totalCount / 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomainAndResource_migrated(DOMAIN_ID, RESOURCE_ID).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(repository.findByResources_migrated(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2")).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Email> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknownId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getReferenceType(), createdEmail.getReferenceId(), createdEmail.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Email> updatedEmail = RxJava2Adapter.monoToSingle(repository.update_migrated(updatableEmail)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test()
1 | Completable | blockingGet | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdEmail.getId())).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdEmail.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = RxJava2Adapter.monoToMaybe(repository.findByTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findAll_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = RxJava2Adapter.monoToMaybe(repository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated(alertNotifierCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated("UNKNOWN")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = RxJava2Adapter.monoToSingle(alertNotifierRepository.create_migrated(alertNotifier)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = RxJava2Adapter.monoToSingle(alertNotifierRepository.update_migrated(updatedAlertNotifier)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifierCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertNotifierRepository.findById_migrated(alertNotifierCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findByReference_migrated(ReferenceType.DOMAIN, "testDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(bdetectionCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(bDetection)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = RxJava2Adapter.monoToSingle(repository.update_migrated(bDetection)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(botDetectionCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(repository.delete_migrated(botDetectionCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(repository.findById_migrated(botDetectionCreated.getId())).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Form> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknownId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getReferenceType(), createdForm.getReferenceId(), createdForm.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Form> updatedForm = RxJava2Adapter.monoToSingle(repository.update_migrated(updatableForm)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test()
1 | Completable | blockingGet | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdForm.getId())).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdForm.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = RxJava2Adapter.monoToMaybe(repository.findByTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = RxJava2Adapter.monoToMaybe(repository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated(alertTriggerCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated("UNKNOWN")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = RxJava2Adapter.monoToSingle(alertTriggerRepository.create_migrated(alertTrigger)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = RxJava2Adapter.monoToSingle(alertTriggerRepository.update_migrated(updatedAlertTrigger)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTriggerCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerRepository.findById_migrated(alertTriggerCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated("testDomain", 0, Integer.MAX_VALUE)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated("testDomain", "test-grant")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToMaybe(applicationRepository.findByDomainAndClientId_migrated("testDomain", "clientId1")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated("testDomainPagination", 1, 1)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = RxJava2Adapter.fluxToFlowable(applicationRepository.findByIdentityProvider_migrated(appCreated.getIdentities().iterator().next())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.create_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(updatedApp)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(appCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(appCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.search_migrated(domain, "clientId", 0, Integer.MAX_VALUE)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationRepository.search_migrated(domain, "clientId*", 0, Integer.MAX_VALUE)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver1 = RxJava2Adapter.monoToSingle(domainRepository.findAll_migrated().collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated("environment#1")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = RxJava2Adapter.fluxToFlowable(domainRepository.findByIdIn_migrated(Collections.singleton(domainCreated.getId()))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = RxJava2Adapter.monoToSingle(domainRepository.create_migrated(domain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = RxJava2Adapter.monoToSingle(domainRepository.update_migrated(updatedDomain)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(domainRepository.delete_migrated(domainCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(domainCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = RxJava2Adapter.fluxToFlowable(domainRepository.findAllByCriteria_migrated(criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = RxJava2Adapter.fluxToFlowable(domainRepository.findAllByCriteria_migrated(criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated("environment#1", "testName")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.create(alertNotifier).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.update(updatedMonitoring).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Monitoring> obs = nodeMonitoringRepository.findByNodeIdAndType(NODE_ID, MONITORING_TYPE).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Monitoring> obs = nodeMonitoringRepository.findByTypeAndTimeFrame(MONITORING_TYPE, from, to).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getUserId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUsername_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getUsername())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialRepository.findByCredentialId_migrated(credential.getReferenceType(), credential.getReferenceId(), credential.getCredentialId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = RxJava2Adapter.monoToSingle(credentialRepository.create_migrated(credential)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(updateCredential)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(credentialRepository.delete_migrated(credentialCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(credentialCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "wrong-user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(credentialRepository.deleteByAaguid_migrated(ReferenceType.DOMAIN, "domain-id", "aaguid")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = RxJava2Adapter.fluxToFlowable(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, "domain-id", "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testDomain = RxJava2Adapter.fluxToFlowable(serviceResourceRepository.findByReference_migrated(ReferenceType.DOMAIN, "testDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(updateResource)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(resourceCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> testObserver1 = RxJava2Adapter.fluxToFlowable(entrypointRepository.findAll_migrated(ORGANIZATION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = RxJava2Adapter.monoToSingle(entrypointRepository.create_migrated(entrypoint)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = RxJava2Adapter.monoToSingle(entrypointRepository.update_migrated(updatedEntrypoint)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(entrypointCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Entrypoint> testFind = RxJava2Adapter.monoToMaybe(entrypointRepository.findById_migrated(entrypointCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated(installationCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated("UNKNOWN")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = RxJava2Adapter.monoToSingle(installationRepository.create_migrated(installation)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = RxJava2Adapter.monoToSingle(installationRepository.update_migrated(updatedInstallation)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = RxJava2Adapter.monoToCompletable(installationRepository.delete_migrated(installationCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(installationRepository.findById_migrated(installationCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = RxJava2Adapter.fluxToFlowable(organizationUserRepository.findAll_migrated(ReferenceType.ORGANIZATION, "testOrga")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, "testOrga", user.getUsername(), user.getSource())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(organizationUserRepository.findAll_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), 0, 10)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = RxJava2Adapter.fluxToFlowable(organizationUserRepository.findByIdIn_migrated(Arrays.asList(userCreated.getId()))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserRepository.create_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserRepository.update_migrated(updatedUser)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(organizationUserRepository.delete_migrated(userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(organizationUserRepository.findById_migrated(userCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, "testUsername*", 0, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, "testUsername*", 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 1, 1)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, query, 0, 10)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(organizationUserRepository.search_migrated(ReferenceType.ORGANIZATION, organization, query, 0, 10)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToMaybe(organizationRepository.findById_migrated(organizationCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> testObserver = RxJava2Adapter.monoToMaybe(organizationRepository.findById_migrated("unknown")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(organizationRepository.create_migrated(organization)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(organizationRepository.update_migrated(organizationUpdated)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = RxJava2Adapter.monoToCompletable(organizationRepository.delete_migrated(organizationCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Organization>> obs = RxJava2Adapter.monoToSingle(organizationRepository.findByHrids_migrated(Collections.singletonList("Hrid1")).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = RxJava2Adapter.monoToSingle(flowRepository.findAll_migrated(ReferenceType.DOMAIN, "DOMAIN1").collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = RxJava2Adapter.monoToSingle(flowRepository.findByApplication_migrated(ReferenceType.DOMAIN, "DOMAIN1", "APP1").collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(ReferenceType.DOMAIN, "DOMAIN1", flowCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(flowCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowUpdated)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowUpdated)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(flowCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testSubscriber = RxJava2Adapter.fluxToFlowable(factorRepository.findByDomain_migrated("testDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = RxJava2Adapter.monoToSingle(factorRepository.create_migrated(factor)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = RxJava2Adapter.monoToSingle(factorRepository.update_migrated(updateFactor)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(factorRepository.delete_migrated(factorCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(factorCreated.getId())).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = RxJava2Adapter.monoToSingle(taskRepository.update_migrated(buildSystemTask())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = RxJava2Adapter.monoToSingle(taskRepository.updateIf_migrated(updatedSystemTask, systemTaskCreated.getOperationId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = RxJava2Adapter.monoToSingle(taskRepository.updateIf_migrated(updatedSystemTask, "unknownId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(taskRepository.delete_migrated(systemTaskCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(taskRepository.findById_migrated(systemTaskCreated.getId())).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = RxJava2Adapter.monoToMaybe(membershipRepository.findById_migrated(createdMembership.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = RxJava2Adapter.monoToSingle(membershipRepository.findByReference_migrated(ORGANIZATION_ID, ReferenceType.ORGANIZATION).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = RxJava2Adapter.monoToSingle(membershipRepository.findByMember_migrated("user#1", MemberType.USER).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberType(), membership.getMemberId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Membership> obs = RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | obs = RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | obs = RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | obs = RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | obs = RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(reporter)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdReporter.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdReporter.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = RxJava2Adapter.monoToSingle(repository.findAll_migrated().collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(domain).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated("DomainTestFindByDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = RxJava2Adapter.monoToSingle(certificateRepository.create_migrated(certificate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = RxJava2Adapter.monoToSingle(certificateRepository.update_migrated(updatedCertificate)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(certificateRepository.delete_migrated(certificateCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = RxJava2Adapter.fluxToFlowable(userRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, "testDomain", user.getUsername(), user.getSource())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(userRepository.findAll_migrated(ReferenceType.DOMAIN, user.getReferenceId(), 0, 10)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(Arrays.asList(userCreated.getId()))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findByExternalIdAndSource_migrated(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userRepository.create_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userRepository.update_migrated(updatedUser)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, "testUsername*", 0, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, "testUsername*", 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 1, 1)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 4)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = RxJava2Adapter.fluxToFlowable(userRepository.findByDomainAndEmail_migrated(domain, "test@test.com", true)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = RxJava2Adapter.fluxToFlowable(userRepository.findByDomainAndEmail_migrated(domain, "test@test.com", false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, query, 0, 10)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(userRepository.search_migrated(ReferenceType.DOMAIN, domain, query, 0, 10)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver1 = RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query1)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver2 = RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query2)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToMaybe(environmentRepository.findById_migrated(envCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(environmentRepository.findById_migrated("unknown")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(environmentRepository.create_migrated(env)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(environmentRepository.update_migrated(envUpdated)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = RxJava2Adapter.monoToCompletable(environmentRepository.delete_migrated(envCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated(FIXED_REF_ID).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated().collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> observer = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated("unknown-sessions")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated("unknown-sessions")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = RxJava2Adapter.monoToSingle(authenticationFlowContextRepository.create_migrated(entity)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.delete_migrated(TRANSACTION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.delete_migrated(TRANSACTION_ID, 1)).test()
1 | Flowable | test | METHOD_INVOCATION | testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(null)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = RxJava2Adapter.fluxToFlowable(authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = RxJava2Adapter.monoToMaybe(authenticationFlowContextRepository.findLastByTransactionId_migrated(TRANSACTION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = RxJava2Adapter.monoToSingle(roleRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = RxJava2Adapter.monoToSingle(roleRepository.findByNamesAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, roleCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Role> testObserver = RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = RxJava2Adapter.monoToSingle(roleRepository.update_migrated(updatedRole)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(roleCreated.getId())).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToMaybe(accessTokenRepository.findByToken_migrated("unknown-token")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(accessTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(accessTokenRepository.findByToken_migrated(token.getToken())).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testDelete = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(token.getToken())).test()
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(token.getAuthorizationCode()))).test()
1 | Completable | andThen | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(token.getAuthorizationCode()))).test
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated("unknown"))).test()
1 | Completable | andThen | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated("unknown"))).test
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientIdAndSubject_migrated("my-client-id", "my-subject"))).test()
1 | Completable | andThen | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientIdAndSubject_migrated("my-client-id", "my-subject"))).test
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientId_migrated("my-client-id-2"))).test()
1 | Completable | andThen | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByClientId_migrated("my-client-id-2"))).test
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().andThen
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> observer = RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable()).then(accessTokenRepository.countByClientId_migrated("my-client-id-count"))).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObserver = accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then(accessTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObservable = accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then(accessTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Event> testSubscriber = RxJava2Adapter.fluxToFlowable(eventRepository.findByTimeFrame_migrated(from, to)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Event> testObserver = RxJava2Adapter.monoToSingle(eventRepository.create_migrated(event)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(eventRepository.delete_migrated(eventCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(eventRepository.findById_migrated(eventCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<List<IdentityProvider>> testObserver = RxJava2Adapter.monoToSingle(identityProviderRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, identityProviderCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(updatedIdentityProvider)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(identityProviderRepository.delete_migrated(identityProviderCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(identityProviderCreated.getId())).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Tag> testObserver1 = RxJava2Adapter.fluxToFlowable(tagRepository.findAll_migrated(ORGANIZATION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = RxJava2Adapter.monoToSingle(tagRepository.update_migrated(updatedTag)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(tagCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(attempt)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findByCriteria_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findByCriteria_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain("unknown").username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdUnexpectedAttempt.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdUnexpectedAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(createdAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(createdAttempt.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> updateObserver = RxJava2Adapter.monoToSingle(repository.update_migrated(updatableAttempt)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeRepository.findByDomain_migrated("testDomain", 0, Integer.MAX_VALUE)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToMaybe(scopeRepository.findByDomainAndKey_migrated("testDomain", "one")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKeys_migrated("testDomain", Arrays.asList("one", "two", "three")).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(updatedScope)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(scopeRepository.delete_migrated(scopeCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(scopeCreated.getId())).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeRepository.search_migrated(scopeCreated.getDomain(), "*" + scopeName + "*", 0, Integer.MAX_VALUE)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToMaybe(authorizationCodeRepository.findByCode_migrated(code)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> test = RxJava2Adapter.monoToMaybe(authorizationCodeRepository.findByCode_migrated(code)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).toCompletable().as(RxJava2Adapter::completableToMono).then(authorizationCodeRepository.delete_migrated(code)).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(rsCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(rsCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToMaybe(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, rsCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Resource>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 0, 1)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(DOMAIN_ID, 1, 1)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findByResources_migrated(Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), "notMatching"))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = RxJava2Adapter.fluxToFlowable(repository.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), rsCreated3.getId(), rsCreated4.getId(), rsCreated5.getId(), "unknown"))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = RxJava2Adapter.monoToMaybe(repository.findById_migrated("unknown-id")).test()
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.create_migrated(par)).test().awaitTerminalEvent
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = RxJava2Adapter.monoToMaybe(repository.findById_migrated(id)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.create_migrated(par).then(repository.findById_migrated(id)).then().then(repository.delete_migrated(id)).then(repository.findById_migrated(id)).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = RxJava2Adapter.monoToMaybe(refreshTokenRepository.findByToken_migrated("unknown-token")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(refreshTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable()).then(refreshTokenRepository.delete_migrated("my-token")).then(refreshTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then(refreshTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then(refreshTokenRepository.findByToken_migrated("my-token")).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptCreated.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(repository.update_migrated(toUpdate)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(repository.delete_migrated(ptCreated.getId())).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = RxJava2Adapter.fluxToFlowable(extensionGrantRepository.findByDomain_migrated("testDomain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated("test")).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(updatedExtension)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = RxJava2Adapter.monoToCompletable(extensionGrantRepository.delete_migrated(extensionGrantCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(extensionGrantCreated.getId())).test().assertEmpty
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<AccessPolicy>> accessPoliciesOperation = RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, accessPoliciesOperation, (count,accessPolicies)->new Page<>(accessPolicies, page, count)))
1 | Flowable | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource)))).first(0L))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments())).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(MongoApplicationRepository::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first(0L))
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application))))).first(0L))
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class))).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first(Collections.emptyMap()))
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class))).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class))).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first(Collections.emptyMap()))
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class))).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size))).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, page, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | isEmpty | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME))).isEmpty())
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, scopesOperation, (count,scope)->new Page<Scope>(scope, page, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, scopesOperation, (count,scopes)->new Page<>(scopes, page, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, page, count)))
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.countDocuments(mongoQuery))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(rolesCollection.find(mongoQuery).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, 0, count)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
    }
}))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(eventsCollection.find(eq(FIELD_ID, id)).first())).map(this::convert), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Resource>> resourcesOperation = RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).toList
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, resourcesOperation, (count,resourceSets)->new Page<>(resourceSets, page, count)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain)))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Resource>> resourceSetOperation = RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, resourceSetOperation, (count,resourceSet)->new Page<>(resourceSet, page, count)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject))))).map(this::convert), BackpressureStrategy.BUFFER)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_CLIENT, clientId)))).map(this::convert), BackpressureStrategy.BUFFER)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToObservable(Flux.from(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode)))).map(this::convert), BackpressureStrategy.BUFFER)
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Group>> groupsOperation = RxJava2Adapter.fluxToObservable(Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, groupsOperation, (count,groups)->new Page<>(groups, page, count)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Observable | blockingSubscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.listCollectionNames()).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.getCollection(collectionName).deleteMany(new Document())))).apply(z)), BackpressureStrategy.BUFFER))).blockingSubscribe();
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->RxJava2Adapter.fluxToObservable(Flux.from(mongoDatabase.getCollection(collectionName).deleteMany(new Document())))).apply(z)), BackpressureStrategy.BUFFER)
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP))
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP))
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP))
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(entrypointRepository.findAllByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux())))).doOnError((error)->LOGGER.error("Unable to list all entrypoints with organization {}", organizationId, error)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(scopeApproval));
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(update_migrated(scopeApproval));
    }
}))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP))
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP))
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).doOnError((error)->LOGGER.error("Unable to retrieve AlertNotifier with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(result.doOnError((error)->LOGGER.error("unable to retrieve all environments", error)))
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(result.doOnError((error)->LOGGER.error("unable to retrieve Environments with organizationId {}", organizationId, error)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e))))).doOnError((error)->LOGGER.error("Unable to retrieve AlertTrigger with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | fromMaybe | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromMaybe(RxJava2Adapter.monoToMaybe(findByToken_migrated(token).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((Integer i)->z))).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error)))))
1 | Observable | doOnError | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientIdAndSubject_migrated(clientId, subject, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {} and subject {}", clientId, subject, error)), BackpressureStrategy.BUFFER)
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientIdAndSubject_migrated(clientId, subject, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Observable | doOnError | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientId_migrated(clientId, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {}", clientId, error)), BackpressureStrategy.BUFFER)
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientId_migrated(clientId, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Observable | doOnError | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with authorization code {}", authorizationCode, error)), BackpressureStrategy.BUFFER)
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()))).apply(e)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(attemptExpired)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(attemptExpired2)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(repository.create_migrated(attemptNotExpired)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(repository.purgeExpiredData_migrated()).test()
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(parRepository.create_migrated(object1)).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(parRepository.create_migrated(object2)).test().awaitTerminalEvent
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(parRepository.purgeExpiredData_migrated()).test()
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(object1)).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(object2)).test().awaitTerminalEvent
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(requestObjectRepository.purgeExpiredData_migrated()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(accessTokenRepository.purgeExpiredData_migrated()).test()
1 | Flowable | blockingSubscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn(Schedulers.single()).blockingSubscribe();
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn(Schedulers.single()).blockingSubscribe
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeApprovalRepository.create_migrated(scope1)).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeApprovalRepository.create_migrated(scope2)).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(scopeApprovalRepository.purgeExpiredData_migrated()).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated("domain", "user")).collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(refreshTokenRepository.purgeExpiredData_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCodeExpired)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(authorizationCodeRepository.purgeExpiredData_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> test = RxJava2Adapter.monoToSingle(repository.create_migrated(permissionTicketExpired)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid2.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = RxJava2Adapter.monoToCompletable(repository.purgeExpiredData_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(repository.findById_migrated(ptValid2.getId())).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval by id: {}", id);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(approvals)).flatMapSingle((ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(approvals)).flatMapSingle((ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke approval for scope: {}", consentId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {} and user : {}", domain, user);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)));
}))
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user))))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {}, user: {} and client: {}", domain, user, clientId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)));
}))
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user))))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | roleObs = RxJava2Adapter.monoToMaybe(roleService.findById_migrated(user.getReferenceType(), user.getReferenceId(), roleId)).onErrorResumeNext((throwable)->{
    if (throwable instanceof RoleNotFoundException) {
        return RxJava2Adapter.monoToMaybe(roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext(defaultRoleObs);
    } else {
        return defaultRoleObs;
    }
})
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext(defaultRoleObs);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then());
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, username, source)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its username: {} for the {} {}  and source {}", username, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findByExternalIdAndSource_migrated(referenceType, referenceId, externalId, source)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its externalId: {} for the {} {} and source {}", externalId, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return RxJava2Adapter.monoToSingle(update_migrated(oldUser));
}).apply(y)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
}))
1 | Single | RETURN_TYPE
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId()))))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(membershipRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find membership by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return RxJava2Adapter.monoToSingle(createInternal_migrated(newMembership, principal));
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        }).apply(err))).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable))));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, null));
}))
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap(io.gravitee.am.model.User::getId, this::convert), RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap(Group::getId, this::convert), RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roleIds)), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
}))
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap(io.gravitee.am.model.User::getId, this::convert), RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap(Group::getId, this::convert), RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roleIds)), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(RxJava2Adapter.fluxToFlowable(orgUserService.findByIdIn_migrated(userIds)).toMap(io.gravitee.am.model.User::getId, this::convert), RxJava2Adapter.fluxToFlowable(groupService.findByIdIn_migrated(groupIds)).toMap(Group::getId, this::convert), RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roleIds)), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete membership: {}", membershipId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))).count())
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(factorRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an factor using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap(factorRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete factor: {}", factorId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)));
}))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count())
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(emailRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete email: {}", emailId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | Maybe | LOCAL_VARIABLE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
        InputStream resourceAsStream = this.getClass().getResourceAsStream(GRAMMAR_PATH);
        JSONObject parse = (JSONObject)parser.parse(resourceAsStream);
        Map<String, Object> types = buildTypes();
        parse.appendField("_types", types);
        emitter.onSuccess(parse);
    } catch (ParseException | UnsupportedEncodingException e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load Spel grammar", e));
    }
}))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(tagRepository.findById_migrated(id, organizationId)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a tag using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Tag, SingleSource<Tag>>toJdkFunction((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete tag {}", tagId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}))
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | toCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by id: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete reporter: {}", reporterId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Single | LOCAL_VARIABLE
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME)))).count())
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(credentialRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->credentialRepository.delete_migrated(id)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete credential: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)));
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.deleteByUserId_migrated(referenceType, referenceId, userId)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)));
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(credentialRepository.deleteByAaguid_migrated(referenceType, referenceId, aaguid)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and aaguid: {}", referenceType, referenceId, aaguid, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)));
}))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(alertTrigger, byUser));
}))
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTrigger.getId()).then(eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).as
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | mergeDelayError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.mergeDelayError(toCreateObsList))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
}).apply(v)))
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByUserId_migrated(userId).then(refreshTokenRepository.deleteByUserId_migrated(userId))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete tokens by user {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)));
}))
1 | Completable | IMPORT
1 | Completable | LOCAL_VARIABLE
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(chain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        emitter.onSuccess(certificatePluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all certificate plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all certificate plugins", ex));
    }
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin certificate = certificatePluginManager.findById(certificatePluginId);
        if (certificate != null) {
            emitter.onSuccess(convert(certificate));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get certificate plugin : {}", certificatePluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get certificate plugin : " + certificatePluginId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = certificatePluginManager.getSchema(certificatePluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for certificate plugin {}", certificatePluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for certificate plugin " + certificatePluginId, e));
    }
}))
1 | Maybe | IMPORT
1 | Maybe | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(botDetectionRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a bot detection using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete bot detection: {}", botDetectionId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (botDetection)->RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    if (domain.getAccountSettings() != null && botDetectionId.equals(domain.getAccountSettings().getBotDetectionPlugin())) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
})
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
}).apply(y)))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete scope: {}", scopeId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable())
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()))
1 | Observable | toList | METHOD_INVOCATION | Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle((Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Role> roles)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles.stream().filter((Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList())))).flatMapSingle
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle((Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((Set<Application> applications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(applications.stream().filter((Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList())))).flatMapSingle
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope key: {}", domain, scopeKey, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)));
}))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete identity provider: {}", identityProviderId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)));
}))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count())
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(serviceResourceRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a resource using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter((Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).collectList().flatMap((List<Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((List<Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
}).apply((ServiceResource)y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete resource: {}", resourceId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable))));
}).apply((ServiceResource)y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated(domain, extensionGrant)).collect(()->(Set<Application>)new HashSet(), Set::add))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findByDomainAndClientId_migrated(domain, clientId)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its domain: {} and client_id : {}", domain, clientId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete application: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedApplications.getData()))).flatMapSingle
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(application.getIdentities())).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(application.getIdentities())).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(application.getDomain()).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle((domain)->{
    if (GrantTypeUtils.isRedirectUriRequired(oAuthSettings.getGrantTypes()) && CollectionUtils.isEmpty(oAuthSettings.getRedirectUris())) {
        if (AM_V2_VERSION.equals(oAuthSettings.getSoftwareVersion())) {
            oAuthSettings.setSoftwareVersion(null);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
        }
    }
    if (oAuthSettings.getRedirectUris() != null) {
        for (String redirectUri : oAuthSettings.getRedirectUris()) {
            try {
                URI uri = UriBuilder.fromURIString(redirectUri).build();
                if (uri.getScheme() == null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
                }
                if (!domain.isRedirectUriLocalhostAllowed() && UriBuilder.isHttp(uri.getScheme()) && UriBuilder.isLocalhost(uri.getHost())) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
                }
                if (!domain.isRedirectUriUnsecuredHttpSchemeAllowed() && uri.getScheme().equalsIgnoreCase("http")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
                }
                if (!domain.isRedirectUriWildcardAllowed() && uri.getPath().contains("*")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
                }
                if (uri.getFragment() != null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
                }
            } catch (IllegalArgumentException | URISyntaxException ex) {
                return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
            }
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a certificate using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | Single<Certificate> certificateSingle = RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(newCertificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map(RxJavaReactorMigrationUtil.toJdkFunction((schema)->objectMapper.readValue(schema, CertificateSchema.class)))).flatMapSingle(new Function<CertificateSchema, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(CertificateSchema certificateSchema) throws Exception {
        return Single.create((emitter)->{
            String certificateId = RandomString.generate();
            Certificate certificate = new Certificate();
            certificate.setId(certificateId);
            certificate.setDomain(domain);
            certificate.setName(newCertificate.getName());
            certificate.setType(newCertificate.getType());
            try {
                JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
                certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                    try {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    } catch (IOException ex) {
                        LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                        emitter.onError(ex);
                    }
                });
                certificate.setConfiguration(newCertificate.getConfiguration());
                certificate.setCreatedAt(new Date());
                certificate.setUpdatedAt(certificate.getCreatedAt());
            } catch (Exception ex) {
                LOGGER.error("An error occurs while trying to create certificate configuration", ex);
                emitter.onError(ex);
            }
            emitter.onSuccess(certificate);
        });
    }
})
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    String certificateId = RandomString.generate();
    Certificate certificate = new Certificate();
    certificate.setId(certificateId);
    certificate.setDomain(domain);
    certificate.setName(newCertificate.getName());
    certificate.setType(newCertificate.getType());
    try {
        JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificate.setConfiguration(newCertificate.getConfiguration());
        certificate.setCreatedAt(new Date());
        certificate.setUpdatedAt(certificate.getCreatedAt());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to create certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificate);
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
        return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
    }
});
1 | Single | OTHER
1 | Single | OTHER
1 | Single | LOCAL_VARIABLE
1 | Single | create | METHOD_INVOCATION | Single<Certificate> certificateSingle = Single.create((emitter)->{
    Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
    certificateToUpdate.setName(updateCertificate.getName());
    try {
        CertificateSchema certificateSchema = oldCertificate.getSchema();
        JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
        JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                String fileInformation = certificateConfiguration.get(key).asText();
                if (!oldFileInformation.equals(fileInformation)) {
                    JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                    byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                    certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                    ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                    updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                }
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
        certificateToUpdate.setUpdatedAt(new Date());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to update certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificateToUpdate);
})
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete certificate: {}", certificateId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)));
}))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count())
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}))).flatMapSingle(new Function<String, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(String configuration) throws Exception {
        certificate.setConfiguration(configuration);
        return RxJava2Adapter.monoToSingle(create_migrated(domain, certificate));
    }
}))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.fluxToFlowable(userService.findByIdIn_migrated(userIds)).toMap(User::getId, this::filter), RxJava2Adapter.fluxToFlowable(applicationService.findByIdIn_migrated(appIds)).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
}))
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(RxJava2Adapter.fluxToFlowable(userService.findByIdIn_migrated(userIds)).toMap(User::getId, this::filter), RxJava2Adapter.fluxToFlowable(applicationService.findByIdIn_migrated(appIds)).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(RxJava2Adapter.fluxToFlowable(userService.findByIdIn_migrated(userIds)).toMap(User::getId, this::filter), RxJava2Adapter.fluxToFlowable(applicationService.findByIdIn_migrated(appIds)).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicy))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(accessPolicyRepository.findById_migrated(accessPolicy)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find access policy by id {}", accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->accessPolicyRepository.delete_migrated(accessPolicy)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.update_migrated(loginAttempt));
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.create_migrated(loginAttempt));
    }
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(loginAttemptRepository.delete_migrated(criteria)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete login attempt for", criteria, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(loginAttemptRepository.findById_migrated(id).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find login attempt by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)));
}))
1 | Flowable | IMPORT
1 | Maybe | retryWhen | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}))).retryWhen(new RetryWithDelay(consistencyRetries, retryDelay)))
1 | Maybe | doFinally | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.loadContext_migrated(transactionId, expectedVersion)).doFinally(()->{
    RxJava2Adapter.monoToCompletable(clearContext_migrated(transactionId)).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
}))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(clearContext_migrated(transactionId)).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndDomain_migrated(domain, username)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID: {} for the domain {}", username, domain, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User user = new User(oldUser);
    List<EnrolledFactor> enrolledFactors = user.getFactors();
    if (enrolledFactors == null || enrolledFactors.isEmpty()) {
        enrolledFactors = Collections.singletonList(enrolledFactor);
    } else {
        if (Boolean.TRUE.equals(enrolledFactor.isPrimary())) {
            enrolledFactors.forEach((e)->e.setPrimary(false));
        }
        Optional<EnrolledFactor> optFactor = enrolledFactors.stream().filter((existingFactor)->existingFactor.getFactorId().equals(enrolledFactor.getFactorId())).findFirst();
        if (optFactor.isPresent()) {
            EnrolledFactor factorToUpdate = new EnrolledFactor(optFactor.get());
            factorToUpdate.setStatus(enrolledFactor.getStatus());
            factorToUpdate.setChannel(enrolledFactor.getChannel());
            factorToUpdate.setSecurity(enrolledFactor.getSecurity());
            factorToUpdate.setPrimary(enrolledFactor.isPrimary());
            enrolledFactors.removeIf((ef)->factorToUpdate.getFactorId().equals(ef.getFactorId()));
            enrolledFactors.add(factorToUpdate);
        } else {
            enrolledFactors.add(enrolledFactor);
        }
    }
    user.setFactors(enrolledFactors);
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.SMS == enrolledFactor.getChannel().getType()) {
        List<Attribute> phoneNumbers = user.getPhoneNumbers();
        if (phoneNumbers == null) {
            phoneNumbers = new ArrayList<>();
            user.setPhoneNumbers(phoneNumbers);
        }
        String enrolledPhoneNumber = enrolledFactor.getChannel().getTarget();
        if (!phoneNumbers.stream().filter((p)->p.getValue().equals(enrolledPhoneNumber)).findFirst().isPresent()) {
            Attribute newPhoneNumber = new Attribute();
            newPhoneNumber.setType("mobile");
            newPhoneNumber.setPrimary(phoneNumbers.isEmpty());
            newPhoneNumber.setValue(enrolledPhoneNumber);
            phoneNumbers.add(newPhoneNumber);
        }
    }
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.EMAIL == enrolledFactor.getChannel().getType()) {
        String email = user.getEmail();
        String enrolledEmail = enrolledFactor.getChannel().getTarget();
        if (email == null) {
            user.setEmail(enrolledEmail);
        } else if (!email.equals(enrolledEmail)) {
            List<Attribute> emails = user.getEmails();
            if (emails == null) {
                emails = new ArrayList<>();
                user.setEmails(emails);
            }
            if (!emails.stream().filter((p)->p.getValue().equals(enrolledEmail)).findFirst().isPresent()) {
                Attribute additionalEmail = new Attribute();
                additionalEmail.setPrimary(false);
                additionalEmail.setValue(enrolledEmail);
                emails.add(additionalEmail);
            }
        }
    }
    return RxJava2Adapter.monoToSingle(update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
        if (needToAuditUserFactorsOperation(user1, oldUser)) {
            removeSensitiveFactorsData(user1.getFactors());
            removeSensitiveFactorsData(oldUser.getFactors());
            auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
        }
    })).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).then());
}).apply(y)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findByTemplate_migrated(referenceType, referenceId, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(formRepository.findByClientAndTemplate_migrated(referenceType, referenceId, client, template)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete form: {}", formId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Completable | OTHER
1 | Maybe | LOCAL_VARIABLE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a domain using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)));
}))
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated(environmentId, query))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to search domains with query {} for environmentId {}", query, environmentId, ex);
}))
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((String ident)->RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(ident))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to find domains by environment", ex);
}))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
}).apply(y)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete security domain {}", domainId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteApplicationsCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteRolesCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteScopesCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deletedResourceCompletable);
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain.getId(), scope));
}).lastOrError())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain.getId(), scope));
}).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(Scope.values()).flatMapSingle
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then());
    }
}).apply(y)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(ReferenceType.DOMAIN, domain)).collect(HashSet::new, Set::add))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find system role : {} for type : {}", systemRole.name(), assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find default role {} of organization {} for the type {}", defaultRole.name(), organizationId, assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)));
}))
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findByIdIn_migrated(ids)).collect(()->(Set<Role>)new HashSet<Role>(), Set::add))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable))));
}).apply(t)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete role: {}", roleId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable((Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(roles)).flatMapCompletable((Role ident)->RxJava2Adapter.monoToCompletable(upsert_migrated(ident))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        }).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable)))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        }).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable)))).toCompletable();
    }
}).apply(y)))
1 | Single | toCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable)))).toCompletable();
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | Single | toCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable)))).toCompletable();
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(referenceType, referenceId)).collect(HashSet<Role>::new, Set::add))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(extensionGrantRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an extension grant using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)));
}))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((Set<Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((Set<Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to extension grant: {}", extensionGrantId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)));
}))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (Set<Application> clients1, List<ExtensionGrant> extensionGrants)->{
    if (clients1.size() == 0) {
        return y;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (y.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return y;
    }
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(referenceType, referenceId, groupName)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its name: {} for the {} {}", groupName, referenceType, referenceId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)));
}))
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap(groupRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(findById_migrated(referenceType, referenceId, groupId).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable())
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifier.getId()).then(eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).as
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(flowRepository.findById_migrated(id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete flow: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))))
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        InputStream resourceAsStream = this.getClass().getResourceAsStream(DEFINITION_PATH);
        String schema = IOUtils.toString(resourceAsStream, defaultCharset());
        emitter.onSuccess(schema);
    } catch (Exception e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load flow schema", e));
    }
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted(getFlowComparator()).toList())
1 | Observable | sorted | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted(getFlowComparator()).toList
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows)).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted
1 | Completable | toSingleDefault | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable((String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flowIdsToDelete)).flatMapCompletable((String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = RxJava2Adapter.fluxToFlowable(cut.createDefaults_migrated(organization)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = RxJava2Adapter.fluxToFlowable(cut.createDefaults_migrated(organization)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.create_migrated(ORGANIZATION_ID, newEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.create_migrated(ORGANIZATION_ID, newEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, new UpdateEntrypoint(), user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = RxJava2Adapter.monoToCompletable(cut.delete_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, user)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = RxJava2Adapter.monoToCompletable(cut.delete_migrated(ENTRYPOINT_ID, ORGANIZATION_ID, user)).test()
1 | Flowable | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(request, DOMAIN_ID, CLIENT_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToMaybe(service.findById_migrated("id")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.remove_migrated("id")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = RxJava2Adapter.monoToSingle(service.remove_migrated("id")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(GrantTypeUtils.validateGrantTypes_migrated(application)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalService.findById_migrated("my-consent")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(DOMAIN, "userId")).collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(DOMAIN, "userId")).collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ScopeApproval> testSubscriber = RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(DOMAIN, "userId")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByConsent_migrated("my-domain", "user-id", "my-consent")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByConsent_migrated("my-domain", "user-id", "my-consent")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated("my-domain", "user-id", new DefaultUser("user-id"))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated("my-domain", "user-id", new DefaultUser("user-id"))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated("my-domain", "user-id", "client-id", new DefaultUser("user-id"))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated("my-domain", "user-id", "client-id", new DefaultUser("user-id"))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(botDetectionService.findById_migrated("bot-detection")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = RxJava2Adapter.fluxToFlowable(botDetectionService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(botDetectionService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(DOMAIN, newBotDetection)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(DOMAIN, newBotDetection)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(DOMAIN, "bot-detection", updateBotDetection)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(DOMAIN, "bot-detection", updateBotDetection)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, "bot-detection")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, "bot-detection")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(botDetectionService.delete_migrated(DOMAIN, detection.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupService.findById_migrated("my-group")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(groupService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Group>> testObserver = RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN, 1, 1)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.create_migrated(DOMAIN, newGroup)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.update_migrated(DOMAIN, "my-updateGroup", updateGroup)).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated("my-domain")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver = RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = RxJava2Adapter.fluxToFlowable(domainService.findByIdIn_migrated(Arrays.asList("1", "2"))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(domainService.findByIdIn_migrated(Arrays.asList("1", "2"))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain, new DefaultUser("username"))).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.create_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(domainService.patch_migrated("my-patchDomain", patchDomain)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(domainService.delete_migrated(DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<Domain> obs = RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(criteria)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(resourceService.findById_migrated("my-resource")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(resourceService.findById_migrated("my-resource")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testObserver = RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(resourceService.create_migrated(DOMAIN, resource, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(resourceService.create_migrated(DOMAIN, resource, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(resourceService.update_migrated(DOMAIN, record.getId(), resource, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = RxJava2Adapter.monoToSingle(resourceService.update_migrated(DOMAIN, UUID.randomUUID().toString(), new UpdateServiceResource(), null)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, UUID.randomUUID().toString(), null)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, record.getId(), null)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(DOMAIN, record.getId(), null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated("my-user")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = RxJava2Adapter.fluxToFlowable(userService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(userService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = RxJava2Adapter.monoToSingle(userService.findByDomain_migrated(DOMAIN, 1, 1)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsername_migrated(DOMAIN, "my-user")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(DOMAIN, newUser)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(DOMAIN, "my-user", updateUser)).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(formService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(formService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = RxJava2Adapter.fluxToFlowable(formService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(eventService.findByTimeFrame_migrated(0, 1)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(eventService.findByTimeFrame_migrated(0, 1)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(eventService.create_migrated(newEvent)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(eventService.create_migrated(newEvent)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(ORGANIZATION_ID, membership)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = RxJava2Adapter.monoToCompletable(membershipService.addEnvironmentUserRoleIfNecessary_migrated("orga#1", "env#1", membership, principal)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = RxJava2Adapter.monoToCompletable(membershipService.addEnvironmentUserRoleIfNecessary_migrated("orga#1", "env#1", membership, principal)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = RxJava2Adapter.monoToCompletable(membershipService.addDomainUserRoleIfNecessary_migrated("orga#1", "env#1", "domain#1", membership, principal)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = RxJava2Adapter.monoToCompletable(membershipService.addDomainUserRoleIfNecessary_migrated("orga#1", "env#1", "domain#1", membership, principal)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = RxJava2Adapter.monoToSingle(membershipService.setPlatformAdmin_migrated(userId)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ENVIRONMENT_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = RxJava2Adapter.fluxToFlowable(cut.findAll_migrated(ORGANIZATION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(credentialService.findById_migrated("my-credential")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialService.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(credentialService.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = RxJava2Adapter.fluxToFlowable(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = RxJava2Adapter.fluxToFlowable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(credentialService.create_migrated(newCredential)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.create_migrated(newCredential)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(credentialService.update_migrated(updateCredential)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(credentialService.delete_migrated("my-credential")).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = RxJava2Adapter.monoToSingle(cut.getById_migrated(ALERT_TRIGGER_ID)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = RxJava2Adapter.monoToSingle(cut.getById_migrated(ALERT_TRIGGER_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertTrigger> obs = RxJava2Adapter.fluxToFlowable(cut.findByDomainAndCriteria_migrated(DOMAIN_ID, criteria)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(loginAttemptService.loginFailed_migrated(loginAttemptCriteria, accountSettings)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(loginAttemptService.loginFailed_migrated(loginAttemptCriteria, accountSettings)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated("my-client")).subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomainAndClientId_migrated(DOMAIN, "my-client")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN, 1, 1)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(DOMAIN, 1, 1)).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated("client-idp")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated("client-idp")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testObserver = RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated("client-certificate")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSub = RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated("client-certificate")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = RxJava2Adapter.monoToSingle(applicationService.findAll_migrated(1, 1)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findAll_migrated(1, 1)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = RxJava2Adapter.monoToSingle(applicationService.countByDomain_migrated(DOMAIN)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.countByDomain_migrated(DOMAIN)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = RxJava2Adapter.monoToSingle(applicationService.count_migrated()).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.count_migrated()).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient, user)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.create_migrated(new Application())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.create_migrated(toCreate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.create_migrated(DOMAIN, newClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.update_migrated(new Application())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.update_migrated(toPatch)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(existingClient.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(existingClient.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(applicationService.delete_migrated("my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.patch_migrated(DOMAIN, "my-client", patchClient)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated("my-role")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(Arrays.asList("my-role"))).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(Arrays.asList("my-role"))).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(DOMAIN, newRole)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.update_migrated(DOMAIN, "my-updateRole", updateRole)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(roleService.update_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantService.findById_migrated("my-extension-grant")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = RxJava2Adapter.fluxToFlowable(extensionGrantService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(extensionGrantService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(DOMAIN, newExtensionGrant)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(DOMAIN, "my-extension-grant", updateExtensionGrant)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, extensionGrant2.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(extensionGrantService.delete_migrated(DOMAIN, "my-extension-grant")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(ReferenceType.ORGANIZATION, ORG, newUser)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser)).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated("my-user")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = RxJava2Adapter.monoToSingle(cut.getById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = RxJava2Adapter.monoToSingle(cut.getById_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = RxJava2Adapter.fluxToFlowable(cut.findByDomainAndCriteria_migrated(DOMAIN_ID, criteria)).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = RxJava2Adapter.fluxToFlowable(cut.findByReferenceAndCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = RxJava2Adapter.monoToSingle(cut.create_migrated(ReferenceType.DOMAIN, DOMAIN_ID, newAlertNotifier, new DefaultUser(USERNAME))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME))).test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, singletonList("constraint.gravitee.io"))).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(DomainValidator.validate_migrated(domain, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, emptyList())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, singletonList(vhost.getHost()))).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, singletonList(domainConstraint))).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io", domainConstraint))).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validate_migrated(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io"))).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(VirtualHostValidator.validateDomainVhosts_migrated(domain, otherDomains)).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = RxJava2Adapter.fluxToFlowable(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(emailTemplateService.findByDomainAndTemplate_migrated(DOMAIN, Template.LOGIN.template())).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(DOMAIN, newEmail)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", updateEmail)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", updateEmail)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(DOMAIN, "my-email", new UpdateEmail())).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated("my-email")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated("my-email")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(emailTemplateService.delete_migrated(email.getId())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Email>> testObserver = RxJava2Adapter.monoToSingle(emailTemplateService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = RxJava2Adapter.fluxToFlowable(emailTemplateService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorService.findById_migrated("my-factor")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testObserver = RxJava2Adapter.fluxToFlowable(factorService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(factorService.findByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorService.create_migrated(DOMAIN, newFactor)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(factorService.update_migrated(DOMAIN, "my-factor", updateFactor)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, "my-factor")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, factor.getId())).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, "my-factor")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(factorService.delete_migrated(DOMAIN, factor.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderService.findById_migrated("my-identity-provider")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> testObserver = RxJava2Adapter.fluxToFlowable(identityProviderService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(identityProviderService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(DOMAIN, newIdentityProvider)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(DOMAIN, newIdentityProvider)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(DOMAIN, "my-identity-provider", updateIdentityProvider)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(DOMAIN, "my-identity-provider", updateIdentityProvider)).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(identityProviderService.delete_migrated(DOMAIN, "my-identity-provider")).test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(userValidator.validate_migrated(user)).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList()).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList()).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, DOMAIN, newFlow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, DOMAIN, newFlow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, ID, updateFlow)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-updateFlow", updateFlow)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.update_migrated(ReferenceType.DOMAIN, DOMAIN, "my-new Flow()", new Flow())).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(flowService.delete_migrated("my-flow")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(newFlow, newFlow2))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow2))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(tagService.findById_migrated("my-tag", Organization.DEFAULT)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagService.create_migrated(newTag, Organization.DEFAULT, null)).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagService.delete_migrated("my-tag", Organization.DEFAULT, null)).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagService.delete_migrated("my-tag", Organization.DEFAULT, null)).subscribe(testObserver);
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated(null)).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("")).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated(null)).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(reCaptchaService.isValid_migrated("any")).test()
1 | Single | fromFuture | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromFuture(spyHttpRequest))
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findById_migrated("my-scope")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(DOMAIN, 0, 1)).subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(DOMAIN, "my-scope")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(DOMAIN, "my-scope")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, Collections.emptyList())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(DOMAIN, newScope)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, scopeId, patch)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, scopeId, patch)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "toPatchId", new PatchScope())).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "my-scope", patchScope)).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.patch_migrated(DOMAIN, "my-scope", patchScope)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", new UpdateScope())).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", updateScope)).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, scopeId, updateScope)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.update_migrated(DOMAIN, "toUpdateId", new UpdateSystemScope())).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("my-scope", false)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(scopeService.delete_migrated("scope-id", false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, Arrays.asList("unknown"))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = RxJava2Adapter.monoToSingle(scopeService.validateScope_migrated(DOMAIN, Arrays.asList("valid"))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateService.findById_migrated("my-certificate")).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = RxJava2Adapter.fluxToFlowable(certificateService.findByDomain_migrated(DOMAIN)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = RxJava2Adapter.fluxToFlowable(certificateService.findByDomain_migrated(DOMAIN)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(certificateService.delete_migrated("my-certificate")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(certificateService.create_migrated("my-domain")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 1)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 1)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = RxJava2Adapter.monoToMaybe(service.loadContext_migrated(SESSION_ID, 2)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(service.clearContext_migrated(SESSION_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(service.clearContext_migrated(null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByDomain_migrated(DOMAIN)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = RxJava2Adapter.monoToSingle(tokenService.findTotalTokens_migrated()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(tokenService.deleteByUserId_migrated("userId")).test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test/subpath/subpath2_with-and.dot/AND_UPPERCASE")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated(null)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/////test////")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(PathValidator.validate_migrated("/test$:\\;,+")).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.findById_migrated(ORGANIZATION_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToMaybe(cut.createDefault_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.createOrUpdate_migrated(ORGANIZATION_ID, newOrganization, createdBy)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ORGANIZATION_ID, patchOrganization, new DefaultUser("username"))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = RxJava2Adapter.monoToSingle(cut.update_migrated(ORGANIZATION_ID, patchOrganization, new DefaultUser("username"))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(new NewResource(), DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.create_migrated(newResource, DOMAIN_ID, CLIENT_ID, USER_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = RxJava2Adapter.fluxToFlowable(service.listByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = RxJava2Adapter.monoToSingle(service.findByDomain_migrated(DOMAIN_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = RxJava2Adapter.monoToSingle(service.findByDomain_migrated(DOMAIN_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = RxJava2Adapter.fluxToFlowable(service.findByResources_migrated(Collections.emptyList())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(service.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(service.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = RxJava2Adapter.fluxToFlowable(service.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Collections.emptyList())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(service.findByDomainAndClientResource_migrated(DOMAIN_ID, CLIENT_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = RxJava2Adapter.monoToSingle(service.update_migrated(toUpdate)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(service.delete_migrated(toDelete)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = RxJava2Adapter.fluxToFlowable(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = RxJava2Adapter.fluxToFlowable(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(service.findAccessPoliciesByResources_migrated(resourceIds).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testObserver = RxJava2Adapter.fluxToFlowable(service.findAccessPoliciesByResources_migrated(resourceIds)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = RxJava2Adapter.monoToSingle(service.countAccessPolicyByResource_migrated(RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = RxJava2Adapter.monoToSingle(service.countAccessPolicyByResource_migrated(RESOURCE_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(POLICY_ID)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToMaybe(service.findAccessPolicy_migrated(POLICY_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(service.createAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(service.createAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = RxJava2Adapter.monoToSingle(service.updateAccessPolicy_migrated(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(service.deleteAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(service.deleteAccessPolicy_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = RxJava2Adapter.monoToSingle(service.getMetadata_migrated(null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = RxJava2Adapter.monoToSingle(service.getMetadata_migrated(Collections.emptyList())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = RxJava2Adapter.monoToSingle(service.getMetadata_migrated(resources)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
}))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | blockingForEach | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).blockingForEach(this::updateAuthenticationProvider);
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return RxJava2Adapter.monoToSingle(connect_migrated(user));
    }
}).apply(v)))
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identities)).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))).takeUntil
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return RxJava2Adapter.monoToMaybe(userAuthenticationService.loadPreAuthenticatedUser_migrated(user));
    }
}).apply(e)))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext((error)->{
    logger.debug("Unable to authenticate [{}] with authentication provider [{}]", authentication.getPrincipal(), authProvider, error);
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
}).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()))
1 | Maybe | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(applicationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()))
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client))))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated(domain.getId())).subscribeOn(Schedulers.io()))
1 | Maybe | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateId)).subscribeOn(Schedulers.io()))
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext(RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession)));
1 | Single | doFinally | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError((t)->logger.warn("Unable to restore the session", t))).doFinally(context::next))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    RxJava2Adapter.monoToSingle(currentSession.setValue_migrated(null));
    return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
}))
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(signedResponseAlg).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(encode_migrated(jwt, certificateProvider))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->RxJava2Adapter.monoToSingle(decodeAndVerify_migrated(jwt, certificateProvider))))
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String json = new String(Base64.getDecoder().decode(jwt.split("\\.")[1]), "UTF-8");
        emitter.onSuccess(objectMapper.readValue(json, JWT.class));
    } catch (Exception ex) {
        logger.debug("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
}))
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
}))
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        Map<String, Object> decodedPayload = certificateProvider.getJwtParser().parse(payload);
        emitter.onSuccess(decodedPayload);
    } catch (Exception ex) {
        logger.error("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
}))
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(getClient_migrated(clientId)), RxJava2Adapter.monoToSingle(getClient_migrated(user.getClient())), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
}))
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jwtService.encode_migrated(new JWT(), client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(new JWT(), client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userAuthenticationService.connect_migrated(user)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated("aa")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated("aa")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientA")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientB")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Client>> test = RxJava2Adapter.monoToSingle(clientSyncService.findTemplates_migrated()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = RxJava2Adapter.monoToMaybe(clientSyncService.findByClientId_migrated("domainAClientA")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("unknown")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated("RS512")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return null;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, true)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(introspectionTokenService.introspect_migrated(token, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.alwaysTrue())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = RxJava2Adapter.monoToSingle(flowManager.findByExtensionPoint_migrated(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.from(executionContext))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(inlineAuthenticationProvider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "ben";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "benspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    Document document = new Document();
    document.put(configuration.getUsernameField(), oldUser.getUsername());
    if (updateUser.getCredentials() != null) {
        if (configuration.isUseDedicatedSalt()) {
            byte[] salt = createSalt();
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials(), salt));
            document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
        } else {
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials()));
        }
    } else {
        document.put(configuration.getPasswordField(), oldUser.getCredentials());
    }
    if (updateUser.getAdditionalInformation() != null) {
        document.putAll(updateUser.getAdditionalInformation());
    }
    document.put(FIELD_CREATED_AT, oldUser.getCreatedAt());
    document.put(FIELD_UPDATED_AT, new Date());
    return RxJava2Adapter.monoToSingle(Mono.from(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap((updateResult)->findById_migrated(oldUser.getId()).single()));
}).apply(y)))
1 | Completable | OTHER
1 | Observable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1)))).subscribe();
1 | Observable | blockingFirst | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(collection.insertOne(doc))).blockingFirst();
1 | Observable | blockingFirst | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(collection.insertOne(doc2))).blockingFirst();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "BOB";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
})).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Completable | OTHER
1 | Single | LOCAL_VARIABLE
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while deleting user {} from the remote HTTP identity provider", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)));
}))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while searching user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
}))
1 | Single | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AuthenticationException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while calling the remote HTTP identity provider {}", ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)));
}))
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when loading pre-authenticated user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
}))
1 | Single | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("johndoe")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("johndoe")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("johndoe@mail.com")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("johndoe@mail.com")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.update_migrated("123456789", user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.update_migrated("123456789", user)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("123456789")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("123456789")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v)))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v)))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | Flowable | doFinally | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<String, Single<Integer>>toJdkFunction((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).apply(e))));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError((error)->LOGGER.error("Unable to initialize Database", error)))
1 | Flowable | first | METHOD_INVOCATION | (statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)
1 | Flowable | first | METHOD_INVOCATION | (statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | doFinally | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x)))
1 | Flowable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe()
1 | Single | RETURN_TYPE
1 | Flowable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->RxJava2Adapter.fluxToFlowable(query_migrated(connection, sql, args)).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("bob")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("user01@acme.com")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("unknown")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated("unknown@acme.com")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userProvider.create_migrated(user)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("userToUpdate")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userProvider.update_migrated("unknown", user)).test()
1 | Completable | blockingGet | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userProvider.delete_migrated(createdUser.getId())).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated("userToDelete")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userProvider.delete_migrated("unknown")).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
})).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(cut.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToMaybe(provider.loadUserByUsername_migrated(authentication)).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.countDocuments(query))).first(0L)
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Audit>> auditsOperation = RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size))).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size))).map(this::convert).collect
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count)))
1 | Maybe | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident))))).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable)))
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class))).toList())
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class))).toList())
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.from(reportableCollection.countDocuments(query))).first(0L))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError((error)->LOGGER.error("Error during bulk loading", error)))
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((List<Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident))))).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error)))
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()))
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationHistogram", criteria, Type.DATE_HISTO)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationGroupBy", criteria, Type.GROUP_BY)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = RxJava2Adapter.monoToSingle(auditReporter.aggregate_migrated(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 20)).test()
1 | Single | test | METHOD_INVOCATION | test = RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 5)).test()
1 | Single | test | METHOD_INVOCATION | test = RxJava2Adapter.monoToSingle(auditReporter.search_migrated(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 1, 5)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Audit> test = RxJava2Adapter.monoToMaybe(auditReporter.findById_migrated(audit.getReferenceType(), audit.getReferenceId(), audit.getId())).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        final String otpCode = TOTP.generateTOTP(SharedSecret.base32Str2Hex(enrolledFactor.getSecurity().getValue()));
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(userAuthenticationManager.connect_migrated(user));
}))
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->logger.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviders)).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList())
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviders)).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))
1 | Maybe | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.verify_migrated(factorContext)).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | PARAM
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn(Schedulers.io()).subscribe
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(providers.entrySet())).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(providers.entrySet())).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.update_migrated(ReferenceType.DOMAIN, domain.getId(), credentialId, credential)).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(parameters, client, getAuthenticatedUser(context))).subscribe(()->{
    queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
    redirectToPage(context, queryParams);
}, (error)->{
    if (error instanceof UserNotFoundException || error instanceof AccountStatusException) {
        queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        redirectToPage(context, queryParams);
    } else if (error instanceof EnforceUserIdentityException) {
        if (settings.isResetPasswordConfirmIdentity()) {
            queryParams.set(ConstantKeys.WARNING_PARAM_KEY, FORGOT_PASSWORD_CONFIRM);
        } else {
            queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        }
        redirectToPage(context, queryParams);
    } else {
        queryParams.set(ConstantKeys.ERROR_PARAM_KEY, "forgot_password_failed");
        redirectToPage(context, queryParams, error);
    }
});
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | return Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
});
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))).then()).subscribe(promise::complete, (error)->promise.fail(error.getMessage()));
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(Flux.fromIterable(credentials)).flatMapCompletable((credential)->{
    credential.setCounter(authenticator.getCounter());
    credential.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
});
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
}))
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(this.domain.getId())).subscribeOn(Schedulers.io()))
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(routingContext.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tokenService.deleteByUserId_migrated(user.getId())).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)))))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
    });
}).apply(a)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
    if (!optUser.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
});
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(client.getIdentities())).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<UserProvider, MaybeSource<Optional<UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorReturnItem | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
    if (!optEndUser.isPresent()) {
        return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
});
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Maybe | IMPORT
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(idToken, z).map(RxJavaReactorMigrationUtil.toJdkFunction((JWT __)->z))).onErrorResumeNext((Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(new ForgotPasswordParameters(user.getEmail(), false, false), client, mock(io.gravitee.am.identityprovider.api.User.class))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(new ForgotPasswordParameters(user.getEmail(), true, true), client, mock(io.gravitee.am.identityprovider.api.User.class))).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.forgotPassword_migrated(user.getEmail(), client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(userService.resetPassword_migrated(client, user)).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        final String otpCode = generateOTP(enrolledFactor);
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        if (Instant.now().isAfter(Instant.ofEpochMilli(enrolledFactor.getSecurity().getData(FactorDataKeys.KEY_EXPIRE_AT, Long.class)))) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
}).apply(v)))
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(cut.sendChallenge_migrated(factorContext)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = RxJava2Adapter.monoToCompletable(cut.verify_migrated(factorContext)).test()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
}).apply(v)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accountService.removeFactor_migrated(user.getId(), factorId, new DefaultUser(user))).subscribe(()->AccountResponseHandler.handleNoBodyResponse(routingContext), routingContext::fail);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.verify_migrated(new FactorContext(applicationContext, factorData))).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorProvider.sendChallenge_migrated(factorContext)).subscribeOn(Schedulers.io()).subscribe
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri)))))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(code)).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(accessToken.getToken()));
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())));
    }
    return deleteAccessTokenAction;
}))
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(createRequest(context), client)).subscribe(()->context.response().setStatusCode(200).end(), context::fail);
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(subject, tokenRequest)).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))))
1 | Completable | IMPORT
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    policyChainProcessorFactory.create(resolve(rules), executionContext).handler((executionContext1)->emitter.onComplete()).errorHandler((processorFailure)->emitter.onError(new PolicyChainException(processorFailure.message(), processorFailure.statusCode(), processorFailure.key(), processorFailure.parameters(), processorFailure.contentType()))).handle(executionContext);
}))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.bulkWrite_migrated(accessTokens)).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Access tokens indexation completed"), (error)->logger.error("Unexpected error while indexing access tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.bulkWrite_migrated(accessTokens)).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Completable | IMPORT
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client));
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client));
}).onErrorResumeNext
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client));
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(revokeAccessToken_migrated(token, client)).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return RxJava2Adapter.monoToCompletable(revokeRefreshToken_migrated(token, client));
}).onErrorResumeNext
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteAccessToken_migrated(accessToken.getValue()));
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteRefreshToken_migrated(refreshToken.getValue()));
}).apply(y)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(resourceService.deleteAccessPolicy_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicy)).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Observable | singleOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->RxJava2Adapter.monoToSingle(flow.run_migrated(authorizationRequest, client, endUser))).singleOrError())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->RxJava2Adapter.monoToSingle(flow.run_migrated(authorizationRequest, client, endUser))).singleOrError
1 | Observable | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle
1 | Observable | error | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType()))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType())))
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithHMAC_migrated(jwt));
        } else {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithPublicKey_migrated(jwt));
        }
    }
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v)))
1 | Maybe | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tokenService.introspect_migrated(introspectionRequest.getToken()).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false)))))
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(this.resourceService.listByDomainAndClientAndUser_migrated(domain.getId(), client.getId(), accessToken.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect(JsonArray::new, JsonArray::add))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(this.resourceService.delete_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk)))))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(parService.deleteRequestUri_migrated(uriIdentifier)).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(Flux.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(tokenGranter.grant_migrated(tokenRequest, client))))
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->RxJava2Adapter.monoToSingle(handleRequest_migrated(tokenRequest, client, user.orElse(null)))))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | toSingleDefault | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(requestObject));
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userAuthenticationManager.loadPreAuthenticatedUser_migrated(tokenRequest.getSubject(), tokenRequest)).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}))
1 | Maybe | IMPORT
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(extensionGrantProvider.grant_migrated(convert(tokenRequest)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.bulkWrite_migrated(refreshTokens)).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Refresh tokens indexation completed"), (error)->logger.error("Unexpected error while indexing refresh tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.bulkWrite_migrated(refreshTokens)).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Single | IMPORT
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope))).collect(HashSet::new, Set::add))
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))
1 | Single | METHOD_REFERENCE | Single::just
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | toSingleDefault | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(this.clientService.delete_migrated(toDelete.getId())).toSingleDefault(toDelete))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add))
1 | Flowable | cast | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString())))))
1 | Flowable | METHOD_REFERENCE | Flowable::fromIterable
1 | Observable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(request.getRedirectUris().get()).filter((String redirectUri)->!allowedRedirectUris.contains(redirectUri))).collect(ArrayList<String>::new, ArrayList::add))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((ArrayList<String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(request.getJwksUri().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle((jwkSet)->{
    return RxJava2Adapter.monoToSingle(Mono.just(request));
}))
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter((accessTokens)->accessTokens != null && !accessTokens.isEmpty())).subscribe(new AccessTokenBulkProcessor(accessTokenRepository));
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions))
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty())).subscribe(new RefreshTokenBulkProcessor(refreshTokenRepository));
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions))
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(umaTokenGranter.resolveRequest_migrated(tokenRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(scopeService.getAll_migrated()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(revocationTokenService.revoke_migrated(revocationTokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToSingle(authorizationCodeService.create_migrated(authorizationRequest, user)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = RxJava2Adapter.monoToMaybe(authorizationCodeService.remove_migrated(authorizationCode.getCode(), client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = RxJava2Adapter.monoToSingle(cut.registerParameters_migrated(par, client)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated("invalideuri", createClient(), new OpenIDProviderMetadata())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, createClient(), new OpenIDProviderMetadata())).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(cut.readFromURI_migrated(requestUri, client, new OpenIDProviderMetadata())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated("", null, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated("unsupported", null, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, "", null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientAssertionService.assertClient_migrated(JWT_BEARER_TYPE, assertion, basePath)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenEnhancer.enhance_migrated(accessToken, oAuth2Request, client, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenEnhancer.enhance_migrated(accessToken, oAuth2Request, client, null, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(Collections.emptyList(), executionContext)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(null, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(new DynamicClientRegistrationRequest(), BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.patch_migrated(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.patch_migrated(new Client(), request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.update_migrated(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.update_migrated(new Client(), request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.delete_migrated(new Client())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.renewSecret_migrated(toRenew, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = RxJava2Adapter.monoToSingle(dcrService.create_migrated(request, BASE_PATH)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).test()
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientService.findById_migrated("my-client")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.create_migrated(new Client())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.create_migrated(toCreate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.create_migrated(toCreate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.update_migrated(new Client())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.update_migrated(toUpdate)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(clientService.delete_migrated("my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(clientService.renewClientSecret_migrated(DOMAIN, "my-client")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test().assertError
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test().assertError
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(requestObjectService.readRequestObject_migrated(request, client, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = RxJava2Adapter.monoToSingle(requestObjectService.readRequestObject_migrated(request, client, false)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null, executionContext)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated(jwt, new Client())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated(JWT, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(jwt, new Client())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(JWT, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(tokenRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = RxJava2Adapter.monoToSingle(tokenRequestResolver.resolve_migrated(authorizationRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.refresh_migrated("encoded", tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(tokenService.refresh_migrated(refreshToken.getToken(), tokenRequest, client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(jweService.encryptUserinfo_migrated("JWT", client)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = RxJava2Adapter.monoToSingle(authorizationRequestResolver.resolve_migrated(authorizationRequest, client, user)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = RxJava2Adapter.monoToSingle(introspectionService.introspect_migrated(introspectionRequest)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated("blabla")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(JWKS_URI)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, "expectedKid")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, "expectedKid")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(new Client())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, null)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.RSA_KEY_ENCRYPTION())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.CURVE_KEY_ENCRYPTION())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.parse("none")))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128GCM))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128CBC_HS256))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192GCM))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192CBC_HS384))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256GCM))).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256CBC_HS512))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(rsaSet, JWKFilter.RSA_KEY_ENCRYPTION())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToMaybe(jwkService.filter_migrated(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION())).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = RxJava2Adapter.monoToSingle(jwkService.getKeys_migrated()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = RxJava2Adapter.monoToSingle(granter.grant_migrated(tokenRequest, client)).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(groupPage.getData())).map((group)->convert(group, baseUrl, true)).flatMapSingle
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->setMembers_migrated(z, baseUrl))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID", groupId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Group group1)->{
    if (!y.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return y;
})).defaultIfEmpty(y)).flatMapSingle((io.gravitee.am.model.Group irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->groupRepository.delete_migrated(groupId)).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
    }
}))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupService.delete_migrated(groupId)).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.delete_migrated(userId)).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(userPage.getData())).map((user1)->convert(user1, baseUrl, true)).flatMapSingle
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap(this::setGroups_migrated)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", userId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)));
}))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
    }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err)))));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }).apply(err)))));
    }))));
}).apply(y)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
        } else {
            return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }).apply(v)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err)))));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.create_migrated(newUser, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser.getId(), scimUser, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(userService.patch_migrated(userId, patchOp, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "https://mydomain/scim/Groups")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToSingle(groupService.create_migrated(newGroup, "/")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = RxJava2Adapter.monoToSingle(groupService.patch_migrated(groupId, patchOp, "/")).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUser_migrated(domain.getId(), userId)).collect(HashSet::new, Set::add))
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), userId, clientId)).collect(HashSet::new, Set::add))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((principal)->userService.revokeConsent_migrated(userId, consentId, principal)).then()).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))).then()).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<ScopeApproval>> testObserver = RxJava2Adapter.monoToSingle(userService.consents_migrated(userId)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = RxJava2Adapter.monoToMaybe(userService.consent_migrated("consentId")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = RxJava2Adapter.monoToMaybe(userService.consent_migrated("consentId")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.revokeConsents_migrated(userId)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToCompletable(userService.revokeConsent_migrated(userId, consentId)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Metadata> testObserver = RxJava2Adapter.monoToSingle(serviceProviderService.metadata_migrated("provider-id", "https://idp.example.com")).test()
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | doFinally | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.rxConnect(port, host).doFinally(client::close))
1 | Completable | IMPORT
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        Verification verification = Verification.creator(configuration.getSid(), target.getTarget(), channel).create();
        LOGGER.debug("Twilio Verification code asked with ID \'{}\'", verification.getSid());
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
}))
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        VerificationCheck verification = VerificationCheck.creator(configuration.getSid(), challenge.getCode()).setTo(challenge.getTarget()).create();
        LOGGER.debug("Twilio Verification code with ID \'{}\' verified with status \'{}\'", verification.getSid(), verification.getStatus());
        if (!APPROVED.equalsIgnoreCase(verification.getStatus())) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}))
1 | Completable | IMPORT
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    try {
        TfaStartAuthenticationResponse sendCodeResponse = this.tfaApi.sendTfaPinCodeOverSms(true, new TfaStartAuthenticationRequest().applicationId(applicationId).messageId(messageId).from("InfoSMS").to(this.to));
        boolean isSuccessful = sendCodeResponse.getSmsStatus().equals("MESSAGE_SENT");
        if (!isSuccessful) {
            emitter.onError(new SendChallengeException("Message not sent"));
        } else {
            this.pinId = sendCodeResponse.getPinId();
            LOGGER.debug("Infobip Verification code asked with ID \'{}\'", sendCodeResponse.getPinId());
            emitter.onComplete();
        }
    } catch (ApiException e) {
        this.LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
}))
1 | Completable | create | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.create((emitter)->{
    String pin = challenge.getCode();
    try {
        TfaVerifyPinResponse verifyResponse = this.tfaApi.verifyTfaPhoneNumber(pinId, new TfaVerifyPinRequest().pin(pin));
        boolean verified = verifyResponse.getVerified();
        LOGGER.debug("Infobip Verification code with ID \'{}\' verified with status \'{}\'", this.pinId, verified);
        if (!verified) {
            emitter.onError(new InvalidCodeException("Challenger not verified"));
        } else {
            emitter.onComplete();
        }
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
}))
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", null, null))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = RxJava2Adapter.monoToSingle(cut.validate_migrated(new BotDetectionContext("plugin_id", multiMap, null))).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        emitter.onSuccess(extensionGrantPluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all extension grant plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all extension grant plugins", ex));
    }
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin extensionGrant = extensionGrantPluginManager.findById(extensionGrantPluginId);
        if (extensionGrant != null) {
            emitter.onSuccess(convert(extensionGrant));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get extension grant plugin : {}", extensionGrantPluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get extension grant plugin : " + extensionGrantPluginId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = extensionGrantPluginManager.getSchema(extensionGrantPluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for extension grant plugin {}", extensionGrantPluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for extension grant plugin " + extensionGrantPluginId, e));
    }
}))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident)))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count())
1 | Flowable | doOnNext | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated)).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count())
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v))))))
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled())).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria_migrated(domain.getId(), alertTriggerCriteria).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<AlertTrigger, Single<Trigger>>toJdkFunction((alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))).apply(e))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count())
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled())).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria_migrated(domain.getId(), alertTriggerCriteria).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<AlertTrigger, Single<Trigger>>toJdkFunction((alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))).apply(e))).flatMap((e)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Trigger, Single<Trigger>>toJdkFunction((Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(e)))).count
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(trigger));
}))
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(policyPluginManager.getAll())).map((policyPlugin)->convert(policyPlugin, expand)).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(policyPluginManager.getAll())).map((policyPlugin)->convert(policyPlugin, expand)).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        PolicyPlugin policy = convert(policyPluginManager.get(policyId));
        if (policy != null) {
            emitter.onSuccess(policy);
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get policy plugin : {}", policyId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get policy plugin : " + policyId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = policyPluginManager.getSchema(policyId);
        if (schema != null) {
            JsonNode schemaNode = objectMapper.readTree(schema);
            if (schemaNode.has("properties")) {
                ObjectNode properties = (ObjectNode)schemaNode.get("properties");
                properties.remove("scope");
                properties.remove("onResponseScript");
                properties.remove("onRequestContentScript");
                properties.remove("onResponseContentScript");
            }
            emitter.onSuccess(objectMapper.writeValueAsString(schemaNode));
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for policy plugin " + policyId, e));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = policyPluginManager.getIcon(policyId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for policy plugin " + policyId, e));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String documentation = policyPluginManager.getDocumentation(policyId);
        if (documentation != null) {
            emitter.onSuccess(documentation);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get documentation for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get documentation for policy plugin " + policyId, e));
    }
}))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
}))
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated()).blockingForEach((identityProvider)->{
    logger.info("\tInitializing user provider: {} [{}]", identityProvider.getName(), identityProvider.getType());
    loadUserProvider(identityProvider);
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(reporterService.findAll_migrated()).blockingForEach((reporter)->{
    logger.info("Initializing audit reporter : {} for domain {}", reporter.getName(), reporter.getDomain());
    try {
        AuditReporterLauncher launcher = new AuditReporterLauncher(reporter);
        RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
            if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
                return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
            } else {
                return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
            }
        })).subscribeOn(Schedulers.boundedElastic())).subscribe(launcher);
    } catch (Exception ex) {
        logger.error("An error has occurred while loading audit reporter: {} [{}]", reporter.getName(), reporter.getType(), ex);
        removeReporter(reporter.getId());
    }
});
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(Schedulers.boundedElastic())).subscribe(launcher);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
}))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(Schedulers.boundedElastic())).subscribe(launcher);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
}))
1 | Single | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList
1 | Maybe | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER)
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(app.getSettings().getOauth().getScopes()))).apply(z)), BackpressureStrategy.BUFFER)
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((role)->role.getOauthScopes() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter((role)->role.getOauthScopes() != null).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createScope_migrated(domain.getId(), scope))).toList
1 | Maybe | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(Objects::nonNull)).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER)
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->RxJava2Adapter.fluxToObservable(Flux.fromIterable(role.getOauthScopes()))).apply(z)), BackpressureStrategy.BUFFER)
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        Application client = optClient.orElse(null);
        newUser.setDomain(domain.getId());
        newUser.setClient(client != null ? client.getId() : null);
        newUser.setInternal(true);
        if (newUser.isPreRegistration()) {
            newUser.setPassword(null);
            newUser.setRegistrationCompleted(false);
            newUser.setEnabled(false);
        } else {
            String password = newUser.getPassword();
            if (password != null && isInvalidUserPassword(password, client, domain)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            newUser.setDomain(domain.getId());
        }
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
            newUser.setPassword(null);
            newUser.setExternalId(idpUser.getId());
            return newUser;
        })).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
            if (ex instanceof UserAlreadyExistsException) {
                return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, NewUser>toJdkFunction((empty)->{
                    if (!empty) {
                        throw new UserAlreadyExistsException(newUser.getUsername());
                    } else {
                        newUser.setPassword(null);
                        newUser.setExternalId(idpUser.getId());
                        newUser.setUsername(idpUser.getUsername());
                        return newUser;
                    }
                }))));
            } else {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
        }).apply(err))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
            User user = transform(newUser1);
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                user.setRegistrationAccessToken(getUserRegistrationToken(user));
            }
            return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
        }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
            } else {
                return RxJava2Adapter.monoToSingle(Mono.just(user));
            }
        }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    });
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
    Application client = optClient.orElse(null);
    newUser.setDomain(domain.getId());
    newUser.setClient(client != null ? client.getId() : null);
    newUser.setInternal(true);
    if (newUser.isPreRegistration()) {
        newUser.setPassword(null);
        newUser.setRegistrationCompleted(false);
        newUser.setEnabled(false);
    } else {
        String password = newUser.getPassword();
        if (password != null && isInvalidUserPassword(password, client, domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        newUser.setRegistrationCompleted(true);
        newUser.setEnabled(true);
        newUser.setDomain(domain.getId());
    }
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        return newUser;
    })).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, NewUser>toJdkFunction((empty)->{
                if (!empty) {
                    throw new UserAlreadyExistsException(newUser.getUsername());
                } else {
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    newUser.setUsername(idpUser.getUsername());
                    return newUser;
                }
            }))));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }
    }).apply(err))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
        User user = transform(newUser1);
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
            user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
            user.setRegistrationAccessToken(getUserRegistrationToken(user));
        }
        return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
    }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
            return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
    }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.<Boolean, NewUser>toJdkFunction((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
}))));
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(x)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))
1 | Completable | toSingleDefault | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
            }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }).apply(err))));
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
        }).apply(a)))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))));
    });
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
    if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
        return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
            ((DefaultUser)idpUser).setCredentials(password);
            return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
        }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
            if (ex instanceof UserNotFoundException) {
                user.setPassword(password);
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }).apply(err))));
    })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        if (user.isPreRegistration()) {
            user.setRegistrationCompleted(true);
            user.setEnabled(true);
        }
        user.setPassword(null);
        user.setExternalId(idpUser.getId());
        user.setLastPasswordReset(new Date());
        user.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
    }).apply(a)))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToCompletable(loginAttemptService.reset_migrated(criteria));
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess((Optional<Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((Optional<Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).then());
}).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(factors);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))));
}).apply(y)))
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return checkClient.apply(referenceId, client).flatMapSingle((Application client1)->{
    updateUser.setClient(client1.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(Optional<UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then())))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | blockingIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(certificateService.findAll_migrated()).blockingIterable().forEach
1 | Observable | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(createOrUpdateSystemScopes_migrated(ident))).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(createOrUpdateSystemScopes_migrated(ident))).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain.getId(), scope))).lastOrError())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain.getId(), scope))).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(domain, systemScope.getKey()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optScope)->{
    if (!optScope.isPresent()) {
        logger.info("Create a new system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        NewSystemScope scope = new NewSystemScope();
        scope.setKey(systemScope.getKey());
        scope.setClaims(systemScope.getClaims());
        scope.setName(systemScope.getLabel());
        scope.setDescription(systemScope.getDescription());
        scope.setDiscovery(systemScope.isDiscovery());
        return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
    } else if (shouldUpdateSystemScope(optScope, systemScope)) {
        logger.info("Update a system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        final Scope existingScope = optScope.get();
        UpdateSystemScope scope = new UpdateSystemScope();
        scope.setName(existingScope.getName() != null ? existingScope.getName() : systemScope.getLabel());
        scope.setDescription(existingScope.getDescription() != null ? existingScope.getDescription() : systemScope.getDescription());
        scope.setClaims(systemScope.getClaims());
        scope.setExpiresIn(existingScope.getExpiresIn());
        scope.setDiscovery(systemScope.isDiscovery());
        return RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, optScope.get().getId(), scope));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}))
1 | Completable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(policyRepository.collectionExists_migrated().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then()).subscribe(()->LOGGER.info("Policies to flows upgrade, done."), (error)->LOGGER.error("An error occurs while updating policies to flows", error));
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows.values())).flatMapCompletable((flow)->RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, domain, flow)).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).as
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(flows.values())).flatMapCompletable((flow)->RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, domain, flow)).toCompletable()).doOnComplete
1 | Single | toCompletable | METHOD_INVOCATION | (flow)->RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, domain, flow)).toCompletable()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | blockingGet | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainService.delete_migrated(ADMIN_DOMAIN)).blockingGet();
1 | Flowable | blockingFirst | METHOD_INVOCATION | Membership member = RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).filter((membership)->membership.getMemberType() == MemberType.USER)).blockingFirst(null)
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).count())
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = RxJava2Adapter.monoToCompletable(roleService.createOrUpdateSystemRoles_migrated()).blockingGet()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
    newUser.setDomain(null);
    newUser.setClient(null);
    newUser.setInternal(true);
    String password = newUser.getPassword();
    if (password == null || !passwordValidator.isValid(password)) {
        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
    }
    newUser.setRegistrationCompleted(true);
    newUser.setEnabled(true);
    final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
    userToPersist.setReferenceId(organization.getId());
    userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
        userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
        userToPersist.setId(RandomString.generate());
        userToPersist.setExternalId(userToPersist.getId());
        return userToPersist;
    })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
    }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))));
}).apply(a)))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(()->notifierPluginManager.findById(notifierId)).flatMap(this::convert_migrated)).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pluginManager.getAll())).map(this::convert).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pluginManager.getAll())).map(this::convert).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin resource = pluginManager.findById(pluginId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get bot detection plugin : {}", pluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get bot detection plugin : " + pluginId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = pluginManager.getSchema(pluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for bot detection plugin {}", pluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for bot detection plugin " + pluginId, e));
    }
}))
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(updateDefaultIdp_migrated(ident))).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(updateDefaultIdp_migrated(ident))).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | blockingIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(emailTemplateService.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Email::isEnabled))).blockingIterable().forEach
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(factorPluginManager.getAll())).map(this::convert).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(factorPluginManager.getAll())).map(this::convert).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin authenticator = factorPluginManager.findById(factorId);
        if (authenticator != null) {
            emitter.onSuccess(convert(authenticator));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get factor plugin : {}", factorId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get factor plugin : " + factorId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = factorPluginManager.getSchema(factorId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for factor plugin {}", factorId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for factor plugin " + factorId, e));
    }
}))
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all((consistent)->consistent)).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))))
1 | Single | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(applicationId)).flatMapSingle((application)->{
    if (domainId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
    } else {
        return RxJava2Adapter.monoToSingle(isDomainIdConsistent_migrated(application.getDomain(), environmentId, organizationId));
    }
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId)).flatMapSingle((domain)->{
    if (environmentId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
    } else {
        return RxJava2Adapter.monoToSingle(isEnvironmentIdConsistent_migrated(domain.getReferenceId(), organizationId));
    }
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))))
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList())))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) == entry.getKey().external())).map((entry)->convert(entry.getValue(), expand)).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) == entry.getKey().external())).map((entry)->convert(entry.getValue(), expand)).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin identityProvider = identityProviderPluginManager.findById(identityProviderId);
        if (identityProvider != null) {
            emitter.onSuccess(convert(identityProvider));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get identity provider plugin : {}", identityProviderId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get identity provider plugin : " + identityProviderId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = identityProviderPluginManager.getSchema(identityProviderId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for identity provider plugin " + identityProviderId, e));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = identityProviderPluginManager.getIcon(identityProviderId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for identity provider plugin " + identityProviderId, e));
    }
}))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(values.keySet())).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList())
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(values.keySet())).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList
1 | Observable | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | retryWhen | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen(new RetryWithDelay(3, 5000)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(updatedTask));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(reporterPluginManager.getAll())).map(this::convert).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(reporterPluginManager.getAll())).map(this::convert).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin reporter = reporterPluginManager.findById(reporterId);
        if (reporter != null) {
            emitter.onSuccess(convert(reporter));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get reporter plugin : {}", reporterId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get reporter plugin : " + reporterId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = reporterPluginManager.getSchema(reporterId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for reporter plugin {}", reporterId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for reporter plugin " + reporterId, e));
    }
}))
1 | Maybe | IMPORT
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(resourcePluginManager.getAll())).map((plugin)->convert(plugin, expand)).toList())
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(resourcePluginManager.getAll())).map((plugin)->convert(plugin, expand)).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        Plugin resource = resourcePluginManager.findById(resourceId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get resource plugin : {}", resourceId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get resource plugin : " + resourceId, ex));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String schema = resourcePluginManager.getSchema(resourceId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for resource plugin " + resourceId, e));
    }
}))
1 | Maybe | create | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.create((emitter)->{
    try {
        String icon = resourcePluginManager.getIcon(resourceId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error has occurred when trying to get icon for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error has occurred when trying to get icon for resource plugin " + resourceId, e));
    }
}))
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain ident)->RxJava2Adapter.monoToCompletable(updateDefaultReporter_migrated(ident))).subscribe();
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((Domain ident)->RxJava2Adapter.monoToCompletable(updateDefaultReporter_migrated(ident))).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Completable | test | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organization, userId)).test().assertComplete
1 | Completable | test | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organization, userId)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(organization, newUser, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(organization, newUser, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = RxJava2Adapter.monoToSingle(organizationUserService.createGraviteeUser_migrated(new Organization(), newUser, null)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = RxJava2Adapter.monoToSingle(organizationUserService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser)).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", new User(), null, null)).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", new User(), "simple", null)).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", user, "Test123!", null)).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = RxJava2Adapter.monoToCompletable(organizationUserService.resetPassword_migrated("org#1", user, "Test123!", null)).test()
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(domain, id, updateUser)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(domain, id, updateUser)).test().assertNotComplete
1 | Completable | test | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test().assertComplete
1 | Completable | test | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test().assertComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, null)).test().assertNotComplete
1 | Completable | test | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.resetPassword_migrated(domain, user.getId(), password, null)).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(command).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(new HelloCommand()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, CREATE)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.hasPermission_migrated(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ, CREATE))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Permission, Set<Acl>>> obs = RxJava2Adapter.monoToSingle(cut.findAllPermissions_migrated(user, ReferenceType.ORGANIZATION, ORGANIZATION_ID)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Single | test | METHOD_INVOCATION | obs = RxJava2Adapter.monoToSingle(cut.haveConsistentReferenceIds_migrated(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)))).test()
1 | Flowable | IMPORT
1 | Flowable | fromArray | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.fromArray(appNoSettings, appNoOauthSetings, appNoScopes, appScopes, appScopesWithOptions))
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.isAlertingAvailable_migrated()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = RxJava2Adapter.monoToSingle(cut.isAlertingAvailable_migrated()).test()
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authorizationCodeRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(refreshTokenRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(requestObjectRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeApprovalRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(loginAttemptRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(permissionTicketRepository.purgeExpiredData_migrated()).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(authenticationFlowContextRepository.purgeExpiredData_migrated()).subscribe();
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
}))
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList
1 | Single | IMPORT
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return RxJava2Adapter.monoToSingle(service.search_migrated(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
}))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE).then(formService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE).then(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->organizationUserService.resetPassword_migrated(organizationId, existingUser, password.getPassword(), authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE).then(groupService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<User>, SingleSource<Page<User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE).then(entrypointService.delete_migrated(entrypointId, organizationId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE).then(tagService.delete_migrated(tag, organizationId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).then(organizationService.findById_migrated(organizationId).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))
1 | Completable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE).then(domainService.delete_migrated(domain, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))))
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))).collect(Collectors.toList())))
1 | Maybe | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
    } else {
        return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
    }
}))
1 | Maybe | concat | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))))
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser))))
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size))))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedUsers.getData())).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))))
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.create_migrated(domain, newReporter, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser))))
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser))))
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(domain, botDetection, updateBotDetection, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE).then(botDetectionService.delete_migrated(domain, botDetectionId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).then(alertNotifierService.delete_migrated(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.update_migrated(domain, resource, updateResource, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE).then(resourceService.delete_migrated(domain, resource, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.update_migrated(domain, factor, updateFactor, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE).then(factorService.delete_migrated(domain, factor, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(reporterService.update_migrated(domain, reporter, updateReporter, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, email, updateEmail, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Group, MaybeSource<Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.delete_migrated(ReferenceType.DOMAIN, domain, group, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedMembers.getData())).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(group1.getRoles()));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.patch_migrated(domain, scope, patchScope, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, scope, updateScope, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE).then(scopeService.delete_migrated(scope, false, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE).then(extensionGrantService.delete_migrated(domain, extensionGrant, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.updateStatus_migrated(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.delete_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->userService.resetPassword_migrated(domain, user, password.getPassword(), authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(userService.sendRegistrationConfirmation_migrated(domain, user, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.unlock_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser_migrated(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient_migrated(domain, user, clientId);
}))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))
1 | Single | cache | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache())
1 | Single | cache | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache())
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(endUser.getRoles()));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.fluxToObservable(Flux.fromIterable(user1.getFactors())).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
}))
1 | Observable | toList | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(Flux.fromIterable(user1.getFactors())).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))).toList();
1 | Observable | flatMapMaybe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(user1.getFactors())).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))).toList
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).thenMany(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId_migrated(ReferenceType.DOMAIN, domain, user)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.delete_migrated(credential)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(y)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.revokeByConsent_migrated(domain, user, consent, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.DOMAIN, domain, role, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE).then(certificateService.delete_migrated(certificate, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(domain, identity, updateIdentityProvider, authenticatedUser))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(domain, identity, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE).then(applicationService.delete_migrated(application, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(domain, application, authenticatedUser))))
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))).collect(Collectors.toList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((Map<ReferenceType, Map<Permission, Set<Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser))))
1 | Single | IMPORT
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size)))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(Flux.fromIterable(pagedResources.getData())).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser))))
1 | Maybe | IMPORT
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, application, email, updateEmail))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))
1 | Flowable | blockingForEach | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION)).blockingForEach(this::updateAuthenticationProvider);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then());
}).apply(y)))
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
}))
