1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | accessTokenRepository.findByToken_migrated(TOKEN).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->future.complete(Result.healthy())), RxJavaReactorMigrationUtil.toJdkConsumer((error)->future.complete(Result.unhealthy(error))), RxJavaReactorMigrationUtil.toRunnable(()->future.complete(Result.healthy())));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | domainRepository.findById_migrated(DOMAIN).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->future.complete(Result.healthy())), RxJavaReactorMigrationUtil.toJdkConsumer((error)->future.complete(Result.unhealthy(error))), RxJavaReactorMigrationUtil.toRunnable(()->future.complete(Result.healthy())));
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(group).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(group).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(group).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(group).block()
1 | Mono | block | METHOD_INVOCATION | final Group existAfterDelete = repository.findById_migrated(createdGroup.getId()).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup1 = repository.create_migrated(group1).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup2 = repository.create_migrated(group2).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member1).collectList())
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByMember_migrated(member2).collectList())
1 | Mono | block | METHOD_INVOCATION | List<Group> emptyList = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(buildGroup()).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(item).block();
1 | Mono | block | METHOD_INVOCATION | List<Group> groupOfDomain = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block
1 | Mono | block | METHOD_INVOCATION | groupOfDomain = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block
1 | Mono | block | METHOD_INVOCATION | List<Group> emptyList = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID).collectList().block
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(buildGroup()).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(item).block();
1 | Mono | block | METHOD_INVOCATION | Page<Group> groupOfDomain = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID, 0, 20).block()
1 | Mono | block | METHOD_INVOCATION | groupOfDomain = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID, 0, 5).block()
1 | Mono | block | METHOD_INVOCATION | groupOfDomain = repository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID, 1, 5).block()
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(buildGroup()).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByIdIn_migrated(ids).collectList())
1 | Mono | block | METHOD_INVOCATION | Group createdGroup = repository.create_migrated(group).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(group).block();
1 | Mono | block | METHOD_INVOCATION | AccessPolicy apCreated = repository.create_migrated(accessPolicy).block()
1 | Mono | block | METHOD_INVOCATION | AccessPolicy apCreated = repository.create_migrated(accessPolicy).block()
1 | Mono | block | METHOD_INVOCATION | AccessPolicy apCreated = repository.create_migrated(accessPolicy).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicyOtherDomain).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicyOtherDomain).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy2).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy3).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomainAndResource_migrated(DOMAIN_ID, RESOURCE_ID).collectList())
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy2).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(accessPolicy3).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByResources_migrated(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2")).collectList())
1 | Mono | block | METHOD_INVOCATION | Email createdEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | Email createdEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | Email createdEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | Email createdEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | (email)->repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block()
1 | Mono | map | METHOD_INVOCATION | repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId)))
1 | Mono | block | METHOD_INVOCATION | (email)->repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block()
1 | Mono | map | METHOD_INVOCATION | repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block
1 | Mono | block | METHOD_INVOCATION | (email)->repository.create_migrated(buildEmail()).block()
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId)))
1 | Mono | block | METHOD_INVOCATION | (email)->repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block()
1 | Mono | map | METHOD_INVOCATION | repository.create_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction((e)->{
    email.setId(e.getId());
    return e;
})).block
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(email).block();
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId)))
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(email).block();
1 | Mono | block | METHOD_INVOCATION | Email templateEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(email).block();
1 | Mono | block | METHOD_INVOCATION | Email templateEmail = repository.create_migrated(email).block()
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create_migrated(alertNotifier).block()
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create_migrated(alertNotifier).block()
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create_migrated(alertNotifier).block()
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create_migrated(alertNotifierToCreate).block()
1 | Mono | block | METHOD_INVOCATION | final AlertNotifier alertNotifierUpdated = alertNotifierRepository.update_migrated(alertNotifierCreated).block()
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated1 = alertNotifierRepository.create_migrated(alertNotifierToCreate1).block()
1 | Mono | block | METHOD_INVOCATION | alertNotifierRepository.create_migrated(alertNotifierToCreate2).block();
1 | Mono | block | METHOD_INVOCATION | AlertNotifier alertNotifierCreated1 = alertNotifierRepository.create_migrated(alertNotifierToCreate1).block()
1 | Mono | block | METHOD_INVOCATION | alertNotifierRepository.create_migrated(alertNotifierToCreate2).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(botDetection).block();
1 | Mono | block | METHOD_INVOCATION | BotDetection bdetectionCreated = repository.create_migrated(bdectection).block()
1 | Mono | block | METHOD_INVOCATION | BotDetection botDetectionCreated = repository.create_migrated(botDetection).block()
1 | Mono | block | METHOD_INVOCATION | BotDetection botDetectionCreated = repository.create_migrated(botDetection).block()
1 | Mono | block | METHOD_INVOCATION | Form createdForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | Form createdForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | Form createdForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | Form createdForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(form).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(buildForm()).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findAll_migrated(ReferenceType.DOMAIN, FIXED_REF_ID).collectList())
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(form).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(form).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByClient_migrated(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).collectList())
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(form).block();
1 | Mono | block | METHOD_INVOCATION | Form templateForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(form).block();
1 | Mono | block | METHOD_INVOCATION | Form templateForm = repository.create_migrated(form).block()
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create_migrated(alertTrigger).block()
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create_migrated(alertTrigger).block()
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create_migrated(alertTrigger).block()
1 | Mono | block | METHOD_INVOCATION | alertTriggerRepository.create_migrated(alertTriggerToCreate).block();
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create_migrated(alertTriggerToCreate).block()
1 | Mono | block | METHOD_INVOCATION | final AlertTrigger alertTriggerUpdated = alertTriggerRepository.update_migrated(alertTriggerCreated).block()
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create_migrated(alertTriggerToCreate).block()
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated1 = alertTriggerRepository.create_migrated(alertTriggerToCreate1).block()
1 | Mono | block | METHOD_INVOCATION | alertTriggerRepository.create_migrated(alertTriggerToCreate2).block();
1 | Mono | block | METHOD_INVOCATION | AlertTrigger alertTriggerCreated1 = alertTriggerRepository.create_migrated(alertTriggerToCreate1).block()
1 | Mono | block | METHOD_INVOCATION | alertTriggerRepository.create_migrated(alertTriggerToCreate2).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(application).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(application).block();
1 | Mono | block | METHOD_INVOCATION | Application createdApplication = applicationRepository.create_migrated(application).block()
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app2).block();
1 | Mono | block | METHOD_INVOCATION | Application appCreated = applicationRepository.create_migrated(app).block()
1 | Mono | block | METHOD_INVOCATION | Application appCreated = applicationRepository.create_migrated(app).block()
1 | Mono | block | METHOD_INVOCATION | Application appCreated = applicationRepository.create_migrated(app).block()
1 | Mono | block | METHOD_INVOCATION | Application appCreated = applicationRepository.create_migrated(app).block()
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app2).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app2).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app3).block();
1 | Mono | block | METHOD_INVOCATION | applicationRepository.create_migrated(app4).block();
1 | Mono | block | METHOD_INVOCATION | domainRepository.create_migrated(domain).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findAll_migrated().collectList())
1 | Mono | block | METHOD_INVOCATION | domainRepository.create_migrated(domain).block();
1 | Mono | block | METHOD_INVOCATION | domainRepository.create_migrated(otherDomain).block();
1 | Mono | block | METHOD_INVOCATION | Domain domainCreated = domainRepository.create_migrated(domain).block()
1 | Mono | block | METHOD_INVOCATION | Domain domainCreated = domainRepository.create_migrated(domain).block()
1 | Mono | block | METHOD_INVOCATION | Domain domainCreated = domainRepository.create_migrated(domain).block()
1 | Mono | block | METHOD_INVOCATION | Domain domainCreated = domainRepository.create_migrated(domain).block()
1 | Mono | block | METHOD_INVOCATION | Domain domainCreated = domainRepository.create_migrated(domainToCreate).block()
1 | Mono | block | METHOD_INVOCATION | final Domain domainUpdated = domainRepository.update_migrated(domainCreated).block()
1 | Mono | block | METHOD_INVOCATION | domainRepository.create_migrated(domain).block();
1 | Mono | block | METHOD_INVOCATION | Monitoring monitoringCreated = RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoring)).block()
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block();
1 | Mono | block | METHOD_INVOCATION | final Monitoring monitoringCreated = RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block()
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(nodeMonitoringRepository.create(monitoringToCreate)).block();
1 | Mono | block | METHOD_INVOCATION | credentialRepository.create_migrated(credential).block();
1 | Mono | block | METHOD_INVOCATION | credentialRepository.create_migrated(credential).block();
1 | Mono | block | METHOD_INVOCATION | credentialRepository.create_migrated(credential).block();
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create_migrated(credential).block()
1 | Mono | block | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | Entrypoint cratedEntrypoint = entrypointRepository.create_migrated(entrypoint).block()
1 | Mono | block | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create_migrated(entrypoint).block()
1 | Mono | block | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create_migrated(entrypoint).block()
1 | Mono | block | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create_migrated(entrypoint).block()
1 | Mono | block | METHOD_INVOCATION | Installation installationCreated = installationRepository.create_migrated(installation).block()
1 | Mono | block | METHOD_INVOCATION | Installation installationCreated = installationRepository.create_migrated(installation).block()
1 | Mono | block | METHOD_INVOCATION | Installation installationCreated = installationRepository.create_migrated(installation).block()
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = organizationUserRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | organizationUserRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create_migrated(organization).block()
1 | Mono | block | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create_migrated(organization).block()
1 | Mono | block | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create_migrated(organization).block()
1 | Mono | block | METHOD_INVOCATION | assertNotNull(organizationRepository.findById_migrated(organizationCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(organizationRepository.findById_migrated(organizationCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create_migrated(organization).block()
1 | Mono | block | METHOD_INVOCATION | Organization organizationCreated2 = organizationRepository.create_migrated(organization2).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationRepository.findByHrids_migrated(Collections.singletonList("Hrid1")).collectList())
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flow2Created = flowRepository.create_migrated(flow2).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findAll_migrated(ReferenceType.DOMAIN, "DOMAIN1").collectList())
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flow2Created = flowRepository.create_migrated(flow2).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findByApplication_migrated(ReferenceType.DOMAIN, "DOMAIN1", "APP1").collectList())
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | Flow flowCreated = flowRepository.create_migrated(flow).block()
1 | Mono | block | METHOD_INVOCATION | assertNotNull(flowRepository.findById_migrated(flowCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(flowRepository.findById_migrated(flowCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | factorRepository.create_migrated(factor).block();
1 | Mono | block | METHOD_INVOCATION | Factor factorCreated = factorRepository.create_migrated(factor).block()
1 | Mono | block | METHOD_INVOCATION | Factor factorCreated = factorRepository.create_migrated(factor).block()
1 | Mono | block | METHOD_INVOCATION | Factor factorCreated = factorRepository.create_migrated(factor).block()
1 | Mono | block | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create_migrated(task).block()
1 | Mono | block | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create_migrated(task).block()
1 | Mono | block | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create_migrated(task).block()
1 | Mono | block | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create_migrated(task).block()
1 | Mono | block | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create_migrated(membership).block()
1 | Mono | block | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create_migrated(membership).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.findByReference_migrated(ORGANIZATION_ID, ReferenceType.ORGANIZATION).collectList())
1 | Mono | block | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create_migrated(membership).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.findByMember_migrated("user#1", MemberType.USER).collectList())
1 | Mono | block | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create_migrated(membership).block()
1 | Mono | block | METHOD_INVOCATION | membershipRepository.create_migrated(membership).block();
1 | Mono | block | METHOD_INVOCATION | membershipRepository.create_migrated(groupMembership).block();
1 | Mono | block | METHOD_INVOCATION | Reporter createdReporter = repository.create_migrated(reporter).block()
1 | Mono | block | METHOD_INVOCATION | Reporter createdReporter = repository.create_migrated(reporter).block()
1 | Mono | block | METHOD_INVOCATION | Reporter updatedReporter = repository.update_migrated(updatableReporter).block()
1 | Mono | block | METHOD_INVOCATION | Reporter createdReporter = repository.create_migrated(reporter).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(reporter).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findAll_migrated().collectList())
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(reporter).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(domain).collectList())
1 | Mono | block | METHOD_INVOCATION | certificateRepository.create_migrated(certificate).block();
1 | Mono | block | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create_migrated(certificate).block()
1 | Mono | block | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create_migrated(certificate).block()
1 | Mono | block | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create_migrated(certificate).block()
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | User userCreated = userRepository.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user1).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user4).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user5).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user2).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user3).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user4).block();
1 | Mono | block | METHOD_INVOCATION | userRepository.create_migrated(user5).block();
1 | Mono | block | METHOD_INVOCATION | Environment envCreated = environmentRepository.create_migrated(environment).block()
1 | Mono | block | METHOD_INVOCATION | Environment envCreated = environmentRepository.create_migrated(env).block()
1 | Mono | block | METHOD_INVOCATION | Environment envCreated = environmentRepository.create_migrated(env).block()
1 | Mono | block | METHOD_INVOCATION | assertNotNull(environmentRepository.findById_migrated(envCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(environmentRepository.findById_migrated(envCreated.getId()).block())
1 | Mono | block | METHOD_INVOCATION | environmentRepository.create_migrated(environment).block();
1 | Mono | block | METHOD_INVOCATION | environmentRepository.create_migrated(buildEnv()).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated(FIXED_REF_ID).collectList())
1 | Mono | block | METHOD_INVOCATION | environmentRepository.create_migrated(buildEnv()).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentRepository.findAll_migrated().collectList())
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Flux | blockFirst | METHOD_INVOCATION | AuthenticationFlowContext readValue = authenticationFlowContextRepository.findByTransactionId_migrated(TRANSACTION_ID).blockFirst()
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | authenticationFlowContextRepository.create_migrated(entity).block();
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList())
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role).block();
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role2).block();
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role3).block();
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role4).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.findByNamesAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION).collectList())
1 | Mono | block | METHOD_INVOCATION | Role roleCreated = roleRepository.create_migrated(role).block()
1 | Mono | block | METHOD_INVOCATION | Role roleCreated = roleRepository.create_migrated(role).block()
1 | Mono | block | METHOD_INVOCATION | Role roleCreated1 = roleRepository.create_migrated(role1).block()
1 | Mono | block | METHOD_INVOCATION | Role roleCreated2 = roleRepository.create_migrated(role2).block()
1 | Mono | block | METHOD_INVOCATION | roleRepository.create_migrated(role3).block();
1 | Mono | block | METHOD_INVOCATION | Role roleCreated = roleRepository.create_migrated(role).block()
1 | Mono | block | METHOD_INVOCATION | Role roleCreated = roleRepository.create_migrated(role).block()
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(accessTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(accessTokenRepository.findByToken_migrated(token.getToken())).as
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(accessTokenRepository.create_migrated(token)).toCompletable()).then(accessTokenRepository.countByClientId_migrated("my-client-id-count")))
1 | Mono | then | METHOD_INVOCATION | accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then(accessTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then
1 | Mono | block | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | then | METHOD_INVOCATION | accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then(accessTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | accessTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(accessTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then
1 | Mono | block | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | block | METHOD_INVOCATION | Event expectedEvent = eventRepository.create_migrated(event).block()
1 | Mono | block | METHOD_INVOCATION | eventRepository.create_migrated(eventBefore).block();
1 | Mono | block | METHOD_INVOCATION | eventRepository.create_migrated(eventAfter).block();
1 | Mono | block | METHOD_INVOCATION | Event eventCreated = eventRepository.create_migrated(event).block()
1 | Mono | block | METHOD_INVOCATION | Event eventCreated = eventRepository.create_migrated(event).block()
1 | Mono | block | METHOD_INVOCATION | identityProviderRepository.create_migrated(identityProvider).block();
1 | Mono | block | METHOD_INVOCATION | identityProviderRepository.create_migrated(identityProvider2).block();
1 | Mono | block | METHOD_INVOCATION | identityProviderRepository.create_migrated(identityProvider3).block();
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.findAll_migrated(ReferenceType.DOMAIN, "testDomain").collectList())
1 | Mono | block | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create_migrated(identityProvider).block()
1 | Mono | block | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create_migrated(identityProvider).block()
1 | Mono | block | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create_migrated(identityProvider).block()
1 | Mono | block | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create_migrated(identityProvider).block()
1 | Mono | block | METHOD_INVOCATION | tagRepository.create_migrated(tag).block();
1 | Mono | block | METHOD_INVOCATION | Tag tagCreated = tagRepository.create_migrated(tag).block()
1 | Mono | block | METHOD_INVOCATION | Tag tagCreated = tagRepository.create_migrated(tag).block()
1 | Mono | block | METHOD_INVOCATION | Tag tagCreated = tagRepository.create_migrated(tag).block()
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create_migrated(attempt).block()
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create_migrated(attempt).block()
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(unexpectedAttempt).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(attempt).block();
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create_migrated(attempt).block()
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdUnexpectedAttempt = repository.create_migrated(unexpectedAttempt).block()
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create_migrated(attempt).block()
1 | Mono | block | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create_migrated(attempt).block()
1 | Mono | block | METHOD_INVOCATION | scopeRepository.create_migrated(scope).block();
1 | Mono | block | METHOD_INVOCATION | scopeRepository.create_migrated(scope).block();
1 | Mono | block | METHOD_INVOCATION | scopeRepository.create_migrated(scope).block();
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated1 = scopeRepository.create_migrated(scope).block()
1 | Mono | block | METHOD_INVOCATION | scopeRepository.create_migrated(scope).block();
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated2 = scopeRepository.create_migrated(scope).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKeys_migrated("testDomain", Arrays.asList("one", "two", "three")).collectList())
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create_migrated(scope).block()
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create_migrated(scope).block()
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create_migrated(scope).block()
1 | Mono | block | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create_migrated(scope).block()
1 | Mono | block | METHOD_INVOCATION | authorizationCodeRepository.create_migrated(authorizationCode).block();
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(authorizationCodeRepository.create_migrated(authorizationCode)).toCompletable().as(RxJava2Adapter::completableToMono).then(authorizationCodeRepository.delete_migrated(code)).as
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated = repository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated = repository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated = repository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated = repository.create_migrated(resource).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated1 = repository.create_migrated(resource1).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated2 = repository.create_migrated(resource2).block()
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(repository.findByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID).collectList())
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(resource1).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(resource2).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(resource1).block();
1 | Mono | block | METHOD_INVOCATION | repository.create_migrated(resource2).block();
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated1 = repository.create_migrated(resource1).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated2 = repository.create_migrated(resource2).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated1 = repository.create_migrated(resource1).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated2 = repository.create_migrated(resource2).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated3 = repository.create_migrated(resource3).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated4 = repository.create_migrated(resource4).block()
1 | Mono | block | METHOD_INVOCATION | Resource rsCreated5 = repository.create_migrated(resource5).block()
1 | Mono | then | METHOD_INVOCATION | repository.create_migrated(par).then(repository.findById_migrated(id)).then().then(repository.delete_migrated(id)).then(repository.findById_migrated(id)).as
1 | Mono | then | METHOD_INVOCATION | repository.create_migrated(par).then(repository.findById_migrated(id)).then().then(repository.delete_migrated(id)).then
1 | Mono | then | METHOD_INVOCATION | repository.create_migrated(par).then(repository.findById_migrated(id)).then().then
1 | Mono | then | METHOD_INVOCATION | repository.create_migrated(par).then(repository.findById_migrated(id)).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable().as(RxJava2Adapter::completableToMono).then(refreshTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable()).then(refreshTokenRepository.delete_migrated("my-token")).then(refreshTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(refreshTokenRepository.create_migrated(token)).toCompletable()).then(refreshTokenRepository.delete_migrated("my-token")).then
1 | Mono | then | METHOD_INVOCATION | refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then(refreshTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("domain-id", "client-id", "user-id")).then
1 | Mono | block | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | then | METHOD_INVOCATION | refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then(refreshTokenRepository.findByToken_migrated("my-token")).as
1 | Mono | then | METHOD_INVOCATION | refreshTokenRepository.bulkWrite_migrated(Arrays.asList(token1, token2)).then(refreshTokenRepository.deleteByDomainIdAndUserId_migrated("domain-id", "user-id")).then
1 | Mono | block | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | block | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create_migrated(permissionTicket).block()
1 | Mono | block | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create_migrated(permissionTicket).block()
1 | Mono | block | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create_migrated(permissionTicket).block()
1 | Mono | block | METHOD_INVOCATION | ExtensionGrant createdGrant = extensionGrantRepository.create_migrated(extensionGrant).block()
1 | Mono | block | METHOD_INVOCATION | extensionGrantRepository.create_migrated(excludedElement).block();
1 | Mono | block | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create_migrated(extensionGrant).block()
1 | Mono | block | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create_migrated(extensionGrant).block()
1 | Mono | block | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create_migrated(extensionGrant).block()
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.createIndex(document, indexOptions))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((s)->logger.debug("Created an index named: {}", s))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->logger.error("Error occurs during creation of index", throwable))).block();
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.createIndex(document, indexOptions))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((s)->logger.debug("Created an index named: {}", s))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->logger.error("Error occurs during creation of index", throwable))).block
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.createIndex(document, indexOptions))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((s)->logger.debug("Created an index named: {}", s))).doOnError
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(SystemTaskMongo::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.insertOne(task))).flatMap((success)->findById_migrated(task.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(task.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task))).flatMap((updateResult)->findById_migrated(task.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(task.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(systemTaskCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(systemTaskCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | return Mono.just(or(filterCriteria));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(and(filterCriteria));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources))).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy))).flatMap((success)->findById_migrated(accessPolicy.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(accessPolicy.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy))).flatMap((success)->findById_migrated(accessPolicy.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(accessPolicy.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(identitiesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(identitiesCollection.find()).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.insertOne(identityProvider))).flatMap((success)->findById_migrated(identityProvider.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(identityProvider.getId()).single()
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Identity provider must be present for create"));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider))).flatMap((updateResult)->findById_migrated(identityProvider.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(identityProvider.getId()).single()
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Identity provider must be present for update"));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(identitiesCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(identitiesCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find()).map
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(eq(FIELD_FACTORS, factor))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(eq(FIELD_FACTORS, factor))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant)))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(applicationsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoApplicationRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(applicationsCollection.find(in(FIELD_ID, ids))).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.insertOne(application))).flatMap((success)->findById_migrated(application.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(application.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application))).flatMap((success)->findById_migrated(application.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(application.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(applicationsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(applicationsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(eq("organizationId", organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(eq("organizationId", organizationId))).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(entrypoint))).flatMap((success)->findById_migrated(entrypoint.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(entrypoint.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint))).flatMap((updateResult)->findById_migrated(entrypoint.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(entrypoint.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(parCollection.insertOne(convert(par)))).flatMap((success)->findById_migrated(par.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(par.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(parCollection.findOneAndDelete(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(parCollection.findOneAndDelete(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(usersCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(usersCollection.find(mongoQuery)).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("An error has occurred while searching users with filter criteria", ex));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(usersCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(usersCollection.find(in(FIELD_ID, ids))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne((T)user))).flatMap((success)->findById_migrated(user.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(user.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user))).flatMap((updateResult)->findById_migrated(user.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(user.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(policiesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(policiesCollection.find()).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)))).isEmpty()).map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->!isEmpty));
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME))))
1 | Mono | RETURN_TYPE
1 | Mono | from | METHOD_INVOCATION | return Mono.from(mongoOperations.getCollection(COLLECTION_NAME).drop());
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.insertOne(scope))).flatMap((success)->findById_migrated(scope.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(scope.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope))).flatMap((updateResult)->findById_migrated(scope.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(scope.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(scopesCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(scopesCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys)))).map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(rolesCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(rolesCollection.find(in(FIELD_ID, ids))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.insertOne(role))).flatMap((success)->findById_migrated(role.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(role.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role))).flatMap((updateResult)->findById_migrated(role.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(role.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(rolesCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(rolesCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name())))).map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(reportersCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(reportersCollection.find()).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(reportersCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(reportersCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.insertOne(reporter))).flatMap((success)->findById_migrated(reporter.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(reporter.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter))).flatMap((updateResult)->findById_migrated(reporter.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(reporter.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(reportersCollection.deleteOne(eq(FIELD_ID, id))).then().then();
1 | Mono | then | METHOD_INVOCATION | Mono.from(reportersCollection.deleteOne(eq(FIELD_ID, id))).then().then
1 | Mono | from | METHOD_INVOCATION | Mono.from(reportersCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(monitoring)))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->monitoring)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updateResult)->monitoring)))
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(collection.find(and(filters))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(and(filters))).map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name())))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return toBsonFilter_migrated(criteria.isLogicalOR(), eqGroupId, eqUserId).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty(Mono.just(eqReference)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Mono | flatMapMany | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqGroupId, eqUserId).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty(Mono.just(eqReference)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter))))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqGroupId, eqUserId).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty(Mono.just(eqReference)).flatMapMany
1 | Mono | map | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqGroupId, eqUserId).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqGroupId, eqUserId).map(RxJavaReactorMigrationUtil.toJdkFunction((filter)->and(eqReference, filter))).switchIfEmpty(Mono.just(eqReference))
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(membershipsCollection.find(filter)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.insertOne(membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership))).map(RxJavaReactorMigrationUtil.toJdkFunction((success)->convert(membership)));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(membershipsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(membershipsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find().first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find().first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(installation)))).flatMap((success)->findById_migrated(installation.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(installation.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation)))).flatMap((updateResult)->findById_migrated(installation.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(installation.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo))).flatMap((success)->_findById_migrated(scopeApprovalMongo.getId()));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo))).flatMap((updateResult)->_findById_migrated(scopeApprovalMongo.getId()));
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_SCOPE, scope)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_SCOPE, scope)))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user), eq(FIELD_CLIENT_ID, client)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user), eq(FIELD_CLIENT_ID, client)))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).then
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode)))).flatMap((success)->findById_migrated(authorizationCode.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(authorizationCode.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(emailsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(emailsCollection.find()).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.insertOne(email))).flatMap((success)->findById_migrated(email.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(email.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email))).flatMap((updateResult)->findById_migrated(email.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(email.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(emailsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(emailsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(botDetectionMongoCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(botDetectionMongoCollection.find()).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.insertOne(entity))).flatMap((success)->findById_migrated(entity.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(entity.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity))).flatMap((updateResult)->findById_migrated(entity.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(entity.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.insertOne(flow))).flatMap((success)->findById_migrated(flow.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(flow.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow))).flatMap((updateResult)->findById_migrated(flow.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(flow.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(flowsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(flowsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(eventsCollection.find(and(filters))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(eventsCollection.find(and(filters))).map
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert), BackpressureStrategy.BUFFER).next();
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.insertOne(event))).flatMap((success)->findById_migrated(event.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(event.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event))).flatMap((updateResult)->findById_migrated(event.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(event.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(eventsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(eventsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find()).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(environment)))).flatMap((success)->findById_migrated(environment.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(environment.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment)))).flatMap((updateResult)->findById_migrated(environment.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(environment.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt))).flatMap((success)->findById_migrated(loginAttempt.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(loginAttempt.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt))).flatMap((success)->findById_migrated(loginAttempt.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(loginAttempt.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(loginAttemptsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(loginAttemptsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(loginAttemptsCollection.deleteOne(query(criteria))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(loginAttemptsCollection.deleteOne(query(criteria))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(certificatesCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(certificatesCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(certificatesCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(certificatesCollection.find()).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.insertOne(certificate))).flatMap((success)->findById_migrated(certificate.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(certificate.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate))).flatMap((updateResult)->findById_migrated(certificate.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(certificate.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(certificatesCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(certificatesCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1))).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(authContextCollection.insertOne(contextMongo))).flatMap((success)->findById_migrated(contextMongo.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(contextMongo.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(authContextCollection.deleteMany(eq(FIELD_TRANSACTION_ID, transactionId))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(authContextCollection.deleteMany(eq(FIELD_TRANSACTION_ID, transactionId))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(authContextCollection.deleteOne(and(eq(FIELD_TRANSACTION_ID, transactionId), eq(FIELD_VERSION, version)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(authContextCollection.deleteOne(and(eq(FIELD_TRANSACTION_ID, transactionId), eq(FIELD_VERSION, version)))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(eqReference)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(eqReference)).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(query)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(query)).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertTrigger)))).flatMap((success)->findById_migrated(alertTrigger.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(alertTrigger.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo))).flatMap((updateResult)->findById_migrated(alertTriggerMongo.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(alertTriggerMongo.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject)))).flatMap((success)->findById_migrated(requestObject.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(requestObject.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(requestObjectCollection.findOneAndDelete(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(requestObjectCollection.findOneAndDelete(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.insertOne(page))).flatMap((success)->findById_migrated(page.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(page.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page))).flatMap((updateResult)->findById_migrated(page.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(page.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(formsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(formsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(eqReference)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(eqReference)).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(and(eqReference, query))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(and(eqReference, query))).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertNotifier)))).flatMap((success)->findById_migrated(alertNotifier.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(alertNotifier.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo))).flatMap((updateResult)->findById_migrated(alertNotifierMongo.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(alertNotifierMongo.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(res))).flatMap((success)->findById_migrated(res.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(res.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->findById_migrated(authenticator.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(authenticator.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket))).flatMap((success)->findById_migrated(permissionTicket.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(permissionTicket.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket))).flatMap((success)->findById_migrated(permissionTicket.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(permissionTicket.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(permissionTicketCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(permissionTicketCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.insertOne(tag))).flatMap((success)->findById_migrated(tag.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(tag.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag))).flatMap((updateResult)->findById_migrated(tag.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(tag.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(tagsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(tagsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(factorsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(factorsCollection.find()).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(factorsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(factorsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.insertOne(authenticator))).flatMap((success)->findById_migrated(authenticator.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(authenticator.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))).flatMap((updateResult)->findById_migrated(authenticator.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(authenticator.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(factorsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(factorsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username)))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.insertOne(credential))).flatMap((success)->findById_migrated(credential.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(credential.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential))).flatMap((updateResult)->findById_migrated(credential.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(credential.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(credentialsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(credentialsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_AAGUID, aaguid)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_AAGUID, aaguid)))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant))).flatMap((success)->findById_migrated(extensionGrant.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(extensionGrant.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant))).flatMap((updateResult)->findById_migrated(extensionGrant.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(extensionGrant.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(resource))).flatMap((success)->findById_migrated(resource.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(resource.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo))).flatMap((success)->findById_migrated(resourceMongo.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(resourceMongo.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(resourceCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user)))).map
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(resourceCollection.find(in(FIELD_ID, resources))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(resourceCollection.find(in(FIELD_ID, resources))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources)))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken)))).flatMap((success)->findById_migrated(refreshToken.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(refreshToken.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(refreshTokenCollection.bulkWrite(convert(refreshTokens))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(refreshTokenCollection.bulkWrite(convert(refreshTokens))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(refreshTokenCollection.deleteOne(eq(FIELD_TOKEN, token))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(refreshTokenCollection.deleteOne(eq(FIELD_TOKEN, token))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(refreshTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(refreshTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(collection.find(in(HRID_KEY, hrids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(collection.find(in(HRID_KEY, hrids))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(organization)))).flatMap((success)->findById_migrated(organization.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(organization.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization)))).flatMap((updateResult)->findById_migrated(organization.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(organization.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(collection.deleteOne(eq(FIELD_ID, id))).then
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken)))).flatMap((success)->findById_migrated(accessToken.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(accessToken.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessTokenCollection.bulkWrite(convert(accessTokens))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessTokenCollection.bulkWrite(convert(accessTokens))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessTokenCollection.findOneAndDelete(eq(FIELD_TOKEN, token))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessTokenCollection.findOneAndDelete(eq(FIELD_TOKEN, token))).then
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId)))).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId)))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(groupsCollection.find(eq(FIELD_MEMBERS, memberId))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(groupsCollection.find(eq(FIELD_MEMBERS, memberId))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(groupsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(groupsCollection.find(in(FIELD_ID, ids))).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.insertOne(group))).flatMap((success)->findById_migrated(group.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(group.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group))).flatMap((success)->findById_migrated(group.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(group.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(groupsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(groupsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(domainsCollection.find()).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(domainsCollection.find()).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))), BackpressureStrategy.BUFFER).next().map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(domainsCollection.find(in(FIELD_ID, ids))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(domainsCollection.find(in(FIELD_ID, ids))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(domainsCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(domainsCollection.find(mongoQuery)).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return Flux.from(domainsCollection.find(mongoQuery)).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Flux | from | METHOD_INVOCATION | Flux.from(domainsCollection.find(mongoQuery)).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return toBsonFilter_migrated(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Mono.just(new BsonDocument())).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter))))).map(RxJavaReactorMigrationUtil.toJdkFunction(MongoDomainRepository::convert));
1 | Mono | flatMapMany | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Mono.just(new BsonDocument())).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((filter)->RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter))))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Mono.just(new BsonDocument())).flatMapMany
1 | Mono | just | METHOD_INVOCATION | toBsonFilter_migrated(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Mono.just(new BsonDocument()))
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(domainsCollection.find(filter)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.insertOne(domain))).flatMap((success)->findById_migrated(domain.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(domain.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain))).flatMap((updateResult)->findById_migrated(domain.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(domain.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return Mono.from(domainsCollection.deleteOne(eq(FIELD_ID, id))).then();
1 | Mono | from | METHOD_INVOCATION | Mono.from(domainsCollection.deleteOne(eq(FIELD_ID, id))).then
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoDatabase.listCollectionNames()), BackpressureStrategy.BUFFER).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).apply(z)), BackpressureStrategy.BUFFER)))
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return organizationRepository.findByHrids_migrated(hrids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identitiesRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Identity::getIdentity)).collectList())
1 | Flux | map | METHOD_INVOCATION | identitiesRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Identity::getIdentity)).collectList
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainRestrictionRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.DomainRestriction::getDomainRestriction)).collectList())
1 | Flux | map | METHOD_INVOCATION | domainRestrictionRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.DomainRestriction::getDomainRestriction)).collectList
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(hridsRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Hrid::getHrid)).collectList())
1 | Flux | map | METHOD_INVOCATION | hridsRepository.findAllByOrganizationId_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganization.Hrid::getHrid)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(hrids), RxJavaReactorMigrationUtil.toJdkBiFunction((org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
}));
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith(RxJava2Adapter.maybeToMono(domains), RxJavaReactorMigrationUtil.toJdkBiFunction((org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
})).zipWith
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith(RxJava2Adapter.maybeToMono(identities), RxJavaReactorMigrationUtil.toJdkBiFunction((org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
})).zipWith
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(organizationRepository.findById(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toOrganization)).zipWith
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return insert.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(findById_migrated(organization.getId()));
1 | Mono | then | METHOD_INVOCATION | insert.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as
1 | Mono | then | METHOD_INVOCATION | insert.then(storeIdentities).then(storeDomainRestrictions).then
1 | Mono | then | METHOD_INVOCATION | insert.then(storeIdentities).then
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return update.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(findById_migrated(organization.getId()));
1 | Mono | then | METHOD_INVOCATION | update.then(storeIdentities).then(storeDomainRestrictions).then(storeHrids).as
1 | Mono | then | METHOD_INVOCATION | update.then(storeIdentities).then(storeDomainRestrictions).then
1 | Mono | then | METHOD_INVOCATION | update.then(storeIdentities).then
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteDomainRestrictions).then(deleteIdentities).then(deleteHrids).as
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteDomainRestrictions).then(deleteIdentities).then
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteDomainRestrictions).then
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(identities).map((identity)->{
    JdbcOrganization.Identity dbIdentity = new JdbcOrganization.Identity();
    dbIdentity.setIdentity(identity);
    dbIdentity.setOrganizationId(organization.getId());
    return dbIdentity;
}).concatMap((dbIdentity)->dbClient.insert().into(JdbcOrganization.Identity.class).using(dbIdentity).then())).ignoreElements();
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(identities).map((identity)->{
    JdbcOrganization.Identity dbIdentity = new JdbcOrganization.Identity();
    dbIdentity.setIdentity(identity);
    dbIdentity.setOrganizationId(organization.getId());
    return dbIdentity;
}).concatMap((dbIdentity)->dbClient.insert().into(JdbcOrganization.Identity.class).using(dbIdentity).then())).ignoreElements
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(identities).map((identity)->{
    JdbcOrganization.Identity dbIdentity = new JdbcOrganization.Identity();
    dbIdentity.setIdentity(identity);
    dbIdentity.setOrganizationId(organization.getId());
    return dbIdentity;
}).concatMap((dbIdentity)->dbClient.insert().into(JdbcOrganization.Identity.class).using(dbIdentity).then()))
1 | Flux | map | METHOD_INVOCATION | Flux.fromIterable(identities).map((identity)->{
    JdbcOrganization.Identity dbIdentity = new JdbcOrganization.Identity();
    dbIdentity.setIdentity(identity);
    dbIdentity.setOrganizationId(organization.getId());
    return dbIdentity;
}).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(identities).map
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcOrganization.DomainRestriction dbDomainRestriction = new JdbcOrganization.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setOrganizationId(organization.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcOrganization.DomainRestriction.class).using(dbDomainRestriction).then())).ignoreElements();
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcOrganization.DomainRestriction dbDomainRestriction = new JdbcOrganization.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setOrganizationId(organization.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcOrganization.DomainRestriction.class).using(dbDomainRestriction).then())).ignoreElements
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcOrganization.DomainRestriction dbDomainRestriction = new JdbcOrganization.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setOrganizationId(organization.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcOrganization.DomainRestriction.class).using(dbDomainRestriction).then()))
1 | Flux | map | METHOD_INVOCATION | Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcOrganization.DomainRestriction dbDomainRestriction = new JdbcOrganization.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setOrganizationId(organization.getId());
    return dbDomainRestriction;
}).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(domainRestrictions).map
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(dbHrids)).concatMap((hrid)->dbClient.insert().into(JdbcOrganization.Hrid.class).using(hrid).then()).ignoreElements();
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids)).concatMap((hrid)->dbClient.insert().into(JdbcOrganization.Hrid.class).using(hrid).then()).ignoreElements
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids)).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids))
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return dbClient.select().from(JdbcBotDetection.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return dbClient.select().from(JdbcBotDetection.class).matching(from(where(REFERENCE_ID_FIELD).is(referenceId).and(where(REF_TYPE_FIELD).is(referenceType.name())))).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return dbClient.select().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().rowsUpdated().then();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return dbClient.select().from(JdbcSystemTask.class).project("*").matching(from(where("id").is(id))).as(JdbcSystemTask.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return delete.then();
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList().flatMap((content)->countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(scope))
1 | Mono | map | METHOD_INVOCATION | (content)->countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<>(content, page, count)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<>(data, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(scope))
1 | Mono | map | METHOD_INVOCATION | (data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<>(data, page, total)))
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(claimRepository.findByScopeId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcScope.Claims::getClaim)).collectList())
1 | Flux | map | METHOD_INVOCATION | claimRepository.findByScopeId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcScope.Claims::getClaim)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeScope).zipWith(RxJava2Adapter.maybeToMono(scopeClaims), RxJavaReactorMigrationUtil.toJdkBiFunction((scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
}));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).is(key)))).as(JdbcScope.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).is(key)))).as(JdbcScope.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(z))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).in(keys)))).as(JdbcScope.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((scope)->RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).in(keys)))).as(JdbcScope.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(scope)), scope.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(scope))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithClaims_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(z))
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(scopeClaims).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(scopeClaims).concatMap((claim)->{
    JdbcScope.Claims sClaim = new JdbcScope.Claims();
    sClaim.setClaim(claim);
    sClaim.setScopeId(item.getId());
    return dbClient.insert().into(JdbcScope.Claims.class).using(sClaim).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(scopeClaims).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return deleteClaims.then(action).as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | then | METHOD_INVOCATION | deleteClaims.then(action).as
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | deleteClaim.then(delete).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return userRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())));
1 | Flux | map | METHOD_INVOCATION | userRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList().flatMap((content)->userRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (user)->completeUser_migrated(user).flux()
1 | Mono | map | METHOD_INVOCATION | (content)->userRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (app)->completeUser_migrated(app).flux()
1 | Mono | map | METHOD_INVOCATION | (data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total)))
1 | Mono | RETURN_TYPE
1 | Flux | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList().flatMap((list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | Mono | map | METHOD_INVOCATION | (list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total)))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return dbClient.execute(databaseDialectHelper.buildFindUserByReferenceAndEmail(DOMAIN, domain, email, strict)).bind("refId", domain).bind("refType", DOMAIN.name()).bind("email", email).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())));
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(databaseDialectHelper.buildFindUserByReferenceAndEmail(DOMAIN, domain, email, strict)).bind("refId", domain).bind("refType", DOMAIN.name()).bind("email", email).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findByUsername_migrated(ReferenceType.DOMAIN.name(), domain, username).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findByUsername_migrated(ReferenceType.DOMAIN.name(), domain, username).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findByUsernameAndSource_migrated(referenceType.name(), referenceId, username, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(referenceType.name(), referenceId, username, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findByExternalIdAndSource_migrated(referenceType.name(), referenceId, externalId, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findByExternalIdAndSource_migrated(referenceType.name(), referenceId, externalId, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (user)->completeUser_migrated(user).flux()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findById_migrated(referenceType.name(), referenceId, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findById_migrated(referenceType.name(), referenceId, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(inactive).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(inactive).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap((stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))).flatMap
1 | Mono | just | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap
1 | Mono | map | METHOD_INVOCATION | (stats)->RxJava2Adapter.singleToMono(disabled).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
}))
1 | Mono | map | METHOD_INVOCATION | (stats)->RxJava2Adapter.singleToMono(locked).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
}))
1 | Mono | map | METHOD_INVOCATION | (stats)->RxJava2Adapter.singleToMono(inactive).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
}))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Object, Object>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashMap<Object, Object>, Single<Map<Object, Object>>>)(stats)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap((stats)->RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
}))).flatMap
1 | Mono | just | METHOD_INVOCATION | Mono.just(new HashMap<>()).flatMap
1 | Mono | map | METHOD_INVOCATION | (stats)->RxJava2Adapter.singleToMono(total).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
}))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(completed).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateAction = deleteChildEntities(item.getId()).then(updateAction)
1 | Mono | flatMap | METHOD_INVOCATION | return updateAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(addresses).concatMap((address)->{
    JdbcUser.Address jdbcAddr = mapper.map(address, JdbcUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(addresses).concatMap((address)->{
    JdbcUser.Address jdbcAddr = mapper.map(address, JdbcUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(addresses).concatMap((address)->{
    JdbcUser.Address jdbcAddr = mapper.map(address, JdbcUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(addresses).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(roles).concatMap((role)->{
    JdbcUser.Role jdbcRole = new JdbcUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(roles).concatMap((role)->{
    JdbcUser.Role jdbcRole = new JdbcUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap((role)->{
    JdbcUser.Role jdbcRole = new JdbcUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcUser.Entitlements jdbcEntitlement = new JdbcUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcUser.Entitlements jdbcEntitlement = new JdbcUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcUser.Entitlements jdbcEntitlement = new JdbcUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(entitlements).concatMap
1 | Mono | OTHER
1 | Mono | METHOD_REFERENCE | Mono::then
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(attributes.get())
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return deleteRoles.then(deleteAddresses).then(deleteAttributes).then(deleteEntitlements);
1 | Mono | then | METHOD_INVOCATION | deleteRoles.then(deleteAddresses).then(deleteAttributes).then
1 | Mono | then | METHOD_INVOCATION | deleteRoles.then(deleteAddresses).then
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->attributesRepository.findByUserId_migrated(user.getId()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap
1 | Mono | just | METHOD_INVOCATION | Mono.just(userToComplete).flatMap
1 | Mono | map | METHOD_INVOCATION | (user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList().map
1 | Flux | map | METHOD_INVOCATION | roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Role::getRole)).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList().map
1 | Flux | map | METHOD_INVOCATION | entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcUser.Entitlements::getEntitlement)).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map
1 | Flux | map | METHOD_INVOCATION | addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->attributesRepository.findByUserId_migrated(user.getId()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | attributesRepository.findByUserId_migrated(user.getId()).collectList().map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(reporterRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return reporterRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertResult.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(reporterRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(false);
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return entrypointRepository.findById_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeTags_migrated).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve entrypoint with id={} and organization={}", id, organizationId, error)));
1 | Mono | flatMap | METHOD_INVOCATION | entrypointRepository.findById_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeTags_migrated).doOnError
1 | Mono | map | METHOD_INVOCATION | entrypointRepository.findById_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(entrypointRepository.findAllByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux()))))
1 | Flux | map | METHOD_INVOCATION | entrypointRepository.findAllByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeTags_migrated(entrypoint).flux())
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return tagRepository.findAllByEntrypoint_migrated(entrypoint.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEntrypoint.Tag::getTag)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    entrypoint.setTags(tags);
    return entrypoint;
}));
1 | Flux | collectList | METHOD_INVOCATION | tagRepository.findAllByEntrypoint_migrated(entrypoint.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEntrypoint.Tag::getTag)).collectList().map
1 | Flux | map | METHOD_INVOCATION | tagRepository.findAllByEntrypoint_migrated(entrypoint.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEntrypoint.Tag::getTag)).collectList
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeTags_migrated).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve entrypoint with id={} ", id, error)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeTags_migrated).doOnError
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(entrypointRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap
1 | Mono | doOnError | METHOD_INVOCATION | return action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcEntrypoint.Tag tag = new JdbcEntrypoint.Tag();
    tag.setTag(tagValue);
    tag.setEntrypointId(item.getId());
    return dbClient.insert().into(JdbcEntrypoint.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap
1 | Mono | doOnError | METHOD_INVOCATION | return deleteTags(item.getId()).then(action).as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | deleteTags(item.getId()).then(action).as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError
1 | Mono | then | METHOD_INVOCATION | deleteTags(item.getId()).then(action).as
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return deleteTags(id).then(delete).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete entrypoint with id {}", id, error))).then();
1 | Mono | doOnError | METHOD_INVOCATION | deleteTags(id).then(delete).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete entrypoint with id {}", id, error))).then
1 | Mono | then | METHOD_INVOCATION | deleteTags(id).then(delete).as
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve PushedAuthorizationRequest with id {}", id, error)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create PushedAuthorizationRequest with id {}", par.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(parRepository.findById(par.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return parRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete PushedAuthorizationRequest with id {}", id, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcPushedAuthorizationRequest.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge PushedAuthorizationRequest", error)));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertResult.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(serviceResourceRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return serviceResourceRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return this.membershipRepository.findByReference_migrated(referenceId, referenceType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return this.membershipRepository.findByMember_migrated(memberId, memberType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return dbClient.select().from(JdbcMembership.class).matching(from(whereClause)).as(JdbcMembership.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return this.membershipRepository.findByReferenceAndMember_migrated(referenceId, referenceType.name(), memberId, memberType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(membershipRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(membershipRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(factorRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return factorRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(factorRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.factorRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return credentialRepository.findByUserId_migrated(referenceType.name(), referenceId, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return credentialRepository.findByUsername_migrated(referenceType.name(), referenceId, username).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return credentialRepository.findByCredentialId_migrated(referenceType.name(), referenceId, credentialId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve credential for Id {}", id, error)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.credentialRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return credentialRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete credential for Id {}", id, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcCredential.class).matching(from(where("reference_type").is(referenceType.name()).and(where("reference_id").is(referenceId)).and(where("user_id").is(userId)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete credential for userId {}", userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcCredential.class).matching(from(where("reference_type").is(referenceType.name()).and(where("reference_id").is(referenceId)).and(where("aaguid").is(aaguid)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete credential for aaguid {}", aaguid, error)));
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId()).flux(), MAX_CONCURRENCY)).collectList().flatMap((content)->resourceRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Resource>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId()).flux(), MAX_CONCURRENCY)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (res)->completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId()).flux()
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(res))
1 | Mono | map | METHOD_INVOCATION | (content)->resourceRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Resource>(content, page, count)))
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(resourceScopeRepository.findAllByResourceId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcResource.Scope::getScope)).collectList())
1 | Flux | map | METHOD_INVOCATION | resourceScopeRepository.findAllByResourceId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcResource.Scope::getScope)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeResource).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
}));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | flatMap | METHOD_INVOCATION | return resourceRepository.findByIdIn_migrated(resources).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | resourceRepository.findByIdIn_migrated(resources).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(resource))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return resourceRepository.findByDomainAndClientAndUser_migrated(domain, client, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | resourceRepository.findByDomainAndClientAndUser_migrated(domain, client, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(resource))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return resourceRepository.findByDomainAndClientAndResources_migrated(domain, client, resources).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((resource)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | resourceRepository.findByDomainAndClientAndResources_migrated(domain, client, resources).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(resource)), resource.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(resource))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(resourceRepository.findByDomainAndClientAndUserIdAndResource_migrated(domain, client, userId, resource).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | insertResult = insertResult.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | insertResult.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return insertResult.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateResource = updateResource.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | updateResource.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcResource.Scope rScope = new JdbcResource.Scope();
    rScope.setScope(scope);
    rScope.setResourceId(item.getId());
    return dbClient.insert().into(JdbcResource.Scope.class).using(rScope).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return deleteScopes.then(updateResource).as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | then | METHOD_INVOCATION | deleteScopes.then(updateResource).as
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteScopes).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve RequestObject with id {}", id, error)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create requestObject with id {}", requestObject.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObjectRepository.findById(requestObject.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return requestObjectRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete RequestObject with id {}", id, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcRequestObject.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge RequestObjects", error)));
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((content)->content.stream().map(this::toAccessPolicy).collect(Collectors.toList()))).flatMap((content)->accessPolicyRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<AccessPolicy>(content, page, count))));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((content)->content.stream().map(this::toAccessPolicy).collect(Collectors.toList()))).flatMap
1 | Flux | collectList | METHOD_INVOCATION | dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all().collectList().map
1 | Mono | map | METHOD_INVOCATION | (content)->accessPolicyRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<AccessPolicy>(content, page, count)))
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return accessPolicyRepository.findByDomainAndResource_migrated(domain, resource).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return accessPolicyRepository.findByResourceIn_migrated(resources).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(accessPolicyRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toAccessPolicy));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, userId, clientId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | filter | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, userId, clientId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUser_migrated(domain, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | filter | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser_migrated(domain, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | map | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClientAndScope_migrated(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcScopeApproval.class).matching(from(where("domain").is(domain).and(where("scope").is(scope)))).fetch().rowsUpdated().then();
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcScopeApproval.class).matching(from(where("domain").is(domain).and(where("user_id").is(user).and(where("client_id").is(client))))).fetch().rowsUpdated().then();
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcScopeApproval.class).matching(from(where("domain").is(domain).and(where("user_id").is(user)))).fetch().rowsUpdated().then();
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single());
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(scopeApprovalRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return formRepository.findAll_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return formRepository.findAll_migrated(referenceType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return formRepository.findByClient_migrated(referenceType.name(), referenceId, client).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return formRepository.findByTemplate_migrated(referenceType.name(), referenceId, template).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return formRepository.findByClientAndTemplate_migrated(referenceType.name(), referenceId, client, template).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return formRepository.findById_migrated(referenceType.name(), referenceId, id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(formRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.formRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux()
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(group))
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux()
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(group))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux(), CONCURRENT_FLATMAP)).collectList().flatMap((content)->RxJava2Adapter.singleToMono(counter).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Group>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux(), CONCURRENT_FLATMAP)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux()
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(group))
1 | Mono | map | METHOD_INVOCATION | (content)->RxJava2Adapter.singleToMono(counter).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Group>(content, page, count)))
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (group)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId()).flux()
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(group))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithMembersAndRole_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(z))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(maybe).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(memberRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcMember::getMember)).collectList())
1 | Flux | map | METHOD_INVOCATION | memberRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcMember::getMember)).collectList
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcRole::getRole)).collectList())
1 | Flux | map | METHOD_INVOCATION | roleRepository.findAllByGroup_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcGroup.JdbcRole::getRole)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith(RxJava2Adapter.maybeToMono(roles), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
}));
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeGroup).zipWith(RxJava2Adapter.maybeToMono(members), RxJavaReactorMigrationUtil.toJdkBiFunction((grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
})).zipWith
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(roles).concatMap((roleValue)->{
    JdbcGroup.JdbcRole role = new JdbcGroup.JdbcRole();
    role.setRole(roleValue);
    role.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcRole.class).using(role).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(roles).concatMap((roleValue)->{
    JdbcGroup.JdbcRole role = new JdbcGroup.JdbcRole();
    role.setRole(roleValue);
    role.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcRole.class).using(role).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap((roleValue)->{
    JdbcGroup.JdbcRole role = new JdbcGroup.JdbcRole();
    role.setRole(roleValue);
    role.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcRole.class).using(role).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(members).concatMap((memberValue)->{
    JdbcGroup.JdbcMember member = new JdbcGroup.JdbcMember();
    member.setMember(memberValue);
    member.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcMember.class).using(member).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(members).concatMap((memberValue)->{
    JdbcGroup.JdbcMember member = new JdbcGroup.JdbcMember();
    member.setMember(memberValue);
    member.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcMember.class).using(member).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(members).concatMap((memberValue)->{
    JdbcGroup.JdbcMember member = new JdbcGroup.JdbcMember();
    member.setMember(memberValue);
    member.setGroupId(item.getId());
    return dbClient.insert().into(JdbcGroup.JdbcMember.class).using(member).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(members).concatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = deleteChildEntities(item.getId()).then(action)
1 | Mono | flatMap | METHOD_INVOCATION | return action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return deleteRoles.then(deleteMembers);
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))));
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return dbClient.select().from(JdbcDomain.class).matching(from(whereClause)).as(JdbcDomain.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))));
1 | Flux | map | METHOD_INVOCATION | dbClient.select().from(JdbcDomain.class).matching(from(whereClause)).as(JdbcDomain.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainRepository.findAllById(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(environmentId, ReferenceType.ENVIRONMENT.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)))
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))));
1 | Mono | RETURN_TYPE
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(domainRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux
1 | Flux | next | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident)))).next();
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident)))).next
1 | Mono | RETURN_TYPE
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(domainRepository.findByHrid_migrated(referenceId, referenceType.name(), hrid).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux())
1 | Mono | map | METHOD_INVOCATION | domainRepository.findByHrid_migrated(referenceId, referenceType.name(), hrid).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flux
1 | Flux | next | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident)))).next();
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domains).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident)))).next
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return insertAction.as(trx::transactional).then(findById_migrated(item.getId()));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateAction = updateAction.then(deleteChildEntities(item.getId()))
1 | Mono | then | METHOD_INVOCATION | return updateAction.as(trx::transactional).then(findById_migrated(item.getId()));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcDomain.class).matching(from(where("id").is(domainId))).fetch().rowsUpdated().then(deleteChildEntities(domainId)).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to delete Domain with id {}", domainId, error))).then();
1 | Mono | doOnError | METHOD_INVOCATION | dbClient.delete().from(JdbcDomain.class).matching(from(where("id").is(domainId))).fetch().rowsUpdated().then(deleteChildEntities(domainId)).as(trx::transactional).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to delete Domain with id {}", domainId, error))).then
1 | Mono | then | METHOD_INVOCATION | dbClient.delete().from(JdbcDomain.class).matching(from(where("id").is(domainId))).fetch().rowsUpdated().then(deleteChildEntities(domainId)).as
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return dbClient.execute(search).bind("refType", ReferenceType.ENVIRONMENT.name()).bind("refId", environmentId).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcDomain.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(completeDomain_migrated(ident))));
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(search).bind("refType", ReferenceType.ENVIRONMENT.name()).bind("refId", environmentId).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcDomain.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toDomain)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return Flux.just(entity).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))));
1 | Flux | flatMap | METHOD_INVOCATION | Flux.just(entity).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
}))))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
}))))).flatMap
1 | Flux | flatMap | METHOD_INVOCATION | Flux.just(entity).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((domain)->RxJava2Adapter.fluxToFlowable(identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
}))))).flatMap
1 | Flux | just | METHOD_INVOCATION | Flux.just(entity).flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})))
1 | Mono | flux | METHOD_INVOCATION | identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux().map
1 | Flux | collectList | METHOD_INVOCATION | identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList().flux
1 | Flux | map | METHOD_INVOCATION | identitiesRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Identity::getIdentity)).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})))
1 | Mono | flux | METHOD_INVOCATION | tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux().map
1 | Flux | collectList | METHOD_INVOCATION | tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList().flux
1 | Flux | map | METHOD_INVOCATION | tagRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcDomain.Tag::getTag)).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map(RxJavaReactorMigrationUtil.toJdkFunction((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})))
1 | Mono | flux | METHOD_INVOCATION | vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux().map
1 | Flux | collectList | METHOD_INVOCATION | vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList().flux
1 | Flux | map | METHOD_INVOCATION | vHostsRepository.findAllByDomainId_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toVirtualHost)).collectList
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(identities).concatMap((idp)->{
    JdbcDomain.Identity identity = new JdbcDomain.Identity();
    identity.setIdentity(idp);
    identity.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Identity.class).using(identity).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(identities).concatMap((idp)->{
    JdbcDomain.Identity identity = new JdbcDomain.Identity();
    identity.setIdentity(idp);
    identity.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Identity.class).using(identity).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(identities).concatMap((idp)->{
    JdbcDomain.Identity identity = new JdbcDomain.Identity();
    identity.setIdentity(idp);
    identity.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Identity.class).using(identity).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(identities).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcDomain.Tag tag = new JdbcDomain.Tag();
    tag.setTag(tagValue);
    tag.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcDomain.Tag tag = new JdbcDomain.Tag();
    tag.setTag(tagValue);
    tag.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap((tagValue)->{
    JdbcDomain.Tag tag = new JdbcDomain.Tag();
    tag.setTag(tagValue);
    tag.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Tag.class).using(tag).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(tags).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromStream(virtualHosts.stream().map(this::toJdbcVHost)).concatMap((jdbcVHost)->{
    jdbcVHost.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Vhost.class).using(jdbcVHost).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromStream(virtualHosts.stream().map(this::toJdbcVHost)).concatMap((jdbcVHost)->{
    jdbcVHost.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Vhost.class).using(jdbcVHost).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromStream(virtualHosts.stream().map(this::toJdbcVHost)).concatMap((jdbcVHost)->{
    jdbcVHost.setDomainId(item.getId());
    return dbClient.insert().into(JdbcDomain.Vhost.class).using(jdbcVHost).fetch().rowsUpdated();
}).reduce
1 | Flux | fromStream | METHOD_INVOCATION | Flux.fromStream(virtualHosts.stream().map(this::toJdbcVHost)).concatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return deleteVirtualHosts.then(deleteIdentities).then(deleteTags);
1 | Mono | then | METHOD_INVOCATION | deleteVirtualHosts.then(deleteIdentities).then
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return this.identityProviderRepository.findAll_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return this.identityProviderRepository.findAll_migrated(referenceType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(this.identityProviderRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return this.identityProviderRepository.findById_migrated(referenceType.name(), referenceId, identityProviderId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(this.identityProviderRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(emailRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return emailRepository.findAllByReference_migrated(referenceId, referenceType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return emailRepository.findAllByReferenceAndClient_migrated(referenceId, referenceType.name(), client).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return emailRepository.findByTemplate_migrated(referenceId, referenceType.name(), template).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return emailRepository.findByClientAndTemplate_migrated(referenceId, referenceType.name(), client, template).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return emailRepository.findById_migrated(referenceId, referenceType.name(), id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(emailRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return from.as(JdbcLoginAttempt.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single());
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(loginAttemptRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(id)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now))).map
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single());
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(permissionTicketRepository.findById(item.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return extensionGrantRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return extensionGrantRepository.findByDomainAndName_migrated(domain, name).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(this.extensionGrantRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return eventRepository.findByTimeFrame_migrated(LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(eventRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return userRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())));
1 | Flux | map | METHOD_INVOCATION | userRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList().flatMap((content)->userRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->completeUser_migrated(user).flux(), CONCURRENT_FLATMAP)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (user)->completeUser_migrated(user).flux()
1 | Mono | map | METHOD_INVOCATION | (content)->userRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<User>(content, page, count)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeUser_migrated(app).flux(), CONCURRENT_FLATMAP)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (app)->completeUser_migrated(app).flux()
1 | Mono | map | METHOD_INVOCATION | (data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(data, page, total)))
1 | Mono | RETURN_TYPE
1 | Flux | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList().flatMap((list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((user)->RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | userFlux.map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeUser_migrated(user).flux())
1 | Mono | map | METHOD_INVOCATION | (list)->userCount.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<User>(list, page, total)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findByUsernameAndSource_migrated(referenceType.name(), referenceId, username, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(referenceType.name(), referenceId, username, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findByExternalIdAndSource_migrated(referenceType.name(), referenceId, externalId, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findByExternalIdAndSource_migrated(referenceType.name(), referenceId, externalId, source).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(userRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (user)->completeUser_migrated(user).flux()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userRepository.findById_migrated(referenceType.name(), referenceId, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | userRepository.findById_migrated(referenceType.name(), referenceId, userId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeUser_migrated);
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateAction = deleteChildEntities(item.getId()).then(updateAction)
1 | Mono | flatMap | METHOD_INVOCATION | return updateAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(addresses).concatMap((address)->{
    JdbcOrganizationUser.Address jdbcAddr = mapper.map(address, JdbcOrganizationUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcOrganizationUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(addresses).concatMap((address)->{
    JdbcOrganizationUser.Address jdbcAddr = mapper.map(address, JdbcOrganizationUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcOrganizationUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(addresses).concatMap((address)->{
    JdbcOrganizationUser.Address jdbcAddr = mapper.map(address, JdbcOrganizationUser.Address.class);
    jdbcAddr.setUserId(item.getId());
    return dbClient.insert().into(JdbcOrganizationUser.Address.class).using(jdbcAddr).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(addresses).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(roles).concatMap((role)->{
    JdbcOrganizationUser.Role jdbcRole = new JdbcOrganizationUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcOrganizationUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(roles).concatMap((role)->{
    JdbcOrganizationUser.Role jdbcRole = new JdbcOrganizationUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcOrganizationUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap((role)->{
    JdbcOrganizationUser.Role jdbcRole = new JdbcOrganizationUser.Role();
    jdbcRole.setUserId(item.getId());
    jdbcRole.setRole(role);
    return dbClient.insert().into(JdbcOrganizationUser.Role.class).using(jdbcRole).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(roles).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcOrganizationUser.Entitlements jdbcEntitlement = new JdbcOrganizationUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcOrganizationUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcOrganizationUser.Entitlements jdbcEntitlement = new JdbcOrganizationUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcOrganizationUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(entitlements).concatMap((entitlement)->{
    JdbcOrganizationUser.Entitlements jdbcEntitlement = new JdbcOrganizationUser.Entitlements();
    jdbcEntitlement.setUserId(item.getId());
    jdbcEntitlement.setEntitlement(entitlement);
    return dbClient.insert().into(JdbcOrganizationUser.Entitlements.class).using(jdbcEntitlement).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(entitlements).concatMap
1 | Mono | OTHER
1 | Mono | METHOD_REFERENCE | Mono::then
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(attributes.get())
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return deleteRoles.then(deleteAddresses).then(deleteAttributes).then(deleteEntitlements);
1 | Mono | then | METHOD_INVOCATION | deleteRoles.then(deleteAddresses).then(deleteAttributes).then
1 | Mono | then | METHOD_INVOCATION | deleteRoles.then(deleteAddresses).then
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap((user)->attributesRepository.findByUserId_migrated(user.getId()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap((user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap((user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(userToComplete).flatMap((user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))).flatMap
1 | Mono | just | METHOD_INVOCATION | Mono.just(userToComplete).flatMap
1 | Mono | map | METHOD_INVOCATION | (user)->roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> roles)->{
    user.setRoles(roles);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList().map
1 | Flux | map | METHOD_INVOCATION | roleRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Role::getRole)).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> entitlements)->{
    user.setEntitlements(entitlements);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList().map
1 | Flux | map | METHOD_INVOCATION | entitlementRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcOrganizationUser.Entitlements::getEntitlement)).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.scim.Address> addresses)->{
    user.setAddresses(addresses);
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList().map
1 | Flux | map | METHOD_INVOCATION | addressesRepository.findByUserId_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Address jdbcAddr)->mapper.map(jdbcAddr, Address.class))).collectList
1 | Mono | map | METHOD_INVOCATION | (user)->attributesRepository.findByUserId_migrated(user.getId()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute> attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (io.gravitee.am.repository.jdbc.management.api.model.JdbcOrganizationUser.Attribute attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
}))
1 | Flux | collectList | METHOD_INVOCATION | attributesRepository.findByUserId_migrated(user.getId()).collectList().map
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(this.alertNotifierRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.insert().into(JdbcAlertNotifier.class).using(toJdbcAlertNotifier(alertNotifier)).then().then(findById_migrated(alertNotifier.getId()));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.update().table(JdbcAlertNotifier.class).using(toJdbcAlertNotifier(alertNotifier)).matching(from(where("id").is(alertNotifier.getId()))).then().then(findById_migrated(alertNotifier.getId()));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | map | METHOD_INVOCATION | return dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("id").is(id))).as(JdbcAuthenticationFlowContext.class).one().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | map | METHOD_INVOCATION | return dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).first().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | map | METHOD_INVOCATION | return dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertAction.flatMap((i)->this.findById_migrated(id).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(id).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId))).fetch().rowsUpdated().then();
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("version").is(version)))).fetch().rowsUpdated().then();
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAuthenticationFlowContext.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge authentication contexts", error)));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(flowRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeFlow_migrated);
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(flowRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(jdbcPreSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(jdbcPreSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(jdbcPreSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(jdbcPreSteps).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(jdbcPostSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(jdbcPostSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(jdbcPostSteps).concatMap((step)->dbClient.insert().into(JdbcFlow.JdbcStep.class).using(step).fetch().rowsUpdated()).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(jdbcPostSteps).concatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateAction = updateAction.then(deleteChildEntities(item.getId()))
1 | Mono | flatMap | METHOD_INVOCATION | return updateAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | dbClient.delete().from(JdbcFlow.class).matching(from(where("id").is(id))).fetch().rowsUpdated().then(deleteChildEntities(id)).as
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return flowRepository.findById_migrated(referenceType.name(), referenceId, id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeFlow_migrated);
1 | Mono | map | METHOD_INVOCATION | flowRepository.findById_migrated(referenceType.name(), referenceId, id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return flowRepository.findAll_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((flow)->RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())));
1 | Flux | map | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return flowRepository.findByApplication_migrated(referenceType.name(), referenceId, application).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((flow)->RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())));
1 | Flux | map | METHOD_INVOCATION | flowRepository.findByApplication_migrated(referenceType.name(), referenceId, application).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeFlow_migrated(flow).flux())
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all().collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((steps)->{
    if (steps != null && !steps.isEmpty()) {
        List<Step> preSteps = new ArrayList<>();
        List<Step> postSteps = new ArrayList<>();
        for (JdbcFlow.JdbcStep jStep : steps) {
            if (jStep.getStage().equals(JdbcFlow.StepType.pre.name())) {
                preSteps.add(convertToStep(jStep));
            } else if (jStep.getStage().equals(JdbcFlow.StepType.post.name())) {
                postSteps.add(convertToStep(jStep));
            } else {
                LOGGER.debug("Unknown step type \'{}\', ignore it!", jStep.getStage());
            }
        }
        if (!preSteps.isEmpty()) {
            flow.setPre(preSteps);
        }
        if (!postSteps.isEmpty()) {
            flow.setPost(postSteps);
        }
    }
    return flow;
}));
1 | Flux | collectList | METHOD_INVOCATION | dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all().collectList().map
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)))
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(environmentRepository.findByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return environmentRepository.findByIdAndOrganization_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap(this::retrieveDomainRestrictions_migrated).flatMap(this::retrieveHrids_migrated);
1 | Mono | flatMap | METHOD_INVOCATION | environmentRepository.findByIdAndOrganization_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap(this::retrieveDomainRestrictions_migrated).flatMap
1 | Mono | map | METHOD_INVOCATION | environmentRepository.findByIdAndOrganization_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap(this::retrieveDomainRestrictions_migrated).flatMap(this::retrieveHrids_migrated))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap(this::retrieveDomainRestrictions_migrated).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(environmentRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment)).flatMap
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(result).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to retrieve Environment with id {}", id, error)));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return insert.then(storeDomainRestrictions).then(storeHrids).as(trx::transactional).then(findById_migrated(environment.getId()));
1 | Mono | then | METHOD_INVOCATION | insert.then(storeDomainRestrictions).then(storeHrids).as
1 | Mono | then | METHOD_INVOCATION | insert.then(storeDomainRestrictions).then
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return update.then(storeDomainRestrictions(environment, true)).then(storeHrids(environment, true)).as(trx::transactional).then(findById_migrated(environment.getId()));
1 | Mono | then | METHOD_INVOCATION | update.then(storeDomainRestrictions(environment, true)).then(storeHrids(environment, true)).as
1 | Mono | then | METHOD_INVOCATION | update.then(storeDomainRestrictions(environment, true)).then
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteDomainRestrictions).then(deleteHrids).as
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteDomainRestrictions).then
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return domainRestrictionRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setDomainRestrictions)).map(RxJavaReactorMigrationUtil.toJdkFunction((domainRestriction)->environment));
1 | Mono | doOnSuccess | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setDomainRestrictions)).map
1 | Mono | doOnSuccess | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size()))).doOnSuccess
1 | Flux | collectList | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList().doOnSuccess
1 | Flux | map | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.DomainRestriction::getDomainRestriction)).collectList
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return hridsRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setHrids)).map(RxJavaReactorMigrationUtil.toJdkFunction((hrids)->environment));
1 | Mono | doOnSuccess | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(environment::setHrids)).map
1 | Mono | doOnSuccess | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size()))).doOnSuccess
1 | Flux | collectList | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList().doOnSuccess
1 | Flux | map | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId_migrated(environment.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcEnvironment.Hrid::getHrid)).collectList
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcEnvironment.DomainRestriction dbDomainRestriction = new JdbcEnvironment.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setEnvironmentId(environment.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcEnvironment.DomainRestriction.class).using(dbDomainRestriction).then())).ignoreElements();
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcEnvironment.DomainRestriction dbDomainRestriction = new JdbcEnvironment.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setEnvironmentId(environment.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcEnvironment.DomainRestriction.class).using(dbDomainRestriction).then())).ignoreElements
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcEnvironment.DomainRestriction dbDomainRestriction = new JdbcEnvironment.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setEnvironmentId(environment.getId());
    return dbDomainRestriction;
}).concatMap((dbDomainRestriction)->dbClient.insert().into(JdbcEnvironment.DomainRestriction.class).using(dbDomainRestriction).then()))
1 | Flux | map | METHOD_INVOCATION | Flux.fromIterable(domainRestrictions).map((domainRestriction)->{
    JdbcEnvironment.DomainRestriction dbDomainRestriction = new JdbcEnvironment.DomainRestriction();
    dbDomainRestriction.setDomainRestriction(domainRestriction);
    dbDomainRestriction.setEnvironmentId(environment.getId());
    return dbDomainRestriction;
}).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(domainRestrictions).map
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(dbHrids)).concatMap((hrid)->dbClient.insert().into(JdbcEnvironment.Hrid.class).using(hrid).then()).ignoreElements();
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids)).concatMap((hrid)->dbClient.insert().into(JdbcEnvironment.Hrid.class).using(hrid).then()).ignoreElements
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids)).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(dbHrids))
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.just(entity).flatMap((app)->identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))).flatMap((app)->factorRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
}))).flatMap((app)->scopeRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.application.ApplicationScopeSettings> scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
})));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(entity).flatMap((app)->identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))).flatMap((app)->factorRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
}))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(entity).flatMap((app)->identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))).flatMap
1 | Mono | just | METHOD_INVOCATION | Mono.just(entity).flatMap
1 | Mono | map | METHOD_INVOCATION | (app)->identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
}))
1 | Flux | collectList | METHOD_INVOCATION | identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList().map
1 | Flux | map | METHOD_INVOCATION | identityRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Identity::getIdentity)).collectList
1 | Mono | map | METHOD_INVOCATION | (app)->factorRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<java.lang.String> factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
}))
1 | Flux | collectList | METHOD_INVOCATION | factorRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList().map
1 | Flux | map | METHOD_INVOCATION | factorRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcApplication.Factor::getFactor)).collectList
1 | Mono | map | METHOD_INVOCATION | (app)->scopeRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.application.ApplicationScopeSettings> scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
}))
1 | Flux | collectList | METHOD_INVOCATION | scopeRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList().map
1 | Flux | map | METHOD_INVOCATION | scopeRepository.findAllByApplicationId_migrated(app.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.jdbc.management.api.model.JdbcApplication.ScopeSettings jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class))).collectList
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(applicationRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap((data)->RxJava2Adapter.singleToMono(applicationRepository.count()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications (page={}/size={})", page, size, error)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap((data)->RxJava2Adapter.singleToMono(applicationRepository.count()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (app)->completeApplication_migrated(app).flux()
1 | Mono | map | METHOD_INVOCATION | (data)->RxJava2Adapter.singleToMono(applicationRepository.count()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return applicationRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | applicationRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap((data)->applicationRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap((data)->applicationRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->completeApplication_migrated(app).flux(), MAX_CONCURRENCY)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | flux | METHOD_INVOCATION | (app)->completeApplication_migrated(app).flux()
1 | Mono | map | METHOD_INVOCATION | (data)->applicationRepository.countByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error)));
1 | Mono | flatMap | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))).doOnError
1 | Flux | collectList | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Mono | map | METHOD_INVOCATION | (data)->dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Application>(data, page, total)))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return applicationRepository.findByCertificate_migrated(certificate).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | applicationRepository.findByCertificate_migrated(certificate).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return dbClient.execute("SELECT a.* FROM applications a INNER JOIN application_identities i ON a.id = i.application_id where i." + databaseDialectHelper.toSql(SqlIdentifier.quoted("identity")) + " = :identity").bind("identity", identityProvider).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | dbClient.execute("SELECT a.* FROM applications a INNER JOIN application_identities i ON a.id = i.application_id where i." + databaseDialectHelper.toSql(SqlIdentifier.quoted("identity")) + " = :identity").bind("identity", identityProvider).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return applicationRepository.findAllByFactor_migrated(factor).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | applicationRepository.findAllByFactor_migrated(factor).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return applicationRepository.findAllByDomainAndGrant_migrated(domain, extensionGrant).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | applicationRepository.findAllByDomainAndGrant_migrated(domain, extensionGrant).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | flatMap | METHOD_INVOCATION | return applicationRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())));
1 | Flux | map | METHOD_INVOCATION | applicationRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).next();
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((app)->RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux()))).next
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeApplication_migrated(app).flux())
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(this::completeApplication_migrated);
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return insertAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | updateAction = deleteChildEntities(item.getId()).then(updateAction)
1 | Mono | flatMap | METHOD_INVOCATION | return updateAction.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return delete.then(deleteChildEntities(id)).as(trx::transactional).then(RxJava2Adapter.completableToMono(applicationRepository.deleteById(id)));
1 | Mono | then | METHOD_INVOCATION | delete.then(deleteChildEntities(id)).as
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return factors.then(identities).then(grants).then(scopeSettings);
1 | Mono | then | METHOD_INVOCATION | factors.then(identities).then(grants).then
1 | Mono | then | METHOD_INVOCATION | factors.then(identities).then
1 | Mono | RETURN_TYPE
1 | Mono | PARAM
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(identities).concatMap((idp)->{
    JdbcApplication.Identity identity = new JdbcApplication.Identity();
    identity.setIdentity(idp);
    identity.setApplicationId(app.getId());
    DatabaseClient.GenericInsertSpec<Map<String, Object>> insertSpec = dbClient.insert().into("application_identities");
    insertSpec = addQuotedField(insertSpec, "application_id", identity.getApplicationId(), String.class);
    insertSpec = addQuotedField(insertSpec, "identity", identity.getIdentity(), String.class);
    return insertSpec.fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(identities).concatMap((idp)->{
    JdbcApplication.Identity identity = new JdbcApplication.Identity();
    identity.setIdentity(idp);
    identity.setApplicationId(app.getId());
    DatabaseClient.GenericInsertSpec<Map<String, Object>> insertSpec = dbClient.insert().into("application_identities");
    insertSpec = addQuotedField(insertSpec, "application_id", identity.getApplicationId(), String.class);
    insertSpec = addQuotedField(insertSpec, "identity", identity.getIdentity(), String.class);
    return insertSpec.fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(identities).concatMap((idp)->{
    JdbcApplication.Identity identity = new JdbcApplication.Identity();
    identity.setIdentity(idp);
    identity.setApplicationId(app.getId());
    DatabaseClient.GenericInsertSpec<Map<String, Object>> insertSpec = dbClient.insert().into("application_identities");
    insertSpec = addQuotedField(insertSpec, "application_id", identity.getApplicationId(), String.class);
    insertSpec = addQuotedField(insertSpec, "identity", identity.getIdentity(), String.class);
    return insertSpec.fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(identities).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(factors).concatMap((value)->{
    JdbcApplication.Factor factor = new JdbcApplication.Factor();
    factor.setFactor(value);
    factor.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Factor.class).using(factor).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(factors).concatMap((value)->{
    JdbcApplication.Factor factor = new JdbcApplication.Factor();
    factor.setFactor(value);
    factor.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Factor.class).using(factor).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(factors).concatMap((value)->{
    JdbcApplication.Factor factor = new JdbcApplication.Factor();
    factor.setFactor(value);
    factor.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Factor.class).using(factor).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(factors).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(grants).concatMap((value)->{
    JdbcApplication.Grant grant = new JdbcApplication.Grant();
    grant.setGrant(value);
    grant.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Grant.class).using(grant).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(grants).concatMap((value)->{
    JdbcApplication.Grant grant = new JdbcApplication.Grant();
    grant.setGrant(value);
    grant.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Grant.class).using(grant).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(grants).concatMap((value)->{
    JdbcApplication.Grant grant = new JdbcApplication.Grant();
    grant.setGrant(value);
    grant.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.Grant.class).using(grant).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(grants).concatMap
1 | Mono | then | METHOD_INVOCATION | actionFlow = actionFlow.then(Flux.fromIterable(scopeSettings).concatMap((value)->{
    JdbcApplication.ScopeSettings jdbcScopeSettings = mapper.map(value, JdbcApplication.ScopeSettings.class);
    jdbcScopeSettings.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.ScopeSettings.class).using(jdbcScopeSettings).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | actionFlow.then(Flux.fromIterable(scopeSettings).concatMap((value)->{
    JdbcApplication.ScopeSettings jdbcScopeSettings = mapper.map(value, JdbcApplication.ScopeSettings.class);
    jdbcScopeSettings.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.ScopeSettings.class).using(jdbcScopeSettings).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(scopeSettings).concatMap((value)->{
    JdbcApplication.ScopeSettings jdbcScopeSettings = mapper.map(value, JdbcApplication.ScopeSettings.class);
    jdbcScopeSettings.setApplicationId(app.getId());
    return dbClient.insert().into(JdbcApplication.ScopeSettings.class).using(jdbcScopeSettings).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(scopeSettings).concatMap
1 | Mono | IMPORT
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(nodeMonitoringRepository.findByNodeIdAndType_migrated(nodeId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(nodeMonitoringRepository.findByTypeAndTimeFrame_migrated(type, LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | LOCAL_VARIABLE
1 | Mono | map | METHOD_INVOCATION | monoToSingle(insertResult.map((result)->monitoring))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(nodeMonitoringRepository.save(toJdbcEntity(monitoring))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(alertTriggerAlertNotifierRepository.findByAlertTriggerId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId)).collectList())
1 | Flux | map | METHOD_INVOCATION | alertTriggerAlertNotifierRepository.findByAlertTriggerId_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith(RxJava2Adapter.maybeToMono(alertNotifierIds), RxJavaReactorMigrationUtil.toJdkBiFunction((alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
}));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.alertTriggerRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).zipWith
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return insert.then(storeAlertNotifiers).as(trx::transactional).then(findById_migrated(alertTrigger.getId()));
1 | Mono | then | METHOD_INVOCATION | insert.then(storeAlertNotifiers).as
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return update.then(storeAlertNotifiers).as(trx::transactional).then(findById_migrated(alertTrigger.getId()));
1 | Mono | then | METHOD_INVOCATION | update.then(storeAlertNotifiers).as
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction((java.lang.String ident)->RxJava2Adapter.monoToMaybe(findById_migrated(ident))).apply(e)))))
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | empty | METHOD_INVOCATION | Mono<Void> delete = Mono.empty()
1 | Flux | ignoreElements | METHOD_INVOCATION | return delete.thenMany(Flux.fromIterable(alertNotifiers).map((alertNotifierId)->{
    JdbcAlertTrigger.AlertNotifier dbAlertNotifier = new JdbcAlertTrigger.AlertNotifier();
    dbAlertNotifier.setAlertNotifierId(alertNotifierId);
    dbAlertNotifier.setAlertTriggerId(alertTrigger.getId());
    return dbAlertNotifier;
}).concatMap((dbAlertNotifier)->dbClient.insert().into(JdbcAlertTrigger.AlertNotifier.class).using(dbAlertNotifier).then())).ignoreElements();
1 | Mono | thenMany | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(alertNotifiers).map((alertNotifierId)->{
    JdbcAlertTrigger.AlertNotifier dbAlertNotifier = new JdbcAlertTrigger.AlertNotifier();
    dbAlertNotifier.setAlertNotifierId(alertNotifierId);
    dbAlertNotifier.setAlertTriggerId(alertTrigger.getId());
    return dbAlertNotifier;
}).concatMap((dbAlertNotifier)->dbClient.insert().into(JdbcAlertTrigger.AlertNotifier.class).using(dbAlertNotifier).then())).ignoreElements
1 | Flux | concatMap | METHOD_INVOCATION | delete.thenMany(Flux.fromIterable(alertNotifiers).map((alertNotifierId)->{
    JdbcAlertTrigger.AlertNotifier dbAlertNotifier = new JdbcAlertTrigger.AlertNotifier();
    dbAlertNotifier.setAlertNotifierId(alertNotifierId);
    dbAlertNotifier.setAlertTriggerId(alertTrigger.getId());
    return dbAlertNotifier;
}).concatMap((dbAlertNotifier)->dbClient.insert().into(JdbcAlertTrigger.AlertNotifier.class).using(dbAlertNotifier).then()))
1 | Flux | map | METHOD_INVOCATION | Flux.fromIterable(alertNotifiers).map((alertNotifierId)->{
    JdbcAlertTrigger.AlertNotifier dbAlertNotifier = new JdbcAlertTrigger.AlertNotifier();
    dbAlertNotifier.setAlertNotifierId(alertNotifierId);
    dbAlertNotifier.setAlertTriggerId(alertTrigger.getId());
    return dbAlertNotifier;
}).concatMap
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(alertNotifiers).map
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(this.installationRepository.findAll()).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(this.installationRepository.findAll()).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return this.installationRepository.findById_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return insertSpec.then().then(Mono.defer(()->this.findById_migrated(installation.getId()).single()));
1 | Mono | defer | METHOD_INVOCATION | insertSpec.then().then(Mono.defer(()->this.findById_migrated(installation.getId()).single()))
1 | Mono | single | METHOD_INVOCATION | ()->this.findById_migrated(installation.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then().then(Mono.defer(()->this.findById_migrated(installation.getId()).single()));
1 | Mono | defer | METHOD_INVOCATION | updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then().then(Mono.defer(()->this.findById_migrated(installation.getId()).single()))
1 | Mono | single | METHOD_INVOCATION | ()->this.findById_migrated(installation.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return accessTokenRepository.findByToken_migrated(token, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve AccessToken", error)));
1 | Mono | map | METHOD_INVOCATION | accessTokenRepository.findByToken_migrated(token, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create accessToken with id {}", accessToken.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(accessTokenRepository.findById(accessToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(findByToken_migrated(token).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete AccessToken", error))))
1 | Mono | flatMap | METHOD_INVOCATION | findByToken_migrated(token).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))).doOnError
1 | Mono | map | METHOD_INVOCATION | (z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return Flux.fromIterable(accessTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux()))).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to bulk load access tokens", error)));
1 | Mono | then | METHOD_INVOCATION | Flux.fromIterable(accessTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux()))).ignoreElements().then().doOnError
1 | Flux | ignoreElements | METHOD_INVOCATION | Flux.fromIterable(accessTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux()))).ignoreElements().then
1 | Flux | flatMap | METHOD_INVOCATION | Flux.fromIterable(accessTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux()))).ignoreElements
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(accessTokens).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(create_migrated(accessToken).flux())
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientIdAndSubject_migrated(clientId, subject, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByClientId_migrated(clientId, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete access tokens with subject {}", userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)).and(where("client").is(clientId)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete access token with domain {}, client {} and subject {}", domainId, clientId, userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete access tokens with domain {} and subject {}", domainId, userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAccessToken.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge access tokens", error)));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return tagRepository.findById_migrated(id, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return tagRepository.findByOrganization_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(tagRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(tagRepository.save(toJdbcEntity(item))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return refreshTokenRepository.findByToken_migrated(token, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve RefreshToken", error)));
1 | Mono | map | METHOD_INVOCATION | refreshTokenRepository.findByToken_migrated(token, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create refreshToken with id {}", refreshToken.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(refreshTokenRepository.findById(refreshToken.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return Flux.fromIterable(refreshTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((refreshToken)->RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux()))).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to bulk load refresh tokens", error)));
1 | Mono | then | METHOD_INVOCATION | Flux.fromIterable(refreshTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((refreshToken)->RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux()))).ignoreElements().then().doOnError
1 | Flux | ignoreElements | METHOD_INVOCATION | Flux.fromIterable(refreshTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((refreshToken)->RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux()))).ignoreElements().then
1 | Flux | flatMap | METHOD_INVOCATION | Flux.fromIterable(refreshTokens).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((refreshToken)->RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux()))).ignoreElements
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(refreshTokens).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(create_migrated(refreshToken).flux())
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete RefreshToken", error))).then();
1 | Mono | doOnError | METHOD_INVOCATION | dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete RefreshToken", error))).then
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete refresh token with subject {}", userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)).and(where("client").is(clientId)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete refresh token with domain {}, client {} and subject {}", domainId, clientId, userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)))).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete refresh token with domain {} and subject {}", domainId, userId, error)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcRefreshToken.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge refresh tokens", error)));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(this.certificateRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Flux | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | return this.certificateRepository.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve Certificate with id {}", id, error)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(this.certificateRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to create certificate with id {}", item.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("unable to update certificate with id {}", item.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | action.flatMap((i)->this.findById_migrated(item.getId()).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return this.certificateRepository.deleteById(id).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete Certificate with id {}", id, error)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return insertAction.flatMap((i)->RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to create authorizationCode with id {}", authorizationCode.getId(), error)));
1 | Mono | flatMap | METHOD_INVOCATION | insertAction.flatMap((i)->RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()).doOnError
1 | Mono | single | METHOD_INVOCATION | (i)->RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(authorizationCode.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).single
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->dbClient.delete().from(JdbcAuthorizationCode.class).matching(from(where("id").is(id))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authorizationCodeRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | map | METHOD_INVOCATION | (z)->dbClient.delete().from(JdbcAuthorizationCode.class).matching(from(where("id").is(id))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return authorizationCodeRepository.findByCode_migrated(code, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve AuthorizationCode with code {}", code)));
1 | Mono | map | METHOD_INVOCATION | authorizationCodeRepository.findByCode_migrated(code, LocalDateTime.now(UTC)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return dbClient.delete().from(JdbcAuthorizationCode.class).matching(where("expire_at").lessThan(now)).then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to purge authorization tokens", error)));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return roleRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | roleRepository.findByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList().flatMap((content)->roleRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Role>(content, page, count))));
1 | Flux | collectList | METHOD_INVOCATION | dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | map | METHOD_INVOCATION | (content)->roleRepository.countByReference_migrated(referenceType.name(), referenceId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long count)->new Page<Role>(content, page, count)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList().flatMap((data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Role>(data, page, total))));
1 | Flux | collectList | METHOD_INVOCATION | dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList().flatMap
1 | Flux | flatMap | METHOD_INVOCATION | dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux()))).collectList
1 | Flux | map | METHOD_INVOCATION | dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | map | METHOD_INVOCATION | (data)->dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long total)->new Page<Role>(data, page, total)))
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | flatMap | METHOD_INVOCATION | return roleRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((role)->RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())));
1 | Flux | map | METHOD_INVOCATION | roleRepository.findByIdIn_migrated(ids).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()).flux())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType.name(), referenceId, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType_migrated(referenceType.name(), referenceId, name, assignableType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((z)->completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(z)), z.getId()));
1 | Mono | map | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType_migrated(referenceType.name(), referenceId, name, assignableType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(z))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return roleRepository.findByNamesAndAssignableType_migrated(referenceType.name(), referenceId, names, assignableType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->RxJava2Adapter.monoToMaybe(completeWithScopes_migrated(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId()))).apply(e))));
1 | Flux | map | METHOD_INVOCATION | roleRepository.findByNamesAndAssignableType_migrated(referenceType.name(), referenceId, names, assignableType.name()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findById(id)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)))
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return action.as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | action = action.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | reduce | METHOD_INVOCATION | action.then(Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce(Integer::sum))
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap((scope)->{
    JdbcRole.OAuthScope rScope = new JdbcRole.OAuthScope();
    rScope.setScope(scope);
    rScope.setRoleId(item.getId());
    return dbClient.insert().into(JdbcRole.OAuthScope.class).using(rScope).fetch().rowsUpdated();
}).reduce
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(resourceScopes).concatMap
1 | Mono | flatMap | METHOD_INVOCATION | return deleteScopes.then(action).as(trx::transactional).flatMap((i)->this.findById_migrated(item.getId()).single());
1 | Mono | then | METHOD_INVOCATION | deleteScopes.then(action).as
1 | Mono | single | METHOD_INVOCATION | (i)->this.findById_migrated(item.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | LOCAL_VARIABLE
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | return delete.then(deleteScopes.as((e)->trx.transactional(e).then()));
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | (e)->trx.transactional(e).then()
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(oauthScopeRepository.findAllByRole_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcRole.OAuthScope::getScope)).collectList())
1 | Flux | map | METHOD_INVOCATION | oauthScopeRepository.findAllByRole_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(JdbcRole.OAuthScope::getScope)).collectList
1 | Mono | zipWith | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeRole).zipWith(RxJava2Adapter.maybeToMono(scopes), RxJavaReactorMigrationUtil.toJdkBiFunction((role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
}));
1 | Mono | block | METHOD_INVOCATION | assertNull(repository.findById_migrated(attemptExpired.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(repository.findById_migrated(attemptExpired2.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(repository.findById_migrated(attemptNotExpired.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(repository.findById_migrated(attemptNotExpired.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(parRepository.findById_migrated(object1.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(parRepository.findById_migrated(object2.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(parRepository.findById_migrated(object1.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(parRepository.findById_migrated(object2.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(requestObjectRepository.findById_migrated(object1.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(requestObjectRepository.findById_migrated(object2.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(requestObjectRepository.findById_migrated(object1.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(requestObjectRepository.findById_migrated(object2.getId()).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken_migrated("my-token").block())
1 | Mono | block | METHOD_INVOCATION | assertNull(accessTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken_migrated("my-token").block())
1 | Mono | block | METHOD_INVOCATION | assertNull(accessTokenRepository.findByToken_migrated("my-token2").block())
1 | Flux | IMPORT
1 | Flux | blockFirst | METHOD_INVOCATION | Connection connection = Flux.from(connectionFactory.create()).blockFirst()
1 | Flux | from | METHOD_INVOCATION | Flux.from(connectionFactory.create()).blockFirst
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute()))
1 | Mono | block | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken_migrated("my-token").block())
1 | Mono | block | METHOD_INVOCATION | assertNull(refreshTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken_migrated("my-token").block())
1 | Mono | block | METHOD_INVOCATION | assertNull(refreshTokenRepository.findByToken_migrated("my-token2").block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(authorizationCodeRepository.findByCode_migrated(code).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(authorizationCodeRepository.findByCode_migrated(codeExpired).block())
1 | Mono | block | METHOD_INVOCATION | assertNotNull(authorizationCodeRepository.findByCode_migrated(code).block())
1 | Mono | block | METHOD_INVOCATION | assertNull(authorizationCodeRepository.findByCode_migrated(codeExpired).block())
1 | Mono | block | METHOD_INVOCATION | PermissionTicket ptValid = repository.create_migrated(permissionTicketNoExpireAt).block()
1 | Mono | block | METHOD_INVOCATION | PermissionTicket ptValid2 = repository.create_migrated(permissionTicket).block()
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | enrichProfile_migrated(context).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->{
    LOGGER.debug("User profile updated", user.getId());
    policyChain.doNext(request, response);
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    if (configuration.isExitOnError()) {
        LOGGER.warn("Update of user profile failed!", error.getMessage());
        policyChain.failWith(PolicyResult.failure(errorMessage));
    } else {
        LOGGER.info("Update of user profile failed!", error.getMessage());
        policyChain.doNext(request, response);
    }
}));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(userRepository.update_migrated(any())).thenReturn(Mono.error(new RuntimeException("Exception thrown for test")))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new Page<>(Collections.emptyList(), page, size));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(result);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.singletonMap("data", 0L));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyList());
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUser_migrated(domain, user).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {} and user: {}", domain, user);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, client).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {}, user: {} and client: {}", domain, user, client);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle((io.gravitee.am.model.oauth2.ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<ScopeApproval>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to save consent for domain: {}, client: {} and user: {} ", domain, client.getId(), approvals.get(0).getUserId());
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)));
}).apply(err))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle((io.gravitee.am.model.oauth2.ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle((io.gravitee.am.model.oauth2.ScopeApproval ident)->RxJava2Adapter.monoToSingle(scopeApprovalRepository.upsert_migrated(ident))).toList()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals)))).doOnError
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()).then())
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | then | METHOD_INVOCATION | (user)->scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then()
1 | Mono | flatMap | METHOD_INVOCATION | scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap
1 | Mono | error | METHOD_INVOCATION | scopeApprovalRepository.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId)))
1 | Mono | then | METHOD_INVOCATION | (scopeApproval)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.delete_migrated(consentId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | then | METHOD_INVOCATION | (user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdAndUserId_migrated(domain, user)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUser_migrated(domain, user)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then
1 | Mono | doOnError | METHOD_INVOCATION | (v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUser_migrated(domain, user)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(user).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | then | METHOD_INVOCATION | (user1)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)), RxJava2Adapter.monoToCompletable(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated(domain, clientId, user)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(domain, user, clientId)).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then
1 | Mono | doOnError | METHOD_INVOCATION | (v)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated(domain, user, clientId)).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidPathException("Path must not be null or empty"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidPathException("Path [" + path + "] is invalid"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidPathException("Path must start with a \'/\'"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidPathException("Path [" + path + "] is invalid"));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs)))
1 | Mono | then | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty(Mono.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty(Mono.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then());
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty(Mono.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleObs).switchIfEmpty(Mono.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId()))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.addOrUpdate_migrated(user.getReferenceId(), membership).then())
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userValidator.validate_migrated(user).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserRepository().findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user));
}).apply(y)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(user1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return getUserRepository().findByIdIn_migrated(ids).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by ids {}", userIds, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().findAll_migrated(referenceType, referenceId, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().search_migrated(referenceType, referenceId, query, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to search users for {} {} and query {}", referenceType, referenceId, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().search_migrated(referenceType, referenceId, filterCriteria, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())));
    }
    LOGGER.error("An error occurs while trying to search users for {} {} and filter {}", referenceType, referenceId, filterCriteria, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new UserNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(getUserRepository().findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new UserNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(user));
    }
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a user", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return RxJava2Adapter.monoToSingle(create_migrated(user));
    }
}).apply(v))))
1 | Mono | hasElement | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(user).then(getUserRepository().create_migrated(user)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userValidator.validate_migrated(user).then(getUserRepository().create_migrated(user)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v))))
1 | Mono | then | METHOD_INVOCATION | userValidator.validate_migrated(user).then(getUserRepository().create_migrated(user)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(user1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return RxJava2Adapter.monoToSingle(update_migrated(oldUser));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserRepository().findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return RxJava2Adapter.monoToSingle(update_migrated(oldUser));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | getUserRepository().findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | getUserRepository().findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new UserNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | getUserRepository().findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then()))
1 | Mono | then | METHOD_INVOCATION | credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then
1 | Flux | then | METHOD_INVOCATION | credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then
1 | Flux | flatMap | METHOD_INVOCATION | credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then
1 | Mono | then | METHOD_INVOCATION | credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMap((v)->credentialService.delete_migrated(v.getId())).then().then(getUserRepository().delete_migrated(userId)).then(eventService.create_migrated(event).then())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(groupService.findByMember_migrated(user.getId()).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(new ArrayList<>(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to enhance user {}", user.getId(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByMember_migrated(user.getId()).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(new ArrayList<>(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v))))
1 | Flux | collectList | METHOD_INVOCATION | groupService.findByMember_migrated(user.getId()).collectList().flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(new ArrayList<>(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    user.setRolesPermissions(roles1);
    return user;
})))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("Username [%s] is not a valid value", user.getUsername())));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new EmailFormatInvalidException(user.getEmail()));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("First name [%s] is not a valid value", user.getFirstName())));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("Last name [%s] is not a valid value", user.getLastName())));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("Display name [%s] is not a valid value", user.getDisplayName())));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("Nick name [%s] is not a valid value", user.getNickName())));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException(String.format("External id [%s] is not a valid value", user.getExternalId())));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return organizationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new OrganizationNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | organizationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new OrganizationNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return organizationRepository.count_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap((z)->createInternal_migrated(organization, null));
1 | Mono | filter | METHOD_INVOCATION | organizationRepository.count_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return organizationRepository.findById_migrated(organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return RxJava2Adapter.monoToSingle(createInternal_migrated(toCreate, byUser));
})));
1 | Mono | flatMap | METHOD_INVOCATION | organizationRepository.findById_migrated(organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, organization));
}).apply(v)))).switchIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(organizationId).flatMap((organization)->updateInternal_migrated(patchOrganization.patch(organization), updatedBy, organization));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return organizationRepository.create_migrated(toCreate).flatMap((createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then(Mono.just(createdOrganization))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(toCreate).principal(owner).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | organizationRepository.create_migrated(toCreate).flatMap((createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then(Mono.just(createdOrganization))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | organizationRepository.create_migrated(toCreate).flatMap((createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then(Mono.just(createdOrganization))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (createdOrganization)->RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then(Mono.just(createdOrganization))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then())
1 | Flux | ignoreElements | METHOD_INVOCATION | entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(entrypointService.createDefaults_migrated(createdOrganization).ignoreElements().then()), RxJava2Adapter.monoToCompletable(roleService.createDefaultRoles_migrated(createdOrganization.getId())))).then(Mono.just(createdOrganization))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return organizationRepository.update_migrated(organization).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(previous).principal(updatedBy).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | organizationRepository.update_migrated(organization).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous)))).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return membershipRepository.findByReference_migrated(referenceId, referenceType).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by reference id {} and reference type {}", referenceId, referenceType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return membershipRepository.findByMember_migrated(memberId, memberType).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by member id {} and member type {}", memberId, memberType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return checkMember_migrated(organizationId, membership).then(checkRole_migrated(organizationId, membership)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return RxJava2Adapter.monoToSingle(createInternal_migrated(newMembership, principal));
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
        }).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))));
    }
})));
1 | Mono | then | METHOD_INVOCATION | checkMember_migrated(organizationId, membership).then(checkRole_migrated(organizationId, membership)).then
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.update_migrated(updateMembership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(membership1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Mono.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))).flatMap((role)->findByCriteria_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).next().switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, null));
}))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Mono.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))).flatMap
1 | Mono | error | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Mono.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | (role)->findByCriteria_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).next().switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(membership, null));
})))
1 | Flux | next | METHOD_INVOCATION | findByCriteria_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).next().switchIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable))))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap
1 | Mono | error | METHOD_INVOCATION | membershipRepository.findById_migrated(membershipId).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId)))
1 | Mono | doOnError | METHOD_INVOCATION | (membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipRepository.delete_migrated(membershipId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.findByCriteria_migrated(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux())))).ignoreElements().then().then(addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, principal));
1 | Mono | then | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux())))).ignoreElements().then().then
1 | Flux | ignoreElements | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux())))).ignoreElements().then
1 | Flux | switchIfEmpty | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux())))).ignoreElements
1 | Flux | defer | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux()))))
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(domainMembership, principal));
})).flux())
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.findByCriteria_migrated(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux())))).ignoreElements().then();
1 | Flux | ignoreElements | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux())))).ignoreElements().then
1 | Flux | switchIfEmpty | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux())))).ignoreElements
1 | Flux | defer | METHOD_INVOCATION | this.findByCriteria_migrated(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flux.defer(RxJavaReactorMigrationUtil.callableAsSupplier(()->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux()))))
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(roleService.findDefaultRole_migrated(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return RxJava2Adapter.monoToSingle(this.createInternal_migrated(environmentMembership, principal));
})).flux())
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.create_migrated(membership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.create_migrated(membership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(membershipRepository.create_migrated(membership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Membership>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipRepository.create_migrated(membership).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(membership1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(membership1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return orgUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId()).then();
1 | Mono | then | METHOD_INVOCATION | return groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId()).then();
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty(Mono.error(new InvalidRoleException("Invalid role"))).then();
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty(Mono.error(new InvalidRoleException("Invalid role"))).then
1 | Mono | filter | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap
1 | Mono | error | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId()))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | error | METHOD_INVOCATION | roleService.findById_migrated(membership.getRoleId()).switchIfEmpty(Mono.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipRepository.findByCriteria_migrated(membership.getReferenceType(), membership.getReferenceId(), criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role1)->role1.getAssignableType() == membership.getReferenceType() && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId()))))).switchIfEmpty(Mono.error(new InvalidRoleException("Invalid role")))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return factorRepository.findByDomain_migrated(domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find factors by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factor).flatMap((v)->factorRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factor).flatMap((v)->factorRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).factor(factor1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factor).flatMap((v)->factorRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factor).flatMap((v)->factorRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | checkFactorConfiguration_migrated(factor).flatMap((v)->factorRepository.create_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(factor1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new FactorConfigurationException(CONFIG_KEY_COUNTRY_CODES, code));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(factor);
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(factorRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FactorNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Factor>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FactorNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | factorRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FactorNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | factorRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FactorNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | checkFactorConfiguration_migrated(factorToUpdate).flatMap((v)->factorRepository.update_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(factor1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(factor1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId))).flatMap
1 | Mono | error | METHOD_INVOCATION | factorRepository.findById_migrated(factorId).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByFactor_migrated(factorId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(y))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(factorRepository.delete_migrated(factorId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findAll(0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData())));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return emailRepository.findAll_migrated(referenceType, referenceId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all emails for {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return emailRepository.findAll_migrated().onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all emails", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return emailRepository.findByClient_migrated(referenceType, referenceId, client).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap
1 | Mono | error | METHOD_INVOCATION | emailRepository.findById_migrated(emailId).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailRepository.delete_migrated(emailId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkEmailUniqueness_migrated(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkEmailUniqueness_migrated(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkEmailUniqueness_migrated(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkEmailUniqueness_migrated(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | checkEmailUniqueness_migrated(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return RxJava2Adapter.monoToSingle(emailRepository.create_migrated(email));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(email)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(emailRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new EmailNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Email>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new EmailNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | emailRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new EmailNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | emailRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new EmailNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | emailRepository.update_migrated(emailToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(email)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(email)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new EmailAlreadyExistsException(emailTemplate);
    }
    return true;
}));
1 | Mono | hasElement | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement().map
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(eventRepository.create_migrated(event))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Event>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an event", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(eventRepository.findByTimeFrame_migrated(from, to).collectList())).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Event>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find events by time frame", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)));
}).apply(err))))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventRepository.findByTimeFrame_migrated(from, to).collectList())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)))
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return tagRepository.findAll_migrated(organizationId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all tags", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(id, organizationId).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).tag(tag).principal(principal).type(EventType.TAG_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).referenceId(organizationId).principal(principal).type(EventType.TAG_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(id, organizationId).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).tag(tag).principal(principal).type(EventType.TAG_CREATED)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(id, organizationId).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(id, organizationId).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return RxJava2Adapter.monoToSingle(tagRepository.create_migrated(tag));
    }
}).apply(v)))))
1 | Mono | hasElement | METHOD_INVOCATION | tagRepository.findById_migrated(id, organizationId).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Tag, SingleSource<Tag>>toJdkFunction((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Tag>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagRepository.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Tag, SingleSource<Tag>>toJdkFunction((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | tagRepository.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap
1 | Mono | error | METHOD_INVOCATION | tagRepository.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tagRepository.update_migrated(tag).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | tagRepository.update_migrated(tag).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable))))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap
1 | Mono | error | METHOD_INVOCATION | tagRepository.findById_migrated(tagId, orgaizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))
1 | Mono | doOnError | METHOD_INVOCATION | (tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(tagRepository.delete_migrated(tagId).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return RxJava2Adapter.monoToSingle(domainService.update_migrated(domain.getId(), domain)).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}))))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)))
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return reporterRepository.findAll_migrated().onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all reporter", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return reporterRepository.findByDomain_migrated(domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by domain: {}", domain, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new ReporterNotFoundException("Reporter type " + this.environment.getProperty("management.type") + " not found"));
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporter).flatMap((ignore)->reporterRepository.create_migrated(reporter)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporter).flatMap((ignore)->reporterRepository.create_migrated(reporter)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).reporter(reporter1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporter).flatMap((ignore)->reporterRepository.create_migrated(reporter)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporter).flatMap((ignore)->reporterRepository.create_migrated(reporter)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | checkReporterConfiguration_migrated(reporter).flatMap((ignore)->reporterRepository.create_migrated(reporter)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(reporter1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(reporterRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ReporterNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Reporter>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a reporter", ex);
    String message = "An error occurs while trying to update a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reporterRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ReporterNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | reporterRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ReporterNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | reporterRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ReporterNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | checkReporterConfiguration_migrated(reporterToUpdate).flatMap((ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | (ignore)->reporterRepository.update_migrated(reporterToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(reporter1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(reporter1)
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(reporter1))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap
1 | Mono | error | METHOD_INVOCATION | reporterRepository.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reporterRepository.delete_migrated(reporterId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(reporter))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))))).count()).flatMap((v)->RxJava2Adapter.singleToMono((Single<Reporter>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Long, Single<Reporter>>)(reporters)->{
    if (reporters > 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter));
    }
}).apply(v))))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(reporterRepository.findByDomain_migrated(reporter.getDomain()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME)))))
1 | Flux | map | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(reporter.getDomain()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter
1 | Flux | filter | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(reporter.getDomain()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map
1 | Flux | filter | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(reporter.getDomain()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ReporterConfigurationException("Filename already defined")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(reporter))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(false);
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((throwable)->{
    logger.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
})))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return credentialRepository.findByUserId_migrated(referenceType, referenceId, userId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return credentialRepository.findByUsername_migrated(referenceType, referenceId, username).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and username: {}", referenceType, referenceId, username, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return credentialRepository.findByCredentialId_migrated(referenceType, referenceId, credentialId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and credential ID: {}", referenceType, referenceId, credentialId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(credentialRepository.create_migrated(credential))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Credential>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(credentialRepository.findById_migrated(credential.getId()).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId()))).flatMap((y)->credentialRepository.update_migrated(credential)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Credential>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialRepository.findById_migrated(credential.getId()).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId()))).flatMap((y)->credentialRepository.update_migrated(credential)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | credentialRepository.findById_migrated(credential.getId()).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId()))).flatMap
1 | Mono | error | METHOD_INVOCATION | credentialRepository.findById_migrated(credential.getId()).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(credentialRepository.findByCredentialId_migrated(referenceType, referenceId, credentialId)).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(credentialToUpdate));
})).ignoreElements().then();
1 | Flux | ignoreElements | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(credentialRepository.findByCredentialId_migrated(referenceType, referenceId, credentialId)).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return RxJava2Adapter.monoToSingle(credentialRepository.update_migrated(credentialToUpdate));
})).ignoreElements().then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->credentialRepository.delete_migrated(id)).then())
1 | Mono | flatMap | METHOD_INVOCATION | credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->credentialRepository.delete_migrated(id)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | credentialRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findById_migrated(id).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | alertTriggerRepository.findById_migrated(id).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findById_migrated(id).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertTrigger)->alertTrigger.getReferenceType() == referenceType && alertTrigger.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id)));
1 | Mono | filter | METHOD_INVOCATION | alertTriggerRepository.findById_migrated(id).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertTrigger)->alertTrigger.getReferenceType() == referenceType && alertTrigger.getReferenceId().equals(referenceId))).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | alertTriggerRepository.findById_migrated(id).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertTrigger)->alertTrigger.getReferenceType() == referenceType && alertTrigger.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertTriggerNotFoundException(id)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findByCriteria_migrated(referenceType, referenceId, criteria).next().flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return RxJava2Adapter.monoToSingle(createInternal_migrated(alertTrigger, byUser));
})));
1 | Mono | flatMap | METHOD_INVOCATION | alertTriggerRepository.findByCriteria_migrated(referenceType, referenceId, criteria).next().flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(toUpdate, byUser, alertTrigger));
}).apply(v)))).switchIfEmpty
1 | Flux | next | METHOD_INVOCATION | alertTriggerRepository.findByCriteria_migrated(referenceType, referenceId, criteria).next().flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.getById_migrated(referenceType, referenceId, alertTriggerId).flatMap((alertTrigger)->deleteInternal_migrated(alertTrigger, byUser)).then();
1 | Mono | flatMap | METHOD_INVOCATION | this.getById_migrated(referenceType, referenceId, alertTriggerId).flatMap((alertTrigger)->deleteInternal_migrated(alertTrigger, byUser)).then
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return alertTriggerRepository.create_migrated(toCreate).flatMap((created)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then(Mono.just(created))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(toCreate).principal(byUser).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | alertTriggerRepository.create_migrated(toCreate).flatMap((created)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then(Mono.just(created))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | alertTriggerRepository.create_migrated(toCreate).flatMap((created)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then(Mono.just(created))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (created)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then(Mono.just(created))
1 | Mono | then | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then
1 | Mono | just | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).then().then(Mono.just(created))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return alertTriggerRepository.update_migrated(alertTrigger).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(previous).principal(updatedBy).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | alertTriggerRepository.update_migrated(alertTrigger).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | alertTriggerRepository.update_migrated(alertTrigger).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (updated)->eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))
1 | Mono | then | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then
1 | Mono | just | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTrigger.getId()).then(eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy).throwable(throwable))));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertTriggerRepository.delete_migrated(alertTrigger.getId()).then(eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).then()))
1 | Mono | then | METHOD_INVOCATION | alertTriggerRepository.delete_migrated(alertTrigger.getId()).then(eventService.create_migrated(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).then())
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return entrypointRepository.findById_migrated(id, organizationId).switchIfEmpty(Mono.error(new EntrypointNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | entrypointRepository.findById_migrated(id, organizationId).switchIfEmpty(Mono.error(new EntrypointNotFoundException(id)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(entrypointId, organizationId).flatMap((v)->RxJava2Adapter.singleToMono((Single<Entrypoint>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Entrypoint, Single<Entrypoint>>)(oldEntrypoint)->{
    Entrypoint toUpdate = new Entrypoint(oldEntrypoint);
    toUpdate.setName(updateEntrypoint.getName());
    toUpdate.setDescription(updateEntrypoint.getDescription());
    toUpdate.setUrl(updateEntrypoint.getUrl());
    toUpdate.setTags(updateEntrypoint.getTags());
    toUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validate_migrated(toUpdate, oldEntrypoint).then(entrypointRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))));
}).apply(v)));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(validate_migrated(toUpdate, oldEntrypoint).then(entrypointRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))))
1 | Mono | doOnError | METHOD_INVOCATION | validate_migrated(toUpdate, oldEntrypoint).then(entrypointRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | entrypointRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint)))).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findById_migrated(id, organizationId).flatMap((entrypoint)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable))))).then();
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(id, organizationId).flatMap((entrypoint)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable))))).then
1 | Mono | doOnError | METHOD_INVOCATION | (entrypoint)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(entrypointRepository.delete_migrated(id)).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable))))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return validate_migrated(toCreate).then(entrypointRepository.create_migrated(toCreate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable)))));
1 | Mono | doOnError | METHOD_INVOCATION | validate_migrated(toCreate).then(entrypointRepository.create_migrated(toCreate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | entrypointRepository.create_migrated(toCreate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED)))).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidEntrypointException("Only the url of the default entrypoint can be updated."));
1 | Mono | then | METHOD_INVOCATION | return organizationService.findById_migrated(entrypoint.getOrganizationId()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | organizationService.findById_migrated(entrypoint.getOrganizationId()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidEntrypointException("Entrypoint must have a valid url."));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(findByDomain(domain, 0, Integer.MAX_VALUE)).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedResources)->(pagedResources.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedResources.getData())));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById_migrated(id, organizationId).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | environmentRepository.findById_migrated(id, organizationId).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById_migrated(id).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | environmentRepository.findById_migrated(id).switchIfEmpty(Mono.error(new EnvironmentNotFoundException(id)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return environmentRepository.count_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap((z)->createInternal_migrated(environment, null));
1 | Mono | filter | METHOD_INVOCATION | environmentRepository.count_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((aLong)->aLong == 0)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById_migrated(environmentId, organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
}).apply(v)))).switchIfEmpty(Mono.defer(()->organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Organization organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
})).flatMap((toCreate)->createInternal_migrated(toCreate, byUser))));
1 | Mono | flatMap | METHOD_INVOCATION | environmentRepository.findById_migrated(environmentId, organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
}).apply(v)))).switchIfEmpty
1 | Mono | defer | METHOD_INVOCATION | environmentRepository.findById_migrated(environmentId, organizationId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(updateInternal_migrated(environment, byUser));
}).apply(v)))).switchIfEmpty(Mono.defer(()->organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Organization organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
})).flatMap((toCreate)->createInternal_migrated(toCreate, byUser))))
1 | Mono | flatMap | METHOD_INVOCATION | ()->organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Organization organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
})).flatMap((toCreate)->createInternal_migrated(toCreate, byUser))
1 | Mono | map | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Organization organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
})).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return environmentRepository.create_migrated(toCreate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(toCreate).principal(createdBy).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | environmentRepository.create_migrated(toCreate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy)))).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return environmentRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(toUpdate).principal(updatedBy).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | environmentRepository.update_migrated(toUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate)))).doOnError
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle((io.gravitee.am.model.Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain)).flatMapObservable(Observable::fromIterable).flatMapSingle((io.gravitee.am.model.Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(totalToken))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(countByClientId_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(countByClientId_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((io.gravitee.am.model.Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<TotalToken>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((io.gravitee.am.model.Application ident)->RxJava2Adapter.monoToSingle(countByClientId_migrated(ident))).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(totalToken))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(accessTokenRepository.deleteByUserId_migrated(userId).then(refreshTokenRepository.deleteByUserId_migrated(userId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(0L);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(0L);
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("Domain name cannot contain \'/\' character"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("Domain can only work in vhost mode"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("VHost mode requires at least one VHost"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("Only one vhost can be used to override entrypoint"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("You must select one vhost to override entrypoint"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("\'/\' path is not allowed in context-path mode"));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host is required"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] is invalid"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] must be a subdomain of " + domainRestrictions));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host port [" + port + "] is invalid"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] overlap path defined in another security domain"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] is overlapped by another security domain"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] overlap path defined in another security domain"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] is overlapped by another security domain"));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return botDetectionRepository.findByReference_migrated(ReferenceType.DOMAIN, domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find bot detections by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.create_migrated(botDetection).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.create_migrated(botDetection).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).botDetection(detection)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.create_migrated(botDetection).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.create_migrated(botDetection).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(detection)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.findById_migrated(id).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<BotDetection>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update bot detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.findById_migrated(id).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | botDetectionRepository.findById_migrated(id).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | botDetectionRepository.findById_migrated(id).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | botDetectionRepository.update_migrated(botDetectionToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(detection)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(detection)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).flatMap
1 | Mono | error | METHOD_INVOCATION | botDetectionRepository.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionRepository.delete_migrated(botDetectionId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domainId).flatMap((v)->RxJava2Adapter.singleToMono((Single<BotDetection>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<Application>, Single<BotDetection>>)(applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
}).apply(v))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(botDetection))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(botDetection))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.search_migrated(domain, query, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Scope>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain and query : {} {}", domain, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap((v)->scopeRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap((v)->scopeRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).scope(scope)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap((v)->scopeRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap((v)->scopeRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap((v)->scopeRepository.create_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->validateIconUri_migrated(v)).flatMap
1 | Mono | map | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(scope)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(scopeRepository.create_migrated(scope));
}).apply(v)))).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | scopeRepository.findByDomainAndKey_migrated(domain, scopeKey).hasElement().flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(scope)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return RxJava2Adapter.monoToSingle(update_migrated(domain, scopeToUpdate, oldScope, principal));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return this.validateIconUri_migrated(toUpdate).flatMap(scopeRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope1)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).oldValue(oldValue).scope(scope1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | this.validateIconUri_migrated(toUpdate).flatMap(scopeRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((scope1)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).oldValue(oldValue).scope(scope1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | this.validateIconUri_migrated(toUpdate).flatMap(scopeRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | this.validateIconUri_migrated(toUpdate).flatMap(scopeRepository::update_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(scope1)
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Scope>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)));
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeRepository.update_migrated(scope));
}).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | scopeRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(scope)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(scope)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable))))).then
1 | Mono | flatMap | METHOD_INVOCATION | scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).flatMap
1 | Mono | error | METHOD_INVOCATION | scopeRepository.findById_migrated(scopeId).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(scope))
1 | Mono | doOnError | METHOD_INVOCATION | (scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(scopeRepository.delete_migrated(scopeId)).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(roleService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(scope.getDomain())).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return RxJava2Adapter.monoToSingle(applicationService.update_migrated(application));
}).toList())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomain_migrated(domain, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Scope>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyList());
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKeys_migrated(domain, scopeKeys).collectList())).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Scope>>>toJdkFunction((ex)->{
    String keys = scopeKeys != null ? String.join(",", scopeKeys) : null;
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope keys: {}", domain, keys, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)));
}).apply(err))))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeRepository.findByDomainAndKeys_migrated(domain, scopeKeys).collectList())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | flatMap | METHOD_INVOCATION | return findByDomain_migrated(domain, 0, Integer.MAX_VALUE).map(RxJavaReactorMigrationUtil.toJdkFunction((domainSet)->domainSet.getData().stream().map(Scope::getKey).collect(Collectors.toSet()))).flatMap((domainScopes)->this.validateScope_migrated(domainScopes, scopes));
1 | Mono | map | METHOD_INVOCATION | findByDomain_migrated(domain, 0, Integer.MAX_VALUE).map(RxJavaReactorMigrationUtil.toJdkFunction((domainSet)->domainSet.getData().stream().map(Scope::getKey).collect(Collectors.toSet()))).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("scope " + scope + " is not valid."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new MalformedIconUriException(scope.getIconUri()));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(scope);
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return identityProviderRepository.findAll_migrated().onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all identity providers", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return identityProviderRepository.findAll_migrated(referenceType, referenceId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find identity providers by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).identityProvider(identityProvider1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.create_migrated(identityProvider).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(identityProvider1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<IdentityProvider>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderRepository.update_migrated(identityToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(identityProvider1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(identityProvider1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderRepository.findById_migrated(referenceType, referenceId, identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByIdentityProvider_migrated(identityProviderId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(y))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderRepository.delete_migrated(identityProviderId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return serviceResourceRepository.findByReference_migrated(ReferenceType.DOMAIN, domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).resource(factor1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceResourceRepository.create_migrated(resource).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(resource1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(serviceResourceRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ServiceResource>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceResourceRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | serviceResourceRepository.update_migrated(factorToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(resource1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(resource1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((java.util.List<io.gravitee.am.model.Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply((ServiceResource)y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((java.util.List<io.gravitee.am.model.Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply((ServiceResource)y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap((y)->factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((java.util.List<io.gravitee.am.model.Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId))).flatMap
1 | Mono | error | METHOD_INVOCATION | serviceResourceRepository.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((java.util.List<io.gravitee.am.model.Factor> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Factor> factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(y));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))
1 | Flux | collectList | METHOD_INVOCATION | factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap
1 | Flux | filter | METHOD_INVOCATION | factorService.findByDomain_migrated(domain).filter(RxJavaReactorMigrationUtil.toJdkPredicate((io.gravitee.am.model.Factor factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(y))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then())
1 | Mono | then | METHOD_INVOCATION | serviceResourceRepository.delete_migrated(resourceId).then(eventService.create_migrated(event)).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.search_migrated(domain, query, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to search applications with query {} for domain {}", query, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return applicationRepository.findByCertificate_migrated(certificate).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by certificate", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return applicationRepository.findByIdentityProvider_migrated(identityProvider).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by identity provider", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return applicationRepository.findByFactor_migrated(factor).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by factor", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationRepository.findByDomainAndExtensionGrant_migrated(domain, extensionGrant)).collect(()->(Set<Application>)new HashSet(), Set::add)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<Application>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return applicationRepository.findByIdIn_migrated(ids).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find applications by ids {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(create0_migrated(domain, application, principal))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No domain set on application"));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(create0_migrated(application.getDomain(), application, null))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No domain set on application"));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(application.getId()).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId()))).flatMap((y)->update0_migrated(y.getDomain(), y, application, null)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(application.getId()).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId()))).flatMap((y)->update0_migrated(y.getDomain(), y, application, null)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById_migrated(application.getId()).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId()))).flatMap
1 | Mono | error | METHOD_INVOCATION | applicationRepository.findById_migrated(application.getId()).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return RxJava2Adapter.monoToSingle(update0_migrated(domain, existingApplication, toPatch, principal));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Application>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to renew client secret for application {} and domain {}", id, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)));
}).apply(err))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(application));
}).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)))
1 | Mono | just | METHOD_INVOCATION | (domain1)->Mono.just(application1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | applicationRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))
1 | Mono | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then
1 | Flux | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationRepository.delete_migrated(id).then(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(eventService.create_migrated(event)).toCompletable())).then(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomainAndClient_migrated(application.getDomain(), application.getId()).flatMap((v)->formService.delete_migrated(application.getDomain(), v.getId())).then()).then(membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | membershipService.findByReference_migrated(application.getId(), ReferenceType.APPLICATION).flatMap((v)->membershipService.delete_migrated(v.getId())).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.count_migrated())).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.countByDomain_migrated(domainId))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications for domain {}", domainId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet()))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<TopApplication>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find top applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet()))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet()))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<TopApplication>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find top applications for domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(applicationRepository.findByDomain_migrated(domain, 0, Integer.MAX_VALUE)).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet()))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.findTotalTokensByApplication_migrated(application).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap(applicationRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap(applicationRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap(applicationRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap(applicationRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap(applicationRepository::create_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap(this::setDefaultCertificate_migrated).flatMap
1 | Mono | then | METHOD_INVOCATION | checkApplicationUniqueness_migrated(domain, application).then(validateApplicationMetadata_migrated(application)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(application1))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap
1 | Mono | error | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist")))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated((String)principal.getAdditionalInformation().get(Claims.organization), membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application)))
1 | Mono | just | METHOD_INVOCATION | (domain1)->Mono.just(application)
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return validateApplicationMetadata_migrated(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders_migrated).flatMap(applicationRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | validateApplicationMetadata_migrated(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders_migrated).flatMap(applicationRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | validateApplicationMetadata_migrated(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders_migrated).flatMap(applicationRepository::update_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | validateApplicationMetadata_migrated(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders_migrated).flatMap(applicationRepository::update_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | validateApplicationMetadata_migrated(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((domain1)->Mono.just(application1)))
1 | Mono | just | METHOD_INVOCATION | (domain1)->Mono.just(application1)
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | map | METHOD_INVOCATION | return certificateService.findByDomain_migrated(application.getDomain()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates == null || certificates.isEmpty()) {
        return application;
    }
    Certificate defaultCertificate = certificates.stream().filter((certificate)->"Default".equals(certificate.getName())).findFirst().orElse(certificates.get(0));
    application.setCertificate(defaultCertificate.getId());
    return application;
}));
1 | Flux | collectList | METHOD_INVOCATION | certificateService.findByDomain_migrated(application.getDomain()).collectList().map
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findByDomainAndClientId_migrated(domain, clientId).hasElement().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientId_migrated(domain, clientId).hasElement().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then
1 | Mono | hasElement | METHOD_INVOCATION | findByDomainAndClientId_migrated(domain, clientId).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((optionalIdentities)->{
    if (optionalIdentities == null || optionalIdentities.isEmpty()) {
        application.setIdentities(Collections.emptySet());
    } else {
        Set<String> identities = optionalIdentities.stream().filter(Optional::isPresent).map(Optional::get).map(IdentityProvider::getId).collect(Collectors.toSet());
        application.setIdentities(identities);
    }
    return application;
}));
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(identity).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | flatMap | METHOD_INVOCATION | return GrantTypeUtils.validateGrantTypes_migrated(application).flatMap(this::validateRedirectUris_migrated).flatMap(this::validateScopes_migrated).flatMap(this::validateTokenEndpointAuthMethod_migrated).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, Single<Application>>)(io.gravitee.am.model.Application ident)->RxJava2Adapter.monoToSingle(validateTlsClientAuth_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes_migrated(application).flatMap(this::validateRedirectUris_migrated).flatMap(this::validateScopes_migrated).flatMap(this::validateTokenEndpointAuthMethod_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes_migrated(application).flatMap(this::validateRedirectUris_migrated).flatMap(this::validateScopes_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes_migrated(application).flatMap(this::validateRedirectUris_migrated).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(application.getDomain()).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain()))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(application.getDomain()).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(application))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("non valid default scopes"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("non valid scope approvals"));
1 | Mono | flatMap | METHOD_INVOCATION | return scopeService.validateScope_migrated(application.getDomain(), scopes).flatMap((v)->RxJava2Adapter.singleToMono((Single<Application>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Application>>)(isValid)->{
    if (!isValid) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}).apply(v)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("non valid scopes")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(application))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Invalid token_endpoint_auth_method for service application (client_credentials grant type)"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return certificateRepository.findByDomain_migrated(domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find certificates by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return certificateRepository.findAll_migrated().onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all certificates", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(newCertificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map(RxJavaReactorMigrationUtil.toJdkFunction((schema)->objectMapper.readValue(schema, CertificateSchema.class))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.getSchema_migrated(newCertificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map
1 | Mono | error | METHOD_INVOCATION | certificatePluginService.getSchema_migrated(newCertificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType())))
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->{
    auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).certificate(certificate));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->{
    auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).certificate(certificate));
})).doOnError
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
})).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)));
}).apply(v)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap(certificateRepository::create_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(certificate)
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Certificate>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CertificateWithSchema, Single<Certificate>>)(oldCertificate)->{
    Single<Certificate> certificateSingle = Single.create((emitter)->{
        Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
        certificateToUpdate.setName(updateCertificate.getName());
        try {
            CertificateSchema certificateSchema = oldCertificate.getSchema();
            JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
            JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
            certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                try {
                    String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                    String fileInformation = certificateConfiguration.get(key).asText();
                    if (!oldFileInformation.equals(fileInformation)) {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    }
                } catch (IOException ex) {
                    LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                    emitter.onError(ex);
                }
            });
            certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
            certificateToUpdate.setUpdatedAt(new Date());
        } catch (Exception ex) {
            LOGGER.error("An error occurs while trying to update certificate configuration", ex);
            emitter.onError(ex);
        }
        emitter.onSuccess(certificateToUpdate);
    });
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
        Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
    }).apply(o)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
        LOGGER.error("An error occurs while trying to update a certificate", ex);
        throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
    }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)))));
}).apply(v)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id))))
1 | Mono | error | METHOD_INVOCATION | certificateRepository.findById_migrated(id).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))))
1 | Mono | error | METHOD_INVOCATION | certificatePluginService.getSchema_migrated(certificate.getType()).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Certificate>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->certificateRepository.update_migrated(t)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(certificate1)
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return certificateRepository.update_migrated(certificate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}));
1 | Mono | flatMap | METHOD_INVOCATION | certificateRepository.update_migrated(certificate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(certificate1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(certificate1)
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap((y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId))).flatMap
1 | Mono | error | METHOD_INVOCATION | certificateRepository.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(applicationService.findByCertificate_migrated(certificateId)).count()).flatMap((java.lang.Long v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(y))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(certificateRepository.delete_migrated(certificateId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificatePluginService.getSchema_migrated(certificate.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
})))
1 | Mono | map | METHOD_INVOCATION | certificatePluginService.getSchema_migrated(certificate.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No application to validate grant"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException(REFRESH_TOKEN + " grant type must be associated with one of " + String.join(", ", allowedRefreshTokenGrant)));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(application);
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(repository.findByDomain_migrated(domain, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Resource>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(repository.findByDomainAndClient_migrated(domain, client, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Resource>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {} and client {}", domain, client, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return this.findByDomainAndClientAndResources_migrated(domain, client, Arrays.asList(resourceId)).next();
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateScopes_migrated(toCreate).flatMap(this::validateIconUri_migrated).flatMap(repository::create_migrated).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(r)->{
    AccessPolicy accessPolicy = new AccessPolicy();
    accessPolicy.setName("Deny all");
    accessPolicy.setDescription("Default deny access policy. Created by Gravitee.io.");
    accessPolicy.setType(AccessPolicyType.GROOVY);
    accessPolicy.setCondition("{\"onRequestScript\":\"import io.gravitee.policy.groovy.PolicyResult.State\\nresult.state = State.FAILURE;\"}");
    accessPolicy.setEnabled(true);
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)));
}).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | this.validateScopes_migrated(toCreate).flatMap(this::validateIconUri_migrated).flatMap(repository::create_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateScopes_migrated(toCreate).flatMap(this::validateIconUri_migrated).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->r)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map(RxJavaReactorMigrationUtil.toJdkFunction((toUpdate)->toUpdate.setUpdatedAt(new Date()))).flatMap(this::validateScopes_migrated).flatMap(this::validateIconUri_migrated).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<Resource>>)(Resource ident)->RxJava2Adapter.monoToSingle(repository.update_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map(RxJavaReactorMigrationUtil.toJdkFunction((toUpdate)->toUpdate.setUpdatedAt(new Date()))).flatMap(this::validateScopes_migrated).flatMap(this::validateIconUri_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map(RxJavaReactorMigrationUtil.toJdkFunction((toUpdate)->toUpdate.setUpdatedAt(new Date()))).flatMap(this::validateScopes_migrated).flatMap
1 | Mono | map | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map(RxJavaReactorMigrationUtil.toJdkFunction((toUpdate)->toUpdate.setUpdatedAt(new Date()))).flatMap
1 | Mono | map | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction(newResource::update)).map
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(Single::just).apply(y)))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((found)->repository.delete_migrated(resourceId)).then();
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap((found)->repository.delete_migrated(resourceId)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, userId, resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap((v)->accessPolicyRepository.delete_migrated(v.getId())).then().then(repository.delete_migrated(resource.getId()));
1 | Flux | then | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap((v)->accessPolicyRepository.delete_migrated(v.getId())).then().then
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId())).flatMap((v)->accessPolicyRepository.delete_migrated(v.getId())).then
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((r)->RxJava2Adapter.fluxToFlowable(accessPolicyRepository.findByDomainAndResource_migrated(domain, r.getId())))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(ex));
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
}));
1 | Mono | flatMapMany | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((r)->RxJava2Adapter.fluxToFlowable(accessPolicyRepository.findByDomainAndResource_migrated(domain, r.getId())))).onErrorResume
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMapMany
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource)))
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(ex))
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return accessPolicyRepository.findByResources_migrated(resourceIds).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find access policies by resource ids {}", resourceIds, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(accessPolicyRepository.countByResource_migrated(resourceId))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to count access policies by resource id {}", resourceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicy)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<AccessPolicy>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to create an access policy for domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.create_migrated(accessPolicy));
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.update_migrated(policyToUpdate));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<AccessPolicy>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicyId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(accessPolicyRepository.update_migrated(policyToUpdate));
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicyId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource)))
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById_migrated(accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->accessPolicyRepository.delete_migrated(accessPolicy)).then())
1 | Mono | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->accessPolicyRepository.delete_migrated(accessPolicy)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap
1 | Mono | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource_migrated(domain, client, user, resource).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new MissingScopeException());
1 | Mono | flatMap | METHOD_INVOCATION | return scopeService.findByDomainAndKeys_migrated(toValidate.getDomain(), toValidate.getResourceScopes()).flatMap((v)->RxJava2Adapter.singleToMono((Single<Resource>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Scope>, Single<Resource>>)(scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(toValidate));
}).apply(v)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(",")))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(toValidate))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new MalformedIconUriException(toValidate.getIconUri()));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(toValidate);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.update_migrated(loginAttempt));
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return RxJava2Adapter.monoToSingle(loginAttemptRepository.create_migrated(loginAttempt));
    }
})).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<LoginAttempt>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to add a login attempt", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)));
}).apply(err))))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | loginAttemptRepository.findByCriteria_migrated(criteria).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(loginAttemptRepository.findById_migrated(id).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id))))
1 | Mono | error | METHOD_INVOCATION | loginAttemptRepository.findById_migrated(id).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
}))).map
1 | Mono | fromSupplier | METHOD_INVOCATION | authContextRepository.findLastByTransactionId_migrated(transactionId).switchIfEmpty(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})))
1 | Mono | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(attempts).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    if (throwable instanceof AuthenticationFlowConsistencyException) {
        if (++retryCount < maxRetries) {
            return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
        }
    }
    return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(throwable))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return userRepository.findAll_migrated(ReferenceType.DOMAIN, domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users by domain {}", domain, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userValidator.validate_migrated(user).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserRepository().update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(user1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(user1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userRepository.countByReference_migrated(ReferenceType.DOMAIN, domain))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userRepository.countByApplication_migrated(domain, application))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Long>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userRepository.statistics_migrated(query))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Map<Object, Object>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to get users analytics : {}", query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User user = new User(oldUser);
    List<EnrolledFactor> enrolledFactors = user.getFactors();
    if (enrolledFactors == null || enrolledFactors.isEmpty()) {
        enrolledFactors = Collections.singletonList(enrolledFactor);
    } else {
        if (Boolean.TRUE.equals(enrolledFactor.isPrimary())) {
            enrolledFactors.forEach((e)->e.setPrimary(false));
        }
        Optional<EnrolledFactor> optFactor = enrolledFactors.stream().filter((existingFactor)->existingFactor.getFactorId().equals(enrolledFactor.getFactorId())).findFirst();
        if (optFactor.isPresent()) {
            EnrolledFactor factorToUpdate = new EnrolledFactor(optFactor.get());
            factorToUpdate.setStatus(enrolledFactor.getStatus());
            factorToUpdate.setChannel(enrolledFactor.getChannel());
            factorToUpdate.setSecurity(enrolledFactor.getSecurity());
            factorToUpdate.setPrimary(enrolledFactor.isPrimary());
            enrolledFactors.removeIf((ef)->factorToUpdate.getFactorId().equals(ef.getFactorId()));
            enrolledFactors.add(factorToUpdate);
        } else {
            enrolledFactors.add(enrolledFactor);
        }
    }
    user.setFactors(enrolledFactors);
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.SMS == enrolledFactor.getChannel().getType()) {
        List<Attribute> phoneNumbers = user.getPhoneNumbers();
        if (phoneNumbers == null) {
            phoneNumbers = new ArrayList<>();
            user.setPhoneNumbers(phoneNumbers);
        }
        String enrolledPhoneNumber = enrolledFactor.getChannel().getTarget();
        if (!phoneNumbers.stream().filter((p)->p.getValue().equals(enrolledPhoneNumber)).findFirst().isPresent()) {
            Attribute newPhoneNumber = new Attribute();
            newPhoneNumber.setType("mobile");
            newPhoneNumber.setPrimary(phoneNumbers.isEmpty());
            newPhoneNumber.setValue(enrolledPhoneNumber);
            phoneNumbers.add(newPhoneNumber);
        }
    }
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.EMAIL == enrolledFactor.getChannel().getType()) {
        String email = user.getEmail();
        String enrolledEmail = enrolledFactor.getChannel().getTarget();
        if (email == null) {
            user.setEmail(enrolledEmail);
        } else if (!email.equals(enrolledEmail)) {
            List<Attribute> emails = user.getEmails();
            if (emails == null) {
                emails = new ArrayList<>();
                user.setEmails(emails);
            }
            if (!emails.stream().filter((p)->p.getValue().equals(enrolledEmail)).findFirst().isPresent()) {
                Attribute additionalEmail = new Attribute();
                additionalEmail.setPrimary(false);
                additionalEmail.setValue(enrolledEmail);
                emails.add(additionalEmail);
            }
        }
    }
    return RxJava2Adapter.monoToSingle(update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
        if (needToAuditUserFactorsOperation(user1, oldUser)) {
            removeSensitiveFactorsData(user1.getFactors());
            removeSensitiveFactorsData(oldUser.getFactors());
            auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
        }
    })).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
}).apply(y))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
})).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then())
1 | Mono | doOnError | METHOD_INVOCATION | update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return formRepository.findAll_migrated(referenceType, referenceId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return formRepository.findByClient_migrated(referenceType, referenceId, client).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(findByDomainAndClient_migrated(domain, clientSource)).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return RxJava2Adapter.monoToSingle(this.create_migrated(domain, clientTarget, form));
})).collectList();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(formRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FormNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FormNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | formRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FormNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | formRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FormNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | formRepository.update_migrated(formToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(page)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFormUniqueness_migrated(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFormUniqueness_migrated(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkFormUniqueness_migrated(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Form>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkFormUniqueness_migrated(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | checkFormUniqueness_migrated(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return RxJava2Adapter.monoToSingle(formRepository.create_migrated(form));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(page)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(page)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap
1 | Mono | error | METHOD_INVOCATION | formRepository.findById_migrated(referenceType, referenceId, formId).switchIfEmpty(Mono.error(new FormNotFoundException(formId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formRepository.delete_migrated(formId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(maybeSource).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new FormAlreadyExistsException(formTemplate);
    }
    return true;
}));
1 | Mono | hasElement | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybeSource).hasElement().map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Mono.error(new DomainNotFoundException(hrid))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when trying to find a domain using its hrid: {}", hrid, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)));
}).apply(err))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Mono.error(new DomainNotFoundException(hrid))))
1 | Mono | error | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Mono.error(new DomainNotFoundException(hrid)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)))
1 | Flux | RETURN_TYPE
1 | Mono | flatMapMany | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->RxJava2Adapter.fluxToFlowable(domainRepository.search_migrated(environmentId, query)))))
1 | Mono | map | METHOD_INVOCATION | environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany
1 | Flux | RETURN_TYPE
1 | Mono | flatMapMany | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.String ident)->RxJava2Adapter.fluxToFlowable(domainRepository.findAllByReferenceId_migrated(ident)))))
1 | Mono | map | METHOD_INVOCATION | environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findAll_migrated().collectList())).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Domain>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find all domains", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)));
}).apply(err))))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findAll_migrated().collectList())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return domainRepository.findByIdIn_migrated(ids).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find domains by id in {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).domain(domain).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).domain(domain).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap((v)->createDefaultCertificate_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap((v)->createSystemScopes_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))));
    }
}).apply(v)))).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, environmentId, hrid).hasElement().flatMap
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain))))
1 | Mono | then | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then
1 | Mono | flatMap | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap
1 | Mono | defer | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((e)->validateDomain_migrated(domain, e)).then().then(Mono.defer(()->domainRepository.create_migrated(domain)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(domain))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap
1 | Mono | error | METHOD_INVOCATION | roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist")))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(domain)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
}).apply(y)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))));
}).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain))))
1 | Mono | defer | METHOD_INVOCATION | validateDomain_migrated(domain).then(Mono.defer(()->domainRepository.update_migrated(domain)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(domain1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Domain>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch))).flatMap
1 | Mono | defer | METHOD_INVOCATION | validateDomain_migrated(toPatch).then(Mono.defer(()->domainRepository.update_migrated(toPatch)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(domain1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(domain1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainRepository.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))))
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(domainRepository.delete_migrated(domainId)).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then
1 | Mono | flatMap | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then
1 | Flux | filter | METHOD_INVOCATION | flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then
1 | Mono | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then())
1 | Flux | flatMap | METHOD_INVOCATION | alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then
1 | Flux | then | METHOD_INVOCATION | applicationService.findByDomain_migrated(domainId).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->RxJava2Adapter.monoToCompletable(applicationService.delete_migrated(a.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(certificateService.findByDomain_migrated(domainId).flatMap((v)->certificateService.delete_migrated(v.getId())).then()).then(identityProviderService.findByDomain_migrated(domainId).flatMap((v)->identityProviderService.delete_migrated(domainId, v.getId())).then()).then(extensionGrantService.findByDomain_migrated(domainId).flatMap((v)->extensionGrantService.delete_migrated(domainId, v.getId())).then()).then(roleService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->RxJava2Adapter.monoToCompletable(roleService.delete_migrated(ReferenceType.DOMAIN, domainId, r.getId()))).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(userService.findByDomain_migrated(domainId).flatMap((v)->userService.delete_migrated(v.getId())).then()).then(groupService.findByDomain_migrated(domainId).flatMap((v)->groupService.delete_migrated(ReferenceType.DOMAIN, domainId, v.getId())).then()).then(scopeService.findByDomain_migrated(domainId, 0, Integer.MAX_VALUE).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->RxJava2Adapter.monoToCompletable(scopeService.delete_migrated(s.getId(), true))).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, domainId).flatMap((v)->emailTemplateService.delete_migrated(v.getId())).then()).then(formService.findByDomain_migrated(domainId).flatMap((v)->formService.delete_migrated(domainId, v.getId())).then()).then(reporterService.findByDomain_migrated(domainId).flatMap((v)->reporterService.delete_migrated(v.getId())).then()).then(flowService.findAll_migrated(ReferenceType.DOMAIN, domainId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((v)->flowService.delete_migrated(v.getId())).then()).then(membershipService.findByReference_migrated(domainId, ReferenceType.DOMAIN).flatMap((v)->membershipService.delete_migrated(v.getId())).then()).then(factorService.findByDomain_migrated(domainId).flatMap((v)->factorService.delete_migrated(domainId, v.getId())).then()).then(resourceService.findByDomain_migrated(domainId).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map((io.gravitee.am.model.uma.Resource ident)->RxJava2Adapter.monoToCompletable(resourceService.delete_migrated(ident))).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria()).flatMap((v)->alertTriggerService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then()).then(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then())
1 | Flux | flatMap | METHOD_INVOCATION | alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria()).flatMap((v)->alertNotifierService.delete_migrated(v.getReferenceType(), v.getReferenceId(), v.getId(), principal)).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain.getId(), scope));
}).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return certificateService.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->domain));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidDomainException("Domain must be attached to an environment"));
1 | Mono | then | METHOD_INVOCATION | return domainRepository.findByHrid_migrated(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then());
    }
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | domainRepository.findByHrid_migrated(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then());
    }
}).apply(y)))).then
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | domainRepository.findByHrid_migrated(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap
1 | Mono | map | METHOD_INVOCATION | domainRepository.findByHrid_migrated(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then())
1 | Mono | flatMap | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).flatMap((v)->validateDomain_migrated(domain, v)).then
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return DomainValidator.validate_migrated(domain, environment.getDomainRestrictions()).then(findAll_migrated().flatMap((v)->VirtualHostValidator.validateDomainVhosts_migrated(domain, v)).then());
1 | Mono | then | METHOD_INVOCATION | DomainValidator.validate_migrated(domain, environment.getDomainRestrictions()).then(findAll_migrated().flatMap((v)->VirtualHostValidator.validateDomainVhosts_migrated(domain, v)).then())
1 | Mono | flatMap | METHOD_INVOCATION | findAll_migrated().flatMap((v)->VirtualHostValidator.validateDomainVhosts_migrated(domain, v)).then
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return Flux.merge(findAllSystem_migrated(assignableType), roleRepository.findAll_migrated(referenceType, referenceId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || assignableType == role.getAssignableType())).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find roles by {}: {} assignable to {}", referenceType, referenceId, assignableType, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex)));
}));
1 | Flux | filter | METHOD_INVOCATION | Flux.merge(findAllSystem_migrated(assignableType), roleRepository.findAll_migrated(referenceType, referenceId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || assignableType == role.getAssignableType())).onErrorResume
1 | Flux | merge | METHOD_INVOCATION | Flux.merge(findAllSystem_migrated(assignableType), roleRepository.findAll_migrated(referenceType, referenceId)).filter
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new RoleNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(roleRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
})).switchIfEmpty(Mono.error(new RoleNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return roleRepository.findByNamesAndAssignableType_migrated(referenceType, referenceId, roleNames, assignableType).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    String joinedRoles = roleNames.stream().collect(Collectors.joining(", "));
    LOGGER.error("An error occurs while trying to find roles : {}", joinedRoles, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleRepository.findByNameAndAssignableType_migrated(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findByIdIn_migrated(ids)).collect(()->(Set<Role>)new HashSet<Role>(), Set::add)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Set<Role>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find roles by ids", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(newRole.getName(), roleId, referenceType, referenceId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(newRole.getName(), roleId, referenceType, referenceId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).role(role)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(newRole.getName(), roleId, referenceType, referenceId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(newRole.getName(), roleId, referenceType, referenceId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | checkRoleUniqueness_migrated(newRole.getName(), roleId, referenceType, referenceId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(role)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
    }).apply(t)))));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
    }).apply(t)))));
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(role))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRoleUniqueness_migrated(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
}).apply(t)))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | roleRepository.update_migrated(roleToUpdate).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)));
}).apply(x)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(role)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable))))).then
1 | Mono | map | METHOD_INVOCATION | roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map
1 | Mono | error | METHOD_INVOCATION | roleRepository.findById_migrated(referenceType, referenceId, roleId).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId)))
1 | Mono | doOnError | METHOD_INVOCATION | (role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleRepository.delete_migrated(roleId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType_migrated(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType_migrated(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
        }).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        }).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))).then
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType_migrated(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).flatMap
1 | Mono | map | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType_migrated(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.create_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(role1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Role>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleRepository.update_migrated(role).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(role1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(role1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(roleRepository.findAll_migrated(referenceType, referenceId)).collect(HashSet<Role>::new, Set::add)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<Role>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<HashSet<Role>, Single<Set<Role>>>)(roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(roles));
}).apply(v)));
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(roles))
1 | Flux | RETURN_TYPE
1 | Flux | filter | METHOD_INVOCATION | return roleRepository.findAll_migrated(ReferenceType.PLATFORM, Platform.DEFAULT).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.isSystem() && !role.isInternalOnly())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->assignableType == null || role.getAssignableType() == assignableType));
1 | Flux | filter | METHOD_INVOCATION | roleRepository.findAll_migrated(ReferenceType.PLATFORM, Platform.DEFAULT).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.isSystem() && !role.isInternalOnly())).filter
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return extensionGrantRepository.findByDomain_migrated(domain).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find extension grants by domain", ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.findByDomainAndName_migrated(domain, newExtensionGrant.getName()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.findByDomainAndName_migrated(domain, newExtensionGrant.getName()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).extensionGrant(extensionGrant)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.findByDomainAndName_migrated(domain, newExtensionGrant.getName()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.findByDomainAndName_migrated(domain, newExtensionGrant.getName()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))))
1 | Mono | hasElement | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName_migrated(domain, newExtensionGrant.getName()).hasElement().flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.create_migrated(extensionGrant).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(extensionGrant1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id))).flatMap((y)->extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((java.util.Optional<io.gravitee.am.model.ExtensionGrant> v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.ExtensionGrant> existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))))).flatMap((v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ExtensionGrant>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id))).flatMap((y)->extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((java.util.Optional<io.gravitee.am.model.ExtensionGrant> v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.ExtensionGrant> existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))))).flatMap((v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
}).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id))).flatMap((y)->extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((java.util.Optional<io.gravitee.am.model.ExtensionGrant> v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.ExtensionGrant> existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(id).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((java.util.Optional<io.gravitee.am.model.ExtensionGrant> v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.ExtensionGrant> existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(y));
}).apply(v))))
1 | Mono | single | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single
1 | Mono | map | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName_migrated(domain, updateExtensionGrant.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(y))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | extensionGrantRepository.update_migrated(extensionGrantToUpdate).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(extensionGrant)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(extensionGrant)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((java.util.Set<io.gravitee.am.model.Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Set<io.gravitee.am.model.Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (java.util.Set<io.gravitee.am.model.Application> clients1, java.util.List<io.gravitee.am.model.ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((java.util.Set<io.gravitee.am.model.Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Set<io.gravitee.am.model.Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (java.util.Set<io.gravitee.am.model.Application> clients1, java.util.List<io.gravitee.am.model.ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap((y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((java.util.Set<io.gravitee.am.model.Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Set<io.gravitee.am.model.Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (java.util.Set<io.gravitee.am.model.Application> clients1, java.util.List<io.gravitee.am.model.ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMap
1 | Mono | error | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))
1 | Mono | flatMap | METHOD_INVOCATION | (y)->applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType() + "~" + y.getId()).flatMap((java.util.Set<io.gravitee.am.model.Application> v)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Set<io.gravitee.am.model.Application> applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(RxJava2Adapter.monoToSingle(applicationService.findByDomainAndExtensionGrant_migrated(domain, y.getGrantType())), RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList()), (java.util.Set<io.gravitee.am.model.Application> clients1, java.util.List<io.gravitee.am.model.ExtensionGrant> extensionGrants)->{
        if (clients1.size() == 0) {
            return y;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (y.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return y;
        }
    });
}).apply(v)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findByDomain_migrated(domain).collectList())
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantRepository.delete_migrated(extensionGrantId).then(eventService.create_migrated(event)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return resourceService.findByDomainAndClientAndResources_migrated(domain, client, requestedResourcesIds).collectList().flatMap((fetchedResourceSet)->this.validatePermissionRequest_migrated(requestedPermission, fetchedResourceSet, requestedResourcesIds).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.uma.PermissionRequest> permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
}))).flatMap((v)->RxJava2Adapter.singleToMono((Single<PermissionTicket>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PermissionTicket, Single<PermissionTicket>>)(PermissionTicket ident)->RxJava2Adapter.monoToSingle(repository.create_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | resourceService.findByDomainAndClientAndResources_migrated(domain, client, requestedResourcesIds).collectList().flatMap((fetchedResourceSet)->this.validatePermissionRequest_migrated(requestedPermission, fetchedResourceSet, requestedResourcesIds).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.uma.PermissionRequest> permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
}))).flatMap
1 | Flux | collectList | METHOD_INVOCATION | resourceService.findByDomainAndClientAndResources_migrated(domain, client, requestedResourcesIds).collectList().flatMap
1 | Mono | map | METHOD_INVOCATION | (fetchedResourceSet)->this.validatePermissionRequest_migrated(requestedPermission, fetchedResourceSet, requestedResourcesIds).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.uma.PermissionRequest> permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
}))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return repository.findById_migrated(id).switchIfEmpty(Mono.error(new InvalidPermissionTicketException())).flatMap((y)->repository.delete_migrated(y.getId()).then(Mono.just(y)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | repository.findById_migrated(id).switchIfEmpty(Mono.error(new InvalidPermissionTicketException())).flatMap
1 | Mono | error | METHOD_INVOCATION | repository.findById_migrated(id).switchIfEmpty(Mono.error(new InvalidPermissionTicketException()))
1 | Mono | then | METHOD_INVOCATION | (y)->repository.delete_migrated(y.getId()).then(Mono.just(y))
1 | Mono | just | METHOD_INVOCATION | repository.delete_migrated(y.getId()).then(Mono.just(y))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_OWNER);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(InvalidPermissionRequestException.INVALID_SCOPE_RESOURCE);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedPermissions);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return this.installationRepository.find_migrated().switchIfEmpty(Mono.error(new InstallationNotFoundException()));
1 | Mono | error | METHOD_INVOCATION | this.installationRepository.find_migrated().switchIfEmpty(Mono.error(new InstallationNotFoundException()))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return this.installationRepository.find_migrated().switchIfEmpty(createInternal_migrated());
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return get_migrated().flatMap((v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(installation)->{
    Installation toUpdate = new Installation(installation);
    toUpdate.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate));
}).apply(v)));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return getOrInitialize_migrated().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->installation.getAdditionalInformation().putAll(additionalInformation))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Installation>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Installation, Single<Installation>>)(io.gravitee.am.model.Installation ident)->RxJava2Adapter.monoToSingle(updateInternal_migrated(ident))).apply(v)));
1 | Mono | doOnSuccess | METHOD_INVOCATION | getOrInitialize_migrated().doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->installation.getAdditionalInformation().putAll(additionalInformation))).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.installationRepository.find_migrated().flatMap((installation)->installationRepository.delete_migrated(installation.getId())).then();
1 | Mono | flatMap | METHOD_INVOCATION | this.installationRepository.find_migrated().flatMap((installation)->installationRepository.delete_migrated(installation.getId())).then
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(groupRepository.findAll_migrated(referenceType, referenceId, page, size))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<Group>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)))
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return groupRepository.findAll_migrated(referenceType, referenceId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return groupRepository.findByMember_migrated(memberId).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
})).switchIfEmpty(Mono.error(new GroupNotFoundException(id)));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(referenceType, referenceId, id)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
})).switchIfEmpty(Mono.error(new GroupNotFoundException(id)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(referenceType, referenceId, groupId).flatMap((v)->RxJava2Adapter.singleToMono((Single<Page<User>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Page<User>>>)(group)->{
    if (group.getMembers() == null || group.getMembers().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)));
    } else {
        List<String> sortedMembers = group.getMembers().stream().sorted().collect(Collectors.toList());
        List<String> pagedMemberIds = sortedMembers.subList(Math.min(sortedMembers.size(), page), Math.min(sortedMembers.size(), page + size));
        CommonUserService service = (group.getReferenceType() == ReferenceType.ORGANIZATION ? organizationUserService : userService);
        return RxJava2Adapter.monoToSingle(service.findByIdIn_migrated(pagedMemberIds).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))));
    }
}).apply(v)));
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new Page<>(null, page, size)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findByIdIn_migrated(pagedMemberIds).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new Page<>(users, page, pagedMemberIds.size()))))
1 | Flux | collectList | METHOD_INVOCATION | service.findByIdIn_migrated(pagedMemberIds).collectList().map
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return groupRepository.findByIdIn_migrated(ids).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a group using ids {}", ids, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex)));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap((v)->groupRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap((v)->groupRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).group(group)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap((v)->groupRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap((v)->groupRepository.create_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap((v)->groupRepository.create_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->setMembers_migrated(v)).flatMap
1 | Mono | map | METHOD_INVOCATION | findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | findByName_migrated(referenceType, referenceId, newGroup.getName()).hasElement().map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(group)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id).flatMap((e)->groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
}))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a group", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findById_migrated(referenceType, referenceId, id).flatMap((e)->groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
}))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, id).flatMap((e)->groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
}))).flatMap
1 | Mono | map | METHOD_INVOCATION | (e)->groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
}))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map
1 | Mono | map | METHOD_INVOCATION | groupRepository.findByName_migrated(referenceType, referenceId, updateGroup.getName()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | setMembers_migrated(groupToUpdate).flatMap((v)->groupRepository.update_migrated(v)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(group)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(group)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(findById_migrated(referenceType, referenceId, groupId).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable))))).then())
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, groupId).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable))))).then
1 | Mono | doOnError | METHOD_INVOCATION | (group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupRepository.delete_migrated(groupId).then(RxJava2Adapter.completableToMono(Completable.fromSingle(RxJava2Adapter.monoToSingle(eventService.create_migrated(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(referenceType, referenceId, groupId).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)));
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1)))).doOnError
1 | Mono | then | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate))).doOnSuccess
1 | Mono | defer | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->groupRepository.update_migrated(groupToUpdate)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return service.findByIdIn_migrated(userMembers).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((userIds)->{
    group.setMembers(userIds);
    return group;
}));
1 | Flux | collectList | METHOD_INVOCATION | service.findByIdIn_migrated(userMembers).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).collectList().map
1 | Flux | map | METHOD_INVOCATION | service.findByIdIn_migrated(userMembers).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).collectList
1 | Mono | just | METHOD_INVOCATION | return Mono.just(group);
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return this.alertNotifierRepository.findById_migrated(notifierId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertNotifierNotFoundException(notifierId)));
1 | Mono | filter | METHOD_INVOCATION | this.alertNotifierRepository.findById_migrated(notifierId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId))).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | this.alertNotifierRepository.findById_migrated(notifierId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId))).switchIfEmpty(Mono.error(new AlertNotifierNotFoundException(notifierId)))
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.getById_migrated(referenceType, referenceId, alertNotifierId).flatMap((v)->RxJava2Adapter.singleToMono((Single<AlertNotifier>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AlertNotifier, Single<AlertNotifier>>)(alertNotifier)->{
    AlertNotifier toUpdate = patchAlertNotifier.patch(alertNotifier);
    if (toUpdate.equals(alertNotifier)) {
        return RxJava2Adapter.monoToSingle(Mono.just(alertNotifier));
    }
    return RxJava2Adapter.monoToSingle(updateInternal_migrated(toUpdate, byUser, alertNotifier));
}).apply(v)));
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(alertNotifier))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.getById_migrated(referenceType, referenceId, notifierId).flatMap((alertNotifier)->deleteInternal_migrated(alertNotifier, byUser)).then();
1 | Mono | flatMap | METHOD_INVOCATION | this.getById_migrated(referenceType, referenceId, notifierId).flatMap((alertNotifier)->deleteInternal_migrated(alertNotifier, byUser)).then
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return alertNotifierRepository.create_migrated(toCreate).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(toCreate).principal(byUser).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | alertNotifierRepository.create_migrated(toCreate).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | alertNotifierRepository.create_migrated(toCreate).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then(Mono.just(updated))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then(Mono.just(updated))
1 | Mono | then | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then
1 | Mono | just | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).then().then(Mono.just(updated))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return alertNotifierRepository.update_migrated(alertNotifier).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(previous).principal(updatedBy).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | alertNotifierRepository.update_migrated(alertNotifier).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | alertNotifierRepository.update_migrated(alertNotifier).flatMap((updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (updated)->eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))
1 | Mono | then | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then
1 | Mono | just | METHOD_INVOCATION | eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).then().then(Mono.just(updated))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifier.getId()).then(eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy).throwable(throwable))));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(alertNotifierRepository.delete_migrated(alertNotifier.getId()).then(eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).then()))
1 | Mono | then | METHOD_INVOCATION | alertNotifierRepository.delete_migrated(alertNotifier.getId()).then(eventService.create_migrated(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).then())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return flowRepository.findAll_migrated(referenceType, referenceId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex)));
}));
1 | Flux | switchIfEmpty | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType, referenceId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId))).onErrorResume
1 | Flux | sort | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType, referenceId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty
1 | Flux | filter | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType, referenceId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort
1 | Flux | fromIterable | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType, referenceId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->(!excludeApps) ? true : f.getApplication() == null)).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId)))
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return flowRepository.findByApplication_migrated(referenceType, referenceId, application).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->{
    flow.setApplication(application);
    return flow;
}))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {} and application {}", referenceType, referenceId, application, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex)));
}));
1 | Flux | switchIfEmpty | METHOD_INVOCATION | flowRepository.findByApplication_migrated(referenceType, referenceId, application).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->{
    flow.setApplication(application);
    return flow;
}))).onErrorResume
1 | Flux | sort | METHOD_INVOCATION | flowRepository.findByApplication_migrated(referenceType, referenceId, application).sort(getFlowComparator()).switchIfEmpty
1 | Flux | map | METHOD_INVOCATION | flowRepository.findByApplication_migrated(referenceType, referenceId, application).sort(getFlowComparator()).switchIfEmpty(Flux.fromIterable(defaultFlows(referenceType, referenceId)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->{
    flow.setApplication(application);
    return flow;
})))
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(defaultFlows(referenceType, referenceId)).map
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(flowRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | flowRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | flowRepository.findById_migrated(referenceType, referenceId, id).switchIfEmpty(Mono.error(new FlowNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | flowRepository.update_migrated(flowToUpdate).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(flow1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | flowRepository.findById_migrated(id).switchIfEmpty(Mono.error(new FlowNotFoundException(id)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then())
1 | Mono | then | METHOD_INVOCATION | flowRepository.delete_migrated(id).then(eventService.create_migrated(event)).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidParameterException("Multiple flows have the same Id"));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(flowRepository.findAll_migrated(referenceType, referenceId).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable((java.lang.String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<Flow>>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update flows", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.findAll_migrated(referenceType, referenceId).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable((java.lang.String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))));
}).apply(v))))
1 | Flux | collectList | METHOD_INVOCATION | flowRepository.findAll_migrated(referenceType, referenceId).collectList().flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? RxJava2Adapter.monoToSingle(update_migrated(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate)) : RxJava2Adapter.monoToSingle(create0_migrated(referenceType, referenceId, application, flowToCreateOrUpdate, principal));
}).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable((java.lang.String ident)->RxJava2Adapter.monoToCompletable(delete_migrated(ident))).toSingleDefault(persistedFlows))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Flow>>toJdkFunction((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowRepository.create_migrated(flow).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(eventService.create_migrated(event).flatMap((__)->Mono.just(flow1)))
1 | Mono | just | METHOD_INVOCATION | (__)->Mono.just(flow1)
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(entrypoint))
1 | Mono | empty | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(new Organization()))
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEntrypoint))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEntrypoint))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(new Organization()))
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEntrypoint))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEntrypoint))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEntrypoint))
1 | Mono | empty | METHOD_INVOCATION | when(entrypointRepository.delete_migrated(ENTRYPOINT_ID)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(entrypointRepository.findById_migrated(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same"))))
1 | Flux | just | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b"))))
1 | Mono | just | METHOD_INVOCATION | when(repository.create_migrated(any())).thenReturn(Mono.just(new PermissionTicket().setId("success")))
1 | Flux | just | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same"))))
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()).setUserId("user_" + s.getResourceId()))))
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(request).map
1 | Flux | just | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")), new Resource().setId("two").setResourceScopes(Arrays.asList("not", "same"))))
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(request).map(RxJavaReactorMigrationUtil.toJdkFunction((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()))))
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(request).map
1 | Mono | just | METHOD_INVOCATION | when(repository.create_migrated(any())).thenReturn(Mono.just(new PermissionTicket().setId("success")))
1 | Flux | just | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b", "c")), new Resource().setId("two").setResourceScopes(Arrays.asList("c", "d"))))
1 | Mono | just | METHOD_INVOCATION | when(repository.create_migrated(permissionTicketArgumentCaptor.capture())).thenReturn(Mono.just(new PermissionTicket().setId("success")))
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated("id")).thenReturn(Mono.just(new PermissionTicket()))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findById_migrated("id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated("id")).thenReturn(Mono.just(new PermissionTicket().setId("id")))
1 | Mono | empty | METHOD_INVOCATION | when(repository.delete_migrated("id")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(scopeApprovalRepository.findById_migrated("my-consent")).thenReturn(Mono.just(new ScopeApproval()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.findById_migrated("my-consent")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(scopeApprovalRepository.findById_migrated("my-consent")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser_migrated(DOMAIN, "userId")).thenReturn(Flux.just(dummyScopeApproval))
1 | Flux | error | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser_migrated(DOMAIN, "userId")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).thenReturn(Flux.just(dummyScopeApproval))
1 | Flux | error | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient_migrated(DOMAIN, "userId", "clientId")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("my-domain", "client-id", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("my-domain", "client-id", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.delete_migrated("my-consent")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeApprovalRepository.findById_migrated("my-consent")).thenReturn(Mono.just(scopeApproval))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated("user-id")).thenReturn(Mono.just(new User()))
1 | Flux | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser_migrated("my-domain", "user-id")).thenReturn(Flux.just(scopeApproval))
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUser_migrated("my-domain", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdAndUserId_migrated("my-domain", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdAndUserId_migrated("my-domain", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userService.findById_migrated("user-id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated("user-id")).thenReturn(Mono.just(new User()))
1 | Flux | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient_migrated("my-domain", "user-id", "client-id")).thenReturn(Flux.just(scopeApproval))
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUserAndClient_migrated("my-domain", "user-id", "client-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("my-domain", "client-id", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId_migrated("my-domain", "client-id", "user-id")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userService.findById_migrated("user-id")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.just(new BotDetection()))
1 | Mono | empty | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(botDetectionRepository.findByReference_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new BotDetection()))
1 | Flux | error | METHOD_INVOCATION | when(botDetectionRepository.findByReference_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.create_migrated(any(BotDetection.class))).thenReturn(Mono.just(new BotDetection()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(botDetectionRepository.create_migrated(any())).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.just(new BotDetection()))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.update_migrated(any(BotDetection.class))).thenReturn(Mono.just(new BotDetection()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated("bot-detection")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated(detection.getId())).thenReturn(Mono.just(detection))
1 | Mono | empty | METHOD_INVOCATION | when(botDetectionRepository.delete_migrated(detection.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated(detection.getId())).thenReturn(Mono.just(detection))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(botDetectionRepository.findById_migrated(detection.getId())).thenReturn(Mono.just(detection))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Sets.newHashSet(app)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated("my-group")).thenReturn(Mono.just(new Group()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findById_migrated("my-group")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(groupRepository.findById_migrated("my-group")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(groupRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new Group()))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(DOMAIN).collectList())
1 | Flux | error | METHOD_INVOCATION | when(groupRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(Mono.just(pagedGroups))
1 | Mono | error | METHOD_INVOCATION | when(groupRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.create_migrated(any(Group.class))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(groupRepository.create_migrated(any(Group.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Mono.just(new Group()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.just(group))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, DOMAIN, updateGroup.getName())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.update_migrated(any(Group.class))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.just(new Group()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.just(new Group()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.delete_migrated("my-group")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.just(new Group()))
1 | Mono | error | METHOD_INVOCATION | when(groupRepository.delete_migrated("my-group")).thenReturn(Mono.error(TechnicalException::new))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.update_migrated(any())).thenReturn(Mono.just(new Group()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.update_migrated(any())).thenReturn(Mono.just(new Group()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Flux | just | METHOD_INVOCATION | when(userService.findByIdIn_migrated(any())).thenReturn(Flux.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Mono.just(group))
1 | Flux | just | METHOD_INVOCATION | when(organizationUserService.findByIdIn_migrated(any())).thenReturn(Flux.just(new User()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(new Domain()))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(new Domain()))
1 | Flux | error | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findByIdIn_migrated(Arrays.asList("1", "2"))).thenReturn(Flux.just(new Domain()))
1 | Flux | error | METHOD_INVOCATION | when(domainRepository.findByIdIn_migrated(Arrays.asList("1", "2"))).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(new Environment()))
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.create_migrated(any(Domain.class))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.create_migrated(anyString(), any(NewSystemScope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(certificateService.create_migrated(eq(domain.getId()))).thenReturn(Mono.just(new Certificate()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(membershipService.addOrUpdate_migrated(eq(ORGANIZATION_ID), any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).thenReturn(Mono.just(new Role()))
1 | Mono | error | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(new Environment()))
1 | Flux | empty | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.empty())
1 | Mono | error | METHOD_INVOCATION | when(domainRepository.create_migrated(any(Domain.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Mono.just(new Domain()))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(new Environment()))
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.update_migrated(any(Domain.class))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(new Environment()))
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.update_migrated(any(Domain.class))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(new Environment()))
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.update_migrated(any(Domain.class))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findByHrid_migrated(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Mono.just(otherDomain))
1 | Mono | error | METHOD_INVOCATION | when(domainRepository.findById_migrated("my-domain")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated(DOMAIN_ID)).thenReturn(Mono.just(domain))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.delete_migrated(DOMAIN_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(mockApplications))
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(certificate))
1 | Mono | empty | METHOD_INVOCATION | when(certificateService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(identityProvider))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderService.delete_migrated(eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(extensionGrantService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(extensionGrant))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantService.delete_migrated(eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(Collections.singleton(role)))
1 | Mono | empty | METHOD_INVOCATION | when(roleService.delete_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(userService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(scope), 0, 1)))
1 | Mono | empty | METHOD_INVOCATION | when(scopeService.delete_migrated(SCOPE_ID, true)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(groupService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(group))
1 | Mono | empty | METHOD_INVOCATION | when(groupService.delete_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(formService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(form))
1 | Mono | empty | METHOD_INVOCATION | when(formService.delete_migrated(eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flux.just(email))
1 | Mono | empty | METHOD_INVOCATION | when(emailTemplateService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(reporterService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(reporter))
1 | Mono | empty | METHOD_INVOCATION | when(reporterService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flux.just(flow))
1 | Mono | empty | METHOD_INVOCATION | when(flowService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByReference_migrated(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(Flux.just(membership))
1 | Mono | empty | METHOD_INVOCATION | when(membershipService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(factorService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(factor))
1 | Mono | empty | METHOD_INVOCATION | when(factorService.delete_migrated(DOMAIN_ID, FACTOR_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(resourceService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(new HashSet<>(Collections.singletonList(resource))))
1 | Mono | empty | METHOD_INVOCATION | when(resourceService.delete_migrated(resource)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flux.just(alertTrigger))
1 | Mono | empty | METHOD_INVOCATION | when(alertTriggerService.delete_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_TRIGGER_ID), isNull())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(Flux.just(alertNotifier))
1 | Mono | empty | METHOD_INVOCATION | when(alertNotifierService.delete_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_NOTIFIER_ID), isNull())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated(DOMAIN_ID)).thenReturn(Mono.just(domain))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.delete_migrated(DOMAIN_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(Collections.emptySet()))
1 | Flux | empty | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(identityProviderService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(extensionGrantService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(Collections.emptySet()))
1 | Flux | empty | METHOD_INVOCATION | when(userService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, 1)))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(formService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(emailTemplateService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(reporterService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByReference_migrated(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(factorService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(resourceService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.just(Collections.emptySet()))
1 | Flux | empty | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(domainRepository.findById_migrated(DOMAIN_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(domainRepository.findById_migrated(DOMAIN_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated(DOMAIN_ID)).thenReturn(Mono.just(domain))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAllByCriteria_migrated(eq(criteria))).thenReturn(Flux.just(domain))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.findById_migrated("my-resource")).thenReturn(Mono.just(new ServiceResource()))
1 | Mono | empty | METHOD_INVOCATION | when(resourceRepository.findById_migrated("my-resource")).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(resourceRepository.findByReference_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new ServiceResource()))
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.create_migrated(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(Mono.just(record))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(resourceRepository.create_migrated(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(Mono.error(new TechnicalException()))
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.findById_migrated(record.getId())).thenReturn(Mono.just(record))
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.update_migrated(argThat((bean)->bean.getId().equals(record.getId())))).thenReturn(Mono.just(record))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(resourceRepository.findById_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(resourceRepository.findById_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.findById_migrated(record.getId())).thenReturn(Mono.just(record))
1 | Mono | empty | METHOD_INVOCATION | when(resourceRepository.delete_migrated(record.getId())).thenReturn(Mono.empty())
1 | Flux | empty | METHOD_INVOCATION | when(factorService.findByDomain_migrated(DOMAIN)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(resourceRepository.findById_migrated(record.getId())).thenReturn(Mono.just(record))
1 | Flux | just | METHOD_INVOCATION | when(factorService.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(factor))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(userRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new User()))
1 | Flux | error | METHOD_INVOCATION | when(userRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findAll_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(Mono.just(pageUsers))
1 | Mono | error | METHOD_INVOCATION | when(userRepository.findAll_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain_migrated(DOMAIN, "my-user")).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain_migrated(DOMAIN, "my-user")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain_migrated(DOMAIN, "my-user")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Mono.just(new User()))
1 | Mono | error | METHOD_INVOCATION | when(userRepository.update_migrated(any(User.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.delete_migrated("my-user")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.delete_migrated("my-user")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flux.just(credential))
1 | Mono | empty | METHOD_INVOCATION | when(credentialService.delete_migrated(credential.getId())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Flux | just | METHOD_INVOCATION | when(formRepository.findByClient_migrated(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flux.just(formOne, formTwo))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Mono.just(new Form()))
1 | Flux | just | METHOD_INVOCATION | when(formRepository.findByClient_migrated(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flux.just(formOne))
1 | Flux | just | METHOD_INVOCATION | when(formRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.just(form))
1 | Flux | empty | METHOD_INVOCATION | when(formRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.empty())
1 | Flux | error | METHOD_INVOCATION | when(formRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame_migrated(0, 1)).thenReturn(Flux.just(new Event()))
1 | Flux | error | METHOD_INVOCATION | when(eventRepository.findByTimeFrame_migrated(0, 1)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(eventRepository.create_migrated(any(Event.class))).thenReturn(Mono.just(newEvent))
1 | Mono | error | METHOD_INVOCATION | when(eventRepository.create_migrated(any(Event.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(membershipRepository.create_migrated(any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(membershipRepository.create_migrated(any())).thenReturn(Mono.just(new Membership()))
1 | Flux | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(groupService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(membershipRepository.create_migrated(any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.error(new UserNotFoundException("user-id")))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Flux | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(Flux.just(new Membership()))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(group))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(groupService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.error(new GroupNotFoundException("group-id")))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findById_migrated(role.getId())).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember_migrated(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Mono.empty())
1 | Flux | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findDefaultRole_migrated("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(Mono.just(environmentUserRole))
1 | Mono | just | METHOD_INVOCATION | when(membershipRepository.create_migrated(any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flux.just(new Membership()))
1 | Flux | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findDefaultRole_migrated("orga#1", DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).thenReturn(Mono.just(environmentUserRole))
1 | Mono | just | METHOD_INVOCATION | when(membershipRepository.create_migrated(any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findDefaultRole_migrated("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(Mono.just(environmentUserRole))
1 | Flux | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flux.just(new Membership()))
1 | Flux | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(Flux.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Mono.just(platformAdminRole))
1 | Flux | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Mono.just(platformAdminRole))
1 | Flux | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria_migrated(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(Flux.just(alreadyExisting))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(environment))
1 | Mono | empty | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.just(environment))
1 | Mono | empty | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(ORGANIZATION_ID)).thenReturn(Flux.just(environment))
1 | Flux | empty | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(ORGANIZATION_ID)).thenReturn(Flux.empty())
1 | Flux | error | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(ORGANIZATION_ID)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.count_migrated()).thenReturn(Mono.just(0L))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.create_migrated(argThat((environment)->environment.getId().equals(Environment.DEFAULT)))).thenReturn(Mono.just(defaultEnvironment))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.count_migrated()).thenReturn(Mono.just(1L))
1 | Mono | empty | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | error | METHOD_INVOCATION | when(environmentRepository.create_migrated(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | empty | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.error(new OrganizationNotFoundException(ORGANIZATION_ID)))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEnvironment))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(environmentRepository.findById_migrated(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Mono.just(existingEnvironment))
1 | Mono | error | METHOD_INVOCATION | when(environmentRepository.update_migrated(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(Mono.error(new TechnicalManagementException()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.just(new Credential()))
1 | Mono | empty | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(Flux.just(new Credential()))
1 | Flux | error | METHOD_INVOCATION | when(credentialRepository.findByUserId_migrated(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(credentialRepository.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(Flux.just(new Credential()))
1 | Flux | error | METHOD_INVOCATION | when(credentialRepository.findByUsername_migrated(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(credentialRepository.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(Flux.just(new Credential()))
1 | Flux | error | METHOD_INVOCATION | when(credentialRepository.findByCredentialId_migrated(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.create_migrated(any(Credential.class))).thenReturn(Mono.just(new Credential()))
1 | Mono | error | METHOD_INVOCATION | when(credentialRepository.create_migrated(any(Credential.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.just(new Credential()))
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.update_migrated(any(Credential.class))).thenReturn(Mono.just(new Credential()))
1 | Mono | error | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.just(new Credential()))
1 | Mono | error | METHOD_INVOCATION | when(credentialRepository.update_migrated(any(Credential.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | error | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(credentialRepository.findById_migrated("my-credential")).thenReturn(Mono.just(new Credential()))
1 | Mono | empty | METHOD_INVOCATION | when(credentialRepository.delete_migrated("my-credential")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(alertTriggerRepository.findById_migrated(ALERT_TRIGGER_ID)).thenReturn(Mono.just(alertTrigger))
1 | Mono | empty | METHOD_INVOCATION | when(alertTriggerRepository.findById_migrated(ALERT_TRIGGER_ID)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flux.just(alertTrigger))
1 | Flux | empty | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flux.just(existingAlertTrigger))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria_migrated(loginAttemptCriteria)).thenReturn(Mono.just(loginAttempt))
1 | Mono | just | METHOD_INVOCATION | when(loginAttemptRepository.update_migrated(loginAttempt)).thenReturn(Mono.just(loginAttempt))
1 | Mono | just | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria_migrated(loginAttemptCriteria)).thenReturn(Mono.just(loginAttempt))
1 | Mono | just | METHOD_INVOCATION | when(loginAttemptRepository.update_migrated(loginAttempt)).thenReturn(Mono.just(loginAttempt))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, "my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, "my-client")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, "my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(new Application()), 0, 1)))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findByDomain_migrated(DOMAIN, 1, 1)).thenReturn(Mono.just(pageClients))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findByDomain_migrated(DOMAIN, 1, 1)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider_migrated("client-idp")).thenReturn(Flux.just(new Application()))
1 | Flux | error | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider_migrated("client-idp")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(applicationRepository.findByCertificate_migrated("client-certificate")).thenReturn(Flux.just(new Application()))
1 | Flux | error | METHOD_INVOCATION | when(applicationRepository.findByCertificate_migrated("client-certificate")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).thenReturn(Flux.just(new Application()))
1 | Flux | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant_migrated(DOMAIN, "client-extension-grant")).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page(Collections.singleton(new Application()), 0, 1)))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findAll_migrated(0, Integer.MAX_VALUE)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findAll_migrated(1, 1)).thenReturn(Mono.just(pageClients))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findAll_migrated(1, 1)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.countByDomain_migrated(DOMAIN)).thenReturn(Mono.just(1L))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.countByDomain_migrated(DOMAIN)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.count_migrated()).thenReturn(Mono.just(1L))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.count_migrated()).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, null)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.create_migrated(any(Application.class))).thenReturn(Mono.just(createClient))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(anyString())).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(anyString(), any())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(membershipService.addOrUpdate_migrated(eq(ORGANIZATION_ID), any())).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).thenReturn(Mono.just(new Role()))
1 | Flux | empty | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN)).thenReturn(Flux.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, null)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(anyString(), any())).thenReturn(Mono.just(true))
1 | Flux | empty | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN)).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, null)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.create_migrated(any(Application.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, null)).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, null)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId_migrated(DOMAIN, "client_id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.create_migrated(any(Application.class))).thenReturn(Mono.just(createClient))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(anyString())).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(anyString(), any())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(toPatch))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id1")).thenReturn(Mono.just(idp1))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id2")).thenReturn(Mono.just(idp2))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, new ArrayList<>())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated(any())).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(any())).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated(any())).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(any())).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(any(), any())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated(any())).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(any())).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(any(), any())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id1")).thenReturn(Mono.just(idp1))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id2")).thenReturn(Mono.just(idp2))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, new ArrayList<>())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id1")).thenReturn(Mono.just(idp1))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.findById_migrated("id2")).thenReturn(Mono.just(idp2))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, new ArrayList<>())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, new ArrayList<>())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, new ArrayList<>())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated(existingClient.getId())).thenReturn(Mono.just(existingClient))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.delete_migrated(existingClient.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(formService.findByDomainAndClient_migrated(existingClient.getDomain(), existingClient.getId())).thenReturn(Flux.just(form))
1 | Mono | empty | METHOD_INVOCATION | when(formService.delete_migrated(eq("my-domain"), eq(form.getId()))).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(Flux.just(email))
1 | Mono | empty | METHOD_INVOCATION | when(emailTemplateService.delete_migrated(email.getId())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByReference_migrated(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(Flux.just(membership))
1 | Mono | empty | METHOD_INVOCATION | when(membershipService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated(existingClient.getId())).thenReturn(Mono.just(existingClient))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.delete_migrated(existingClient.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(formService.findByDomainAndClient_migrated(existingClient.getDomain(), existingClient.getId())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(emailTemplateService.findByClient_migrated(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByReference_migrated(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.delete_migrated(anyString())).thenReturn(Mono.error(TechnicalException::new))
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(DOMAIN)).thenReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.validateScope_migrated(DOMAIN, Collections.emptyList())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationRepository.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated("my-role")).thenReturn(Mono.just(new Role()))
1 | Mono | empty | METHOD_INVOCATION | when(roleRepository.findById_migrated("my-role")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(roleRepository.findById_migrated("my-role")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new Role()))
1 | Flux | error | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new)))
1 | Flux | just | METHOD_INVOCATION | when(roleRepository.findByIdIn_migrated(Arrays.asList("my-role"))).thenReturn(Flux.just(new Role()))
1 | Flux | error | METHOD_INVOCATION | when(roleRepository.findByIdIn_migrated(anyList())).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | empty | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.create_migrated(any(Role.class))).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | error | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(role))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Mono.just(role))
1 | Flux | empty | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.update_migrated(any(Role.class))).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Mono.just(role))
1 | Flux | empty | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.update_migrated(argThat((r)->r.getPermissionAcls().equals(Permission.unflatten(updateRole.getPermissions()))))).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Mono.just(new Role()))
1 | Flux | just | METHOD_INVOCATION | when(roleRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(roleRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any(Event.class))).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Mono.just(new Role()))
1 | Mono | error | METHOD_INVOCATION | when(roleRepository.delete_migrated(anyString())).thenReturn(Mono.error(TechnicalException::new))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | when(roleRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Mono.just(role))
1 | Mono | empty | METHOD_INVOCATION | when(roleRepository.delete_migrated("my-role")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(new ExtensionGrant()))
1 | Flux | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.create_migrated(any(ExtensionGrant.class))).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(extensionGrantRepository.create_migrated(any(ExtensionGrant.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.update_migrated(any(ExtensionGrant.class))).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated(extensionGrant.getId())).thenReturn(Mono.just(extensionGrant))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(Mono.just(Collections.singleton(new Application())))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated(extensionGrant.getId())).thenReturn(Mono.just(extensionGrant))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, extensionGrant.getGrantType())).thenReturn(Mono.just(Collections.singleton(new Application())))
1 | Flux | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(extensionGrant, extensionGrant2))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated(extensionGrant2.getId())).thenReturn(Mono.just(extensionGrant2))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.delete_migrated(extensionGrant2.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, extensionGrant2.getGrantType() + "~" + extensionGrant2.getId())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, extensionGrant2.getGrantType())).thenReturn(Mono.just(Collections.singleton(new Application())))
1 | Flux | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(extensionGrant, extensionGrant2))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.just(new ExtensionGrant()))
1 | Mono | just | METHOD_INVOCATION | when(extensionGrantRepository.findById_migrated("my-extension-grant")).thenReturn(Mono.just(existingExtensionGrant))
1 | Mono | empty | METHOD_INVOCATION | when(extensionGrantRepository.delete_migrated("my-extension-grant")).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(existingExtensionGrant))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "my-extension-grant~my-extension-grant")).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant_migrated(DOMAIN, "my-extension-grant")).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.create_migrated(any(User.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findById_migrated(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.delete_migrated("my-user")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.delete_migrated("my-user")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(credentialService.findByUserId_migrated(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flux.just(credential))
1 | Mono | empty | METHOD_INVOCATION | when(credentialService.delete_migrated(credential.getId())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findById_migrated("my-user")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(alertNotifierRepository.findById_migrated(ALERT_NOTIFIER_ID)).thenReturn(Mono.just(alertNotifier))
1 | Mono | empty | METHOD_INVOCATION | when(alertNotifierRepository.findById_migrated(ALERT_NOTIFIER_ID)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flux.just(alertNotifier))
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria_migrated(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flux.just(alertNotifier))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(alertNotifierRepository.findById_migrated(ALERT_NOTIFIER_ID)).thenReturn(Mono.just(alertNotifierToUpdate))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(alertNotifierRepository.findById_migrated(ALERT_NOTIFIER_ID)).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(emailRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Mono.just(new Email()))
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.create_migrated(any(Email.class))).thenReturn(Mono.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findByTemplate_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), any())).thenReturn(Mono.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Mono.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.update_migrated(any(Email.class))).thenReturn(Mono.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(emailRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findById_migrated("my-email")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findById_migrated("my-email")).thenReturn(Mono.just(new Email()))
1 | Mono | error | METHOD_INVOCATION | when(emailRepository.delete_migrated(anyString())).thenReturn(Mono.error(TechnicalException::new))
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findById_migrated(email.getId())).thenReturn(Mono.just(email))
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.delete_migrated(email.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(emailRepository.findByClient_migrated(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flux.just(mailOne, mailTwo))
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(emailTemplateService.copyFromClient_migrated(DOMAIN, sourceUid, targetUid).collectList())
1 | Mono | just | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate_migrated(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Mono.just(new Email()))
1 | Flux | just | METHOD_INVOCATION | when(emailRepository.findByClient_migrated(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flux.just(mailOne))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.just(new Factor()))
1 | Mono | empty | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(factorRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(new Factor()))
1 | Flux | error | METHOD_INVOCATION | when(factorRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.create_migrated(any(Factor.class))).thenReturn(Mono.just(new Factor()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.create_migrated(any(Factor.class))).thenReturn(Mono.just(new Factor()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.create_migrated(any())).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.create_migrated(any(Factor.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.just(new Factor()))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.update_migrated(any(Factor.class))).thenReturn(Mono.just(new Factor()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.just(new Factor()))
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.update_migrated(any(Factor.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.findById_migrated(factor.getId())).thenReturn(Mono.just(factor))
1 | Flux | just | METHOD_INVOCATION | when(applicationService.findByFactor_migrated(factor.getId())).thenReturn(Flux.just(new Application()))
1 | Mono | error | METHOD_INVOCATION | when(factorRepository.findById_migrated("my-factor")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(factorRepository.findById_migrated(factor.getId())).thenReturn(Mono.just(factor))
1 | Flux | empty | METHOD_INVOCATION | when(applicationService.findByFactor_migrated(factor.getId())).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(factorRepository.delete_migrated(factor.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated("my-identity-provider")).thenReturn(Mono.just(new IdentityProvider()))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated("my-identity-provider")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated("my-identity-provider")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderRepository.findAll_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(Flux.just(new IdentityProvider()))
1 | Flux | error | METHOD_INVOCATION | when(identityProviderRepository.findAll_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.just(identityProvider))
1 | Flux | empty | METHOD_INVOCATION | when(identityProviderRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.empty())
1 | Flux | error | METHOD_INVOCATION | when(identityProviderRepository.findAll_migrated(ReferenceType.ORGANIZATION)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.create_migrated(any(IdentityProvider.class))).thenReturn(Mono.just(idp))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(identityProviderRepository.create_migrated(any(IdentityProvider.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.just(new IdentityProvider()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.update_migrated(any(IdentityProvider.class))).thenReturn(Mono.just(idp))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.just(new IdentityProvider()))
1 | Flux | just | METHOD_INVOCATION | when(applicationService.findByIdentityProvider_migrated("my-identity-provider")).thenReturn(Flux.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.just(new IdentityProvider()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderRepository.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Mono.just(existingIdentityProvider))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderRepository.delete_migrated("my-identity-provider")).thenReturn(Mono.empty())
1 | Flux | empty | METHOD_INVOCATION | when(applicationService.findByIdentityProvider_migrated("my-identity-provider")).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(new Flow()))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList())
1 | Flux | error | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(flowService.findAll_migrated(ReferenceType.DOMAIN, DOMAIN).collectList())
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.create_migrated(any(Flow.class))).thenReturn(Mono.just(new Flow()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(flowRepository.create_migrated(any(Flow.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(new Flow()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, ID)).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(new Flow()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(flowRepository.findById_migrated("my-flow")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(flowRepository.findById_migrated("my-flow")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated("my-flow")).thenReturn(Mono.just(new Flow()))
1 | Mono | empty | METHOD_INVOCATION | when(flowRepository.delete_migrated("my-flow")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | empty | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.create_migrated(any(Flow.class))).thenReturn(Mono.just(newFlow), Mono.just(newFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.create_migrated(any(Flow.class))).thenReturn(Mono.just(newFlow), Mono.just(newFlow2))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(existingFlow, existingFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, updateFlow2.getId())).thenReturn(Mono.just(existingFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(updateFlow), Mono.just(updateFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(updateFlow), Mono.just(updateFlow2))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(updateFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.create_migrated(any(Flow.class))).thenReturn(Mono.just(updateFlow))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Flux | just | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(existingFlow, existingFlow2))
1 | Flux | just | METHOD_INVOCATION | when(flowRepository.findAll_migrated(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flux.just(existingFlow, existingFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(ReferenceType.DOMAIN, DOMAIN, existingFlow2.getId())).thenReturn(Mono.just(existingFlow2))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.findById_migrated(existingFlow.getId())).thenReturn(Mono.just(existingFlow))
1 | Mono | just | METHOD_INVOCATION | when(flowRepository.update_migrated(any(Flow.class))).thenReturn(Mono.just(new Flow()))
1 | Mono | empty | METHOD_INVOCATION | when(flowRepository.delete_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.just(new Tag()))
1 | Mono | empty | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(tagRepository.create_migrated(any(Tag.class))).thenReturn(Mono.just(new Tag()))
1 | Mono | just | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.just(new Tag()))
1 | Mono | error | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(tagRepository.findById_migrated("my-tag", Organization.DEFAULT)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(new Scope()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(new Scope()), 0, 1)))
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findByDomain_migrated(DOMAIN, 0, 1)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.just(new Scope()))
1 | Flux | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys_migrated(DOMAIN, searchingScopes)).thenReturn(Flux.just(new Scope()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.create_migrated(any(Scope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "MY-SCOPE")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.create_migrated(any(Scope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "MY_scope")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.create_migrated(any(Scope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey_migrated(DOMAIN, "my-scope")).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toPatch))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toPatch))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findById_migrated("toPatchId")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toUpdate))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toUpdate))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toUpdate))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findById_migrated("toUpdateId")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("toUpdateId")).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated(scopeId)).thenReturn(Mono.just(toUpdate))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.update_migrated(argument.capture())).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findById_migrated("toUpdateId")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(scope))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.delete_migrated("my-scope")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey_migrated(scope.getDomain(), scope.getKey())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Collections.singleton(role)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(Collections.singleton(application)))
1 | Mono | just | METHOD_INVOCATION | when(roleService.update_migrated(anyString(), anyString(), any(UpdateRole.class))).thenReturn(Mono.just(new Role()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.update_migrated(any())).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("my-scope")).thenReturn(Mono.just(scope))
1 | Mono | empty | METHOD_INVOCATION | when(scopeRepository.delete_migrated("my-scope")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey_migrated(scope.getDomain(), scope.getKey())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findById_migrated("scope-id")).thenReturn(Mono.just(scope))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1)))
1 | Mono | just | METHOD_INVOCATION | when(scopeRepository.findByDomain_migrated(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1)))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.just(new Certificate()))
1 | Mono | empty | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Flux | just | METHOD_INVOCATION | when(certificateRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.just(new Certificate()))
1 | Flux | error | METHOD_INVOCATION | when(certificateRepository.findByDomain_migrated(DOMAIN)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.just(certificate))
1 | Flux | empty | METHOD_INVOCATION | when(applicationService.findByCertificate_migrated("my-certificate")).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateRepository.delete_migrated("my-certificate")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(eventService.create_migrated(any())).thenReturn(Mono.just(new Event()))
1 | Mono | error | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(certificateRepository.findById_migrated("my-certificate")).thenReturn(Mono.just(new Certificate()))
1 | Flux | just | METHOD_INVOCATION | when(applicationService.findByCertificate_migrated("my-certificate")).thenReturn(Flux.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(certificatePluginService.getSchema_migrated(CertificateServiceImpl.DEFAULT_CERTIFICATE_PLUGIN)).thenReturn(Mono.just("{\n  \"type\" : \"object\",\n  \"id\" : \"urn:jsonschema:io:gravitee:am:certificate:pkcs12:PKCS12Configuration\",\n  \"properties\" : {\n    \"content\" : {\n      \"title\": \"PKCS#12 file\",\n      \"description\": \"PKCS file\",\n      \"type\" : \"string\",\n      \"widget\" : \"file\"\n    },\n    \"storepass\" : {\n      \"title\": \"Keystore password\",\n      \"description\": \"The password which is used to protect the integrity of the keystore.\",\n      \"type\" : \"string\"\n    },\n    \"alias\" : {\n      \"title\": \"Key alias\",\n      \"description\": \"Alias which identify the keystore entry.\",\n      \"type\" : \"string\"\n    },\n    \"keypass\" : {\n      \"title\": \"Key password\",\n      \"description\": \"The password used to protect the private key of the generated key pair.\",\n      \"type\" : \"string\"\n    }\n  },\n  \"required\": [\n    \"content\",\n    \"storepass\",\n    \"alias\",\n    \"keypass\"\n  ]\n}"))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId_migrated(any())).thenReturn(Mono.just(context))
1 | Mono | just | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId_migrated(any())).thenReturn(Mono.just(context))
1 | Mono | empty | METHOD_INVOCATION | when(authFlowContextRepository.delete_migrated(SESSION_ID)).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(applications))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId_migrated("app1")).thenReturn(Mono.just(2L))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId_migrated("app2")).thenReturn(Mono.just(1L))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(DOMAIN)).thenReturn(Mono.just(applications))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findAll_migrated()).thenReturn(Mono.just(applications))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId_migrated("app1")).thenReturn(Mono.just(2L))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId_migrated("app2")).thenReturn(Mono.just(1L))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.findAll_migrated()).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findAll_migrated()).thenReturn(Mono.just(applications))
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.deleteByUserId_migrated("userId")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.deleteByUserId_migrated("userId")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(organization))
1 | Mono | empty | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.count_migrated()).thenReturn(Mono.just(0L))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.create_migrated(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(Mono.just(defaultOrganization))
1 | Mono | empty | METHOD_INVOCATION | when(roleService.createDefaultRoles_migrated("DEFAULT")).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(entrypointService.createDefaults_migrated(defaultOrganization)).thenReturn(Flux.just(new Entrypoint()))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.count_migrated()).thenReturn(Mono.just(1L))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.count_migrated()).thenReturn(Mono.just(0L))
1 | Mono | error | METHOD_INVOCATION | when(organizationRepository.create_migrated(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | empty | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(roleService.createDefaultRoles_migrated(ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(entrypointService.createDefaults_migrated(any(Organization.class))).thenReturn(Flux.just(new Entrypoint()))
1 | Mono | empty | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(organizationRepository.create_migrated(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(existingOrganization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(existingOrganization))
1 | Mono | error | METHOD_INVOCATION | when(organizationRepository.update_migrated(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | just | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.just(existingOrganization))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(organizationRepository.findById_migrated(ORGANIZATION_ID)).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flux.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys_migrated(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(Mono.just(Arrays.asList(new Scope("scope"))))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | empty | METHOD_INVOCATION | when(repository.delete_migrated(RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(exitingRS))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys_migrated(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(exitingRS))
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(exitingRS))
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(exitingRS))
1 | Mono | just | METHOD_INVOCATION | when(repository.update_migrated(exitingRS)).thenReturn(Mono.just(exitingRS))
1 | Mono | just | METHOD_INVOCATION | when(repository.create_migrated(any())).thenReturn(Mono.just(new Resource()))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.create_migrated(any())).thenReturn(Mono.just(new AccessPolicy()))
1 | Mono | error | METHOD_INVOCATION | when(repository.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.error(new ArrayIndexOutOfBoundsException()))
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomain_migrated(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(new Resource()), 0, 1)))
1 | Flux | empty | METHOD_INVOCATION | when(repository.findByResources_migrated(anyList())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptyList(), 0, 0)))
1 | Mono | error | METHOD_INVOCATION | when(repository.findByDomainAndClient_migrated(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Flux | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources_migrated(DOMAIN_ID, CLIENT_ID, Collections.emptyList())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources_migrated(eq(DOMAIN_ID), eq(CLIENT_ID), anyList())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.update_migrated(toUpdate)).thenReturn(Mono.just(toUpdate))
1 | Flux | empty | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource_migrated(toDelete.getDomain(), toDelete.getId())).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(repository.delete_migrated(RESOURCE_ID)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource_migrated(DOMAIN_ID, RESOURCE_ID)).thenReturn(Flux.just(accessPolicy))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findAccessPolicies_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).collectList())
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Flux | just | METHOD_INVOCATION | when(accessPolicyRepository.findByResources_migrated(resourceIds)).thenReturn(Flux.just(accessPolicy))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(service.findAccessPoliciesByResources_migrated(resourceIds).collectList())
1 | Flux | error | METHOD_INVOCATION | when(accessPolicyRepository.findByResources_migrated(resourceIds)).thenReturn(Flux.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.countByResource_migrated(RESOURCE_ID)).thenReturn(Mono.just(1L))
1 | Mono | error | METHOD_INVOCATION | when(accessPolicyRepository.countByResource_migrated(RESOURCE_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.findById_migrated(POLICY_ID)).thenReturn(Mono.just(accessPolicy))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.findById_migrated(POLICY_ID)).thenReturn(Mono.just(accessPolicy))
1 | Mono | error | METHOD_INVOCATION | when(accessPolicyRepository.findById_migrated(POLICY_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(RuntimeException::new)))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.create_migrated(accessPolicy)).thenReturn(Mono.just(accessPolicy))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.findById_migrated(POLICY_ID)).thenReturn(Mono.just(accessPolicy))
1 | Mono | just | METHOD_INVOCATION | when(accessPolicyRepository.update_migrated(any())).thenReturn(Mono.just(accessPolicy))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessPolicyRepository.findById_migrated(POLICY_ID)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessPolicyRepository.delete_migrated(POLICY_ID)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(userService.findByIdIn_migrated(anyList())).thenReturn(Flux.just(new User()))
1 | Flux | just | METHOD_INVOCATION | when(applicationService.findByIdIn_migrated(anyList())).thenReturn(Flux.just(new Application()))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(authenticate(authentication)).flatMap((z)->profile(z, authentication).as(RxJava2Adapter::maybeToMono));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwtClaimsSet)->createUser(authContext, jwtClaimsSet.getClaims())));
1 | Mono | fromSupplier | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new Token(accessToken, TokenTypeHint.ACCESS_TOKEN));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new Token(idToken, TokenTypeHint.ID_TOKEN));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing authorization code"));
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("No suitable value to retrieve user information"));
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}));
1 | Mono | block | METHOD_INVOCATION | io.gravitee.am.certificate.api.Key providerKey = provider.key_migrated().block()
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKey);
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(factor);
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | subscribe | METHOD_INVOCATION | introspectionTokenService.introspect_migrated(token, offlineVerification).flatMap((e)->clientSyncService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.oidc.Client client)->new OAuth2AuthResponse(e, client)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((accessToken)->handler.handle(Future.succeededFuture(accessToken))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | flatMap | METHOD_INVOCATION | introspectionTokenService.introspect_migrated(token, offlineVerification).flatMap((e)->clientSyncService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.oidc.Client client)->new OAuth2AuthResponse(e, client)))).subscribe
1 | Mono | map | METHOD_INVOCATION | (e)->clientSyncService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.oidc.Client client)->new OAuth2AuthResponse(e, client)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(authenticationProvider))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(userProvider))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderRepository.findById_migrated(identityProviderId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for domain {}", identityProviderId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} identity provider for domain {}", eventType, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No identity provider found with id {}", identityProviderId)));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(client))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(optClient.get()))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(templates);
1 | Flux | subscribe | METHOD_INVOCATION | emailRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::updateEmail), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize emails for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | emailRepository.findById_migrated(emailId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((email)->{
    if (emails.containsKey(emailId) && !email.isEnabled()) {
        removeEmail(emailId);
    } else {
        updateEmail(email);
    }
    logger.info("Email {} {}d for domain {}", emailId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} email for domain {}", eventType, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No email found with id {}", emailId)));
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((id)->{
    deploymentId = id;
    reporterRepository.findByDomain_migrated(domain.getId()).collectList().flatMap((reporters)->environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((tupleReportersContext)->{
        if (!tupleReportersContext.getT1().isEmpty()) {
            tupleReportersContext.getT1().forEach((reporter)->{
                startReporterProvider(reporter, tupleReportersContext.getT2());
            });
            logger.info("Reporters loaded for domain {}", domain.getName());
        } else {
            logger.info("\tThere is no reporter to start");
        }
    }), RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
        logger.error("Reporter service can not be started", err);
    }));
}), RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.error("Reporter service can not be started", err);
}));
1 | Mono | subscribe | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(domain.getId()).collectList().flatMap((reporters)->environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((tupleReportersContext)->{
    if (!tupleReportersContext.getT1().isEmpty()) {
        tupleReportersContext.getT1().forEach((reporter)->{
            startReporterProvider(reporter, tupleReportersContext.getT2());
        });
        logger.info("Reporters loaded for domain {}", domain.getName());
    } else {
        logger.info("\tThere is no reporter to start");
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.error("Reporter service can not be started", err);
}));
1 | Mono | subscribeOn | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(domain.getId()).collectList().flatMap((reporters)->environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(domain.getId()).collectList().flatMap((reporters)->environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn
1 | Flux | collectList | METHOD_INVOCATION | reporterRepository.findByDomain_migrated(domain.getId()).collectList().flatMap
1 | Mono | map | METHOD_INVOCATION | (reporters)->environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))
1 | Mono | map | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((tupleReporterContext)->{
    updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error)));
1 | Mono | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | Mono | map | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((tupleReporterContext)->{
    if (reporters.containsKey(reporterId)) {
        updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    } else {
        startReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    }
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error)));
1 | Mono | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(reporterRepository.findById_migrated(reporterId)).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()).subscribe
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))
1 | Mono | map | METHOD_INVOCATION | environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()));
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return RxJava2Adapter.monoToSingle(connect_migrated(user));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(authentication, domain, client, user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(authentication, domain, client, throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return RxJava2Adapter.monoToSingle(connect_migrated(user));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(authentication, domain, client, user)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(authenticate0_migrated(client, authentication, authProvider, preAuthenticated))).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return RxJava2Adapter.monoToSingle(connect_migrated(user));
    }
}).apply(v)))).doOnSuccess
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(lastException))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(lastException))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()));
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->RxJava2Adapter.monoToMaybe(loadUserByUsername0_migrated(client, authentication, authProvider, true))).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return RxJava2Adapter.monoToMaybe(userAuthenticationService.loadPreAuthenticatedUser_migrated(user));
    }
}).apply(e))));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return preAuthentication_migrated(client, authentication, authProvider).then(loadUserByUsername0_migrated(client, authentication, authProvider, preAuthenticated)).flatMap((z)->postAuthentication_migrated(client, authentication, authProvider, z).then(Mono.just(z)));
1 | Mono | then | METHOD_INVOCATION | preAuthentication_migrated(client, authentication, authProvider).then(loadUserByUsername0_migrated(client, authentication, authProvider, preAuthenticated)).flatMap
1 | Mono | then | METHOD_INVOCATION | (z)->postAuthentication_migrated(client, authentication, authProvider, z).then(Mono.just(z))
1 | Mono | just | METHOD_INVOCATION | postAuthentication_migrated(client, authentication, authProvider, z).then(Mono.just(z))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
})))
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
            }).apply(a)))));
        } else {
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.get_migrated(authProvider).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage")))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))))
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | Mono.just(preAuthenticated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
}).apply(a)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username)))
1 | Mono | error | METHOD_INVOCATION | Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), username, authProvider).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(enhanceAuthentication));
        }).apply(a)))));
    } else {
        return RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(authentication));
    }
}).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return loginAttemptService.checkAccount_migrated(criteria, accountSettings).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | loginAttemptService.checkAccount_migrated(criteria, accountSettings).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | loginAttemptService.checkAccount_migrated(criteria, accountSettings).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).flatMap
1 | Mono | map | METHOD_INVOCATION | loginAttemptService.checkAccount_migrated(criteria, accountSettings).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource_migrated(criteria.domain(), criteria.username(), criteria.identityProvider()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(criteria.domain(), criteria.username(), criteria.identityProvider()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | loginAttemptService.loginFailed_migrated(criteria, accountSettings).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return RxJava2Adapter.monoToCompletable(userAuthenticationService.lockAccount_migrated(criteria, accountSettings, client, user));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))).then
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | subscribe | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", client.getClientName(), domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("An error has occurred when loading applications for domain {}", domain.getName(), error)));
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient)))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(applicationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", applicationId, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("An error has occurred when loading application {} for domain {}", applicationId, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No application found with id {}", applicationId)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationRepository.findById_migrated(applicationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        LOGGER.debug("An error occurs while decoding JWT access token : {}", token, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    if (ex instanceof InvalidTokenException) {
        InvalidTokenException invalidTokenException = (InvalidTokenException)ex;
        String details = invalidTokenException.getDetails();
        JWT jwt = invalidTokenException.getJwt();
        LOGGER.debug("An error occurs while checking JWT access token validity: {}\n\t - details: {}\n\t - decoded jwt: {}", token, details != null ? details : "none", jwt != null ? jwt.toString() : "{}", invalidTokenException);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token"))))
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | jwtService.decode_migrated(token).flatMap((e)->clientService.findByDomainAndClientId_migrated(e.getDomain(), e.getAud())).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(jwt))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    if (accessToken.getExpireAt().before(new Date())) {
        throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
    }
    return jwt;
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map
1 | Mono | error | METHOD_INVOCATION | accessTokenRepository.findByToken_migrated(jwt.getJti()).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(errorParams))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(this.jwtService.decode_migrated(jarm).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    Map<String, String> result = new HashMap<>();
    result.put(ERROR_PARAM, (String)jwt.get(ERROR_PARAM));
    result.put(ERROR_DESCRIPTION_PARAM, (String)jwt.get(ERROR_DESCRIPTION_PARAM));
    return result;
})))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(singlePageRendering).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((params)->render(routingContext, client, params)), RxJavaReactorMigrationUtil.toJdkConsumer((exception)->render(routingContext, client, errorParams)));
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByDomainAndClientId_migrated(domain, clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new ClientNotFoundException(clientId)))));
1 | Mono | subscribe | METHOD_INVOCATION | flowManager.findByExtensionPoint_migrated(extensionPoint, (Client)executionContext.getAttribute(ConstantKeys.CLIENT_CONTEXT_KEY), FlowPredicate.from(executionContext)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((policies)->handler.handle(Future.succeededFuture(policies))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | IMPORT
1 | Mono | block | METHOD_INVOCATION | return this.jwtService.encode_migrated(jwt, certificateProvider).block();
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return this.jwtService.decodeAndVerify_migrated(payload, certificateProvider).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
})).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->this));
1 | Mono | doOnSuccess | METHOD_INVOCATION | this.jwtService.decodeAndVerify_migrated(payload, certificateProvider).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
})).map
1 | Mono | subscribe | METHOD_INVOCATION | authenticationFlowContextService.loadContext_migrated(transactionId, version).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((ctx)->{
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_KEY, ctx);
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    context.next();
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    LOGGER.warn("AuthenticationFlowContext can\'t be loaded", error);
    if (exitOnError) {
        context.fail(error);
    } else {
        context.next();
    }
}));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | subscribe | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(certificateRepository.findByDomain_migrated(domain.getId())).subscribeOn(Schedulers.io())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->{
    certificateProviderManager.create(certificate);
    certificates.put(certificate.getId(), certificate);
    logger.info("Certificate {} loaded for domain {}", certificate.getName(), domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("An error has occurred when loading certificates for domain {}", domain.getName(), error)));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(certificate.get()))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(certificateRepository.findById_migrated(certificateId)).subscribeOn(Schedulers.io())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((certificate)->{
    try {
        certificateProviderManager.create(certificate);
        certificates.put(certificateId, certificate);
        logger.info("Certificate {} loaded for domain {}", certificateId, domain.getName());
    } catch (Exception ex) {
        logger.error("Unable to load certificate {} for domain {}", certificate.getName(), certificate.getDomain(), ex);
        certificates.remove(certificateId, certificate);
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("An error has occurred when loading certificate {} for domain {}", certificateId, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No certificate found with id {}", certificateId)));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKey);
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(session))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(session.setValue_migrated(sessionCookie.getValue()).flatMap((v)->RxJava2Adapter.singleToMono((Single<CookieSession>)RxJavaReactorMigrationUtil.toJdkFunction((Function<CookieSession, Single<CookieSession>>)(currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession))).onErrorResumeNext(RxJava2Adapter.monoToSingle(cleanupSession_migrated(currentSession)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
    }
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findById_migrated(userId).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(cleanupSession_migrated(currentSession)))
1 | Mono | map | METHOD_INVOCATION | userService.findById_migrated(userId).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(userId).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap(userService::enhance_migrated).map
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.findById_migrated(userId).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(currentSession))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((t)->logger.warn("Unable to restore the session", t)))).doFinally(context::next)).subscribe();
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((t)->logger.warn("Unable to restore the session", t))))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(currentSession))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()))
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm_migrated(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(signedResponseAlg).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm_migrated(signedResponseAlg).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.get_migrated(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return decode_migrated(certificateProvider, jwt).map(RxJavaReactorMigrationUtil.toJdkFunction(JWT::new));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate_migrated(client, authentication).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->handler.handle(Future.succeededFuture(new User(user)))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->authHandler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId)))), RxJavaReactorMigrationUtil.toRunnable(()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId)))));
1 | Mono | IMPORT
1 | Mono | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(getClient_migrated(clientId)), RxJava2Adapter.monoToSingle(getClient_migrated(user.getClient())), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->handler.handle(Future.succeededFuture())), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return clientSyncService.findById_migrated(clientId).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(clientId))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | clientSyncService.findById_migrated(clientId).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(clientId))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).single
1 | Mono | map | METHOD_INVOCATION | clientSyncService.findById_migrated(clientId).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(clientId))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | clientSyncService.findById_migrated(clientId).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(clientId))).map
1 | Mono | defer | METHOD_INVOCATION | clientSyncService.findById_migrated(clientId).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(clientId)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userService.search_migrated(ReferenceType.DOMAIN, domain, criteria, 0, 2).map(RxJavaReactorMigrationUtil.toJdkFunction((p)->new ArrayList<>(p.getData())));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return saveOrUpdate_migrated(principal, afterAuthentication).flatMap((user)->checkAccountStatus_migrated(user).then(Mono.defer(()->userService.enhance_migrated(user))));
1 | Mono | then | METHOD_INVOCATION | (user)->checkAccountStatus_migrated(user).then(Mono.defer(()->userService.enhance_migrated(user)))
1 | Mono | defer | METHOD_INVOCATION | checkAccountStatus_migrated(user).then(Mono.defer(()->userService.enhance_migrated(user)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userService.findById_migrated(subject).switchIfEmpty(Mono.error(new UserNotFoundException(subject))).flatMap((z)->identityProviderManager.get_migrated(z.getSource()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))).switchIfEmpty(Mono.defer(()->userService.enhance_migrated(z))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(subject).switchIfEmpty(Mono.error(new UserNotFoundException(subject))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(subject).switchIfEmpty(Mono.error(new UserNotFoundException(subject)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | (z)->identityProviderManager.get_migrated(z.getSource()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))).switchIfEmpty(Mono.defer(()->userService.enhance_migrated(z)))
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.get_migrated(z.getSource()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.get_migrated(z.getSource()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated))
1 | Mono | defer | METHOD_INVOCATION | identityProviderManager.get_migrated(z.getSource()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authenticationProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(update_migrated(z, idpUser, false).flatMap(userService::enhance_migrated));
}).apply(v)))).switchIfEmpty(Mono.defer(()->userService.enhance_migrated(z)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source)));
1 | Mono | defer | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source)))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | then | METHOD_INVOCATION | return userService.update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).type(EventType.USER_LOCKED).domain(criteria.domain()).client(criteria.client()).principal(null).user(user1)))).then();
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).type(EventType.USER_LOCKED).domain(criteria.domain()).client(criteria.client()).principal(null).user(user1)))).then
1 | Mono | flatMap | METHOD_INVOCATION | userService.update_migrated(user).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).doOnSuccess
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->update_migrated(y, principal, afterAuthentication)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(create_migrated(principal, afterAuthentication));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->update_migrated(y, principal, afterAuthentication)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source))).switchIfEmpty
1 | Mono | defer | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source)))
1 | Mono | error | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new AccountDisabledException("Account is disabled for user " + user.getUsername()));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | subscribe | METHOD_INVOCATION | factorService.findByDomain_migrated(domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::updateFactor), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize factors for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | factorService.findById_migrated(factorId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::updateFactor), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to load factor for domain {}", domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No factor found with id {}", factorId)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyList());
1 | Mono | just | METHOD_INVOCATION | return Mono.just(domainExecutionPolicies);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(applicationExecutionPolicies);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Stream.concat(domainExecutionPolicies.stream(), applicationExecutionPolicies.stream()).collect(Collectors.toList()));
1 | Mono | subscribe | METHOD_INVOCATION | flowService.findById_migrated(flowId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((flow)->{
    loadFlow(flow);
    flows.put(flow.getId(), flow);
    logger.info("Flow {} has been deployed for domain {}", flowId, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to deploy flow {} for domain {}", flowId, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No flow found with id {}", flowId)));
1 | Flux | subscribe | METHOD_INVOCATION | flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((flow)->{
    if (flow != null && flow.getId() != null) {
        loadFlow(flow);
        flows.put(flow.getId(), flow);
        logger.info("Flow {} loaded for domain {}", flow.getType(), domain.getName());
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize flows for domain {}", domain.getName(), error)));
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated("unknown")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated("RS512")).thenReturn(Mono.just(rs512CertProvider))
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated(null)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated("notExistingId")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated("existingId")).thenReturn(Mono.just(rs256CertProvider))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource_migrated(domainId, username, source)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.create_migrated(any())).thenReturn(Mono.just(createdUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(createdUser)).thenReturn(Mono.just(createdUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(mock(User.class)))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(updatedUser)).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(mock(User.class)))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource_migrated(domainId, username, source)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.create_migrated(any())).thenReturn(Mono.just(createdUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(createdUser)).thenReturn(Mono.just(createdUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(mock(User.class)))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(updatedUser)).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(mock(User.class)))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(updatedUser)).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(existingUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(updatedUser)).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource_migrated(domainId, id, source)).thenReturn(Mono.just(existingUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any())).thenReturn(Mono.just(updatedUser))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(updatedUser)).thenReturn(Mono.just(updatedUser))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint_migrated(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint_migrated(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Mono.just(Collections.singletonList(policy)))
1 | Mono | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint_migrated(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Mono.just(Arrays.asList(policy, policy)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | return Mono.just(user);
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        return Mono.just(new DefaultUser("username"));
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new DefaultUser("username"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | return Mono.just(user);
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-2")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        return Mono.just(new DefaultUser("username"));
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new DefaultUser("username"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new AccountDisabledException(idpUser.getUsername()));
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        return Mono.just(new DefaultUser("username"));
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new DefaultUser("username"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        return Mono.error(new UsernameNotFoundException("username"));
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new UsernameNotFoundException("username"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.checkAccount_migrated(any(), any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("idp-1")).thenReturn(Mono.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(authentication));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(Authentication authentication) {
        return Mono.error(new BadCredentialsException("username"));
    }
    
    @InlineMe(replacement = "RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username))", imports = "reactor.adapter.rxjava.RxJava2Adapter")
    @Deprecated()
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return RxJava2Adapter.monoToMaybe(loadUserByUsername_migrated(username));
    }
    
    @Override()
    public Mono<io.gravitee.am.identityprovider.api.User> loadUserByUsername_migrated(String username) {
        return Mono.empty();
    }
}))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("username"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.checkAccount_migrated(any(), any())).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(authenticationFlowContextService.clearContext_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(Mono.just("token"))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(client.getClientId())).thenReturn(Mono.just(client))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated(anyString())).thenReturn(Mono.empty()).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | return Mono.just(client);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedClient);
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | return Mono.just(client);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedClient);
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.findByToken_migrated(jwt.getJti())).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | error | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.error(new JWTException("invalid token")))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.just(jwt))
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.findByToken_migrated(jwt.getJti())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated(token)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId_migrated(jwt.getDomain(), jwt.getAud())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(token, client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(accessTokenRepository.findByToken_migrated(jwt.getJti())).thenReturn(Mono.just(accessToken))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(Mono.just("token"))
1 | Flux | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(flow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(domainFlow, appFlow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(domainFlow, appFlow))
1 | Flux | just | METHOD_INVOCATION | when(flowService.findAll_migrated(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flux.just(domainFlow, appFlow))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | enrichAuthFlowContext_migrated(context).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((success)->policyChain.doNext(request, response)), RxJavaReactorMigrationUtil.toJdkConsumer((error)->policyChain.failWith(PolicyResult.failure(GATEWAY_POLICY_ENRICH_AUTH_FLOW_ERROR_KEY, error.getMessage()))));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | (arg)->Mono.just(arg.getArgument(0))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userDetailsService.loadUserByUsername_migrated((String)authentication.getPrincipal()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        throw new BadCredentialsException("Bad credentials");
    }
    return createUser(authentication.getContext(), user);
}));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userDetailsService.loadUserByUsername_migrated(username).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->createUser(new SimpleAuthenticationContext(), user)));
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername_migrated("username")).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername_migrated("username")).thenReturn(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername_migrated("username")).thenReturn(Mono.error(new UsernameNotFoundException("username")))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction((ldapUser)->createUser(authentication.getContext(), ldapUser)));
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction((ldapUser)->createUser(new SimpleAuthenticationContext(), ldapUser)));
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})).map
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing authorization code"));
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    Map<String, String> bodyResponse = URLEncodedUtils.format(httpResponse.bodyAsString());
    return new Token(bodyResponse.get("access_token"), TokenTypeHint.ACCESS_TOKEN);
}));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}));
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e))));
1 | Flux | collectList | METHOD_INVOCATION | findUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap
1 | Flux | filter | METHOD_INVOCATION | findUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList
1 | Mono | flatMapMany | METHOD_INVOCATION | findUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter
1 | Flux | collectList | METHOD_INVOCATION | findUserByMultipleField_migrated(username).collectList().flatMapMany
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)))
1 | Flux | fromIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))))
1 | Flux | RETURN_TYPE
1 | Flux | from | METHOD_INVOCATION | return Flux.from(usersCol.find(query));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return findUserByUsername_migrated(encodedUsername).map(RxJavaReactorMigrationUtil.toJdkFunction((document)->createUser(new SimpleAuthenticationContext(), document)));
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCol.find(query).first()), BackpressureStrategy.BUFFER).next();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findByUsername_migrated(username).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        Document document = new Document();
        document.put(FIELD_ID, user.getId() != null ? user.getId() : RandomString.generate());
        document.put(configuration.getUsernameField(), username);
        if (user.getCredentials() != null) {
            if (configuration.isUseDedicatedSalt()) {
                byte[] salt = createSalt();
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials(), salt));
                document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
            } else {
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials()));
            }
        }
        if (user.getAdditionalInformation() != null) {
            document.putAll(user.getAdditionalInformation());
        }
        document.put(FIELD_CREATED_AT, new Date());
        document.put(FIELD_UPDATED_AT, document.get(FIELD_CREATED_AT));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap((success)->findById_migrated(document.getString(FIELD_ID)).single()));
    }
}).apply(v)));
1 | Mono | hasElement | METHOD_INVOCATION | findByUsername_migrated(username).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document))).flatMap((success)->findById_migrated(document.getString(FIELD_ID)).single()))
1 | Mono | single | METHOD_INVOCATION | (success)->findById_migrated(document.getString(FIELD_ID)).single()
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    Document document = new Document();
    document.put(configuration.getUsernameField(), oldUser.getUsername());
    if (updateUser.getCredentials() != null) {
        if (configuration.isUseDedicatedSalt()) {
            byte[] salt = createSalt();
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials(), salt));
            document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
        } else {
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials()));
        }
    } else {
        document.put(configuration.getPasswordField(), oldUser.getCredentials());
    }
    if (updateUser.getAdditionalInformation() != null) {
        document.putAll(updateUser.getAdditionalInformation());
    }
    document.put(FIELD_CREATED_AT, oldUser.getCreatedAt());
    document.put(FIELD_UPDATED_AT, new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))).flatMap((updateResult)->findById_migrated(oldUser.getId()).single()));
}).apply(y))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))).flatMap((updateResult)->findById_migrated(oldUser.getId()).single()))
1 | Mono | single | METHOD_INVOCATION | (updateResult)->findById_migrated(oldUser.getId()).single()
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((idpUser)->Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap((idpUser)->Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id))).flatMap
1 | Mono | error | METHOD_INVOCATION | findById_migrated(id).switchIfEmpty(Mono.error(new UserNotFoundException(id)))
1 | Mono | from | METHOD_INVOCATION | (idpUser)->Mono.from(usersCollection.deleteOne(eq(FIELD_ID, id)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER).next().map
1 | Mono | block | METHOD_INVOCATION | Map<String, Object> providerConfiguration = RxJava2Adapter.singleToMono(client.getAbs(configuration.getWellKnownUri()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new IllegalArgumentException("Invalid OIDC Well-Known Endpoint : " + httpClientResponse.statusMessage());
    }
    return httpClientResponse.bodyAsJsonObject().getMap();
})).block()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getWellKnownUri()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new IllegalArgumentException("Invalid OIDC Well-Known Endpoint : " + httpClientResponse.statusMessage());
    }
    return httpClientResponse.bodyAsJsonObject().getMap();
})).block
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while creating user {} from the remote HTTP identity provider", user.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalManagementException("An error has occurred while creating the user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while updating user {} from the remote HTTP identity provider", updateUser.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalManagementException("An error has occurred while updating the user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalManagementException("An error has occurred while deleting the user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalManagementException("An error has occurred while searching the user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InternalAuthenticationServiceException("An error has occurred while authenticating the user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
})))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalManagementException("An error has occurred when when loading pre-authenticated user", ex));
1 | Mono | RETURN_TYPE
1 | Mono | block | METHOD_INVOCATION | Request request = provider.asyncSignInUrl_migrated("https://gravitee.io", state).block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return authenticate_migrated(authentication).flatMap((z)->this.profile_migrated(z, authentication));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing authorization code"));
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v))));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())))
1 | Mono | block | METHOD_INVOCATION | (Request)cut.asyncSignInUrl_migrated("https://gravitee.io", state).block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    String body = httpResponse.bodyAsString();
    String[] tokenResponse = body.split("&");
    String token = null;
    String tokenSecret = null;
    String callbackState = null;
    for (String responsePair : tokenResponse) {
        String[] pair = responsePair.split("=");
        if (pair.length > 1) {
            if (OAUTH_TOKEN.equals(pair[0])) {
                token = pair[1];
            }
            if (OAUTH_TOKEN_SECRET.equals(pair[0])) {
                tokenSecret = pair[1];
            }
            if ("oauth_callback_confirmed".equals(pair[0])) {
                callbackState = pair[1];
            }
        }
    }
    if ("true".equalsIgnoreCase(callbackState)) {
        tokenMemory.put(token, tokenSecret);
        UriBuilder builder = UriBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
        builder.addParameter(OAUTH_TOKEN, token);
        Request request = new Request();
        request.setMethod(HttpMethod.GET);
        request.setUri(builder.build().toString());
        return request;
    }
    throw new BadCredentialsException("Token returned by Twitter mismatch");
}));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing OAuth Token"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing Token Verifier"));
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v))));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend()).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v))));
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(user))
1 | Mono | block | METHOD_INVOCATION | Request request = provider.asyncSignInUrl_migrated("https://gravitee.io", RandomString.generate()).block()
1 | Mono | block | METHOD_INVOCATION | provider.asyncSignInUrl_migrated("https://gravitee.io", RandomString.generate()).block();
1 | Mono | block | METHOD_INVOCATION | provider.asyncSignInUrl_migrated("https://gravitee.io", RandomString.generate()).block();
1 | Mono | block | METHOD_INVOCATION | provider.asyncSignInUrl_migrated("https://gravitee.io", RandomString.generate()).block();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing authorization code"));
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
}));
1 | Mono | subscribe | METHOD_INVOCATION | connectionPool.disposeLater().subscribe();
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return selectUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e))));
1 | Flux | collectList | METHOD_INVOCATION | selectUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList().flatMap
1 | Flux | filter | METHOD_INVOCATION | selectUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
})).collectList
1 | Mono | flatMapMany | METHOD_INVOCATION | selectUserByMultipleField_migrated(username).collectList().flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)));
    }
    return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users));
})).filter
1 | Flux | collectList | METHOD_INVOCATION | selectUserByMultipleField_migrated(username).collectList().flatMapMany
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new UsernameNotFoundException(username)))
1 | Flux | fromIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(users))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))))
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
})).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow)));
1 | Flux | flatMap | METHOD_INVOCATION | Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
})).flatMap
1 | Flux | from | METHOD_INVOCATION | Flux.from(connectionPool.create()).flatMap
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute()))
1 | Mono | from | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close()))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return selectUserByUsername_migrated(username).map(RxJavaReactorMigrationUtil.toJdkFunction((attributes)->createUser(new SimpleAuthenticationContext(), attributes)));
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next();
1 | Flux | flatMap | METHOD_INVOCATION | Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next
1 | Flux | flatMap | METHOD_INVOCATION | Flux.from(connectionPool.create()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()))).flatMap
1 | Flux | from | METHOD_INVOCATION | Flux.from(connectionPool.create()).flatMap
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute()))
1 | Mono | from | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | subscribe | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError((error)->LOGGER.error("Unable to initialize Database", error))).subscribe();
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
})))
1 | Flux | just | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())))
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)))
1 | Flux | fromIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements))
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(statement, new Object[0]).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)))
1 | Flux | empty | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.empty())
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return selectUserByEmail_migrated(email).map(RxJavaReactorMigrationUtil.toJdkFunction(this::createUser));
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return query_migrated(sql, email).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next();
1 | Flux | flatMap | METHOD_INVOCATION | query_migrated(sql, email).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return selectUserByUsername_migrated(username).map(RxJavaReactorMigrationUtil.toJdkFunction(this::createUser));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Connection, Single<User>>)(cnx)->{
    return RxJava2Adapter.monoToSingle(selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
        if (!isEmpty) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
        } else {
            String sql;
            Object[] args;
            if (configuration.isUseDedicatedSalt()) {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
                args = new Object[6];
                byte[] salt = createSalt();
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
                args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
                args[4] = user.getEmail();
                args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            } else {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
                args = new Object[5];
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
                args[3] = user.getEmail();
                args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            }
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
        }
    }).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
}).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x)))))
1 | Mono | hasElement | METHOD_INVOCATION | selectUserByUsername_migrated(cnx, user.getUsername()).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)))
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(cnx, sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)))
1 | Mono | from | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(cnx.close()))
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return query_migrated(cnx, sql, username).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next();
1 | Flux | flatMap | METHOD_INVOCATION | query_migrated(cnx, sql, username).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(query_migrated(sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Single<User>>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)));
    }
    ((DefaultUser)updateUser).setId(id);
    return RxJava2Adapter.monoToSingle(Mono.just(updateUser));
}).apply(v)));
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(query_migrated(sql, args).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(id)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(updateUser))
1 | Mono | RETURN_TYPE
1 | Flux | then | METHOD_INVOCATION | return query_migrated(sql, id).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)).flatMap((y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Completable>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y))).then();
1 | Flux | flatMap | METHOD_INVOCATION | query_migrated(sql, id).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)).flatMap((y)->RxJava2Adapter.completableToMono(RxJavaReactorMigrationUtil.toJdkFunction((Function<Integer, Completable>)(rowsUpdated)->{
    if (rowsUpdated == 0) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y))).then
1 | Flux | flatMap | METHOD_INVOCATION | query_migrated(sql, id).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated)).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new UserNotFoundException(id)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return query_migrated(sql, username).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next();
1 | Flux | flatMap | METHOD_INVOCATION | query_migrated(sql, username).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((result)->result.map(ColumnMapRowMapper::mapRow))).next
1 | Flux | RETURN_TYPE
1 | Flux | from | METHOD_INVOCATION | return Flux.from(statement.execute());
1 | Flux | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flux().flatMap(RxJavaReactorMigrationUtil.toJdkFunction((connection)->RxJava2Adapter.fluxToFlowable(query_migrated(connection, sql, args)).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())));
1 | Mono | flux | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create())).flux().flatMap
1 | Mono | from | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close()))
1 | Mono | block | METHOD_INVOCATION | User createdUser = userProvider.create_migrated(user).block()
1 | Mono | block | METHOD_INVOCATION | userProvider.update_migrated(createdUser.getId(), updateUser).block();
1 | Mono | block | METHOD_INVOCATION | User createdUser = userProvider.create_migrated(user).block()
1 | Mono | IMPORT
1 | Mono | block | METHOD_INVOCATION | Connection connection = connectionPool.create().block()
1 | Mono | from | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close()))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute())).subscribe();
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute())).subscribe();
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute())).subscribe();
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute())).block();
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute())).block();
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute())).flatMap((rp)->RxJava2Adapter.singleToMono(Single.fromPublisher(rp.getRowsUpdated()))).block();
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute())).flatMap((rp)->RxJava2Adapter.singleToMono(Single.fromPublisher(rp.getRowsUpdated()))).block
1 | Mono | block | METHOD_INVOCATION | (Request)provider.asyncSignInUrl_migrated("https://gravitee.io", state).block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new BadCredentialsException("Missing authorization code"));
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest))).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString("access_token");
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
}));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
})).flatMap((z)->requestEmailAddress_migrated(accessToken).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<java.lang.String> address)->{
    address.ifPresent((java.lang.String value)->{
        ((DefaultUser)z).setEmail(value);
        ((DefaultUser)z).setUsername(value);
        z.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        z.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return z;
})));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
})).flatMap
1 | Mono | map | METHOD_INVOCATION | (z)->requestEmailAddress_migrated(accessToken).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<java.lang.String> address)->{
    address.ifPresent((java.lang.String value)->{
        ((DefaultUser)z).setEmail(value);
        ((DefaultUser)z).setUsername(value);
        z.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        z.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return z;
}))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction((httpClientResponse)->{
    if (httpClientResponse.statusCode() == 200) {
        String email = null;
        JsonObject payload = httpClientResponse.bodyAsJsonObject();
        if (payload != null && payload.containsKey("elements")) {
            JsonArray elements = payload.getJsonArray("elements");
            for (int i = 0; i < elements.size(); ++i) {
                JsonObject emailPayload = elements.getJsonObject(i);
                if (emailPayload != null && emailPayload.containsKey("handle~")) {
                    JsonObject handle = emailPayload.getJsonObject("handle~");
                    email = handle.getString("emailAddress");
                    break;
                }
            }
        }
        return Optional.ofNullable(email);
    } else {
        LOGGER.warn("Unable to retrieve the LinkedIn email address : {}", httpClientResponse.statusMessage());
        return Optional.empty();
    }
}));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Optional.empty());
1 | Mono | block | METHOD_INVOCATION | Request request = provider.asyncSignInUrl_migrated("https://gravitee.io", state).block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | map | METHOD_INVOCATION | return userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee").filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (user.getPassword() == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        return false;
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    DefaultUser idpUser = new DefaultUser(user.getUsername());
    idpUser.setId(user.getId());
    idpUser.setCredentials(user.getPassword());
    idpUser.setEmail(user.getEmail());
    idpUser.setAdditionalInformation(user.getAdditionalInformation() == null ? new HashMap<>() : user.getAdditionalInformation());
    idpUser.setFirstName(user.getFirstName());
    idpUser.setLastName(user.getLastName());
    idpUser.setAccountExpired(!user.isAccountNonExpired());
    idpUser.setCreatedAt(user.getCreatedAt());
    idpUser.setEnabled(user.isEnabled());
    idpUser.setUpdatedAt(user.getUpdatedAt());
    return idpUser;
}));
1 | Mono | filter | METHOD_INVOCATION | userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee").filter(RxJavaReactorMigrationUtil.toJdkPredicate((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (user.getPassword() == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        return false;
    }
    return true;
})).map
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(user);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(updateUser);
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | fromIterable | METHOD_INVOCATION | return Flux.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKey);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get());
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKeys);
1 | Flux | RETURN_TYPE
1 | Flux | fromIterable | METHOD_INVOCATION | return Flux.fromIterable(keys);
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | fromIterable | METHOD_INVOCATION | return Flux.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKey);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get());
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateKeys);
1 | Flux | RETURN_TYPE
1 | Flux | fromIterable | METHOD_INVOCATION | return Flux.fromIterable(keys);
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | next | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
})).flux().next();
1 | Mono | flux | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
})).flux().next
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
})).flux
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert));
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER).next().map
1 | Flux | subscribe | METHOD_INVOCATION | disposable = RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.reporter.api.audit.model.Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident))))).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable))).subscribe()
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.reporter.api.audit.model.Audit> ident)->RxJava2Adapter.fluxToFlowable(bulk_migrated(ident)))))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->{
    Map<Long, Long> successResult = new HashMap<>();
    Map<Long, Long> failureResult = new HashMap<>();
    docs.forEach((document)->{
        Long timestamp = ((Number)((Document)document.get("_id")).get("_id")).longValue();
        Long successAttempts = ((Number)document.get(fieldSuccess)).longValue();
        Long failureAttempts = ((Number)document.get(fieldFailure)).longValue();
        successResult.put(timestamp, successAttempts);
        failureResult.put(timestamp, failureAttempts);
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((docs)->docs.stream().collect(Collectors.toMap((d)->((Document)d.get("_id")).get("_id"), (d)->d.get("count")))));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)));
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | from | METHOD_INVOCATION | return Flux.from(reportableCollection.bulkWrite(this.convert(audits)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | return histogram.fetch().all().collectList();
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new Page<>(Collections.emptyList(), page, size));
1 | Mono | LOCAL_VARIABLE
1 | Mono | doOnError | METHOD_INVOCATION | return query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList().flatMap((content)->total.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long value)->new Page<Audit>(content, page, value)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve reports for referenceType {} and referenceId {}", referenceType, referenceId, error)));
1 | Mono | flatMap | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList().flatMap((content)->total.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long value)->new Page<Audit>(content, page, value)))).doOnError
1 | Flux | collectList | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList().flatMap
1 | Flux | concatMap | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes).collectList
1 | Flux | concatMap | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap
1 | Flux | concatMap | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap
1 | Flux | concatMap | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap
1 | Flux | map | METHOD_INVOCATION | query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap
1 | Mono | map | METHOD_INVOCATION | (content)->total.map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Long value)->new Page<Audit>(content, page, value)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(result);
1 | Mono | map | METHOD_INVOCATION | return dialectHelper.buildAndProcessHistogram_migrated(dbClient, referenceType, referenceId, criteria).map(RxJavaReactorMigrationUtil.toJdkFunction((stats)->{
    Map<Long, Long> successResult = new TreeMap<>();
    Map<Long, Long> failureResult = new TreeMap<>();
    stats.forEach((slotValue)->{
        Long timestamp = ((Number)slotValue.get("slot")).longValue();
        Long attempts = ((Number)slotValue.get("attempts")).longValue();
        if (((String)slotValue.get("status")).equalsIgnoreCase("success")) {
            successResult.put(timestamp, attempts);
        } else {
            failureResult.put(timestamp, attempts);
        }
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
}));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.singletonMap("data", 0L));
1 | Mono | map | METHOD_INVOCATION | return count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L)).map(RxJavaReactorMigrationUtil.toJdkFunction((data)->Collections.singletonMap("data", data)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L)).map
1 | Mono | just | METHOD_INVOCATION | count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyMap());
1 | Flux | collectMap | METHOD_INVOCATION | return groupBy.fetch().all().collectMap((f)->f.get(convertFieldName(criteria)), (f)->f.get("counter"));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | LOCAL_VARIABLE
1 | Mono | flatMap | METHOD_INVOCATION | Mono<Audit> auditMono = dbClient.select().from(auditsTable).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())).and(where("id").is(id)))).as(AuditJdbc.class).fetch().first().map(this::convert).flatMap(this::fillWithActor).flatMap(this::fillWithTarget).flatMap(this::fillWithAccessPoint).flatMap(this::fillWithOutcomes)
1 | Mono | flatMap | METHOD_INVOCATION | dbClient.select().from(auditsTable).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())).and(where("id").is(id)))).as(AuditJdbc.class).fetch().first().map(this::convert).flatMap(this::fillWithActor).flatMap(this::fillWithTarget).flatMap(this::fillWithAccessPoint).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | dbClient.select().from(auditsTable).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())).and(where("id").is(id)))).as(AuditJdbc.class).fetch().first().map(this::convert).flatMap(this::fillWithActor).flatMap(this::fillWithTarget).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | dbClient.select().from(auditsTable).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())).and(where("id").is(id)))).as(AuditJdbc.class).fetch().first().map(this::convert).flatMap(this::fillWithActor).flatMap
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(auditsTable).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())).and(where("id").is(id)))).as(AuditJdbc.class).fetch().first().map(this::convert).flatMap
1 | Mono | doOnError | METHOD_INVOCATION | return auditMono.doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to retrieve the Report with referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, error)));
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("actor")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("actor")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("actor")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("target")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("target")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | dbClient.select().from(auditEntitiesTable).matching(from(where("audit_id").is(audit.getId()).and(where("audit_field").is("target")))).as(AuditEntityJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return dbClient.select().from(auditAccessPointsTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditAccessPointJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(auditAccessPointsTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditAccessPointJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | dbClient.select().from(auditAccessPointsTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditAccessPointJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return dbClient.select().from(auditOutcomesTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditOutcomeJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit));
1 | Mono | map | METHOD_INVOCATION | dbClient.select().from(auditOutcomesTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditOutcomeJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty
1 | Mono | just | METHOD_INVOCATION | dbClient.select().from(auditOutcomesTable).matching(from(where("audit_id").is(audit.getId()))).as(AuditOutcomeJdbc.class).fetch().first().map((entity)->fillWith(audit, entity)).switchIfEmpty(Mono.just(audit))
1 | Flux | RETURN_TYPE
1 | Flux | empty | METHOD_INVOCATION | return Flux.empty();
1 | Flux | from | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2)))
1 | Flux | flatMap | METHOD_INVOCATION | Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(audits).flatMap
1 | Mono | OTHER
1 | Mono | LOCAL_VARIABLE
1 | Mono | then | METHOD_INVOCATION | insertAction = insertAction.then(prepateInsertEntity(audit, actor, "actor"))
1 | Mono | then | METHOD_INVOCATION | insertAction = insertAction.then(prepateInsertEntity(audit, target, "target"))
1 | Mono | then | METHOD_INVOCATION | insertAction = insertAction.then(insertOutcomeSpec.fetch().rowsUpdated())
1 | Mono | then | METHOD_INVOCATION | insertAction = insertAction.then(insertAccessPointSpec.fetch().rowsUpdated())
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0)).flatMap((found)->{
    if (found == 0) {
        return Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then();
    } else {
        return Mono.empty();
    }
}).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).doOnTerminate(this::initializeBulkProcessor).subscribe();
1 | Mono | doOnTerminate | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0)).flatMap((found)->{
    if (found == 0) {
        return Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then();
    } else {
        return Mono.empty();
    }
}).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).doOnTerminate(this::initializeBulkProcessor).subscribe
1 | Mono | doOnError | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0)).flatMap((found)->{
    if (found == 0) {
        return Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then();
    } else {
        return Mono.empty();
    }
}).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).doOnTerminate
1 | Mono | flatMap | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0)).flatMap((found)->{
    if (found == 0) {
        return Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then();
    } else {
        return Mono.empty();
    }
}).doOnError
1 | Mono | switchIfEmpty | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0)).flatMap
1 | Mono | just | METHOD_INVOCATION | dbClient.execute(dialectHelper.tableExists(auditsTable)).as(Integer.class).fetch().first().switchIfEmpty(Mono.just(0))
1 | Flux | then | METHOD_INVOCATION | return Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then();
1 | Flux | concatMap | METHOD_INVOCATION | Flux.fromIterable(sqlStatements).concatMap((statement)->dbClient.execute(statement).then()).then
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(sqlStatements).concatMap
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | subscribe | METHOD_INVOCATION | disposable = RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.reporter.api.audit.model.Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident))))).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error))).subscribe()
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.reporter.api.audit.model.Audit> ident)->RxJava2Adapter.fluxToFlowable(JdbcAuditReporter.this.bulk_migrated(ident)))))
1 | Mono | subscribe | METHOD_INVOCATION | connectionFactory.disposeLater().subscribe();
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | return Flux.fromIterable(intervals.keySet()).flatMap((slot)->{
    String beginSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot), ZoneId.of(ZoneOffset.UTC.getId())));
    String endSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot + criteria.interval()), ZoneId.of(ZoneOffset.UTC.getId())));
    String query = " SELECT " + slot + " as slot, o.status, COUNT(o.status) as attempts " + queryBuilder.toString() + whereClauseBuilder.toString() + " AND \'" + beginSlot + "\' <= a.timestamp and \'" + endSlot + "\' >= a.timestamp  GROUP BY o.status ORDER BY o.status ";
    for (Map.Entry<String, Object> bind : bindings.entrySet()) {
        Object value = bind.getValue();
        if (value instanceof List) {
            String types = ((List<String>)value).stream().collect(Collectors.joining("\',\'", "\'", "\'"));
            query = query.replaceAll(":" + bind.getKey(), types);
        } else if (value instanceof LocalDateTime) {
            query = query.replaceAll(":" + bind.getKey(), "\'" + dateTimeFormatter.format((LocalDateTime)value) + "\'");
        } else {
            query = query.replaceAll(":" + bind.getKey(), "\'" + String.valueOf(value) + "\'");
        }
    }
    return dbClient.execute(query).fetch().all();
}).collectList();
1 | Flux | flatMap | METHOD_INVOCATION | Flux.fromIterable(intervals.keySet()).flatMap((slot)->{
    String beginSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot), ZoneId.of(ZoneOffset.UTC.getId())));
    String endSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot + criteria.interval()), ZoneId.of(ZoneOffset.UTC.getId())));
    String query = " SELECT " + slot + " as slot, o.status, COUNT(o.status) as attempts " + queryBuilder.toString() + whereClauseBuilder.toString() + " AND \'" + beginSlot + "\' <= a.timestamp and \'" + endSlot + "\' >= a.timestamp  GROUP BY o.status ORDER BY o.status ";
    for (Map.Entry<String, Object> bind : bindings.entrySet()) {
        Object value = bind.getValue();
        if (value instanceof List) {
            String types = ((List<String>)value).stream().collect(Collectors.joining("\',\'", "\'", "\'"));
            query = query.replaceAll(":" + bind.getKey(), types);
        } else if (value instanceof LocalDateTime) {
            query = query.replaceAll(":" + bind.getKey(), "\'" + dateTimeFormatter.format((LocalDateTime)value) + "\'");
        } else {
            query = query.replaceAll(":" + bind.getKey(), "\'" + String.valueOf(value) + "\'");
        }
    }
    return dbClient.execute(query).fetch().all();
}).collectList
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(intervals.keySet()).flatMap
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    final String key = SharedSecret.generate();
    final String barCode = QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), account), 200, 200);
    return new Enrollment(key, barCode);
}));
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    final String key = enrolledFactor.getSecurity().getValue();
    final String username = user.getUsername();
    return QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), username), 200, 200);
}));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | botDetectionManager.validate_migrated(context).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((isValid)->{
    if (isValid) {
        LOGGER.debug("No bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.next();
    } else {
        LOGGER.warn("Bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.fail(BAD_REQUEST_400, new BotDetectedException(DEFAULT_ERROR_MSG));
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    LOGGER.error("BotDetection failed for domain \'{}\' and client \'{}\'", domain.getId(), client.getId(), error);
    routingContext.fail(INTERNAL_SERVER_ERROR_500, new TechnicalManagementException(DEFAULT_ERROR_MSG));
}));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(userAuthenticationManager.connect_migrated(user));
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->{
    eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(endUserAuthentication, domain, client, user));
    resultHandler.handle(Future.succeededFuture(new User(user)));
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    logger.error("Unable to authenticate social provider", error);
    eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(endUserAuthentication, domain, client, error));
    resultHandler.handle(Future.failedFuture(error));
}));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value"))))
1 | Mono | error | METHOD_INVOCATION | authenticationProvider.loadUserByUsername_migrated(endUserAuthentication).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))
1 | Mono | subscribe | METHOD_INVOCATION | domainRepository.findAllByReferenceId_migrated(domain.getReferenceId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((d)->!domain.getId().equals(d.getId()))).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((domains)->domains.forEach(clientManager::deployCrossDomain)));
1 | Flux | collectList | METHOD_INVOCATION | domainRepository.findAllByReferenceId_migrated(domain.getReferenceId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((d)->!domain.getId().equals(d.getId()))).collectList().subscribe
1 | Flux | filter | METHOD_INVOCATION | domainRepository.findAllByReferenceId_migrated(domain.getReferenceId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((d)->!domain.getId().equals(d.getId()))).collectList
1 | Mono | subscribe | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(state, certificateManager.defaultCertificateProvider()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->handler.handle(Future.succeededFuture(true))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}));
1 | Mono | doOnSuccess | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(state, certificateManager.defaultCertificateProvider()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
})).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}), RxJavaReactorMigrationUtil.toRunnable(()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}));
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderManager.get_migrated(providerId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((authenticationProvider)->handler.handle(Future.succeededFuture(authenticationProvider))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    logger.error("An error occurs while getting identity provider {}", providerId, ex);
    handler.handle(Future.failedFuture(ex));
}), RxJavaReactorMigrationUtil.toRunnable(()->{
    logger.error("Unknown identity provider {}", providerId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}));
1 | Mono | subscribe | METHOD_INVOCATION | userService.confirmRegistration_migrated(client, user, principal).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->handler.handle(Future.succeededFuture(response))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as
1 | Mono | subscribe | METHOD_INVOCATION | userService.register_migrated(client, user, principal).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->handler.handle(Future.succeededFuture(response))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | subscribe | METHOD_INVOCATION | userAuthenticationManager.loadUserByUsername_migrated(client, username, request).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->handler.handle(Future.succeededFuture(user))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new UsernameNotFoundException(username)))));
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((socialProviderData)->resultHandler.handle(Future.succeededFuture(socialProviderData))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->resultHandler.handle(Future.failedFuture(error))));
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)))
1 | Mono | map | METHOD_INVOCATION | getAuthorizeUrl_migrated(identityProvider.getId(), context).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return identityProviderManager.get_migrated(identityProviderId).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v))));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = RxJava2Adapter.monoToMaybe(((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl_migrated(redirectUri, state));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
    if (HttpMethod.GET == request.getMethod()) {
        return request.getUri();
    } else {
        final Map<String, String> queryParams = getParams(request.getBody());
        queryParams.put(ACTION_KEY, request.getUri());
        return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
    }
})))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(enrolledFactor).flatMap((factor)->userService.addFactor_migrated(user.getId(), factor, new DefaultUser(user))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->handler.handle(Future.succeededFuture(user1))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(enrolledFactor).flatMap((factor)->userService.addFactor_migrated(user.getId(), factor, new DefaultUser(user))).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((factors)->handler.handle(Future.succeededFuture(factors))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(entry.getValue().enroll_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))
1 | Mono | subscribe | METHOD_INVOCATION | userService.verifyToken_migrated(token).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((userToken)->handler.handle(Future.succeededFuture(userToken))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new InvalidTokenException("The JWT token is invalid")))));
1 | Mono | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate_migrated(client, authentication, true).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->handler.handle(Future.succeededFuture(new io.gravitee.am.gateway.handler.common.vertx.web.auth.user.User(user)))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | IMPORT
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName()).collectList())
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), query.getCredID()).collectList())
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(fetchCredentials).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(promise::complete), RxJavaReactorMigrationUtil.toJdkConsumer(promise::fail));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(fetchCredentials).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), Claims.sub)), RxJava2Adapter.monoToSingle(generateCredID_migrated(query.getUserName(), StandardClaims.PREFERRED_USERNAME)), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v))).subscribe
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(create_migrated(authenticator));
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then());
        });
    }
}).apply(y)))).then
1 | Flux | collectList | METHOD_INVOCATION | credentialService.findByCredentialId_migrated(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).collectList().flatMap
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(credentialService.update_migrated(credential).then())
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return credentialService.create_migrated(credential).then();
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Flux | subscribe | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(resourceService.findByDomain_migrated(this.domain.getId())).subscribeOn(Schedulers.io())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((res)->{
    ResourceProvider provider = resourcePluginManager.create(res.getType(), res.getConfiguration());
    provider.start();
    resourceProviders.put(res.getId(), provider);
    logger.info("Resource {} loaded for domain {}", res.getName(), domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize resources for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | resourceService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction((res)->resourcePluginManager.create(res.getType(), res.getConfiguration()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((provider)->{
    provider.start();
    this.resourceProviders.put(resourceId, provider);
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Initialization of Resource provider \'{}\' failed", error)));
1 | Mono | map | METHOD_INVOCATION | resourceService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction((res)->resourcePluginManager.create(res.getType(), res.getConfiguration()))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | resourceService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map
1 | Mono | error | METHOD_INVOCATION | resourceService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found")))
1 | Mono | IMPORT
1 | Flux | subscribe | METHOD_INVOCATION | botDetectionService.findByDomain_migrated(domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->{
    updateBotDetection(detection);
    LOGGER.info("Bot detection {} loaded for domain {}", detection.getName(), domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to initialize bot detections for domain {}", domain.getName(), error)));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(false);
1 | Mono | subscribe | METHOD_INVOCATION | botDetectionService.findById_migrated(pluginId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::updateBotDetection), RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to load bot detection for domain {}", domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->LOGGER.error("No bot detection found with id {}", pluginId)));
1 | Mono | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(routingContext.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as
1 | Mono | subscribe | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(state, certificateManager.defaultCertificateProvider()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->handler.handle(Future.succeededFuture(true))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}));
1 | Mono | doOnSuccess | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(state, certificateManager.defaultCertificateProvider()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
})).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}), RxJavaReactorMigrationUtil.toRunnable(()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtParser.parse(token))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v))));
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtParser.parse(token))).flatMap
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(jwt.getSub()).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
})))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userValidator.validate_migrated(user).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_REGISTERED).throwable(throwable)))));
1 | Mono | doOnError | METHOD_INVOCATION | userValidator.validate_migrated(user).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_REGISTERED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
})).doOnError
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration()))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source))))
1 | Mono | flatMap | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty
1 | Mono | hasElement | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())))
1 | Mono | error | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), user.getUsername(), source).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(source));
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION)))).doOnError
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
})).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap(userService::enhance_migrated).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->userProvider.update_migrated(y.getId(), convert(user))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap
1 | Mono | error | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new AccountInactiveException("User needs to complete the activation process"));
1 | Mono | doOnError | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET)))).doOnError
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap(userService::enhance_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap(userService::enhance_migrated).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)));
}).apply(v)))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap
1 | Mono | error | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(Mono.just(user1)))
1 | Mono | just | METHOD_INVOCATION | loginAttemptService.reset_migrated(criteria).then(Mono.just(user1))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1)))
1 | Mono | just | METHOD_INVOCATION | credentialService.deleteByUserId_migrated(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).then(Mono.just(user1))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user1))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new EmailFormatInvalidException(email));
1 | Mono | then | METHOD_INVOCATION | return userService.findByDomainAndCriteria_migrated(domain.getId(), params.buildCriteria()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal).type(EventType.FORGOT_PASSWORD_REQUESTED).throwable(throwable)))).then();
1 | Mono | doOnError | METHOD_INVOCATION | userService.findByDomainAndCriteria_migrated(domain.getId(), params.buildCriteria()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
})).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal).type(EventType.FORGOT_PASSWORD_REQUESTED).throwable(throwable)))).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.findByDomainAndCriteria_migrated(domain.getId(), params.buildCriteria()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
})).doOnError
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.findByDomainAndCriteria_migrated(domain.getId(), params.buildCriteria()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start())).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | userService.findByDomainAndCriteria_migrated(domain.getId(), params.buildCriteria()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
            }
            return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(user, optUser.get())));
    });
}).apply(a)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(userService.create_migrated(convert(idpUser.getUser(), idpUser.getSource())));
        }
        return RxJava2Adapter.monoToSingle(userService.update_migrated(enhanceUser(optEndUser.get(), idpUser.getUser())));
    });
}).apply(a)))))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))).defaultIfEmpty(Optional.empty()))
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(authProvider).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(username)) : RxJava2Adapter.monoToMaybe(userProvider.findByEmail_migrated(email));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))).defaultIfEmpty
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map
1 | Mono | defer | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByDomainAndExternalIdAndSource_migrated(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername())))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(Optional.empty()))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(clientSyncService.findById_migrated(audience).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | clientSyncService.findById_migrated(audience).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Flux | subscribe | METHOD_INVOCATION | formRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::updateForm), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize forms for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | formRepository.findById_migrated(formId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d for domain {}", formId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} form for domain {}", eventType, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No form found with id {}", formId)));
1 | Mono | subscribe | METHOD_INVOCATION | userService.resetPassword_migrated(client, user, principal).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->handler.handle(Future.succeededFuture(response))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext_migrated(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | jwtService.decode_migrated(idToken).flatMap((e)->clientSyncService.findByClientId_migrated(e.getAud())).flatMap((z)->RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(idToken, z).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext((java.lang.Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as(RxJava2Adapter::maybeToMono)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.succeededFuture())), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.succeededFuture())));
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.decode_migrated(idToken).flatMap((e)->clientSyncService.findByClientId_migrated(e.getAud())).flatMap((z)->RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(idToken, z).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext((java.lang.Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as(RxJava2Adapter::maybeToMono)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.decode_migrated(idToken).flatMap((e)->clientSyncService.findByClientId_migrated(e.getAud())).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(idToken, z).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(z))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(ex))
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findById_migrated(endUser.getClient()).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(endUser.getClient()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.succeededFuture())), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.succeededFuture())));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | clientSyncService.findById_migrated(endUser.getClient()).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(endUser.getClient()))).subscribe
1 | Mono | defer | METHOD_INVOCATION | clientSyncService.findById_migrated(endUser.getClient()).switchIfEmpty(Mono.defer(()->clientSyncService.findByClientId_migrated(endUser.getClient())))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endpoint)->handler.handle(Future.succeededFuture(endpoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
})).subscribe();
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endpoint)->handler.handle(Future.succeededFuture(endpoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
})).subscribe
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endpoint)->handler.handle(Future.succeededFuture(endpoint)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return RxJava2Adapter.monoToMaybe(generateLogoutCallback_migrated(routingContext, endUser, optLogoutRequest.get()));
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl_migrated(authentication)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty()))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return jwtService.encode_migrated(stateJwt, certificateManager.defaultCertificateProvider()).map(RxJavaReactorMigrationUtil.toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(routingContext.request(), routingContext.get(CONTEXT_PATH) + "/logout/callback");
    UriBuilder builder = UriBuilder.fromHttpUrl(endpoint.getUri());
    builder.addParameter(Parameters.POST_LOGOUT_REDIRECT_URI, redirectUri);
    builder.addParameter(Parameters.ID_TOKEN_HINT, (String)endUser.getAdditionalInformation().get(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY));
    builder.addParameter(io.gravitee.am.common.oauth2.Parameters.STATE, state);
    return Optional.of(builder.buildString());
}));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->authHandler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId)))), RxJavaReactorMigrationUtil.toRunnable(()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId)))));
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.resetPassword_migrated(eq(client), eq(user), any())).thenReturn(Mono.just(new ResetPasswordResponse()))
1 | Mono | just | METHOD_INVOCATION | when(userService.resetPassword_migrated(eq(client), eq(user), any())).thenReturn(Mono.just(resetPasswordResponse))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decode_migrated("idToken")).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated("idToken", client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(JWT.class), any(CertificateProvider.class))).thenReturn(Mono.just("jwtstatevalue"))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(authProvider.signOutUrl_migrated(any())).thenReturn(Mono.just(req))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated(any())).thenReturn(Mono.just(authProvider))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(JWT.class), any(CertificateProvider.class))).thenReturn(Mono.just("jwtstatevalue"))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findById_migrated("client-id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(authProvider.signOutUrl_migrated(any())).thenReturn(Mono.just(req))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated(any())).thenReturn(Mono.just(authProvider))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(anyString())).thenReturn(Mono.just(new Client()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.update_migrated(anyString(), any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.update_migrated(anyString(), any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.update_migrated(anyString(), any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.create_migrated(any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.singletonList(user)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.singletonList(user)))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.singletonList(user)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated("username")).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.singletonList(user)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated("username")).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.singletonList(user)))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | empty | METHOD_INVOCATION | when(userProvider.findByUsername_migrated("username")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Arrays.asList(user, user)))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated("username")).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Arrays.asList(user, user)))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByEmail_migrated(user.getEmail())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated("idp-1")).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.create_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndExternalIdAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByEmail_migrated(user.getEmail())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated("idp-1")).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated("idp-1")).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userProvider.findByEmail_migrated(user.getEmail())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria_migrated(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Mono.just(Collections.emptyList()))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated("idp-1")).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.update_migrated(anyString(), any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(credentialService.deleteByUserId_migrated(any(), any(), any())).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query2.getUserName())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(credentialService.findByUsername_migrated(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flux.just(credential))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userAuthenticationManager.connect_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(EndUserAuthentication.class))).thenReturn(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(EndUserAuthentication.class))).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(BadCredentialsException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(EndUserAuthentication.class))).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(appClient.getClientId())).thenReturn(Mono.just(appClient))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("test")).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.confirmRegistration_migrated(eq(client), eq(user), any())).thenReturn(Mono.just(new RegistrationResponse()))
1 | Mono | just | METHOD_INVOCATION | when(userService.confirmRegistration_migrated(eq(client), eq(user), any())).thenReturn(Mono.just(registrationResponse))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.register_migrated(eq(client), any(), any())).thenReturn(Mono.just(new RegistrationResponse()))
1 | Mono | just | METHOD_INVOCATION | when(userService.register_migrated(eq(client), any(), any())).thenReturn(Mono.just(registrationResponse))
1 | Mono | error | METHOD_INVOCATION | when(userService.register_migrated(eq(client), any(), any())).thenReturn(Mono.error(new UserAlreadyExistsException("test")))
1 | Mono | error | METHOD_INVOCATION | when(userService.register_migrated(eq(client), any(), any())).thenReturn(Mono.error(new InvalidUserException("Username invalid")))
1 | Mono | error | METHOD_INVOCATION | when(userService.register_migrated(eq(client), any(), any())).thenReturn(Mono.error(new EmailFormatInvalidException("test")))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(userService.forgotPassword_migrated(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(userService.forgotPassword_migrated(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Mono.error(new UserNotFoundException("email@test.com")))
1 | Mono | error | METHOD_INVOCATION | when(userService.forgotPassword_migrated(argThat((p)->p.getEmail().equals("email.test.com")), eq(client), any(User.class))).thenReturn(Mono.error(new EmailFormatInvalidException("email.test.com")))
1 | Mono | error | METHOD_INVOCATION | when(userService.forgotPassword_migrated(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Mono.error(new EnforceUserIdentityException()))
1 | Mono | error | METHOD_INVOCATION | when(userService.forgotPassword_migrated(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Mono.error(new EnforceUserIdentityException()))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new Enrollment(this.configuration.countries()));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->new Enrollment(SharedSecret.generate())));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication with type EMAIL"));
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return provider.sendMessage_migrated(emailWrapper.getEmail()).then(Mono.just(enrolledFactor).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
}).apply(v)))).then());
1 | Mono | then | METHOD_INVOCATION | provider.sendMessage_migrated(emailWrapper.getEmail()).then(Mono.just(enrolledFactor).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
}).apply(v)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(enrolledFactor).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return RxJava2Adapter.monoToSingle(userService.addFactor_migrated(context.getUser().getId(), ef, new DefaultUser(context.getUser())));
}).apply(v)))).then
1 | Mono | just | METHOD_INVOCATION | Mono.just(enrolledFactor).flatMap
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Code can\'t be sent"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Email can\'t be sent"));
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    int counter = factor.getSecurity().getData(FactorDataKeys.KEY_MOVING_FACTOR, Integer.class);
    factor.getSecurity().putData(FactorDataKeys.KEY_MOVING_FACTOR, counter + 1);
    factor.getSecurity().removeData(FactorDataKeys.KEY_EXPIRE_AT);
    return factor;
}));
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.addFactor_migrated(any(), any(), any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(smtpProvider.sendMessage_migrated(any())).thenReturn(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(reporter).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->{
    if (Objects.isNull(result) || Objects.isNull(result.getData())) {
        return new Page<>(new ArrayList<>(), 0, 0);
    }
    return result;
}));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userValidator.validate_migrated(user).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(user.getExternalId(), convert(user)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(user));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | return factorService.findByDomain_migrated(domain).collectList();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | collectList | METHOD_INVOCATION | return credentialService.findByUserId_migrated(ReferenceType.DOMAIN, user.getReferenceId(), user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((credential)->{
    removeSensitiveData(credential);
    return credential;
})).collectList();
1 | Flux | map | METHOD_INVOCATION | credentialService.findByUserId_migrated(ReferenceType.DOMAIN, user.getReferenceId(), user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((credential)->{
    removeSensitiveData(credential);
    return credential;
})).collectList
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return credentialService.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).map(RxJavaReactorMigrationUtil.toJdkFunction((credential)->{
    removeSensitiveData(credential);
    return credential;
}));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | credentialService.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).map
1 | Mono | error | METHOD_INVOCATION | credentialService.findById_migrated(id).switchIfEmpty(Mono.error(new CredentialNotFoundException(id)))
1 | Mono | subscribe | METHOD_INVOCATION | accountService.get_migrated(token.getSub()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->{
    routingContext.put(ConstantKeys.USER_CONTEXT_KEY, user);
    routingContext.next();
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    LOGGER.error("Unable to retrieve user for Id {}", token.getSub());
    routingContext.fail(error);
}), RxJavaReactorMigrationUtil.toRunnable(()->routingContext.fail(new UserNotFoundException(token.getSub()))));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.getActivity_migrated(user, criteria, page, size).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((activities)->AccountResponseHandler.handleDefaultResponse(routingContext, activities)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage()))).subscribe();
1 | Mono | doOnError | METHOD_INVOCATION | accountService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage()))).subscribe
1 | Mono | doOnSuccess | METHOD_INVOCATION | accountService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext))).doOnError
1 | Mono | subscribe | METHOD_INVOCATION | accountService.getFactors_migrated(user.getReferenceId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((factors)->AccountResponseHandler.handleDefaultResponse(routingContext, factors)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.upsertFactor_migrated(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.upsertFactor_migrated(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | factorProvider.generateQrCode_migrated(user, enrolledFactor).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((barCode)->AccountResponseHandler.handleDefaultResponse(routingContext, new JsonObject().put("qrCode", barCode))), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail), RxJavaReactorMigrationUtil.toRunnable(()->routingContext.fail(404)));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.upsertFactor_migrated(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.getFactor_migrated(factorId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((factor)->handler.handle(Future.succeededFuture(factor))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new FactorNotFoundException(factorId)))));
1 | Mono | subscribe | METHOD_INVOCATION | factorProvider.enroll_migrated(endUser.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((enrolledFactor)->handler.handle(Future.succeededFuture(enrolledFactor))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | map | METHOD_INVOCATION | factorProvider.enroll_migrated(endUser.getUsername()).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
})).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredentials_migrated(user).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((enrolledCredentials)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledCredentials)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredential_migrated(credentialId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((credential)->AccountResponseHandler.handleDefaultResponse(routingContext, credential)), RxJavaReactorMigrationUtil.toJdkConsumer(routingContext::fail));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidScopeException("Invalid scope(s): " + invalidScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidScopeException("Invalid scope(s): " + requestScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token"))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((user)->RxJava2Adapter.monoToSingle(enhance_migrated(user, accessToken))).apply(y)))))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->processClaims(user, accessToken))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo_migrated(userinfo, client)));
    }
}).apply(v))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(buffer)), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token"))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((user)->RxJava2Adapter.monoToSingle(enhance_migrated(user, accessToken))).apply(y)))))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->processClaims(user, accessToken))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo_migrated(userinfo, client)));
    }
}).apply(v))).subscribe
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token"))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((user)->RxJava2Adapter.monoToSingle(enhance_migrated(user, accessToken))).apply(y)))))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->processClaims(user, accessToken))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token"))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((user)->RxJava2Adapter.monoToSingle(enhance_migrated(user, accessToken))).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token"))))
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(subject).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwtService.encodeUserinfo_migrated(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo_migrated(userinfo, client)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(user);
1 | Mono | map | METHOD_INVOCATION | return userService.enhance_migrated(user).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->{
    Map<String, Object> userClaims = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    if (user.getRolesPermissions() != null && !user.getRolesPermissions().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.ROLES, user.getRolesPermissions().stream().map(Role::getName).collect(Collectors.toList()));
    }
    if (user.getGroups() != null && !user.getGroups().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.GROUPS, user.getGroups());
    }
    user1.setAdditionalInformation(userClaims);
    return user1;
}));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).flatMap((e)->accessTokenRepository.findByToken_migrated(e.getJti()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.AccessToken accessToken)->convertAccessToken(e))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(token, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | map | METHOD_INVOCATION | (e)->accessTokenRepository.findByToken_migrated(e.getJti()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.AccessToken accessToken)->convertAccessToken(e)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(refreshToken, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).flatMap((e)->refreshTokenRepository.findByToken_migrated(e.getJti()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.RefreshToken refreshToken1)->convertRefreshToken(e))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(refreshToken, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | map | METHOD_INVOCATION | (e)->refreshTokenRepository.findByToken_migrated(e.getJti()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.repository.oauth2.model.RefreshToken refreshToken1)->convertRefreshToken(e)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return introspectionTokenService.introspect_migrated(token, false).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convertAccessToken));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->createExecutionContext(oAuth2Request, client, endUser))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<Token>>)(executionContext)->{
    JWT accessToken = createAccessTokenJWT(oAuth2Request, client, endUser, executionContext);
    JWT refreshToken = oAuth2Request.isSupportRefreshToken() ? createRefreshTokenJWT(oAuth2Request, client, endUser, accessToken) : null;
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->tokenEnhancer.enhance_migrated(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((token)->storeTokens(accessToken, refreshToken, oAuth2Request))));
}).apply(v)));
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->createExecutionContext(oAuth2Request, client, endUser))).flatMap
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->tokenEnhancer.enhance_migrated(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((token)->storeTokens(accessToken, refreshToken, oAuth2Request))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(RxJava2Adapter.monoToSingle(jwtService.encode_migrated(accessToken, client)), (refreshToken != null ? RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))).flatMap((accessToken1)->tokenEnhancer.enhance_migrated(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwtService.encode_migrated(refreshToken, client).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return getRefreshToken_migrated(refreshToken, client).switchIfEmpty(Mono.error(new InvalidGrantException("Refresh token is invalid"))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<Token>>)(refreshToken1)->{
    if (refreshToken1.getExpireAt().before(new Date())) {
        throw new InvalidGrantException("Refresh token is expired");
    }
    if (!refreshToken1.getClientId().equals(tokenRequest.getClientId())) {
        throw new InvalidGrantException("Refresh token was issued to another client");
    }
    if (refreshToken1.getAdditionalInformation().get("permissions") != null) {
        tokenRequest.setPermissions((List<PermissionRequest>)refreshToken1.getAdditionalInformation().get("permissions"));
    }
    return RxJava2Adapter.monoToSingle(refreshTokenRepository.delete_migrated(refreshToken1.getValue()).then(Mono.just(refreshToken1)));
}).apply(v)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | getRefreshToken_migrated(refreshToken, client).switchIfEmpty(Mono.error(new InvalidGrantException("Refresh token is invalid"))).flatMap
1 | Mono | error | METHOD_INVOCATION | getRefreshToken_migrated(refreshToken, client).switchIfEmpty(Mono.error(new InvalidGrantException("Refresh token is invalid")))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(refreshTokenRepository.delete_migrated(refreshToken1.getValue()).then(Mono.just(refreshToken1)))
1 | Mono | just | METHOD_INVOCATION | refreshTokenRepository.delete_migrated(refreshToken1.getValue()).then(Mono.just(refreshToken1))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((certificateProvider)->RxJava2Adapter.fluxToFlowable(certificateProvider.getProvider().keys_migrated()))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
}));
1 | Flux | collectList | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((certificateProvider)->RxJava2Adapter.fluxToFlowable(certificateProvider.getProvider().keys_migrated()))).collectList().map
1 | Flux | flatMap | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((certificateProvider)->RxJava2Adapter.fluxToFlowable(certificateProvider.getProvider().keys_migrated()))).collectList
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(client.getJwks());
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((provider)->RxJava2Adapter.fluxToFlowable(provider.getProvider().privateKey_migrated()))).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
}));
1 | Flux | collectList | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((provider)->RxJava2Adapter.fluxToFlowable(provider.getProvider().privateKey_migrated()))).collectList().map
1 | Flux | flatMap | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((provider)->RxJava2Adapter.fluxToFlowable(provider.getProvider().privateKey_migrated()))).collectList
1 | Flux | fromIterable | METHOD_INVOCATION | Flux.fromIterable(certificateManager.providers()).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e)))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException(jwksUri + " is not valid."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | return Mono.just(jwk.get());
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | return Mono.just(jwk.get());
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return authorizationCodeRepository.findByCode_migrated(code).switchIfEmpty(handleInvalidCode_migrated(code)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))).flatMap((z)->authorizationCodeRepository.delete_migrated(z.getId()));
1 | Mono | flatMap | METHOD_INVOCATION | authorizationCodeRepository.findByCode_migrated(code).switchIfEmpty(handleInvalidCode_migrated(code)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | authorizationCodeRepository.findByCode_migrated(code).switchIfEmpty(handleInvalidCode_migrated(code)).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(code)).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(accessToken.getToken()));
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())));
    }
    return deleteAccessTokenAction;
})).then(Mono.error(new InvalidGrantException("The authorization code " + code + " is invalid.")));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.fluxToObservable(accessTokenRepository.findByAuthorizationCode_migrated(code)).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = RxJava2Adapter.monoToCompletable(accessTokenRepository.delete_migrated(accessToken.getToken()));
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(refreshTokenRepository.delete_migrated(accessToken.getRefreshToken())));
    }
    return deleteAccessTokenAction;
})).then(Mono.error(new InvalidGrantException("The authorization code " + code + " is invalid.")))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->authHandler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId)))), RxJavaReactorMigrationUtil.toRunnable(()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId)))));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return idTokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    IDTokenResponse response = new IDTokenResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setIdToken(idToken);
    response.setState(authorizationRequest.getState());
    return response;
}));
1 | Mono | map | METHOD_INVOCATION | return tokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    ImplicitResponse response = new ImplicitResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setAccessToken(accessToken);
    response.setState(authorizationRequest.getState());
    return response;
}));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(prepareResponse(authorizationRequest, client, endUser)).flatMap((response)->processResponse_migrated(response, authorizationRequest, client, endUser));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(authorizationResponse);
1 | Mono | map | METHOD_INVOCATION | return jwtService.encodeAuthorization_migrated(jwtAuthorizationResponse.build(), client).flatMap((authorization)->jweService.encryptAuthorization_migrated(authorization, client)).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    jwtAuthorizationResponse.setResponseType(authorizationRequest.getResponseType());
    jwtAuthorizationResponse.setResponseMode(authorizationRequest.getResponseMode());
    jwtAuthorizationResponse.setToken(token);
    return jwtAuthorizationResponse;
}));
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.encodeAuthorization_migrated(jwtAuthorizationResponse.build(), client).flatMap((authorization)->jweService.encryptAuthorization_migrated(authorization, client)).map
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(scopeManager.findAll());
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("A refresh token must be supplied."));
1 | Mono | flatMap | METHOD_INVOCATION | return super.parseRequest_migrated(tokenRequest, client).flatMap((tokenRequest1)->getTokenService().refresh_migrated(refreshToken, tokenRequest, client).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.gateway.handler.oauth2.service.token.Token refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
})));
1 | Mono | map | METHOD_INVOCATION | (tokenRequest1)->getTokenService().refresh_migrated(refreshToken, tokenRequest, client).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.gateway.handler.oauth2.service.token.Token refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
}))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(tokenRequest);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(e, client)).map
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(tokenRequest);
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return resolveRequest_migrated(tokenRequest, client, endUser).flatMap((tokenRequest1)->createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->createAccessToken_migrated(oAuth2Request, client, endUser));
1 | Mono | flatMap | METHOD_INVOCATION | resolveRequest_migrated(tokenRequest, client, endUser).flatMap((tokenRequest1)->createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Mono.just(tokenRequest.createOAuth2Request()).map(RxJavaReactorMigrationUtil.toJdkFunction((oAuth2Request)->{
    if (endUser != null) {
        oAuth2Request.setSubject(endUser.getId());
    }
    oAuth2Request.setSupportRefreshToken(isSupportRefreshToken(client));
    return oAuth2Request;
}));
1 | Mono | just | METHOD_INVOCATION | Mono.just(tokenRequest.createOAuth2Request()).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | this.clientSyncService.findTemplates_migrated().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((templates)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationTemplate.from(templates)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return authorizationCodeService.create_migrated(authorizationRequest, endUser).flatMap((v)->RxJava2Adapter.singleToMono((Single<AuthorizationResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AuthorizationCode, Single<AuthorizationResponse>>)(code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        })));
    
    default: 
        return RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        })));
    
    }
}).apply(v)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(idTokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((idToken)->{
    hybridResponse.setIdToken(idToken);
    return hybridResponse;
})))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.create_migrated(oAuth2Request, client, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
    hybridResponse.setAccessToken(accessToken);
    return hybridResponse;
})))
1 | Mono | subscribe | METHOD_INVOCATION | authorizationRequestResolver.resolve_migrated(authorizationRequest, client, endUser).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->handler.handle(Future.succeededFuture())), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return resolveAuthorizedScopes_migrated(authorizationRequest, client, endUser).flatMap((request)->resolveRedirectUri_migrated(request, client));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(authorizationRequest);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(throwable))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(throwable))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(throwable))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(throwable))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return tokenService.getAccessToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteAccessToken_migrated(accessToken.getValue()));
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | tokenService.getAccessToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteAccessToken_migrated(accessToken.getValue()));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | tokenService.getAccessToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token"))).flatMap
1 | Mono | error | METHOD_INVOCATION | tokenService.getAccessToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown access token")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return tokenService.getRefreshToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteRefreshToken_migrated(refreshToken.getValue()));
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | tokenService.getRefreshToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token"))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return RxJava2Adapter.monoToCompletable(tokenService.deleteRefreshToken_migrated(refreshToken.getValue()));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | tokenService.getRefreshToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token"))).flatMap
1 | Mono | error | METHOD_INVOCATION | tokenService.getRefreshToken_migrated(token, client).switchIfEmpty(Mono.error(new InvalidTokenException("Unknown refresh token")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")))
1 | Mono | subscribe | METHOD_INVOCATION | jwtService.encodeAuthorization_migrated(jwtException.build(), client).flatMap((authorization)->jweService.encryptAuthorization_migrated(authorization, client)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->handler.handle(Future.succeededFuture(jwtException.buildRedirectUri(authorizationRequest.getRedirectUri(), authorizationRequest.getResponseType(), authorizationRequest.getResponseMode(), jwt)))), RxJavaReactorMigrationUtil.toJdkConsumer((ex)->handler.handle(Future.failedFuture(ex))));
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.encodeAuthorization_migrated(jwtException.build(), client).flatMap((authorization)->jweService.encryptAuthorization_migrated(authorization, client)).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | resourceService.findAccessPolicies_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicy::getId)).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(response.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(response))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Flux | collectList | METHOD_INVOCATION | resourceService.findAccessPolicies_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicy::getId)).collectList().subscribe
1 | Flux | map | METHOD_INVOCATION | resourceService.findAccessPolicies_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicy::getId)).collectList
1 | Mono | subscribe | METHOD_INVOCATION | resourceService.createAccessPolicy_migrated(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((p)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation(basePath, p)).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(p))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | resourceService.findAccessPolicy_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(accessPolicyId))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | resourceService.findAccessPolicy_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(accessPolicyId))).subscribe
1 | Mono | error | METHOD_INVOCATION | resourceService.findAccessPolicy_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(accessPolicyId)))
1 | Mono | subscribe | METHOD_INVOCATION | resourceService.updateAccessPolicy_migrated(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | IMPORT
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userConsentService.checkConsent_migrated(client, user).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Set<String>, Single<List<Scope>>>)(approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()));
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return RxJava2Adapter.monoToSingle(userConsentService.getConsentInformation_migrated(requiredConsent));
}).apply(v))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Collections.<Scope>emptyList()))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(consentInformation).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((scopes)->handler.handle(Future.succeededFuture(scopes))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | subscribe | METHOD_INVOCATION | tokenGranter.grant_migrated(tokenRequest, client).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((accessToken)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(accessToken))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType()))))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(unsupportedAssertionType);
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateJWT_migrated(assertion, basePath).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithHMAC_migrated(jwt));
        } else {
            return RxJava2Adapter.monoToMaybe(validateSignatureWithPublicKey_migrated(jwt));
        }
    }
}).apply(v))));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(unsupportedAssertionType);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(NOT_VALID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException("assertion has expired"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new ServerErrorException("Unable to retrieve discovery token endpoint."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(NOT_VALID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException("JWT Assertion must be signed with PS256"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(jwt);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(NOT_VALID);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap
1 | Mono | error | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client")))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap
1 | Mono | error | METHOD_INVOCATION | this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client")))
1 | Mono | error | METHOD_INVOCATION | this.getClientJwkSet_migrated(client).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key.")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(client))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(NOT_VALID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException(ex.getMessage()));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Mono | flatMap | METHOD_INVOCATION | return this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client"))).flatMap
1 | Mono | error | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new InvalidClientException("Missing or invalid client")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(client))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(NOT_VALID);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientException(ex.getMessage()));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(client.getJwks());
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(clientId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->handler.handle(Future.succeededFuture(client))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE)))));
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(requestObject).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((jwt)->{
    try {
        checkOAuthParameters(context, jwt);
        context.next();
    } catch (Exception ex) {
        context.fail(ex);
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail), RxJavaReactorMigrationUtil.toRunnable(context::next));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return requestObjectService.readRequestObject_migrated(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile()).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->validateRequestObjectClaims_migrated(context, jwt));
1 | Mono | map | METHOD_INVOCATION | requestObjectService.readRequestObject_migrated(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile()).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(e);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException());
1 | Mono | just | METHOD_INVOCATION | return Mono.just(jwt);
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return parService.readFromURI_migrated(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->validateRequestObjectClaims_migrated(context, jwt)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->{
    final String uriIdentifier = requestUri.substring(PushedAuthorizationRequestService.PAR_URN_PREFIX.length());
    context.put(REQUEST_URI_ID_KEY, uriIdentifier);
    return jwt;
}));
1 | Mono | flatMap | METHOD_INVOCATION | parService.readFromURI_migrated(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->validateRequestObjectClaims_migrated(context, jwt)).map
1 | Mono | map | METHOD_INVOCATION | parService.readFromURI_migrated(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | return requestObjectService.readRequestObjectFromURI_migrated(requestUri, context.get(CLIENT_CONTEXT_KEY)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap((jwt)->validateRequestObjectClaims_migrated(context, jwt));
1 | Mono | map | METHOD_INVOCATION | requestObjectService.readRequestObjectFromURI_migrated(requestUri, context.get(CLIENT_CONTEXT_KEY)).map(RxJavaReactorMigrationUtil.toJdkFunction((jwt)->preserveRequestObject(context, jwt))).flatMap
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(tokenService.introspect_migrated(introspectionRequest.getToken()).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v))))
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single
1 | Mono | map | METHOD_INVOCATION | userService.findById_migrated(accessToken.getSubject()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->dcrService.create_migrated(request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | map | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->dcrService.create_migrated(request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->dcrService.create_migrated(request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(context.getBodyAsJson().mapTo(DynamicClientRegistrationRequest.class));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException(ex.getMessage()));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException(sanitizedMessage));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(this.resourceService.listByDomainAndClientAndUser_migrated(domain.getId(), client.getId(), accessToken.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect(JsonArray::new, JsonArray::add)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(buffer.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(buffer))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(this.resourceService.listByDomainAndClientAndUser_migrated(domain.getId(), client.getId(), accessToken.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId)))
1 | Mono | subscribe | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->this.resourceService.create_migrated(request, domain.getId(), client.getId(), accessToken.getSub())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((resource)->{
    final String resourceLocation = resourceLocation(basePath, resource);
    context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(ResourceResponse.from(resource, resourceLocation)));
}), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->this.resourceService.create_migrated(request, domain.getId(), client.getId(), accessToken.getSub())).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource_id))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource_id))).subscribe
1 | Mono | error | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource_migrated(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource_id)))
1 | Mono | subscribe | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->this.resourceService.update_migrated(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->this.resourceService.update_migrated(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return Mono.just(context.getBodyAsJson()).flatMap(this::bodyValidation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((body)->body.mapTo(NewResource.class)));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(context.getBodyAsJson()).flatMap(this::bodyValidation_migrated).map
1 | Mono | just | METHOD_INVOCATION | Mono.just(context.getBodyAsJson()).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("missing resource_scopes"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(body);
1 | Mono | subscribe | METHOD_INVOCATION | introspectionService.introspect_migrated(createRequest(context)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse)))).subscribe();
1 | Mono | doOnSuccess | METHOD_INVOCATION | introspectionService.introspect_migrated(createRequest(context)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse)))).subscribe
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return parRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestUriException())).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<PushedAuthorizationRequest, Single<JWT>>)(Function<PushedAuthorizationRequest, Single<JWT>>)(req)->{
    if (req.getParameters() != null && req.getExpireAt() != null && req.getExpireAt().after(new Date())) {
        final String request = req.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST);
        if (request != null) {
            return RxJava2Adapter.monoToSingle(readRequestObject_migrated(client, request));
        } else if (this.domain.usePlainFapiProfile()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")));
        } else {
            final JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder().audience(oidcMetadata.getIssuer()).expirationTime(req.getExpireAt());
            req.getParameters().toSingleValueMap().forEach(builder::claim);
            return RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())));
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()));
}).apply(v)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | parRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestUriException())).flatMap
1 | Mono | error | METHOD_INVOCATION | parRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestUriException()))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("request parameter is missing")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new PlainJWT(builder.build())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestUriException()))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("Invalid request_uri"));
1 | Mono | RETURN_TYPE
1 | Mono | fromRunnable | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->{
    String clientId = jwtClientAssertion(par) ? getClientIdFromAssertion(par) : par.getParameters().getFirst(Parameters.CLIENT_ID);
    if (!client.getClientId().equals(clientId)) {
        throw new InvalidRequestException();
    }
    if (par.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST_URI) != null) {
        throw new InvalidRequestException("request_uri not authorized");
    }
})))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->readRequestObject_migrated(client, request).map(RxJavaReactorMigrationUtil.toJdkFunction((com.nimbusds.jwt.JWT jwt)->checkRedirectUriParameter(jwt, client))))).then())
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->readRequestObject_migrated(client, request).map(RxJavaReactorMigrationUtil.toJdkFunction((com.nimbusds.jwt.JWT jwt)->checkRedirectUriParameter(jwt, client))))).then
1 | Mono | defer | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->readRequestObject_migrated(client, request).map(RxJavaReactorMigrationUtil.toJdkFunction((com.nimbusds.jwt.JWT jwt)->checkRedirectUriParameter(jwt, client)))))
1 | Mono | map | METHOD_INVOCATION | ()->readRequestObject_migrated(client, request).map(RxJavaReactorMigrationUtil.toJdkFunction((com.nimbusds.jwt.JWT jwt)->checkRedirectUriParameter(jwt, client)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(registrationValidation).then(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->checkRedirectUriParameter(par, client)))))
1 | Mono | fromRunnable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then(Mono.fromRunnable(RxJavaReactorMigrationUtil.toRunnable(()->checkRedirectUriParameter(par, client))))
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->parRepository.create_migrated(par))).map(RxJavaReactorMigrationUtil.toJdkFunction((parPersisted)->{
    final PushedAuthorizationRequestResponse response = new PushedAuthorizationRequestResponse();
    response.setRequestUri(PAR_URN_PREFIX + parPersisted.getId());
    final long exp = (parPersisted.getExpireAt().getTime() - Instant.now().toEpochMilli()) / 1000;
    response.setExp(exp);
    return response;
}));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->parRepository.create_migrated(par))).map
1 | Mono | defer | METHOD_INVOCATION | RxJava2Adapter.completableToMono(registrationValidation).then(Mono.defer(()->parRepository.create_migrated(par)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, false))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(err))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectClaims)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectAlgorithm)).flatMap((jwt)->validateSignature_migrated((SignedJWT)jwt, client));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, false))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(err))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectClaims)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectAlgorithm)).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, false))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(err))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::checkRequestObjectClaims)).map
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, false))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID"))))
1 | Mono | flatMap | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException()))
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(jwt))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(signedJwt);
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(encrypt_migrated(jwe, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(throwable))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(signedJwt);
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(encrypt_migrated(jwe, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(throwable))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(JWTParser.parse(jwt) instanceof EncryptedJWT);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException("Request object must be encrypted using RSA-OAEP with A256GCM"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new ServerErrorException("Unable to perform Json Web Decryption, unsupported algorithm: " + algorithm.getName()));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException("Request Object must be encrypted"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(parsedJwt);
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Optional::isPresent)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::get)).next().single();
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Optional::isPresent)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::get)).next().single
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Optional::isPresent)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::get)).next
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Optional::isPresent)).map
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map(RxJavaReactorMigrationUtil.toJdkFunction((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
})).filter
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map(RxJavaReactorMigrationUtil.toJdkFunction(function::apply)).map
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid()))).map
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue()))).filter
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->Flux.fromIterable(jwkset.getKeys()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(filter::test)).filter
1 | Flux | fromIterable | METHOD_INVOCATION | (jwkset)->Flux.fromIterable(jwkset.getKeys())
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(signedJwt);
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(encrypt_migrated(jwe, client))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<String>>toJdkFunction((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(throwable))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new ServerErrorException("Unable to perform Json Web Encryption, unsupported algorithm: " + algorithm.getName()));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk))))).map(RxJavaReactorMigrationUtil.toJdkFunction((encrypter)->{
    jwe.encrypt(encrypter);
    return jwe.serialize();
}));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt"))))
1 | Mono | flatMap | METHOD_INVOCATION | jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(client).flatMap((z)->jwkService.filter_migrated(z, filter)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(parService.deleteRequestUri_migrated(uriIdentifier)).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then(flow.run_migrated(request, client, endUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((authorizationResponse)->{
    try {
        cleanSession(context);
        doRedirect(context, request, authorizationResponse);
    } catch (Exception e) {
        logger.error("Unable to redirect to client redirect_uri", e);
        context.fail(new ServerErrorException());
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(parService.deleteRequestUri_migrated(uriIdentifier)).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then(flow.run_migrated(request, client, endUser)).subscribe
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType()))))
1 | Flux | next | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next().switchIfEmpty
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | parseRequest_migrated(tokenRequest, client).flatMap((e)->resolveResourceOwner_migrated(tokenRequest, client)).map
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidGrantException("Missing parameter: ticket"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Requesting party token"), new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build());
1 | Mono | error | METHOD_INVOCATION | return Mono.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build());
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new))))
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(tokenRequest.getClaimToken(), client).flatMap((e)->userAuthenticationManager.loadPreAuthenticatedUser_migrated(e.getSub(), tokenRequest)).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return resolveRequestedScopes_migrated(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions_migrated(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies_migrated(oAuth2Request, client, endUser)).flatMap((oAuth2Request)->getTokenService().create_migrated(oAuth2Request, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->this.handleUpgradedToken(tokenRequest, token)));
1 | Mono | flatMap | METHOD_INVOCATION | resolveRequestedScopes_migrated(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions_migrated(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies_migrated(oAuth2Request, client, endUser)).flatMap((oAuth2Request)->getTokenService().create_migrated(oAuth2Request, client, endUser)).map
1 | Mono | flatMap | METHOD_INVOCATION | resolveRequestedScopes_migrated(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions_migrated(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies_migrated(oAuth2Request, client, endUser)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | resolveRequestedScopes_migrated(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions_migrated(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request_migrated(tokenRequest1, client, endUser)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | resolveRequestedScopes_migrated(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions_migrated(tokenRequest1, client, endUser)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match client pre-registered scopes"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(tokenRequest);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.permissionTicketService.remove_migrated(tokenRequest.getTicket()).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicket::getPermissionRequest)).flatMap((v)->RxJava2Adapter.singleToMono((Single<TokenRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<PermissionRequest>, Single<TokenRequest>>)(permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return RxJava2Adapter.monoToSingle(resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT_migrated(tokenRequest, client, endUser, resolvedPermissionRequests)).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    })));
}).apply(v)));
1 | Mono | map | METHOD_INVOCATION | this.permissionTicketService.remove_migrated(tokenRequest.getTicket()).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicket::getPermissionRequest)).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT_migrated(tokenRequest, client, endUser, resolvedPermissionRequests)).map(RxJavaReactorMigrationUtil.toJdkFunction((extendedPermissionRequests)->{
    tokenRequest.setPermissions(extendedPermissionRequests);
    return tokenRequest;
})))
1 | Mono | flatMap | METHOD_INVOCATION | resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT_migrated(tokenRequest, client, endUser, resolvedPermissionRequests)).map
1 | Mono | flatMap | METHOD_INVOCATION | resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment_migrated(tokenRequest, permissionRequests, resourceMap)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | resourceService.findByResources_migrated(resourceIds).collectList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource_migrated(tokenRequest, resourceSet)).flatMap
1 | Flux | collectList | METHOD_INVOCATION | resourceService.findByResources_migrated(resourceIds).collectList().flatMap
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidScopeException("At least one of the scopes included in the request does not match resource registered scopes"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(resourceSet.stream().collect(Collectors.toMap(Resource::getId, (resource)->resource)));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedPermissions);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedPermissions.stream().map((permissionRequest)->{
    Set<String> registeredScopes = new HashSet(fetchedResources.get(permissionRequest.getResourceId()).getResourceScopes());
    permissionRequest.getResourceScopes().addAll(tokenRequest.getScopes().stream().filter(registeredScopes::contains).collect(Collectors.toSet()));
    return permissionRequest;
}).collect(Collectors.toList()));
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken_migrated(rpt, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((rpt)->this.mergePermissions(rpt, requestedPermissions))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<PermissionRequest>>>toJdkFunction((throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(jwtService.decodeAndVerify_migrated(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken_migrated(rpt, client, endUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((rpt)->this.mergePermissions(rpt, requestedPermissions))))
1 | Mono | flatMap | METHOD_INVOCATION | jwtService.decodeAndVerify_migrated(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken_migrated(rpt, client, endUser)).map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(requestedPermissions);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidTokenException::new));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(rpt);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(oAuth2Request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new TechnicalException("Should not be used"));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(oAuth2Request);
1 | Mono | flatMap | METHOD_INVOCATION | return resourceService.findAccessPoliciesByResources_migrated(resourceIds).map(RxJavaReactorMigrationUtil.toJdkFunction((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
})).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<OAuth2Request>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Rule>, Single<OAuth2Request>>)(rules)->{
    if (rules.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request));
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<OAuth2Request>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))).apply(err))));
}).apply(v)));
1 | Flux | collectList | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources_migrated(resourceIds).map(RxJavaReactorMigrationUtil.toJdkFunction((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
})).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources_migrated(resourceIds).map(RxJavaReactorMigrationUtil.toJdkFunction((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
})).collectList
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(oAuth2Request))
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToCompletable(rulesEngine.fire_migrated(rules, executionContext)).toSingleDefault(oAuth2Request)).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<OAuth2Request>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, encRequired))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((err2)->{
    if (err2 instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err2));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
}).apply(err))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))));
}).apply(v))));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(jweService.decrypt_migrated(request, encRequired))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<JWT>>toJdkFunction((err2)->{
    if (err2 instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err2));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(err2))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))))
1 | Mono | defer | METHOD_INVOCATION | checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return requestObjectRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<RequestObject, Single<JWT>>)(Function<RequestObject, Single<JWT>>)(req)->{
    if (req.getExpireAt().after(new Date())) {
        return RxJava2Adapter.monoToSingle(readRequestObject_migrated(req.getPayload(), client, false));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}).apply(v)));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | requestObjectRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap
1 | Mono | error | METHOD_INVOCATION | requestObjectRepository.findById_migrated(identifier).switchIfEmpty(Mono.error(new InvalidRequestObjectException()))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()))
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<JWT>>)(Function<String, Single<JWT>>)(s)->RxJava2Adapter.monoToSingle(readRequestObject_migrated(s, client, false))).apply(v)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).flatMap
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException(requestUri + " is not valid."));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(requestObject));
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v))));
1 | Mono | flatMap | METHOD_INVOCATION | checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return RxJava2Adapter.monoToSingle(requestObjectRepository.create_migrated(requestObject));
    }
}).apply(v)))).flatMap
1 | Mono | then | METHOD_INVOCATION | checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client))).flatMap
1 | Mono | defer | METHOD_INVOCATION | checkRequestObjectAlgorithm_migrated(jwt).then(Mono.defer(()->validateSignature_migrated((SignedJWT)jwt, client)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(response))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException());
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID"))))
1 | Mono | flatMap | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException()))
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(client).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return RxJava2Adapter.monoToMaybe(jwkService.getKey_migrated(jwkSet, jwt.getHeader().getKeyID()));
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(jwt))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException("Request object must be signed"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestObjectException("Request object must be signed with PS256"));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return authorizationCodeService.create_migrated(authorizationRequest, endUser).map(RxJavaReactorMigrationUtil.toJdkFunction((code)->{
    AuthorizationCodeResponse response = new AuthorizationCodeResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setCode(code.getCode());
    response.setState(authorizationRequest.getState());
    return response;
}));
1 | Mono | subscribe | METHOD_INVOCATION | idTokenService.extractUser_migrated(idToken, client).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->handler.handle(Future.succeededFuture(user))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(accessToken);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return idTokenService.create_migrated(oAuth2Request, client, user, executionContext).flatMap((v)->RxJava2Adapter.singleToMono((Single<Token>)RxJavaReactorMigrationUtil.toJdkFunction((Function<String, Single<Token>>)(idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToSingle(Mono.just(accessToken));
}).apply(v)));
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(accessToken))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("Missing parameter: username"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("Missing parameter: password"));
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userAuthenticationManager.authenticate_migrated(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))
1 | Mono | subscribe | METHOD_INVOCATION | requestObjectService.registerRequestObject_migrated(request, client).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(new Consumer<RequestObjectRegistrationResponse>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(RequestObjectRegistrationResponse response) throws Exception {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer(new Consumer<Throwable>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(Throwable throwable) throws Exception {
        context.fail(throwable);
    }
}));
1 | Mono | subscribe | METHOD_INVOCATION | scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((scopes)->{
    updateScopes(scopes);
    logger.info("Scopes loaded for domain {}", domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize scopes for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | scopeService.findById_migrated(scopeId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((scope)->{
    updateScopes(Collections.singleton(scope));
    logger.info("Scope {} {}d for domain {}", scopeId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} scope for domain {}", eventType, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No scope found with id {}", scopeId)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("Missing parameter: code"));
1 | Mono | flatMap | METHOD_INVOCATION | return super.parseRequest_migrated(tokenRequest, client).flatMap((tokenRequest1)->authorizationCodeService.remove_migrated(code, client).flatMap((z)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))).single());
1 | Mono | single | METHOD_INVOCATION | (tokenRequest1)->authorizationCodeService.remove_migrated(code, client).flatMap((z)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))).single()
1 | Mono | flatMap | METHOD_INVOCATION | authorizationCodeService.remove_migrated(code, client).flatMap((z)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))).single
1 | Mono | map | METHOD_INVOCATION | (z)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(authenticationFlowContextService.removeContext_migrated(z.getTransactionId(), z.getContextVersion())).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext())))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.AuthenticationFlowContext ctx)->{
    checkRedirectUris(tokenRequest1, z);
    checkPKCE(tokenRequest1, z);
    tokenRequest1.setSubject(z.getSubject());
    tokenRequest1.setScopes(z.getScopes());
    if (z.getRequestParameters() != null) {
        z.getRequestParameters().forEach((java.lang.String key, java.util.List<java.lang.String> value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", z.getCode());
    decodedAuthorizationCode.put("transactionId", z.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
}))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(error))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(tokenRequest);
1 | Mono | subscribe | METHOD_INVOCATION | jwkService.getKeys_migrated(client).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((jwkSet)->{
    boolean match = jwkSet.getKeys().stream().anyMatch((jwk)->thumbprint256.equals(jwk.getX5tS256()) || thumbprint.equals(jwk.getX5t()));
    if (match) {
        handler.handle(Future.succeededFuture(client));
    } else {
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate")));
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate")))), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: missing or unsupported JWK Set")))));
1 | Mono | subscribe | METHOD_INVOCATION | jwkService.getKeys_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(JWKConverter::convert)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((keys)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, "application/jwk-set+json; charset=UTF-8").end(Json.encodePrettily(keys))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->context.response().setStatusCode(500).end()));
1 | Mono | map | METHOD_INVOCATION | jwkService.getKeys_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(JWKConverter::convert)).subscribe
1 | Flux | subscribe | METHOD_INVOCATION | extensionGrantRepository.findByDomain_migrated(domain.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->{
    minDate = minDate == null ? extensionGrant.getCreatedAt() : minDate.after(extensionGrant.getCreatedAt()) ? extensionGrant.getCreatedAt() : minDate;
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grants loaded for domain {}", domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize extension grants for domain {}", domain.getName(), error)));
1 | Mono | subscribe | METHOD_INVOCATION | extensionGrantRepository.findById_migrated(extensionGrantId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->{
    if (extensionGrants.isEmpty()) {
        minDate = extensionGrant.getCreatedAt();
    }
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grant {} {}d for domain {}", extensionGrantId, eventType, domain.getName());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} extension grant for domain {}", eventType, domain.getName(), error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No extension grant found with id {}", extensionGrantId)));
1 | Mono | block | METHOD_INVOCATION | authenticationProvider = identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(tokenRequest);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(extensionGrantProvider.grant_migrated(convert(tokenRequest)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(userAuthenticationManager.connect_migrated(endUser, false));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v)))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
})).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))))
1 | Mono | map | METHOD_INVOCATION | identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
})).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))).map
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.get_migrated(extensionGrant.getIdentityProvider()).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return RxJava2Adapter.monoToMaybe(authProvider.loadPreAuthenticatedUser_migrated(authentication));
}).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
})).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), user.getId(), client.getClientId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
})).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope)))
1 | Flux | filter | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUserAndClient_migrated(domain.getId(), user.getId(), client.getClientId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
})).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return scopeService.getAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((scopes)->{
    List<Scope> requestedScopes = new ArrayList<>();
    for (String requestScope : consent) {
        Scope requestedScope = scopes.stream().filter((scope)->scope.getKey().equalsIgnoreCase(requestScope)).findAny().orElse(new Scope(requestScope));
        requestedScopes.add(requestedScope);
    }
    return requestedScopes;
}));
1 | Mono | subscribe | METHOD_INVOCATION | userConsentService.checkConsent_migrated(client, user).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((result)->handler.handle(Future.succeededFuture(result))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Mono | subscribe | METHOD_INVOCATION | parService.registerParameters_migrated(request, client).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((response)->{
    context.response().setStatusCode(HttpStatusCode.CREATED_201).putHeader(io.gravitee.common.http.HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(io.gravitee.common.http.HttpHeaders.CACHE_CONTROL, "no-store").putHeader(io.gravitee.common.http.HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
}), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExecutionContext, Single<String>>)(executionContext1)->{
    IDToken idToken = createIDTokenJWT(oAuth2Request, client, user, executionContext);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
        if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
            oAuth2Request.getContext().forEach((claimName,claimValue)->{
                if (claimValue != null) {
                    CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                    String digestAlgorithm = defaultDigestAlgorithm;
                    if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                        digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                    }
                    idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
                }
            });
        }
        return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
    })).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
        if (client.getIdTokenEncryptedResponseAlg() != null) {
            return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
        }
        return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
    }).apply(z)))));
}).apply(v)));
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return RxJava2Adapter.monoToSingle(jwtService.encode_migrated(idToken, certificateProvider));
})).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return RxJava2Adapter.monoToSingle(jweService.encryptIdToken_migrated(signedIdToken, client));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm_migrated(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get_migrated(client.getCertificate())).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(signedIdToken))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return jwtService.decodeAndVerify_migrated(idToken, client).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<User>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
        if (!user.getReferenceId().equals(domain.getId())) {
            throw new UserNotFoundException(jwt.getSub());
        }
        return user;
    })));
}).apply(v)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    if (!user.getReferenceId().equals(domain.getId())) {
        throw new UserNotFoundException(jwt.getSub());
    }
    return user;
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub()))).map
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(jwt.getSub()).switchIfEmpty(Mono.error(new UserNotFoundException(jwt.getSub())))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return applicationService.findById_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Client client = application.toClient();
    if (client.getAuthorizedGrantTypes() == null) {
        client.setAuthorizedGrantTypes(Collections.emptyList());
    }
    return client;
}));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No domain set on client"));
1 | Mono | map | METHOD_INVOCATION | return applicationService.create_migrated(convert(client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No domain set on client"));
1 | Mono | map | METHOD_INVOCATION | return applicationService.update_migrated(convert(client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return applicationService.renewClientSecret_migrated(domain, id, principal).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient));
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | this.getClient_migrated(context).map(RxJavaReactorMigrationUtil.toJdkFunction(DynamicClientRegistrationResponse::fromClient)).map(RxJavaReactorMigrationUtil.toJdkFunction((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((result)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(result))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | map | METHOD_INVOCATION | this.getClient_migrated(context).map(RxJavaReactorMigrationUtil.toJdkFunction(DynamicClientRegistrationResponse::fromClient)).map(RxJavaReactorMigrationUtil.toJdkFunction((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
})).subscribe
1 | Mono | map | METHOD_INVOCATION | this.getClient_migrated(context).map(RxJavaReactorMigrationUtil.toJdkFunction(DynamicClientRegistrationResponse::fromClient)).map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.patch_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.patch_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))
1 | Mono | map | METHOD_INVOCATION | (client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.patch_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->dcrService.patch_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.update_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.update_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))
1 | Mono | map | METHOD_INVOCATION | (client)->this.extractRequest_migrated(context).flatMap((request)->dcrService.update_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap((request)->dcrService.update_migrated(client, request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction((io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(dcrService.delete_migrated(ident))).apply(y)))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this.clientSyncService::removeDynamicClientRegistred)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->context.response().setStatusCode(HttpStatusCode.NO_CONTENT_204).end()), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction((io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(dcrService.delete_migrated(ident))).apply(y)))))).map(RxJavaReactorMigrationUtil.toJdkFunction(this.clientSyncService::removeDynamicClientRegistred)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction((io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(dcrService.delete_migrated(ident))).apply(y)))))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((toRenew)->dcrService.renewSecret_migrated(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client)))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((toRenew)->dcrService.renewSecret_migrated(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))).flatMap((toRenew)->dcrService.renewSecret_migrated(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(this.getClient_migrated(context))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(Single::just).apply(y)))))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new ResourceNotFoundException("client not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction(Client::clone));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new ResourceNotFoundException("client not found"))).map
1 | Mono | error | METHOD_INVOCATION | this.clientSyncService.findByClientId_migrated(clientId).switchIfEmpty(Mono.error(new ResourceNotFoundException("client not found")))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | clientAssertionService.assertClient_migrated(clientAssertionType, clientAssertion, basePath).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((client1)->handler.handle(Future.succeededFuture(client1))), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->{
    if (throwable instanceof InvalidClientException) {
        logger.debug("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(throwable));
    } else {
        logger.error("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: Failed to authenticate client with assertion method", throwable)));
    }
}), RxJavaReactorMigrationUtil.toRunnable(()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE)))));
1 | Mono | flatMap | METHOD_INVOCATION | clientAssertionService.assertClient_migrated(clientAssertionType, clientAssertion, basePath).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))).subscribe
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(client1))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateClientPatchRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toPatch))).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientPatchRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toPatch))).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap
1 | Mono | map | METHOD_INVOCATION | this.validateClientPatchRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toPatch))).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toUpdate))).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toUpdate))).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap
1 | Mono | map | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(toUpdate))).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return clientService.renewClientSecret_migrated(domain.getId(), toRenew.getId()).flatMap((client)->applyRegistrationAccessToken_migrated(basePath, client)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(clientService.update_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | clientService.renewClientSecret_migrated(domain.getId(), toRenew.getId()).flatMap((client)->applyRegistrationAccessToken_migrated(basePath, client)).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap(this::applyDefaultIdentityProvider_migrated).flatMap(this::applyDefaultCertificateProvider_migrated).flatMap(this::applyAccessTokenValidity_migrated).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Client>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Client, Single<Client>>)(io.gravitee.am.model.oidc.Client ident)->RxJava2Adapter.monoToSingle(clientService.create_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap(this::applyDefaultIdentityProvider_migrated).flatMap(this::applyDefaultCertificateProvider_migrated).flatMap(this::applyAccessTokenValidity_migrated).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap(this::applyDefaultIdentityProvider_migrated).flatMap(this::applyDefaultCertificateProvider_migrated).flatMap(this::applyAccessTokenValidity_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap(this::applyDefaultIdentityProvider_migrated).flatMap(this::applyDefaultCertificateProvider_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap(this::applyDefaultIdentityProvider_migrated).flatMap
1 | Mono | map | METHOD_INVOCATION | this.validateClientRegistrationRequest_migrated(request).map(RxJavaReactorMigrationUtil.toJdkFunction((req)->req.patch(client))).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(client);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap(clientService::create_migrated).flatMap((client)->copyForms_migrated(request.getSoftwareId().get(), client)).flatMap((client)->copyEmails_migrated(request.getSoftwareId().get(), client));
1 | Mono | flatMap | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap(clientService::create_migrated).flatMap((client)->copyForms_migrated(request.getSoftwareId().get(), client)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap(clientService::create_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap((app)->this.applyRegistrationAccessToken_migrated(basePath, app)).flatMap
1 | Mono | map | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map(RxJavaReactorMigrationUtil.toJdkFunction(request::patch)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap((y)->sanitizeTemplate_migrated(y)).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMap
1 | Mono | error | METHOD_INVOCATION | clientService.findById_migrated(request.getSoftwareId().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Client behind software_id is not a template"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(template);
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return formService.copyFromClient_migrated(domain.getId(), sourceId, client.getId()).flatMap((irrelevant)->Mono.just(client));
1 | Mono | just | METHOD_INVOCATION | (irrelevant)->Mono.just(client)
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return emailTemplateService.copyFromClient_migrated(domain.getId(), sourceId, client.getId()).collectList().flatMap((irrelevant)->Mono.just(client));
1 | Flux | collectList | METHOD_INVOCATION | emailTemplateService.copyFromClient_migrated(domain.getId(), sourceId, client.getId()).collectList().flatMap
1 | Mono | just | METHOD_INVOCATION | (irrelevant)->Mono.just(client)
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return identityProviderService.findByDomain_migrated(client.getDomain()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviders)->{
    if (identityProviders != null && !identityProviders.isEmpty()) {
        client.setIdentities(Collections.singleton(identityProviders.get(0).getId()));
    }
    return client;
}));
1 | Flux | collectList | METHOD_INVOCATION | identityProviderService.findByDomain_migrated(client.getDomain()).collectList().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return certificateService.findByDomain_migrated(client.getDomain()).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((certificates)->{
    if (certificates != null && !certificates.isEmpty()) {
        client.setCertificate(certificates.get(0).getId());
    }
    return client;
}));
1 | Flux | collectList | METHOD_INVOCATION | certificateService.findByDomain_migrated(client.getDomain()).collectList().map
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return jwtService.encode_migrated(jwt, client).map(RxJavaReactorMigrationUtil.toJdkFunction((token)->{
    client.setRegistrationAccessToken(token);
    client.setRegistrationClientUri(openIDProviderMetadata.getRegistrationEndpoint() + "/" + client.getClientId());
    return client;
}));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException());
1 | Mono | flatMap | METHOD_INVOCATION | return this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap(this::validateAuthorizationSigningAlgorithm_migrated).flatMap(this::validateAuthorizationEncryptionAlgorithm_migrated).flatMap(this::validateRequestObjectSigningAlgorithm_migrated).flatMap(this::validateRequestObjectEncryptionAlgorithm_migrated).flatMap((v)->RxJava2Adapter.singleToMono((Single<DynamicClientRegistrationRequest>)RxJavaReactorMigrationUtil.toJdkFunction((Function<DynamicClientRegistrationRequest, Single<DynamicClientRegistrationRequest>>)(io.gravitee.am.gateway.handler.oidc.service.clientregistration.DynamicClientRegistrationRequest ident)->RxJava2Adapter.monoToSingle(enforceWithSoftwareStatement_migrated(ident))).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap(this::validateAuthorizationSigningAlgorithm_migrated).flatMap(this::validateAuthorizationEncryptionAlgorithm_migrated).flatMap(this::validateRequestObjectSigningAlgorithm_migrated).flatMap(this::validateRequestObjectEncryptionAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap(this::validateAuthorizationSigningAlgorithm_migrated).flatMap(this::validateAuthorizationEncryptionAlgorithm_migrated).flatMap(this::validateRequestObjectSigningAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap(this::validateAuthorizationSigningAlgorithm_migrated).flatMap(this::validateAuthorizationEncryptionAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap(this::validateAuthorizationSigningAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap(this::validateSelfSignedClientAuth_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap(this::validateTlsClientAuth_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap(this::validateIdTokenEncryptionAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap(this::validateIdTokenSigningAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap(this::validateUserinfoEncryptionAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap(this::validateUserinfoSigningAlgorithm_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap(this::validateJKWs_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap(this::validateSectorIdentifierUri_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap(this::validateRequestUri_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap(this::validateSubjectType_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap(this::validateResponseType_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap(this::validateGrantType_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.validateRedirectUri_migrated(request, isPatch).flatMap(this::validateScopes_migrated).flatMap
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("software_statement is required"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("No jwks_uri for OpenBanking Directory, unable to validate software_statement"));
1 | Mono | map | METHOD_INVOCATION | return jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty(Mono.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->{
    LOGGER.debug("software_statement is valid, check claims regarding the registration request information");
    JSONObject softwareStatement = signedJWT.getPayload().toJSONObject();
    final Number iat = softwareStatement.getAsNumber("iat");
    if (iat == null || (Instant.now().getEpochSecond() - (iat.longValue())) > FIVE_MINUTES_IN_SEC) {
        throw new InvalidClientMetadataException("software_statement older than 5 minutes");
    }
    if (request.getJwks() != null && !request.getJwks().isEmpty()) {
        throw new InvalidClientMetadataException("jwks is forbidden, prefer jwks_uri");
    }
    if (request.getJwksUri() == null || request.getJwksUri().isEmpty()) {
        throw new InvalidClientMetadataException("jwks_uri is required");
    }
    if (!request.getJwksUri().get().equals(softwareStatement.getAsString("software_jwks_uri"))) {
        throw new InvalidClientMetadataException("jwks_uri doesn\'t match the software_jwks_uri");
    }
    final Object software_redirect_uris = softwareStatement.get("software_redirect_uris");
    if (software_redirect_uris != null) {
        if (request.getRedirectUris() == null || request.getRedirectUris().isEmpty()) {
            throw new InvalidClientMetadataException("redirect_uris are missing");
        }
        final List<String> redirectUris = request.getRedirectUris().get();
        if (software_redirect_uris instanceof JSONArray) {
            redirectUris.forEach((uri)->{
                if (!((JSONArray)software_redirect_uris).contains(uri)) {
                    throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
                }
            });
        } else if (software_redirect_uris instanceof String && (redirectUris.size() > 1 || !software_redirect_uris.equals(redirectUris.get(0)))) {
            throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
        }
    }
    if (request.getTokenEndpointAuthMethod() != null && !request.getTokenEndpointAuthMethod().isEmpty()) {
        if (!(ClientAuthenticationMethod.SELF_SIGNED_TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equals(request.getTokenEndpointAuthMethod().get()))) {
            throw new InvalidClientMetadataException("invalid token_endpoint_auth_method");
        }
        if (ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) && (request.getTlsClientAuthSubjectDn() == null || request.getTlsClientAuthSubjectDn().isEmpty())) {
            throw new InvalidClientMetadataException("tls_client_auth_subject_dn is required with tls_client_auth as client authentication method");
        }
    }
    return request;
}));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty(Mono.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map
1 | Mono | filter | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter
1 | Mono | flatMap | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory")))
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(directoryJwksUri).flatMap((z)->jwkService.getKey_migrated(z, signedJWT.getHeader().getKeyID())).switchIfEmpty(Mono.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((jwk)->jwsService.isValidSignature(signedJWT, jwk))).switchIfEmpty(Mono.error(new InvalidClientMetadataException("Invalid signature for software_statement")))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("software_statement isn\'t signed or doesn\'t use PS256"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("signature of software_statement is invalid"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRedirectUriException());
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Invalid response type."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Missing or invalid grant type."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported subject type"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported userinfo signing algorithm"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_alg value"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_enc value"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported request object signing algorithm"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("request_object_signing_alg shall be PS256"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_alg value"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported request_object_encryption_enc value"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported id_token signing algorithm"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_alg value"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_enc value"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("request_uris: " + err.getMessage()));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("sector_identifier_uri: " + err.getMessage()));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Scheme must be https for sector_identifier_uri : " + request.getSectorIdentifierUri().get()));
1 | Mono | flatMap | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add)).flatMap((allowedRedirectUris)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))));
1 | Mono | flatMapMany | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString())))
1 | Mono | flatMap | METHOD_INVOCATION | (allowedRedirectUris)->RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v))))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(request))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The jwks_uri and jwks parameters MUST NOT be used together."));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(jwkService.getKeys_migrated(request.getJwksUri().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri..."))))
1 | Mono | error | METHOD_INVOCATION | jwkService.getKeys_migrated(request.getJwksUri().get()).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(request))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported authorization signing algorithm"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg MUST also be provided"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_alg value"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_enc value"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidClientMetadataException("The self_signed_tls_client_auth requires at least a jwks or a valid jwks_uri."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(request);
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap(this::bodyValidation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap((permissionRequests)->permissionTicketService.create_migrated(permissionRequests, domain.getId(), client.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicketResponse::from)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((permission)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(permission))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | map | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap(this::bodyValidation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap((permissionRequests)->permissionTicketService.create_migrated(permissionRequests, domain.getId(), client.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicketResponse::from)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap(this::bodyValidation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap((permissionRequests)->permissionTicketService.create_migrated(permissionRequests, domain.getId(), client.getId())).map
1 | Mono | map | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap(this::bodyValidation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | this.extractRequest_migrated(context).flatMap(this::bodyValidation_migrated).map
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("Unable to parse body permission request"));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(result);
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRequestException("resource_id and resource_scopes are mandatory."));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(toValidate);
1 | Mono | subscribe | METHOD_INVOCATION | userConsentService.saveConsent_migrated(client, approvals, getAuthenticatedUser(request, endUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((approvals1)->handler.handle(Future.succeededFuture(approvals1))), RxJavaReactorMigrationUtil.toJdkConsumer((error)->handler.handle(Future.failedFuture(error))));
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((accessTokens)->accessTokens != null && !accessTokens.isEmpty())))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty())))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(RQP_ID_TOKEN, client)).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(RPT_OLD_TOKEN, client)).thenReturn(Mono.just(rpt))
1 | Mono | just | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser_migrated(USER_ID, tokenRequest)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(permissionTicketService.remove_migrated(TICKET_ID)).thenReturn(Mono.just(new PermissionTicket().setId(TICKET_ID).setPermissionRequest(permissions)))
1 | Flux | just | METHOD_INVOCATION | when(resourceService.findByResources_migrated(Arrays.asList(RS_ONE, RS_TWO))).thenReturn(Flux.just(new Resource().setId(RS_ONE).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeC")), new Resource().setId(RS_TWO).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeD"))))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.create_migrated(oauth2RequestCaptor.capture(), eq(client), any())).thenReturn(Mono.just(new AccessToken("success")))
1 | Flux | empty | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources_migrated(anyList())).thenReturn(Flux.empty())
1 | Mono | error | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser_migrated(USER_ID, tokenRequest)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | empty | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser_migrated(USER_ID, tokenRequest)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(permissionTicketService.remove_migrated(TICKET_ID)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidPermissionTicketException::new)))
1 | Mono | error | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(RPT_OLD_TOKEN, client)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(InvalidTokenException::new)))
1 | Flux | just | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources_migrated(anyList())).thenReturn(Flux.just(policy))
1 | Mono | error | METHOD_INVOCATION | when(rulesEngine.fire_migrated(any(), any())).thenReturn(Mono.error(new PolicyChainException("Policy requirements have failed")))
1 | Flux | just | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources_migrated(anyList())).thenReturn(Flux.just(policy))
1 | Mono | empty | METHOD_INVOCATION | when(rulesEngine.fire_migrated(any(), any())).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tokenService.getAccessToken_migrated("token", client)).thenReturn(Mono.just(accessToken))
1 | Mono | empty | METHOD_INVOCATION | when(tokenService.getAccessToken_migrated("token", client)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(tokenService.getRefreshToken_migrated("token", client)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(tokenService.getAccessToken_migrated("token", client)).thenReturn(Mono.just(accessToken))
1 | Mono | empty | METHOD_INVOCATION | when(tokenService.deleteAccessToken_migrated("token")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(tokenService.getRefreshToken_migrated("token", client)).thenReturn(Mono.just(refreshToken))
1 | Mono | empty | METHOD_INVOCATION | when(tokenService.deleteRefreshToken_migrated("token")).thenReturn(Mono.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(authorizationCodeRepository.create_migrated(any())).thenReturn(Mono.just(new AuthorizationCode()))
1 | Mono | just | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode_migrated(authorizationCode.getCode())).thenReturn(Mono.just(authorizationCode))
1 | Mono | just | METHOD_INVOCATION | when(authorizationCodeRepository.delete_migrated(authorizationCode.getId())).thenReturn(Mono.just(authorizationCode))
1 | Flux | empty | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode_migrated(authorizationCode.getCode())).thenReturn(Flux.empty())
1 | Mono | empty | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(repository.create_migrated(any())).thenReturn(Mono.just(par))
1 | Mono | error | METHOD_INVOCATION | when(jweService.decrypt_migrated(any(), anyBoolean())).thenReturn(Mono.error(new ParseException("parse error", 1)))
1 | Mono | just | METHOD_INVOCATION | when(jweService.decrypt_migrated(any(), anyBoolean())).thenReturn(Mono.just(parse))
1 | Mono | empty | METHOD_INVOCATION | when(repository.findById_migrated(ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated(ID)).thenReturn(Mono.just(par))
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated(ID)).thenReturn(Mono.just(par))
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated(ID)).thenReturn(Mono.just(par))
1 | Mono | just | METHOD_INVOCATION | when(repository.findById_migrated(ID)).thenReturn(Mono.just(par))
1 | Mono | just | METHOD_INVOCATION | when(jweService.decrypt_migrated(any(), anyBoolean())).thenReturn(Mono.just(signedJwt))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(any(Client.class))).thenReturn(Mono.just(mock(JWKSet.class)))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(mock(JWK.class)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(jwkSet))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(any())).thenReturn(Mono.just(client))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(idTokenService.create_migrated(oAuth2Request, client, null, null)).thenReturn(Mono.just(idTokenPayload))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("my-test-client_id")).thenReturn(Mono.just(client))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("unknown")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(dcrService.delete_migrated(any())).thenReturn(Mono.just(new Client()))
1 | Mono | just | METHOD_INVOCATION | when(dcrService.renewSecret_migrated(any(), any())).thenReturn(Mono.just(new Client()))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(parService.deleteRequestUri_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(authorizationResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(jwtAuthorizationCodeResponse))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(flow.run_migrated(any(), any(), any())).thenReturn(Mono.just(jwtAuthorizationCodeResponse))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encodeAuthorization_migrated(any(JWT.class), eq(client))).thenReturn(Mono.just("my-jwt"))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just((String)invocation.getArguments()[0]))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated("client-id")).thenReturn(Mono.just(client))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.enhance_migrated(user)).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encodeUserinfo_migrated(any(), any())).thenReturn(Mono.just("signedJwtBearer"))
1 | Mono | just | METHOD_INVOCATION | when(jweService.encryptUserinfo_migrated("signedJwtBearer", client)).thenReturn(Mono.just("signedJwtBearer"))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(any(), any(), any())).thenReturn(Mono.just(client))
1 | Mono | error | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(any(), any(), any())).thenReturn(Mono.error(new InvalidClientException("Unknown or unsupported assertion_type")))
1 | Mono | just | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(any(), any(), any())).thenReturn(Mono.just(client))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(identityProviderService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(JWT.class), any(Client.class))).thenReturn(Mono.just("jwt"))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(res);
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(clientService.delete_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | return Mono.just(toRenew);
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findByDomain_migrated(DOMAIN_ID)).thenReturn(Flux.just(identityProvider))
1 | Flux | just | METHOD_INVOCATION | when(certificateService.findByDomain_migrated(any())).thenReturn(Flux.just(certificate))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(httpResponse))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(httpResponse))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(httpResponse))
1 | Mono | empty | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | empty | METHOD_INVOCATION | when(clientService.findById_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientService.findById_migrated("123")).thenReturn(Mono.just(template))
1 | Mono | just | METHOD_INVOCATION | when(formService.copyFromClient_migrated(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(Mono.just(Collections.emptyList()))
1 | Flux | empty | METHOD_INVOCATION | when(emailTemplateService.copyFromClient_migrated(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(clientService.findById_migrated("123")).thenReturn(Mono.just(template))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(anyString())).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKey_migrated(any(), any())).thenReturn(Mono.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(dcrService.create_migrated(any(), any())).thenReturn(Mono.error(new Exception()))
1 | Mono | just | METHOD_INVOCATION | when(dcrService.create_migrated(any(), any())).thenReturn(Mono.just(new Client()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated("my-client")).thenReturn(Mono.just(new Application()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.findById_migrated("my-client")).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationService.findById_migrated("my-client")).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new)))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.create_migrated(any())).thenReturn(Mono.error(new InvalidRedirectUriException()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.create_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.update_migrated(any(Application.class))).thenReturn(Mono.error(new InvalidRedirectUriException()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.update_migrated(any(Application.class))).thenReturn(Mono.just(new Application()))
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.delete_migrated("my-client", null)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.delete_migrated("my-client", null)).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(applicationService.delete_migrated("my-client", null)).thenReturn(Mono.error(TechnicalManagementException::new))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.delete_migrated("my-client", null)).thenReturn(Mono.error(new ClientNotFoundException("my-client")))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.renewClientSecret_migrated(DOMAIN, "my-client", null)).thenReturn(Mono.just(new Application()))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.renewClientSecret_migrated(DOMAIN, "my-client", null)).thenReturn(Mono.error(new ClientNotFoundException("my-client")))
1 | Mono | error | METHOD_INVOCATION | when(applicationService.renewClientSecret_migrated(DOMAIN, "my-client", null)).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalManagementException::new)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated()).thenReturn(Mono.just(jwkSet))
1 | Mono | error | METHOD_INVOCATION | when(jwkService.getKeys_migrated()).thenReturn(Mono.error(new RuntimeException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(permissionTicketService.create_migrated(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(Mono.just(success))
1 | Mono | just | METHOD_INVOCATION | when(permissionTicketService.create_migrated(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(Mono.just(success))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tokenService.create_migrated(any(), any(), any())).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.refresh_migrated(refreshToken, tokenRequest, client)).thenReturn(Mono.just(new RefreshToken(refreshToken)))
1 | Mono | error | METHOD_INVOCATION | when(tokenService.refresh_migrated(refreshToken, tokenRequest, client)).thenReturn(Mono.error(new InvalidGrantException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jweService.decrypt_migrated(request, false)).thenReturn(Mono.just(plainJWT))
1 | Mono | just | METHOD_INVOCATION | when(jweService.decrypt_migrated(request, false)).thenReturn(Mono.just(signedJWT))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.just(idTokenCert))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(clientCert))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just(idTokenPayload))
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(clientCert))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just(idTokenPayload))
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just(idTokenPayload))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(jwtCaptor.capture(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just(idTokenPayload))
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just(idTokenPayload))
1 | Mono | just | METHOD_INVOCATION | when(jweService.encryptIdToken_migrated(anyString(), any())).thenReturn(Mono.just("encryptedToken"))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(certificateManager.get_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | just | METHOD_INVOCATION | when(certificateManager.get_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Mono.just("test"))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userConsentService.checkConsent_migrated(any(), any())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(userConsentService.checkConsent_migrated(any(), any())).thenReturn(Mono.just(Collections.singleton(autoApproveScope)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tokenGranter.grant_migrated(any(TokenRequest.class), any(Client.class))).thenReturn(Mono.just(accessToken))
1 | Mono | error | METHOD_INVOCATION | when(tokenGranter.grant_migrated(any(TokenRequest.class), any(Client.class))).thenReturn(Mono.error(new Exception()))
1 | Mono | error | METHOD_INVOCATION | when(tokenGranter.grant_migrated(any(TokenRequest.class), any(Client.class))).thenReturn(Mono.error(UmaException.requestDeniedBuilder().build()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | empty | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(jwk))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(any(), any(Client.class))).thenReturn(Mono.just(""))
1 | Mono | just | METHOD_INVOCATION | when(tokenEnhancer.enhance_migrated(any(), any(), any(), any(), any())).thenReturn(Mono.just(new AccessToken("token-id")))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(jwtCaptor.capture(), any(Client.class))).thenReturn(Mono.just(""))
1 | Mono | just | METHOD_INVOCATION | when(tokenEnhancer.enhance_migrated(any(), any(), any(), any(), any())).thenReturn(Mono.just(new AccessToken("token-id")))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.encode_migrated(jwtCaptor.capture(), any(Client.class))).thenReturn(Mono.just(""))
1 | Mono | just | METHOD_INVOCATION | when(tokenEnhancer.enhance_migrated(any(), any(), any(), any(), any())).thenReturn(Mono.just(new AccessToken("token-id")))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(any(), any(Client.class))).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken_migrated(any())).thenReturn(Mono.just(refreshToken))
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(any(), any(Client.class))).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken_migrated(any())).thenReturn(Mono.just(refreshToken))
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(eq("encoded"), any(Client.class))).thenReturn(Mono.just(jwt))
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.findByToken_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(eq(refreshToken.getToken()), any(Client.class))).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken_migrated(any())).thenReturn(Mono.just(refreshToken))
1 | Mono | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify_migrated(any(), any(Client.class))).thenReturn(Mono.just(jwt))
1 | Mono | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken_migrated(any())).thenReturn(Mono.just(refreshToken))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | error | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser_migrated(anyString(), anyString(), anyString())).thenReturn(Flux.error(new RuntimeException()))
1 | Flux | empty | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser_migrated(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flux.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | error | METHOD_INVOCATION | when(service.create_migrated(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(Mono.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Mono | just | METHOD_INVOCATION | when(service.create_migrated(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(Mono.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | empty | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.just(new Resource().setId(RESOURCE_ID)))
1 | Mono | error | METHOD_INVOCATION | when(service.update_migrated(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(Mono.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Mono | just | METHOD_INVOCATION | when(service.update_migrated(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(Mono.just(new Resource()))
1 | Mono | error | METHOD_INVOCATION | when(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Mono | empty | METHOD_INVOCATION | when(service.delete_migrated(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(revocationTokenService.revoke_migrated(any(), any())).thenReturn(Mono.error(new InvalidGrantException()))
1 | Mono | empty | METHOD_INVOCATION | when(revocationTokenService.revoke_migrated(any(), any())).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(revocationTokenService.revoke_migrated(any(), any())).thenReturn(Mono.error(new RuntimeException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(eq("type"), eq("myToken"), anyString())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(eq("type"), eq("myToken"), anyString())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientAssertionService.assertClient_migrated(eq("type"), eq("myToken"), anyString())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(clientSyncService.findByClientId_migrated(clientId)).thenReturn(Mono.just(client))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.getKeys_migrated(client)).thenReturn(Mono.just(new JWKSet()))
1 | Mono | just | METHOD_INVOCATION | when(jwkService.filter_migrated(any(), any())).thenReturn(Mono.just(key))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tokenService.introspect_migrated("token")).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated("user")).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.introspect_migrated("token")).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.introspect_migrated(token)).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.introspect_migrated(token)).thenReturn(Mono.just(accessToken))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(response))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(response))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(response))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(response))
1 | Flux | just | METHOD_INVOCATION | when(certificateProvider.keys_migrated()).thenReturn(Flux.just(key))
1 | Flux | just | METHOD_INVOCATION | when(certificateProvider.keys_migrated()).thenReturn(Flux.just(key))
1 | Flux | just | METHOD_INVOCATION | when(certificateProvider2.keys_migrated()).thenReturn(Flux.just(key2))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(tokenRequestResolver.resolve_migrated(any(), any(), any())).thenReturn(Mono.just(tokenRequest))
1 | Mono | just | METHOD_INVOCATION | when(tokenService.create_migrated(any(), any(), any())).thenReturn(Mono.just(accessToken))
1 | Mono | just | METHOD_INVOCATION | when(userAuthenticationManager.authenticate_migrated(any(Client.class), any(Authentication.class))).thenReturn(Mono.just(new User()))
1 | Mono | subscribe | METHOD_INVOCATION | groupService.list_migrated(page - 1, size, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((groups)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(groups))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | groupService.create_migrated(group, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | RETURN_TYPE
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(groupRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId(), page, size).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ListResponse<Group>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find groups by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupRepository.findAll_migrated(ReferenceType.DOMAIN, domain.getId(), page, size).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)))
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return groupRepository.findByMember_migrated(memberId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, null, true))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)));
}));
1 | Flux | map | METHOD_INVOCATION | groupRepository.findByMember_migrated(memberId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, null, true))).onErrorResume
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->setMembers_migrated(z, baseUrl)))
1 | Mono | map | METHOD_INVOCATION | groupRepository.findById_migrated(groupId).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->setMembers_migrated(group, baseUrl)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, true))).flatMap((group1)->setMembers_migrated(group1, baseUrl)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to router a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->setMembers_migrated(group, baseUrl)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, true))).flatMap((group1)->setMembers_migrated(group1, baseUrl)))
1 | Mono | map | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->setMembers_migrated(group, baseUrl)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, true))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->setMembers_migrated(group, baseUrl)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return RxJava2Adapter.monoToSingle(groupRepository.create_migrated(groupModel));
}).apply(v)))).map
1 | Mono | flatMap | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->setMembers_migrated(group, baseUrl)).flatMap
1 | Mono | map | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).hasElement().map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v)))))).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, false))).flatMap((group1)->setMembers_migrated(group1, baseUrl)))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to update a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v)))))).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, false))).flatMap((group1)->setMembers_migrated(group1, baseUrl)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v)))))).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, false))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v)))))).apply(y)))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))))
1 | Mono | error | METHOD_INVOCATION | groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(setMembers_migrated(group, baseUrl)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(groupRepository.update_migrated(groupToUpdate));
}).apply(v)))))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup))
1 | Mono | map | METHOD_INVOCATION | groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(get_migrated(groupId, baseUrl).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return RxJava2Adapter.monoToSingle(update_migrated(groupId, objectMapper.treeToValue(node, Group.class), baseUrl));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Group>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(get_migrated(groupId, baseUrl).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return RxJava2Adapter.monoToSingle(update_migrated(groupId, objectMapper.treeToValue(node, Group.class), baseUrl));
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | get_migrated(groupId, baseUrl).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap
1 | Mono | error | METHOD_INVOCATION | get_migrated(groupId, baseUrl).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->groupRepository.delete_migrated(groupId)).then())
1 | Mono | flatMap | METHOD_INVOCATION | groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->groupRepository.delete_migrated(groupId)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap
1 | Mono | error | METHOD_INVOCATION | groupRepository.findById_migrated(groupId).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userRepository.findByIdIn_migrated(memberIds).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((existingMembers)->{
    group.setMembers(existingMembers);
    return group;
}));
1 | Flux | collectList | METHOD_INVOCATION | userRepository.findByIdIn_migrated(memberIds).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
})).collectList().map
1 | Flux | map | METHOD_INVOCATION | userRepository.findByIdIn_migrated(memberIds).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
})).collectList
1 | Mono | just | METHOD_INVOCATION | return Mono.just(group);
1 | Mono | subscribe | METHOD_INVOCATION | userService.list_migrated(filter, page - 1, size, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((users)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(users))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | userService.create_migrated(user, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | groupService.get_migrated(groupId, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((group)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail), RxJavaReactorMigrationUtil.toRunnable(()->context.fail(new GroupNotFoundException(groupId))));
1 | Mono | subscribe | METHOD_INVOCATION | groupService.update_migrated(groupId, group, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | groupService.patch_migrated(groupId, patchOp, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | userService.get_migrated(userId, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail), RxJavaReactorMigrationUtil.toRunnable(()->context.fail(new UserNotFoundException(userId))));
1 | Mono | subscribe | METHOD_INVOCATION | userService.update_migrated(userId, user, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | subscribe | METHOD_INVOCATION | userService.patch_migrated(userId, patchOp, location(context.request())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findUsers).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<ListResponse<User>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to find users for the security domain {}", domain.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findUsers).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle((io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap(this::setGroups_migrated))
1 | Mono | map | METHOD_INVOCATION | userRepository.findById_migrated(userId).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidValueException("Field [password] is invalid"));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, true))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof SCIMException || ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, true))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source))))
1 | Mono | then | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty
1 | Mono | then | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then
1 | Mono | flatMap | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then
1 | Mono | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap
1 | Mono | hasElement | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map
1 | Mono | defer | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source)))
1 | Mono | error | METHOD_INVOCATION | userRepository.findByUsernameAndSource_migrated(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->checkRoles_migrated(user.getRoles())).then().then(Mono.defer(()->identityProviderManager.getUserProvider_migrated(source))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userModel).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userModel)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(userRepository.create_migrated(userModel));
}).apply(v)))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidValueException("Field [password] is invalid"));
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
}).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof SCIMException || ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
}).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(io.gravitee.am.gateway.handler.scim.model.User ident)->RxJava2Adapter.monoToSingle(setGroups_migrated(ident))).apply(v))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
}).apply(y)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
            } else {
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
}).apply(y)))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))
1 | Mono | error | METHOD_INVOCATION | userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRoles_migrated(user.getRoles()).then(RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
        } else {
            return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
}))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToUpdate).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(userToUpdate)));
    } else {
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(userToUpdate.getExternalId(), convert(userToUpdate)));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return RxJava2Adapter.monoToSingle(userRepository.update_migrated(userToUpdate));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(userToUpdate.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(get_migrated(userId, baseUrl).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return RxJava2Adapter.monoToSingle(update_migrated(userId, userToPatch, baseUrl));
}).apply(v))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to patch user: {}", userId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)));
    }
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(get_migrated(userId, baseUrl).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return RxJava2Adapter.monoToSingle(update_migrated(userId, userToPatch, baseUrl));
}).apply(v))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | get_migrated(userId, baseUrl).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | get_migrated(userId, baseUrl).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))).then();
1 | Mono | flatMap | METHOD_INVOCATION | userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(userRepository.delete_migrated(userId));
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | userRepository.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then(userRepository.delete_migrated(userId)))
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->userProvider.delete_migrated(user.getExternalId())).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return groupService.findByMember_migrated(scimUser.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
})).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((scimGroups)->{
    if (!scimGroups.isEmpty()) {
        scimUser.setGroups(scimGroups);
        return scimUser;
    } else {
        return scimUser;
    }
}));
1 | Flux | collectList | METHOD_INVOCATION | groupService.findByMember_migrated(scimUser.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
})).collectList().map
1 | Flux | map | METHOD_INVOCATION | groupService.findByMember_migrated(scimUser.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
})).collectList
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | then | METHOD_INVOCATION | return roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})).then();
1 | Mono | map | METHOD_INVOCATION | roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})).then
1 | Mono | subscribe | METHOD_INVOCATION | serviceProviderConfigService.get_migrated().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((config)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(config))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(serviceProviderConfiguration);
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(groupService.update_migrated(any(), any(), any())).thenReturn(Mono.just(getGroup()))
1 | Mono | error | METHOD_INVOCATION | when(groupService.update_migrated(any(), any(), anyString())).thenReturn(Mono.error(new InvalidGroupException("Invalid group infos")))
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(userService.update_migrated(eq(null), any(), any())).thenReturn(Mono.error(new InvalidValueException("Field [password] is invalid")))
1 | Mono | just | METHOD_INVOCATION | when(userService.update_migrated(any(), any(), any())).thenReturn(Mono.just(getUser()))
1 | Mono | error | METHOD_INVOCATION | when(userService.update_migrated(any(), any(), anyString())).thenReturn(Mono.error(new InvalidValueException("Role [role-1] can not be found.")))
1 | Mono | error | METHOD_INVOCATION | when(userService.update_migrated(any(), any(), anyString())).thenReturn(Mono.error(new InvalidUserException("Invalid user infos")))
1 | Mono | error | METHOD_INVOCATION | when(userService.update_migrated(any(), any(), anyString())).thenReturn(Mono.error(new EmailFormatInvalidException("Invalid email")))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(newUser.getRoles())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.create_migrated(any())).thenReturn(Mono.just(idpUser))
1 | Mono | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource_migrated(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.create_migrated(any())).thenReturn(Mono.just(createdUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(newUser.getRoles())).thenReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.create_migrated(any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(existingUser.getId())).thenReturn(Mono.just(existingUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(userRepository.update_migrated(any())).thenReturn(Mono.just(existingUser))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(existingUser.getId())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.create_migrated(any())).thenReturn(Mono.just(idpUser))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(userId)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(userRepository.findById_migrated(userId)).thenReturn(Mono.just(patchedUser))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(userToUpdate);
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(groupService.list_migrated(eq(0), eq(100), anyString())).thenReturn(Mono.just(new ListResponse<>()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.create_migrated(any())).thenReturn(Mono.just(createdGroup))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(userRepository.findByIdIn_migrated(any())).thenReturn(Flux.just(user))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.create_migrated(any())).thenReturn(Mono.just(createdGroup))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findByName_migrated(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Mono.just(new io.gravitee.am.model.Group()))
1 | Mono | just | METHOD_INVOCATION | when(groupRepository.findById_migrated(groupId)).thenReturn(Mono.just(new io.gravitee.am.model.Group()))
1 | Mono | empty | METHOD_INVOCATION | when(groupRepository.findByName_migrated(eq(ReferenceType.DOMAIN), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | return Mono.just(groupToUpdate);
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.list_migrated(eq(null), eq(0), eq(100), anyString())).thenReturn(Mono.just(new ListResponse<>()))
1 | Mono | just | METHOD_INVOCATION | when(userService.list_migrated(any(Filter.class), eq(0), eq(100), anyString())).thenReturn(Mono.just(new ListResponse<>()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(groupService.create_migrated(any(), any())).thenReturn(Mono.just(getGroup()))
1 | Mono | error | METHOD_INVOCATION | when(groupService.create_migrated(any(), any())).thenReturn(Mono.error(new UniquenessException("Display name already exists")))
1 | Mono | error | METHOD_INVOCATION | when(groupService.create_migrated(any(), any())).thenReturn(Mono.error(new InvalidGroupException("Invalid group infos")))
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new InvalidValueException("Field [password] is invalid")))
1 | Mono | just | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.just(getUser()))
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new InvalidValueException("User provider [unknown-idp] can not be found.")))
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new InvalidValueException("Role [role-1] can not be found.")))
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new UniquenessException("Username already exists")))
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new InvalidUserException("Invalid user infos")))
1 | Mono | error | METHOD_INVOCATION | when(userService.create_migrated(any(), any())).thenReturn(Mono.error(new EmailFormatInvalidException("Invalid email")))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(defaultPrincipal(context, token));
1 | Mono | single | METHOD_INVOCATION | return userService.findById_migrated(token.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | userService.findById_migrated(token.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single
1 | Mono | map | METHOD_INVOCATION | userService.findById_migrated(token.getSub()).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty
1 | Mono | single | METHOD_INVOCATION | return clientSyncService.findByClientId_migrated(token.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(token.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty(defaultPrincipal(context, token)).single
1 | Mono | map | METHOD_INVOCATION | clientSyncService.findByClientId_migrated(token.getAud()).map(RxJavaReactorMigrationUtil.toJdkFunction((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
})).defaultIfEmpty
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return scopeApprovalService.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId)));
1 | Mono | error | METHOD_INVOCATION | scopeApprovalService.findById_migrated(consentId).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | userService.consent_migrated(consentId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((scopeApproval)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApproval))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((principal)->userService.revokeConsent_migrated(userId, consentId, principal)).then())
1 | Mono | flatMap | METHOD_INVOCATION | getPrincipal_migrated(context).flatMap((principal)->userService.revokeConsent_migrated(userId, consentId, principal)).then
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | Mono.just(Optional.ofNullable(clientId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId, optClient.get()));
    }
    return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId));
}).apply(v))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((scopeApprovals)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApprovals))), RxJavaReactorMigrationUtil.toJdkConsumer(context::fail));
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(Optional.ofNullable(clientId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId, optClient.get()));
    }
    return RxJava2Adapter.monoToSingle(userService.consents_migrated(userId));
}).apply(v))).subscribe
1 | Mono | just | METHOD_INVOCATION | Mono.just(Optional.ofNullable(clientId)).flatMap
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then());
    }
    return RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then());
}).apply(y)))).then
1 | Mono | just | METHOD_INVOCATION | Mono.just(Optional.ofNullable(clientId)).flatMap
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then())
1 | Mono | flatMap | METHOD_INVOCATION | getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, optClient.get(), v)).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then())
1 | Mono | flatMap | METHOD_INVOCATION | getPrincipal_migrated(context).flatMap((v)->userService.revokeConsents_migrated(userId, v)).then
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(scopeApprovalService.findByDomainAndUser_migrated(domainId, userId)).thenReturn(Flux.just(scopeApproval))
1 | Mono | just | METHOD_INVOCATION | when(scopeApprovalService.findById_migrated("consentId")).thenReturn(Mono.just(scopeApproval))
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalService.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalService.revokeByUser_migrated(domainId, userId, null)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalService.revokeByConsent_migrated(domainId, userId, consentId, null)).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(userService.consent_migrated(anyString())).thenReturn(Mono.error(new ScopeApprovalNotFoundException("consentId")))
1 | Mono | just | METHOD_INVOCATION | when(userService.consent_migrated(anyString())).thenReturn(Mono.just(new ScopeApproval()))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(userService.revokeConsent_migrated(anyString(), anyString(), any())).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.consents_migrated(anyString())).thenReturn(Mono.just(Collections.singleton(new ScopeApproval())))
1 | Mono | just | METHOD_INVOCATION | when(userService.findById_migrated(anyString())).thenReturn(Mono.just(new io.gravitee.am.model.User()))
1 | Mono | empty | METHOD_INVOCATION | when(userService.revokeConsents_migrated(anyString(), any(User.class))).thenReturn(Mono.empty())
1 | Mono | subscribe | METHOD_INVOCATION | serviceProviderService.metadata_migrated(providerId, basePath).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((result)->{
    HttpServerResponse response = routingContext.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache");
    if (result.getHeaders() != null) {
        result.getHeaders().forEach(response::putHeader);
    }
    response.setStatusCode(HttpStatusCode.OK_200).end(result.getBody());
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->routingContext.response().setStatusCode(error instanceof AbstractManagementException ? ((AbstractManagementException)error).getHttpStatusCode() : 500).end()));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return identityProviderManager.get_migrated(providerId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(providerId))).map(RxJavaReactorMigrationUtil.toJdkFunction((authenticationProvider)->{
    Metadata metadata = authenticationProvider.metadata(idpUrl);
    if (metadata == null) {
        logger.debug("No metadata found for identity provider : {}", providerId);
        throw new IdentityProviderMetadataNotFoundException(providerId);
    }
    return metadata;
}));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.get_migrated(providerId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(providerId))).map
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.get_migrated(providerId).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(providerId)))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.get_migrated("provider-id")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("provider-id")).thenReturn(Mono.just(authenticationProvider))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.get_migrated("provider-id")).thenReturn(Mono.just(authenticationProvider))
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | when(serviceProviderService.metadata_migrated(eq("unknown-provider"), anyString())).thenReturn(Mono.error(new IdentityProviderNotFoundException("unknown-provider")))
1 | Mono | error | METHOD_INVOCATION | when(serviceProviderService.metadata_migrated(eq("unknown-provider"), anyString())).thenReturn(Mono.error(new IdentityProviderMetadataNotFoundException("unknown-provider")))
1 | Mono | just | METHOD_INVOCATION | when(serviceProviderService.metadata_migrated(eq("provider-id"), anyString())).thenReturn(Mono.just(metadata))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((id)->{
    deploymentId = id;
}), RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.error("Unable to start HTTP server", err.getCause());
    Runtime.getRuntime().exit(1);
}));
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(client.rxConnect(port, host).doFinally(client::close)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((socket)->future.complete(Result.healthy())), RxJavaReactorMigrationUtil.toJdkConsumer((error)->future.complete(Result.unhealthy(error.getCause()))));
1 | Mono | block | METHOD_INVOCATION | List<Event> events = eventRepository.findByTimeFrame_migrated(lastRefreshAt - lastDelay, nextLastRefreshAt).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | eventRepository.findByTimeFrame_migrated(lastRefreshAt - lastDelay, nextLastRefreshAt).collectList().block
1 | Mono | block | METHOD_INVOCATION | List<Domain> domains = domainRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Domain::isEnabled)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(this::canHandle)).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | domainRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Domain::isEnabled)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(this::canHandle)).collectList().block
1 | Flux | filter | METHOD_INVOCATION | domainRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Domain::isEnabled)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(this::canHandle)).collectList
1 | Flux | filter | METHOD_INVOCATION | domainRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Domain::isEnabled)).filter
1 | Mono | block | METHOD_INVOCATION | Domain domain = domainRepository.findById_migrated(domainId).block()
1 | Mono | block | METHOD_INVOCATION | final List<Organization> foundOrgs = organizationRepository.findByHrids_migrated(this.organizations.get()).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | organizationRepository.findByHrids_migrated(this.organizations.get()).collectList().block
1 | Mono | block | METHOD_INVOCATION | environmentRepository.findAll_migrated(org.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList().block().stream
1 | Flux | collectList | METHOD_INVOCATION | environmentRepository.findAll_migrated(org.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList().block
1 | Flux | map | METHOD_INVOCATION | environmentRepository.findAll_migrated(org.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList
1 | Flux | filter | METHOD_INVOCATION | environmentRepository.findAll_migrated(org.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
})).map
1 | Mono | block | METHOD_INVOCATION | environmentIds = environmentRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h)))).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | environmentRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h)))).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList().block
1 | Flux | map | METHOD_INVOCATION | environmentRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h)))).map(RxJavaReactorMigrationUtil.toJdkFunction(io.gravitee.am.model.Environment::getId)).collectList
1 | Flux | filter | METHOD_INVOCATION | environmentRepository.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h)))).map
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2, domain3))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame_migrated(any(Long.class), any(Long.class))).thenReturn(Flux.just(event))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame_migrated(any(Long.class), any(Long.class))).thenReturn(Flux.just(event))
1 | Mono | just | METHOD_INVOCATION | when(domainRepository.findById_migrated(domainToUpdate.getId())).thenReturn(Mono.just(domainToUpdate))
1 | Flux | empty | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame_migrated(any(Long.class), any(Long.class))).thenReturn(Flux.just(event))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated()).thenReturn(Flux.just(env))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated()).thenReturn(Flux.just(env))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated()).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated()).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2))
1 | Flux | just | METHOD_INVOCATION | when(organizationRepository.findByHrids_migrated(anyList())).thenReturn(Flux.just(organization))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization.getId())).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2))
1 | Flux | just | METHOD_INVOCATION | when(organizationRepository.findByHrids_migrated(anyList())).thenReturn(Flux.just(organization, organization2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization.getId())).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization2.getId())).thenReturn(Flux.just(env3, env4))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2, domain3, domain4))
1 | Flux | just | METHOD_INVOCATION | when(organizationRepository.findByHrids_migrated(anyList())).thenReturn(Flux.just(organization, organization2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization.getId())).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization2.getId())).thenReturn(Flux.just(env3, env4))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2, domain3, domain4))
1 | Flux | just | METHOD_INVOCATION | when(organizationRepository.findByHrids_migrated(anyList())).thenReturn(Flux.just(organization, organization2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization.getId())).thenReturn(Flux.just(env, env2))
1 | Flux | just | METHOD_INVOCATION | when(environmentRepository.findAll_migrated(organization2.getId())).thenReturn(Flux.just(env3, env4))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain, domain2, domain3, domain4))
1 | Flux | just | METHOD_INVOCATION | when(domainRepository.findAll_migrated()).thenReturn(Flux.just(domain))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalArgumentException("Unsupported verification channel \'" + target.getChannel() + "\'"));
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(false);
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((throwable)->{
    LOGGER.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
})))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | block | METHOD_INVOCATION | Environment environment = environmentService.createDefault_migrated().block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(Collections.emptyList());
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(client.getAbs(newsletterURI + taglinesPath).rxSend()).map(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, List<String>>toJdkFunction((res)->{
    if (res.statusCode() != 200) {
        LOGGER.error("An error has occurred when reading the newsletter taglines response: " + res.statusMessage());
        return Collections.emptyList();
    }
    return mapper.readValue(res.bodyAsString(), List.class);
}));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident))))).flatMapSingle((io.gravitee.alert.api.trigger.Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).count()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((count)->LOGGER.info("{} alert triggers synchronized with the alerting system.", count)), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system", throwable)));
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(domainService.findAllByCriteria_migrated(new DomainCriteria())).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Domain ident)->RxJava2Adapter.fluxToFlowable(prepareAETriggers_migrated(ident)))))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapPublisher(this::prepareAETriggers_migrated).flatMapSingle((io.gravitee.alert.api.trigger.Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).count()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}].", count, payload.getReferenceId())), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}]", payload.getReferenceId(), throwable)));
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId())).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(io.gravitee.alert.api.trigger.Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v)))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((aeTrigger)->LOGGER.info("Alert trigger [{}] synchronized with the alerting system.", aeTrigger.getId())), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->LOGGER.error("An error occurred when trying to synchronize alert trigger [{}] with alerting system", payload.getId(), throwable)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)(io.gravitee.alert.api.trigger.Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident))).apply(v))))
1 | Mono | flatMap | METHOD_INVOCATION | alertTriggerService.getById_migrated(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger_migrated(domain, alertTrigger)).flatMap
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled()))).flatMapPublisher((domain)->RxJava2Adapter.fluxToFlowable(this.alertTriggerService.findByDomainAndCriteria_migrated(domain.getId(), alertTriggerCriteria)).flatMapSingle((alertTrigger)->RxJava2Adapter.monoToSingle(prepareAETrigger_migrated(domain, alertTrigger))).flatMapSingle((io.gravitee.alert.api.trigger.Trigger ident)->RxJava2Adapter.monoToSingle(registerAETrigger_migrated(ident)))).count()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}] after the update of alert notifier [{}].", count, payload.getReferenceId(), payload.getId())), RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}] after the alert notifier {} event [{}].", payload.getReferenceId(), event.type().name().toLowerCase(), payload.getId(), throwable)));
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(payload.getReferenceId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled())))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(trigger))
1 | Flux | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | doOnSuccess | METHOD_INVOCATION | return alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((trigger)->trigger.setEnabled(domain.isEnabled() && domain.isAlertEnabled() && trigger.isEnabled())));
1 | Mono | map | METHOD_INVOCATION | alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment))).doOnSuccess
1 | Flux | collectList | METHOD_INVOCATION | alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).collectList().map
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | resolveProperties_migrated((ResolvePropertyCommand)command).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((result)->resultHandler.handle((T)result)), RxJavaReactorMigrationUtil.toJdkConsumer((error)->resultHandler.handle(null)));
1 | Mono | RETURN_TYPE
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resolveDomainProperties_migrated(value).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domainProperties)->values.put(key, domainProperties))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resolveApplicationProperties_migrated(value).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((appProperties)->values.put(key, appProperties))))
1 | Mono | then | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then().then(Mono.just(values));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then().then
1 | Flux | ignoreElements | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs)).ignoreElements().then().then(Mono.just(values))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(properties))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(properties))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(properties))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(properties))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | getSchema_migrated(plugin.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(plugin::setSchema));
1 | Mono | subscribe | METHOD_INVOCATION | getIcon_migrated(plugin.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(plugin::setIcon));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | block | METHOD_INVOCATION | final Map<String, Role> organizationRoles = RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
})).block()
1 | Flux | merge | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames)))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(userProvider1))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new IllegalStateException("Unable to create Default IdentityProvider with " + managementBackend + " backend"));
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderService.findById_migrated(identityProviderId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::loadUserProvider), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to deploy user provider  {}", identityProviderId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No identity provider found with id {}", identityProviderId)));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationService.addAdditionalInformation_migrated(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Installation has been removed."))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when deleting installation.", error))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | installationService.addAdditionalInformation_migrated(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Installation has been removed."))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | installationService.addAdditionalInformation_migrated(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess
1 | Mono | just | METHOD_INVOCATION | (installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))
1 | Mono | IMPORT
1 | Mono | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")))
1 | Mono | block | METHOD_INVOCATION | List<io.gravitee.am.model.Reporter> reporters = reporterService.findByDomain_migrated(domain).collectList().block()
1 | Flux | collectList | METHOD_INVOCATION | reporterService.findByDomain_migrated(domain).collectList().block
1 | Mono | subscribe | METHOD_INVOCATION | reporterService.findById_migrated(reporterId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::loadReporter), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to deploy reporter {}", reporterId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No reporter found with id {}", reporterId)));
1 | Mono | subscribe | METHOD_INVOCATION | reporterService.findById_migrated(reporterId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((reporter)->{
    logger.debug("Reload reporter: {} after configuration update", reporter.getName());
    Optional<Reporter> optionalAuditReporter = auditReporters.entrySet().stream().filter((entry)->reporter.getId().equals(entry.getKey().getId())).map(Entry::getValue).findFirst();
    if (optionalAuditReporter.isPresent()) {
        try {
            Reporter auditReporter = optionalAuditReporter.get();
            if (reporter.isEnabled()) {
                auditReporter.stop();
                auditReporters.entrySet().removeIf((entry)->entry.getKey().getId().equals(reporter.getId()));
                loadReporter(reporter);
            } else {
                logger.info("Reporter: {} has been disabled", reporter.getName());
                ((EventBusReporterWrapper)auditReporter).unregister();
                if (!auditReporter.canSearch()) {
                    auditReporter.stop();
                }
            }
        } catch (Exception e) {
            logger.error("An error occurs while reloading reporter: {}", reporter.getName(), e);
        }
    } else {
        logger.info("There is no reporter to reload");
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to reload reporter {}", reporterId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No reporter found with id {}", reporterId)));
1 | Mono | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(reporter.getDomain())).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(domain.getReferenceId()).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(deployment).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((id)->{
    deploymentId = id;
    if (!reporters.isEmpty()) {
        for (io.gravitee.reporter.api.Reporter reporter : reporters) {
            try {
                logger.info("Starting reporter: {}", reporter);
                reporter.start();
            } catch (Exception ex) {
                logger.error("Unexpected error while starting reporter", ex);
            }
        }
    } else {
        logger.info("\tThere is no reporter to start");
    }
}), RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.error("Reporter service can not be started", err);
}));
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when creating user [{}] for organization [{}].", userPayload.getUsername(), userPayload.getOrganizationId(), error))))
1 | Mono | map | METHOD_INVOCATION | userService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.createOrUpdate_migrated(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId()))).map
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Scope>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<List<Scope>>>)(scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return RxJava2Adapter.monoToSingle(createAppScopes_migrated(domain).flatMap((irrelevant)->createRoleScopes_migrated(domain)));
    }
    logger.info("No scope to update, skip upgrade");
    return RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())));
}).apply(v)));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(createAppScopes_migrated(domain).flatMap((irrelevant)->createRoleScopes_migrated(domain)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new ArrayList<>(scopes.getData())))
1 | Mono | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER)))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null)))
1 | Mono | RETURN_TYPE
1 | Flux | flatMap | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER)))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap
1 | Mono | filter | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(roleService.findByDomain_migrated(domain.getId()).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null)))
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return scopeService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Page<Scope>, Single<Scope>>)(scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, scope));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}).apply(v)));
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(optScope.get()))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.createOrUpdate_migrated(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling environment [{}] with id [{}].", environmentPayload.getName(), environmentPayload.getId(), error))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | environmentService.createOrUpdate_migrated(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId()))).doOnError
1 | Mono | map | METHOD_INVOCATION | environmentService.createOrUpdate_migrated(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | doOnSuccess | METHOD_INVOCATION | return findAll_migrated(ReferenceType.DOMAIN, domain, page, size).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((userPage)->userPage.getData().forEach(this::setInternalStatus)));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userService.findById_migrated(id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus));
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new UserInvalidException("Field [password] is required"));
1 | Mono | flatMap | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), newUser.getUsername(), newUser.getSource()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
                Application client = optClient.orElse(null);
                newUser.setDomain(domain.getId());
                newUser.setClient(client != null ? client.getId() : null);
                newUser.setInternal(true);
                if (newUser.isPreRegistration()) {
                    newUser.setPassword(null);
                    newUser.setRegistrationCompleted(false);
                    newUser.setEnabled(false);
                } else {
                    String password = newUser.getPassword();
                    if (password != null && isInvalidUserPassword(password, client, domain)) {
                        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
                    }
                    newUser.setRegistrationCompleted(true);
                    newUser.setEnabled(true);
                    newUser.setDomain(domain.getId());
                }
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    return newUser;
                })))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
                    if (ex instanceof UserAlreadyExistsException) {
                        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
                            if (!empty) {
                                throw new UserAlreadyExistsException(newUser.getUsername());
                            } else {
                                newUser.setPassword(null);
                                newUser.setExternalId(idpUser.getId());
                                newUser.setUsername(idpUser.getUsername());
                                return newUser;
                            }
                        }))));
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.error(ex));
                    }
                }).apply(err))))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
                    User user = transform(newUser1);
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                        user.setRegistrationAccessToken(getUserRegistrationToken(user));
                    }
                    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
                }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
                    } else {
                        return RxJava2Adapter.monoToSingle(Mono.just(user));
                    }
                }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
            });
        });
    }
}).apply(v)));
1 | Mono | hasElement | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), newUser.getUsername(), newUser.getSource()).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return RxJava2Adapter.monoToCompletable(sendRegistrationConfirmation_migrated(user.getReferenceId(), user.getId(), principal)).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))))).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))).flatMap
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<NewUser>>toJdkFunction((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(newUser.getUsername())).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}).apply(err))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
})))
1 | Mono | then | METHOD_INVOCATION | userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser))).map
1 | Mono | doOnError | METHOD_INVOCATION | userValidator.validate_migrated(transform(newUser)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
})))
1 | Mono | hasElement | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource_migrated(domain.getId(), idpUser.getUsername(), newUser.getSource()).hasElement().map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.create_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userService.findById_migrated(ReferenceType.DOMAIN, domain.getId(), userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
            }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }).apply(err))));
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToCompletable(loginAttemptService.reset_migrated(criteria));
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.DOMAIN, domain.getId(), userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
            }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }).apply(err))));
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToCompletable(loginAttemptService.reset_migrated(criteria));
}).apply(y)))).then
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.DOMAIN, domain.getId(), userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
            }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }).apply(err))));
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))).flatMap
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
    }).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }).apply(err))));
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(a)))).doOnSuccess
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.identityprovider.api.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        user.setPassword(password);
        return RxJava2Adapter.monoToSingle(userProvider.create_migrated(convert(user)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), idpUser));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))).flatMap
1 | Mono | error | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain1)->findById_migrated(ReferenceType.DOMAIN, domainId, userId).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))).then()).then();
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain1)->findById_migrated(ReferenceType.DOMAIN, domainId, userId).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))).then()).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | then | METHOD_INVOCATION | (domain1)->findById_migrated(ReferenceType.DOMAIN, domainId, userId).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))).then()
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(ReferenceType.DOMAIN, domainId, userId).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))).then
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then())
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return findById_migrated(referenceType, referenceId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).throwable(throwable)))).then();
1 | Mono | doOnError | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).throwable(throwable)))).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | findById_migrated(referenceType, referenceId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)));
}).apply(v)))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(loginAttemptService.reset_migrated(criteria).then(userService.update_migrated(user)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<User, SingleSource<User>>toJdkFunction((oldUser)->{
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(factors);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
}).apply(y))));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.update_migrated(userToUpdate).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return findById_migrated(referenceType, referenceId, userId).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))));
}).apply(v)));
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1)))).doOnError
1 | Mono | then | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate))).doOnSuccess
1 | Mono | defer | METHOD_INVOCATION | checkRoles_migrated(roles).then(Mono.defer(()->userService.update_migrated(userToUpdate)))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client))).switchIfEmpty(Mono.error(new ClientNotFoundException(client))).map(RxJavaReactorMigrationUtil.toJdkFunction((app1)->{
    if (!domain.equals(app1.getDomain())) {
        throw new ClientNotFoundException(client);
    }
    return app1;
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client))).switchIfEmpty(Mono.error(new ClientNotFoundException(client))).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client))).switchIfEmpty
1 | Mono | defer | METHOD_INVOCATION | applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client)))
1 | Mono | error | METHOD_INVOCATION | applicationService.findById_migrated(client).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(domain, client))).switchIfEmpty(Mono.error(new ClientNotFoundException(client)))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(roles).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
})))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return getUserService().findById_migrated(referenceType, referenceId, id).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return userValidator.validate_migrated(updateUser).then(getUserService().findById_migrated(referenceType, referenceId, id).flatMap((user)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((io.gravitee.am.model.User user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))))));
1 | Mono | flatMap | METHOD_INVOCATION | userValidator.validate_migrated(updateUser).then(getUserService().findById_migrated(referenceType, referenceId, id).flatMap((user)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((io.gravitee.am.model.User user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))))))
1 | Mono | doOnError | METHOD_INVOCATION | (user)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((io.gravitee.am.model.User user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((io.gravitee.am.model.User user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1)))).doOnError
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<User>>toJdkFunction((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap((userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<UserProvider, SingleSource<UserProvider>>toJdkFunction((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}).apply(y)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(userProvider))
1 | Mono | flatMap | METHOD_INVOCATION | (userProvider)->RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->RxJava2Adapter.monoToSingle(userProvider.update_migrated(idpUser.getId(), convert(user.getUsername(), updateUser)))).apply(y))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername()))))
1 | Mono | error | METHOD_INVOCATION | userProvider.findByUsername_migrated(user.getUsername()).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getUserService().update_migrated(referenceType, referenceId, id, updateUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return getUserService().findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).throwable(throwable))));
1 | Mono | doOnSuccess | METHOD_INVOCATION | getUserService().findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).user(user1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | getUserService().findById_migrated(referenceType, referenceId, id).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return RxJava2Adapter.monoToSingle(getUserService().update_migrated(user));
}).apply(v)))).doOnSuccess
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return getUserService().findById_migrated(referenceType, referenceId, userId).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable))))).then();
1 | Mono | flatMap | METHOD_INVOCATION | getUserService().findById_migrated(referenceType, referenceId, userId).flatMap((user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable))))).then
1 | Mono | doOnError | METHOD_INVOCATION | (user)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then())))))
1 | Mono | then | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(getUserService().delete_migrated(userId)).then
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(optUserProvider.get().delete_migrated(user.getExternalId())).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then
1 | Mono | map | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.error(ex))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Flux | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then())
1 | Flux | flatMap | METHOD_INVOCATION | membershipService.findByMember_migrated(userId, MemberType.USER).flatMap((v)->membershipService.delete_migrated(v.getId())).then
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(certificateProvider);
1 | Mono | block | METHOD_INVOCATION | Certificate certificate = certificateService.findById_migrated(certificateId).block()
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(certificateProvider))
1 | Mono | subscribe | METHOD_INVOCATION | certificateService.findById_migrated(certificateId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::loadCertificate), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to deploy certificate {}", certificateId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No certificate found with id {}", certificateId)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->RxJava2Adapter.monoToSingle(createSystemScope_migrated(domain.getId(), scope))).lastOrError()).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->domain));
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(scopeService.findByDomainAndKey_migrated(domain, systemScope.getKey()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()))
1 | Mono | map | METHOD_INVOCATION | scopeService.findByDomainAndKey_migrated(domain, systemScope.getKey()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(optScope.get()))
1 | Mono | IMPORT
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(policyRepository.collectionExists_migrated().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | policyRepository.collectionExists_migrated().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
        }).apply(z)))).then().then(policyRepository.deleteCollection_migrated()));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))).then().then(policyRepository.deleteCollection_migrated()))
1 | Flux | then | METHOD_INVOCATION | policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))).then().then
1 | Flux | flatMap | METHOD_INVOCATION | policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then());
}).apply(z)))).then
1 | Flux | map | METHOD_INVOCATION | policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap
1 | Flux | groupBy | METHOD_INVOCATION | policyRepository.findAll_migrated().groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then())
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((v)->migrateToFlows_migrated(v, domain)).then
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | RETURN_TYPE
1 | Mono | doOnError | METHOD_INVOCATION | return Observable.fromIterable(flows.values()).flatMapCompletable((flow)->RxJava2Adapter.monoToSingle(flowService.create_migrated(ReferenceType.DOMAIN, domain, flow)).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Error during policies migration for domain {}", domain, error)));
1 | Mono | block | METHOD_INVOCATION | final PolicyPlugin policyPlugin = policyPluginService.findById_migrated(policy.getType()).block()
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | block | METHOD_INVOCATION | Organization organization = organizationService.createDefault_migrated().block()
1 | Mono | block | METHOD_INVOCATION | Domain adminDomain = domainService.findById_migrated(ADMIN_DOMAIN).block()
1 | Mono | block | METHOD_INVOCATION | organizationService.update_migrated(organization.getId(), patchOrganization, null).block();
1 | Mono | block | METHOD_INVOCATION | Role organizationOwnerRole = roleService.findDefaultRole_migrated(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION).block()
1 | Mono | block | METHOD_INVOCATION | userPage = userService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, page, PAGE_SIZE).block()
1 | Mono | block | METHOD_INVOCATION | organization = organizationService.findById_migrated(Organization.DEFAULT).block()
1 | Mono | block | METHOD_INVOCATION | IdentityProvider inlineIdp = identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId()))).next().block()
1 | Flux | next | METHOD_INVOCATION | identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId()))).next().block
1 | Flux | filter | METHOD_INVOCATION | identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId()))).next
1 | Mono | block | METHOD_INVOCATION | User adminUser = userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, ADMIN_USERNAME, inlineIdp.getId()).block()
1 | Mono | block | METHOD_INVOCATION | IdentityProvider createdIdentityProvider = identityProviderService.create_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, adminIdentityProvider, null).block()
1 | Mono | block | METHOD_INVOCATION | organizationService.update_migrated(Organization.DEFAULT, patchOrganization, null).block();
1 | Mono | block | METHOD_INVOCATION | return userService.create_migrated(newUser).block();
1 | Mono | block | METHOD_INVOCATION | Role adminRole = roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION).block()
1 | Mono | block | METHOD_INVOCATION | Role organizationPrimaryOwnerRole = roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION).block()
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->membership.getMemberType() == MemberType.USER)))
1 | Mono | block | METHOD_INVOCATION | membershipService.setPlatformAdmin_migrated(member.getMemberId()).block();
1 | Mono | block | METHOD_INVOCATION | Boolean alreadyHasMembership = RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).count()).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->count > 0)).block()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).count()).map(RxJavaReactorMigrationUtil.toJdkFunction((count)->count > 0)).block
1 | Mono | block | METHOD_INVOCATION | membershipService.addOrUpdate_migrated(Organization.DEFAULT, membership).block();
1 | Mono | IMPORT
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->{
    command.getPayload().getNode().setInstallationId(installation.getId());
    command.getPayload().getNode().setHostname(node.hostname());
    command.getPayload().getAdditionalInformation().putAll(installation.getAdditionalInformation());
    command.getPayload().getAdditionalInformation().put(API_URL, apiURL);
    command.getPayload().getAdditionalInformation().put(UI_URL, uiURL);
    command.getPayload().setDefaultOrganizationId(Organization.DEFAULT);
    command.getPayload().setDefaultEnvironmentId(Environment.DEFAULT);
    return command;
})))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->reply)))
1 | Mono | flatMap | METHOD_INVOCATION | installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map
1 | Mono | doOnSuccess | METHOD_INVOCATION | installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId()))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus()))).flatMap
1 | Mono | doOnSuccess | METHOD_INVOCATION | installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId()))).doOnSuccess
1 | Mono | map | METHOD_INVOCATION | installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(reply))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new NotImplementedException()))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return userService.findByExternalIdAndSource_migrated(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
}).apply(v)))).switchIfEmpty(RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return RxJava2Adapter.monoToSingle(userService.create_migrated(user));
})));
1 | Mono | flatMap | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(userService.update_migrated(existingUser));
}).apply(v)))).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap
1 | Mono | defer | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(referenceType, referenceId, newUser.getUsername(), newUser.getSource())))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new UserInvalidException("Invalid identity provider for [\'" + newUser.getUsername() + "\']"));
1 | Mono | flatMap | METHOD_INVOCATION | return userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        return RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
            newUser.setDomain(null);
            newUser.setClient(null);
            newUser.setInternal(true);
            String password = newUser.getPassword();
            if (password == null || !passwordValidator.isValid(password)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
            userToPersist.setReferenceId(organization.getId());
            userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
            return RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToPersist).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
                userToPersist.setId(RandomString.generate());
                userToPersist.setExternalId(userToPersist.getId());
                return userToPersist;
            })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
                return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
            }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
        });
    }
}).apply(v)));
1 | Mono | hasElement | METHOD_INVOCATION | userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource()).hasElement().flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource()))))
1 | Mono | error | METHOD_INVOCATION | identityProviderManager.getUserProvider_migrated(newUser.getSource()).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userValidator.validate_migrated(userToPersist).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))))
1 | Mono | doOnError | METHOD_INVOCATION | userValidator.validate_migrated(userToPersist).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then
1 | Mono | map | METHOD_INVOCATION | userValidator.validate_migrated(userToPersist).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)))
1 | Mono | flatMap | METHOD_INVOCATION | userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))).map
1 | Mono | map | METHOD_INVOCATION | userProvider.create_migrated(convert(newUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
})).flatMap
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError
1 | Mono | flatMap | METHOD_INVOCATION | userService.create_migrated(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))).doOnSuccess
1 | Mono | then | METHOD_INVOCATION | (newlyCreatedUser)->userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))
1 | Mono | just | METHOD_INVOCATION | userService.setRoles_migrated(newlyCreatedUser).then(Mono.just(newlyCreatedUser))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException("Unsupported source for this action"));
1 | Mono | then | METHOD_INVOCATION | return userService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))).then();
1 | Mono | doOnError | METHOD_INVOCATION | userService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))).then
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.update_migrated(user).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | RETURN_TYPE
1 | Flux | onErrorResume | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle((plugin)->RxJava2Adapter.monoToSingle(convert_migrated(plugin, expand)))).onErrorResume(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    return RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)));
}));
1 | Flux | fromIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll()))
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable)))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap(this::convert_migrated)).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginNotFoundException(notifierId))));
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap(this::convert_migrated))
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)))
1 | Mono | defer | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap(this::convert_migrated)).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginNotFoundException(notifierId))))
1 | Mono | error | METHOD_INVOCATION | ()->Mono.error(new NotifierPluginNotFoundException(notifierId))
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginSchemaNotFoundException(notifierId))));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString)))
1 | Mono | doOnSuccess | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map
1 | Mono | map | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess
1 | Mono | fromSupplier | METHOD_INVOCATION | Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)))
1 | Mono | defer | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
})).switchIfEmpty(Mono.defer(()->Mono.error(new NotifierPluginSchemaNotFoundException(notifierId))))
1 | Mono | error | METHOD_INVOCATION | ()->Mono.error(new NotifierPluginSchemaNotFoundException(notifierId))
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)))
1 | Mono | RETURN_TYPE
1 | Mono | fromSupplier | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)))
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return this.getIcon_migrated(notifierPlugin.getId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then().then(Mono.just(notifierPlugin));
1 | Mono | then | METHOD_INVOCATION | this.getIcon_migrated(notifierPlugin.getId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then().then
1 | Mono | doOnSuccess | METHOD_INVOCATION | this.getIcon_migrated(notifierPlugin.getId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then
1 | Mono | just | METHOD_INVOCATION | this.getIcon_migrated(notifierPlugin.getId()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer(notifierPlugin::setIcon)).then().then(Mono.just(notifierPlugin))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(notifierPlugin);
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new MembershipReply(command.getId(), CommandStatus.ERROR)))
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).single())
1 | Mono | map | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE).map(RxJavaReactorMigrationUtil.toJdkFunction(User::getId)).single
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->membershipService.addOrUpdate_migrated(membershipPayload.getOrganizationId(), membership)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when trying to assign role [{}] on {} [{}] for cockpit user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membershipPayload.getUserId(), membershipPayload.getOrganizationId(), error))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->membershipService.addOrUpdate_migrated(membershipPayload.getOrganizationId(), membership)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->membershipService.addOrUpdate_migrated(membershipPayload.getOrganizationId(), membership)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId()))).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->membershipService.addOrUpdate_migrated(membershipPayload.getOrganizationId(), membership)).doOnSuccess
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return roleService.findSystemRole_migrated(systemRole, assignableType).single();
1 | Mono | single | METHOD_INVOCATION | return roleService.findDefaultRole_migrated(organizationId, defaultRole, assignableType).single();
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidRoleException(String.format("Unable to find role [%s] for organization [%s].", roleName, organizationId)));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userService.statistics_migrated(query).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsGroupByResponse::new));
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return userService.countByApplication_migrated(query.getDomain(), query.getApplication()).map(RxJavaReactorMigrationUtil.toJdkFunction(AnalyticsCountResponse::new));
1 | Mono | map | METHOD_INVOCATION | return auditService.aggregate_migrated(query.getDomain(), queryBuilder.build(), query.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsCountResponse((Long)values.values().iterator().next())));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return auditService.aggregate_migrated(query.getDomain(), queryBuilder.build(), query.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}));
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return identityProviderService.findById_migrated(DEFAULT_IDP_PREFIX + domain.getId()).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<IdentityProvider>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<IdentityProvider>>)(isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToSingle(identityProviderManager.create_migrated(domain.getId()));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()));
}).apply(v)));
1 | Mono | hasElement | METHOD_INVOCATION | identityProviderService.findById_migrated(DEFAULT_IDP_PREFIX + domain.getId()).hasElement().flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(new IdentityProvider()))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(emailTemplateService.findAll_migrated().filter(RxJavaReactorMigrationUtil.toJdkPredicate(Email::isEnabled)))
1 | Mono | subscribe | METHOD_INVOCATION | emailTemplateService.findById_migrated(emailId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(this::loadEmail), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to deploy email {}", emailId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No email found with id {}", emailId)));
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return findMembershipPermissions_migrated(user, Collections.singletonMap(referenceType, referenceId).entrySet().stream()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::aclsPerPermission));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return haveConsistentReferenceIds_migrated(permissions).flatMap((v)->RxJava2Adapter.singleToMono((Single<Boolean>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<Boolean>>)(consistent)->{
    if (consistent) {
        return RxJava2Adapter.monoToSingle(findMembershipPermissions_migrated(user, permissions.referenceStream()).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(v)));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findMembershipPermissions_migrated(user, permissions.referenceStream()).map(RxJavaReactorMigrationUtil.toJdkFunction(permissions::match)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | just | METHOD_INVOCATION | return Mono.just(consistencyCache.get(key));
1 | Mono | doOnSuccess | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((consistent)->consistencyCache.put(key, consistent)));
1 | Flux | all | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(false);
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT))
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(true);
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(environmentService.findById_migrated(environmentId, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidUserException("Specified user is invalid"));
1 | Mono | flatMap | METHOD_INVOCATION | return groupService.findByMember_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Group::getId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<Map<Membership, Map<Permission, Set<Acl>>>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<String>, Single<Map<Membership, Map<Permission, Set<Acl>>>>>)(userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
        }
        return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
    }).apply(z)))));
}).apply(v)));
1 | Flux | collectList | METHOD_INVOCATION | groupService.findByMember_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Group::getId)).collectList().flatMap
1 | Flux | map | METHOD_INVOCATION | groupService.findByMember_migrated(user.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Group::getId)).collectList
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList().flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->RxJava2Adapter.fluxToFlowable(membershipService.findByCriteria_migrated(p.getKey(), p.getValue(), criteria))).collect(Collectors.toList()))).collectList().flatMap
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(!this.triggerProviderManager.findAll().isEmpty());
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external()))).map((entry)->convert(entry.getValue(), expand)).toList()).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<List<IdentityProviderPlugin>>>toJdkFunction((ex)->{
    LOGGER.error("An error occurs while trying to list all identity provider plugins", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)));
}).apply(err))))
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)))
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | this.getIcon_migrated(plugin.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(plugin::setIcon));
1 | Mono | block | METHOD_INVOCATION | final Installation installation = installationService.getOrInitialize_migrated().block()
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return auditService.aggregate_migrated(query.getDomain(), queryBuilder.build(), query.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
}));
1 | Mono | RETURN_TYPE
1 | Mono | flatMap | METHOD_INVOCATION | return executeGroupBy_migrated(query.getDomain(), queryBuilder.build(), query.getType()).flatMap((analyticsResponse)->fetchMetadata_migrated((AnalyticsGroupByResponse)analyticsResponse));
1 | Mono | map | METHOD_INVOCATION | return userService.statistics_migrated(query).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsGroupByResponse(value)));
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(analyticsGroupByResponse);
1 | Mono | map | METHOD_INVOCATION | return RxJava2Adapter.singleToMono(Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->{
    Map<String, Map<String, Object>> metadata = result.stream().flatMap((m)->m.entrySet().stream()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    analyticsGroupByResponse.setMetadata(metadata);
    return analyticsGroupByResponse;
}));
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))
1 | Mono | map | METHOD_INVOCATION | applicationService.findById_migrated((String)appId).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return applicationService.countByDomain_migrated(query.getDomain()).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)));
1 | Mono | map | METHOD_INVOCATION | return userService.countByDomain_migrated(query.getDomain()).map(RxJavaReactorMigrationUtil.toJdkFunction((value)->new AnalyticsCountResponse(value)));
1 | Mono | map | METHOD_INVOCATION | return auditService.aggregate_migrated(query.getDomain(), queryBuilder.build(), query.getType()).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->values.values().isEmpty() ? new AnalyticsCountResponse(0L) : new AnalyticsCountResponse((Long)values.values().iterator().next())));
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return auditService.aggregate_migrated(domain, criteria, type).map(RxJavaReactorMigrationUtil.toJdkFunction((values)->new AnalyticsGroupByResponse(values)));
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(domainService.findAll_migrated()).flatMapObservable(Observable::fromIterable).flatMapSingle((io.gravitee.am.model.Domain ident)->RxJava2Adapter.monoToSingle(upgradeDomain_migrated(ident))).toList()).subscribe();
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | return Mono.just(domain);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Mono | switchIfEmpty | METHOD_INVOCATION | return getReporter(referenceType, referenceId).findById_migrated(referenceType, referenceId, auditId).switchIfEmpty(Mono.error(new AuditNotFoundException(auditId)));
1 | Mono | error | METHOD_INVOCATION | getReporter(referenceType, referenceId).findById_migrated(referenceType, referenceId, auditId).switchIfEmpty(Mono.error(new AuditNotFoundException(auditId)))
1 | Mono | error | METHOD_INVOCATION | return Mono.error(ex);
1 | Mono | RETURN_TYPE
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | block | METHOD_INVOCATION | boolean upgraded = RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen(new RetryWithDelay(3, 5000))).block()
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, instanceOperationId));
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return RxJava2Adapter.monoToSingle(processUpgrade_migrated(instanceOperationId, task, previousOperationId));
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId))).flatMap
1 | Mono | defer | METHOD_INVOCATION | systemTaskRepository.findById_migrated(TASK_ID).switchIfEmpty(Mono.defer(()->createSystemTask_migrated(instanceOperationId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(true))
1 | Mono | RETURN_TYPE
1 | Mono | map | METHOD_INVOCATION | return updateSystemTask_migrated(task, (SystemTaskStatus.ONGOING), conditionalOperationId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(updatedTask));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true));
1 | Mono | flatMap | METHOD_INVOCATION | updateSystemTask_migrated(task, (SystemTaskStatus.ONGOING), conditionalOperationId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return RxJava2Adapter.monoToSingle(migrateScopeSettings_migrated(updatedTask));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))).map
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")))
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(systemTaskRepository.create_migrated(systemTask))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<SystemTask>>toJdkFunction((err2)->{
    logger.warn("SystemTask {} can\'t be created due to \'{}\'", TASK_ID, err2.getMessage());
    return RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(systemTask.getId()).single());
}).apply(err))))
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(systemTaskRepository.findById_migrated(systemTask.getId()).single())
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()).flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask_migrated(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateSystemTask_migrated(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Boolean>>toJdkFunction((err2)->{
    logger.error("Unable to migrate scope options for applications: {}", err2.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}).apply(err))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()).flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask_migrated(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(updateSystemTask_migrated(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}))))
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()).flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask_migrated(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()).flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError
1 | Flux | ignoreElements | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(applicationRepository.findAll_migrated()).flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return RxJava2Adapter.monoToSingle(applicationRepository.update_migrated(app));
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(app))
1 | Mono | subscribe | METHOD_INVOCATION | (err)->updateSystemTask_migrated(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(updateSystemTask_migrated(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(false))
1 | Flux | flatMap | METHOD_INVOCATION | return RxJava2Adapter.flowableToFlux(attempts).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((throwable)->{
    if (++retryCount < maxRetries) {
        return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
    }
    return RxJava2Adapter.fluxToFlowable(Flux.error(throwable));
}));
1 | Flux | error | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.error(throwable))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | subscribe | METHOD_INVOCATION | this.getIcon_migrated(plugin.getId()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(plugin::setIcon));
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when updating installation status.", error))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus()))).doOnError
1 | Mono | map | METHOD_INVOCATION | installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess
1 | Mono | flatMap | METHOD_INVOCATION | installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap(installationService::setAdditionalInformation_migrated).map
1 | Mono | doOnSuccess | METHOD_INVOCATION | installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap
1 | Mono | map | METHOD_INVOCATION | installationService.getOrInitialize_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return reporterService.findByDomain_migrated(domain.getId()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | reporterService.findByDomain_migrated(domain.getId()).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then
1 | Flux | collectList | METHOD_INVOCATION | reporterService.findByDomain_migrated(domain.getId()).collectList().flatMap
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(reporterService.createDefault_migrated(domain.getId()).then())
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | doOnError | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(organizationService.createOrUpdate_migrated(organizationPayload.getId(), newOrganization, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling organization [{}] with id [{}].", organizationPayload.getName(), organizationPayload.getId(), error))))
1 | Mono | doOnSuccess | METHOD_INVOCATION | organizationService.createOrUpdate_migrated(organizationPayload.getId(), newOrganization, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId()))).doOnError
1 | Mono | map | METHOD_INVOCATION | organizationService.createOrUpdate_migrated(organizationPayload.getId(), newOrganization, null).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.createOrUpdate_migrated(eq(ReferenceType.ORGANIZATION), eq("orga#1"), argThat((newUser)->newUser.getExternalId().equals(userPayload.getId()) && newUser.getSource().equals("cockpit") && newUser.getFirstName().equals(userPayload.getFirstName()) && newUser.getLastName().equals(userPayload.getLastName()) && newUser.getEmail().equals(userPayload.getEmail()) && newUser.getAdditionalInformation().get("info1").equals(additionalInformation.get("info1")) && newUser.getAdditionalInformation().get("info2").equals(additionalInformation.get("info2")) && newUser.getAdditionalInformation().get(StandardClaims.PICTURE).equals(userPayload.getPicture())))).thenReturn(Mono.just(new User()))
1 | Mono | error | METHOD_INVOCATION | when(userService.createOrUpdate_migrated(eq(ReferenceType.ORGANIZATION), eq("orga#1"), any(NewUser.class))).thenReturn(Mono.error(new TechnicalException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(installationService.addAdditionalInformation_migrated(any(Map.class))).thenReturn(Mono.just(installation))
1 | Mono | error | METHOD_INVOCATION | when(installationService.addAdditionalInformation_migrated(any(Map.class))).thenReturn(Mono.error(new RuntimeException("Unexpected error")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(domainService.findAll_migrated()).thenReturn(Mono.just(Collections.singletonList(domain)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, 0)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, 0))).thenReturn(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 1)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.singleton(app)))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.singleton(role)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.create_migrated(any(String.class), any(NewScope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findAll_migrated()).thenReturn(Mono.just(Collections.singletonList(domain)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 1)))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findAll_migrated()).thenReturn(Mono.just(Collections.singletonList(domain)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, 0)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, 0))).thenReturn(Mono.just(new Page<>(Collections.singleton(domainScope), 0, 0)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findAll_migrated()).thenReturn(Mono.just(Collections.singletonList(domain)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE)))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomain_migrated(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Mono.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE))).thenReturn(Mono.just(new Page<>(Collections.singleton(domainScope), 0, Integer.MAX_VALUE)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.singleton(app)))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByDomain_migrated(domain.getId())).thenReturn(Mono.just(Collections.singleton(role)))
1 | Flux | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(roleService.findRolesByName_migrated(any(), any(), any(), any())).thenReturn(Flux.just(role))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | when(domainService.findAllByCriteria_migrated(new DomainCriteria())).thenReturn(Flux.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flux.just(alertTrigger))
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flux.just(alertNotifier))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domain.getId())).thenReturn(Mono.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria_migrated(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flux.just(alertTrigger))
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flux.just(alertNotifier))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domain.getId())).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(alertTriggerService.getById_migrated(ALERT_TRIGGER_ID)).thenReturn(Mono.just(alertTrigger))
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flux.just(alertNotifier))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domain.getId())).thenReturn(Mono.just(domain))
1 | Flux | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria_migrated(DOMAIN_ID, alertTriggerCriteria)).thenReturn(Flux.just(alertTrigger))
1 | Flux | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria_migrated(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flux.just(alertNotifier))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domain.getId())).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domain.getId())).thenReturn(Mono.just(domain))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(domainService.findAll_migrated()).thenReturn(Mono.just(Arrays.asList(domain)))
1 | Mono | empty | METHOD_INVOCATION | when(scopeService.findByDomainAndKey_migrated(eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeService.create_migrated(anyString(), any(NewSystemScope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | empty | METHOD_INVOCATION | when(scopeService.findByDomainAndKey_migrated(eq(DOMAIN_ID), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey_migrated(DOMAIN_ID, "openid")).thenReturn(Mono.just(openId))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey_migrated(DOMAIN_ID, "phone")).thenReturn(Mono.just(phone))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey_migrated(DOMAIN_ID, "email")).thenReturn(Mono.just(email))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.create_migrated(anyString(), any(NewSystemScope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | just | METHOD_INVOCATION | when(scopeService.update_migrated(anyString(), anyString(), any(UpdateSystemScope.class))).thenReturn(Mono.just(new Scope()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(installationService.getOrInitialize_migrated()).thenReturn(Mono.just(installation))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(installation)
1 | Mono | just | METHOD_INVOCATION | when(installationService.getOrInitialize_migrated()).thenReturn(Mono.just(installation))
1 | Mono | error | METHOD_INVOCATION | when(installationService.setAdditionalInformation_migrated(anyMap())).thenReturn(Mono.error(new TechnicalException()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(any(), any(), any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByMember_migrated(any(), any())).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(any(), any(), any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByMember_migrated(any(), any())).thenReturn(Flux.just(m1, m2, m3))
1 | Mono | empty | METHOD_INVOCATION | when(membershipService.delete_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(any(), any(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(any())).thenReturn(Mono.just(provider))
1 | Mono | just | METHOD_INVOCATION | when(provider.create_migrated(any())).thenReturn(Mono.just(mock(io.gravitee.am.identityprovider.api.User.class)))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.create_migrated(any())).thenReturn(Mono.just(mock(User.class)))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.setRoles_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(Mono.just(new User()))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(any(), any(), any(), any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(any())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(0))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.findById_migrated(newUser.getClient())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId_migrated(domainId, newUser.getClient())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(newUser.getClient())).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new DefaultUser(newUser.getUsername())))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(domainId)).thenReturn(Mono.just(domain))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(newUser.getClient())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.create_migrated(any())).thenReturn(Mono.just(preRegisteredUser))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(any(), anyString(), anyString())).thenReturn(Mono.just(preRegisteredUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new DefaultUser(newUser.getUsername())))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(newUser.getClient())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.create_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new DefaultUser(newUser.getUsername())))
1 | Mono | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource_migrated(anyString(), anyString(), anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(newUser.getClient())).thenReturn(Mono.just(client))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.create_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.findById_migrated(updateUser.getClient())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId_migrated(domain, updateUser.getClient())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(updateUser.getClient())).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(userProvider.update_migrated(anyString(), any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userProvider.findByUsername_migrated(user.getUsername())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userProvider.create_migrated(any())).thenReturn(Mono.just(idpUser))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(user.getSource())).thenReturn(Mono.just(userProvider))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptService.reset_migrated(any())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.update_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(rolesIds)).thenReturn(Mono.just(Collections.emptySet()))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider_migrated(anyString())).thenReturn(Mono.just(mock(UserProvider.class)))
1 | Mono | just | METHOD_INVOCATION | when(commonUserService.findById_migrated(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Mono.just(user))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(installationService.getOrInitialize_migrated()).thenReturn(Mono.just(installation))
1 | Mono | error | METHOD_INVOCATION | when(installationService.getOrInitialize_migrated()).thenReturn(Mono.error(new TechnicalException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.ENVIRONMENT_PRIMARY_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(1))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findDefaultRole_migrated(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(Mono.just(role))
1 | Mono | just | METHOD_INVOCATION | (i)->Mono.just(i.getArgument(1))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(role))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(environmentService.createOrUpdate_migrated(eq("orga#1"), eq("env#1"), argThat((newEnvironment)->newEnvironment.getHrids().equals(environmentPayload.getHrids()) && newEnvironment.getDescription().equals(environmentPayload.getDescription()) && newEnvironment.getName().equals(environmentPayload.getName()) && newEnvironment.getDomainRestrictions().equals(environmentPayload.getDomainRestrictions())), isNull())).thenReturn(Mono.just(new Environment()))
1 | Mono | error | METHOD_INVOCATION | when(environmentService.createOrUpdate_migrated(eq("orga#1"), eq("env#1"), any(NewEnvironment.class), isNull())).thenReturn(Mono.error(new TechnicalException()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && !criteria.getGroupIds().isPresent() && criteria.isLogicalOR()))).thenReturn(Flux.just(membership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(membership.getRoleId()))).thenReturn(Mono.just(Collections.singleton(role)))
1 | Flux | just | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.just(group))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && criteria.getGroupIds().get().equals(Arrays.asList(group.getId())) && criteria.isLogicalOR()))).thenReturn(Flux.just(membership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(membership.getRoleId()))).thenReturn(Mono.just(Collections.singleton(role)))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(organizationMembership))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ENVIRONMENT), eq(ENVIRONMENT_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(environmentMembership))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(domainMembership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(organizationMembership.getRoleId(), environmentMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(organizationRole, environmentRole, domainRole))))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(organizationMembership))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(domainMembership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(organizationRole, domainRole))))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(organizationMembership))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(domainMembership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(organizationRole, domainRole))))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(membership))
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(membership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(role))))
1 | Flux | empty | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.empty())
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.APPLICATION), eq(APPLICATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(membership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(membership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(role))))
1 | Flux | just | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.just(group))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(organizationMembership, groupMembership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(organizationRole, groupRole))))
1 | Flux | just | METHOD_INVOCATION | when(groupService.findByMember_migrated(user.getId())).thenReturn(Flux.just(group))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flux.just(organizationMembership, groupMembership))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findByIdIn_migrated(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(Mono.just(new HashSet<>(Arrays.asList(organizationRole, groupRole))))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(eq(APPLICATION_ID))).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(eq(APPLICATION_ID))).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(eq(APPLICATION_ID))).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(eq(APPLICATION_ID))).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | error | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.error(new EnvironmentNotFoundException(ENVIRONMENT_ID)))
1 | Mono | just | METHOD_INVOCATION | when(applicationService.findById_migrated(eq(APPLICATION_ID))).thenReturn(Mono.just(application))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated(eq(DOMAIN_ID))).thenReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | when(environmentService.findById_migrated(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Mono.just(environment))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles_migrated()).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles_migrated()).thenReturn(Mono.error(TechnicalException::new))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(systemTaskRepository.findById_migrated(any())).thenReturn(Mono.just(task))
1 | Mono | empty | METHOD_INVOCATION | when(systemTaskRepository.findById_migrated(anyString())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(systemTaskRepository.create_migrated(any())).thenReturn(Mono.just(task))
1 | Mono | just | METHOD_INVOCATION | when(applicationRepository.update_migrated(any())).thenReturn(Mono.just(new Application()))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(sysTask);
1 | Mono | empty | METHOD_INVOCATION | when(systemTaskRepository.findById_migrated(any())).thenReturn(Mono.empty(), Mono.just(ongoingTask), Mono.just(finalizedTask))
1 | Mono | just | METHOD_INVOCATION | when(systemTaskRepository.findById_migrated(any())).thenReturn(Mono.empty(), Mono.just(ongoingTask), Mono.just(finalizedTask))
1 | Mono | just | METHOD_INVOCATION | when(systemTaskRepository.findById_migrated(any())).thenReturn(Mono.empty(), Mono.just(ongoingTask), Mono.just(finalizedTask))
1 | Mono | error | METHOD_INVOCATION | when(systemTaskRepository.create_migrated(any())).thenReturn(Mono.error(new Exception()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(organizationService.createOrUpdate_migrated(eq("orga#1"), argThat((newOrganization)->newOrganization.getHrids().equals(organizationPayload.getHrids()) && newOrganization.getDescription().equals(organizationPayload.getDescription()) && newOrganization.getName().equals(organizationPayload.getName()) && newOrganization.getDomainRestrictions().equals(organizationPayload.getDomainRestrictions())), isNull())).thenReturn(Mono.just(new Organization()))
1 | Mono | error | METHOD_INVOCATION | when(organizationService.createOrUpdate_migrated(eq("orga#1"), any(NewOrganization.class), isNull())).thenReturn(Mono.error(new TechnicalException()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | when(identityProviderService.create_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(NewIdentityProvider.class), isNull())).thenReturn(Mono.just(idp))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.update_migrated(eq(Organization.DEFAULT), any(PatchOrganization.class), isNull())).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | when(userService.create_migrated(argThat((user)->!user.isInternal() && user.getUsername().equals("admin") && user.getSource().equals(idp.getId()) && user.getReferenceType() == ReferenceType.ORGANIZATION && user.getReferenceId().equals(Organization.DEFAULT)))).thenReturn(Mono.just(adminUser))
1 | Mono | empty | METHOD_INVOCATION | when(domainService.findById_migrated("admin")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(organization))
1 | Flux | empty | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.just(idp))
1 | Mono | empty | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.just(idp))
1 | Mono | empty | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.just(idp))
1 | Mono | empty | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.just(idp))
1 | Mono | empty | METHOD_INVOCATION | when(userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userService.create_migrated(any(User.class))).thenReturn(Mono.just(adminUser))
1 | Mono | empty | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Flux | just | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.just(idp))
1 | Mono | just | METHOD_INVOCATION | when(userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(Mono.just(adminUser))
1 | Mono | empty | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(TechnicalException::new)))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.createDefault_migrated()).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.update_migrated(any(), any(), any())).thenReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | when(domainService.findById_migrated("admin")).thenReturn(Mono.just(new Domain()))
1 | Mono | empty | METHOD_INVOCATION | when(domainService.delete_migrated("admin")).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findDefaultRole_migrated(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Mono.just(adminRole))
1 | Mono | just | METHOD_INVOCATION | when(userService.findAll_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(0), anyInt())).thenReturn(Mono.just(new Page<>(users, 0, totalUsers)))
1 | Mono | just | METHOD_INVOCATION | when(userService.findAll_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(1), anyInt())).thenReturn(Mono.just(new Page<>(users, 1, totalUsers)))
1 | Mono | just | METHOD_INVOCATION | when(userService.findAll_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(2), anyInt())).thenReturn(Mono.just(new Page<>(Arrays.asList(user, user), 2, totalUsers)))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(organization))
1 | Flux | empty | METHOD_INVOCATION | when(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flux.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Mono.just(primaryOwnerRole))
1 | Mono | just | METHOD_INVOCATION | when(membershipService.addOrUpdate_migrated(eq(Organization.DEFAULT), any(Membership.class))).thenReturn(Mono.just(new Membership()))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flux.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Mono.just(adminRole))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Mono.just(organizationPrimaryOwner))
1 | Flux | just | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flux.just(membership))
1 | Mono | just | METHOD_INVOCATION | when(membershipService.setPlatformAdmin_migrated(userId)).thenReturn(Mono.just(new Membership()))
1 | Mono | just | METHOD_INVOCATION | when(roleService.findSystemRole_migrated(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Mono.just(organizationPrimaryOwner))
1 | Flux | empty | METHOD_INVOCATION | when(membershipService.findByCriteria_migrated(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flux.empty())
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(policyRepository.collectionExists_migrated()).thenReturn(Mono.just(true))
1 | Mono | empty | METHOD_INVOCATION | when(policyRepository.deleteCollection_migrated()).thenReturn(Mono.empty())
1 | Flux | empty | METHOD_INVOCATION | when(policyRepository.findAll_migrated()).thenReturn(Flux.empty())
1 | Mono | just | METHOD_INVOCATION | when(policyRepository.collectionExists_migrated()).thenReturn(Mono.just(true))
1 | Mono | empty | METHOD_INVOCATION | when(policyRepository.deleteCollection_migrated()).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(policyRepository.findAll_migrated()).thenReturn(Flux.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent))
1 | Mono | just | METHOD_INVOCATION | when(flowService.create_migrated(any(), anyString(), any())).thenReturn(Mono.just(new Flow()))
1 | Mono | just | METHOD_INVOCATION | when(policyPluginService.findById_migrated(null)).thenReturn(Mono.just(new PolicyPlugin()))
1 | Mono | just | METHOD_INVOCATION | when(policyRepository.collectionExists_migrated()).thenReturn(Mono.just(true))
1 | Mono | empty | METHOD_INVOCATION | when(policyRepository.deleteCollection_migrated()).thenReturn(Mono.empty())
1 | Flux | just | METHOD_INVOCATION | when(policyRepository.findAll_migrated()).thenReturn(Flux.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent))
1 | Mono | just | METHOD_INVOCATION | when(flowService.create_migrated(any(), anyString(), any())).thenReturn(Mono.just(new Flow()))
1 | Mono | just | METHOD_INVOCATION | when(policyPluginService.findById_migrated(null)).thenReturn(Mono.just(new PolicyPlugin()))
1 | Mono | block | METHOD_INVOCATION | List<Event> events = eventService.findByTimeFrame_migrated(lastRefreshAt - lastDelay, nextLastRefreshAt).block()
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(accessTokenRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(loginAttemptRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(permissionTicketRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(authorizationCodeRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(scopeApprovalRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(refreshTokenRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(requestObjectRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(authenticationFlowContextRepository.purgeExpiredData_migrated()).thenReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | then | METHOD_INVOCATION | return hasPermission_migrated(authenticatedUser, permissionAcls).flatMap(this::checkPermission_migrated).then();
1 | Mono | flatMap | METHOD_INVOCATION | hasPermission_migrated(authenticatedUser, permissionAcls).flatMap(this::checkPermission_migrated).then
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(emptyMap()))
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new ForbiddenException("Permission denied"));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort
1 | Flux | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map
1 | Mono | thenMany | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).thenMany(environmentService.findAll_migrated(organizationId)).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))
1 | Mono | filter | METHOD_INVOCATION | hasPermission_migrated(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).then(auditService.search_migrated(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).then(auditService.search_migrated(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).then(auditService.search_migrated(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))
1 | Mono | map | METHOD_INVOCATION | (auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.findByReference_migrated(organization.getId(), ReferenceType.ORGANIZATION).collectList()).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.findByReference_migrated(organization.getId(), ReferenceType.ORGANIZATION).collectList()).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.findByReference_migrated(organization.getId(), ReferenceType.ORGANIZATION).collectList()).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))
1 | Mono | flatMap | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.findByReference_migrated(organization.getId(), ReferenceType.ORGANIZATION).collectList()).flatMap
1 | Flux | collectList | METHOD_INVOCATION | (organization)->membershipService.findByReference_migrated(organization.getId(), ReferenceType.ORGANIZATION).collectList()
1 | Mono | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build())))
1 | Mono | flatMap | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).flatMap((organization)->membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).thenMany(tagService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).thenMany(tagService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).thenMany(tagService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).thenMany(tagService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort
1 | Mono | thenMany | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).thenMany(tagService.findAll_migrated(organizationId)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE).then(tagService.create_migrated(newTag, organizationId, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((tag)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/tags/" + tag.getId())).entity(tag).build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE).then(tagService.create_migrated(newTag, organizationId, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).thenMany(entrypointService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).thenMany(entrypointService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).thenMany(entrypointService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).thenMany(entrypointService.findAll_migrated(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort
1 | Mono | thenMany | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).thenMany(entrypointService.findAll_migrated(organizationId)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE).then(entrypointService.create_migrated(organizationId, newEntrypoint, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((entrypoint)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/entrypoints/" + entrypoint.getId())).entity(entrypoint).build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE).then(entrypointService.create_migrated(organizationId, newEntrypoint, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).then(roleService.findAllAssignable_migrated(ReferenceType.ORGANIZATION, organizationId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).then(roleService.findAllAssignable_migrated(ReferenceType.ORGANIZATION, organizationId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).then(roleService.findAllAssignable_migrated(ReferenceType.ORGANIZATION, organizationId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | Flux | sort | METHOD_INVOCATION | roleService.findAllAssignable_migrated(ReferenceType.ORGANIZATION, organizationId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | roleService.findAllAssignable_migrated(ReferenceType.ORGANIZATION, organizationId, type).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).then(roleService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).then(roleService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).then(roleService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build())))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).then(groupService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).then(groupService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).then(groupService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).then(groupService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).then(groupService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).then(groupService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build())))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).then(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).then(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).then(identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | Flux | sort | METHOD_INVOCATION | identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort
1 | Flux | filter | METHOD_INVOCATION | identityProviderService.findAll_migrated(ReferenceType.ORGANIZATION, organizationId).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).then(identityProviderService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).then(identityProviderService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).then(identityProviderService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).flatMap((organizationPermissions)->checkPermission_migrated(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).then(searchUsers_migrated(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | flatMap | METHOD_INVOCATION | permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).flatMap((organizationPermissions)->checkPermission_migrated(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).then(searchUsers_migrated(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))).subscribe
1 | Mono | then | METHOD_INVOCATION | (organizationPermissions)->checkPermission_migrated(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).then(searchUsers_migrated(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).then(searchUsers_migrated(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))
1 | Mono | map | METHOD_INVOCATION | (pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(organizationPermissions, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser_migrated(organization, newUser, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser_migrated(organization, newUser, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).then(organizationService.findById_migrated(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser_migrated(organization, newUser, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build())))
1 | Mono | flatMap | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser_migrated(organization, newUser, authenticatedUser)).map
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | return Mono.just(filteredUser);
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | RETURN_TYPE
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return RxJava2Adapter.monoToSingle(service.search_migrated(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE)));
})).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<Page<User>>>toJdkFunction((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ).then(organizationService.findById_migrated(organizationId)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ).then(organizationService.findById_migrated(organizationId)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE).then(organizationService.update_migrated(organizationId, patchOrganization, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((organization)->response.resume(Response.ok(organization).build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE).then(organizationService.update_migrated(organizationId, patchOrganization, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).then(formService.findByTemplate_migrated(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((page)->Response.ok(page).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).then(formService.findByTemplate_migrated(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((page)->Response.ok(page).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).then(formService.findByTemplate_migrated(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((page)->Response.ok(page).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()))
1 | Mono | map | METHOD_INVOCATION | formService.findByTemplate_migrated(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((page)->Response.ok(page).build())).defaultIfEmpty
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).then(formService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).then(formService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).then(formService.create_migrated(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build())))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE).then(formService.update_migrated(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE).then(formService.update_migrated(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE).then(formService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap(this::enhanceIdentityProvider_migrated)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap(this::enhanceIdentityProvider_migrated)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap(this::enhanceIdentityProvider_migrated))
1 | Mono | map | METHOD_INVOCATION | organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.update_migrated(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.update_migrated(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.updateStatus_migrated(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.updateStatus_migrated(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE).then(organizationUserService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->organizationUserService.resetPassword_migrated(organizationId, existingUser, password.getPassword(), authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).then(organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->organizationUserService.resetPassword_migrated(organizationId, existingUser, password.getPassword(), authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->organizationUserService.resetPassword_migrated(organizationId, existingUser, password.getPassword(), authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap
1 | Mono | filter | METHOD_INVOCATION | organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | organizationUserService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, user).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password")))
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return identityProviderService.findById_migrated(userEntity.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(userEntity.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(userEntity.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | return Mono.just(userEntity);
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ).then(identityProviderService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, identityProvider)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ).then(identityProviderService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, identityProvider)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE).then(identityProviderService.update_migrated(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE).then(identityProviderService.update_migrated(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE).then(groupService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).then(groupService.findMembers_migrated(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).then(groupService.findMembers_migrated(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).then(groupService.findMembers_migrated(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(pagedMembers))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))))
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(member))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v))))))
1 | Mono | flatMap | METHOD_INVOCATION | (group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v)))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).then(groupService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v))))))
1 | Mono | flatMap | METHOD_INVOCATION | (group1)->userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return RxJava2Adapter.monoToSingle(groupService.update_migrated(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser));
}).apply(v))))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).then(roleService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).then(roleService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).then(roleService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).then(roleService.update_migrated(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).then(roleService.update_migrated(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).then(roleService.update_migrated(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ).then(entrypointService.findById_migrated(entrypointId, organizationId)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ).then(entrypointService.findById_migrated(entrypointId, organizationId)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE).then(entrypointService.update_migrated(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE).then(entrypointService.update_migrated(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE).then(entrypointService.delete_migrated(entrypointId, organizationId, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).then(tagService.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).then(tagService.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).then(tagService.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))))
1 | Mono | error | METHOD_INVOCATION | tagService.findById_migrated(tagId, organizationId).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE).then(tagService.update_migrated(tagId, organizationId, tagToUpdate, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE).then(tagService.update_migrated(tagId, organizationId, tagToUpdate, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE).then(tagService.delete_migrated(tag, organizationId, authenticatedUser)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).then(organizationService.findById_migrated(organizationId).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).then(organizationService.findById_migrated(organizationId).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).then(auditService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, audit)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).then(auditService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, audit)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size()))).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map
1 | Flux | sort | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort
1 | Flux | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map
1 | Mono | thenMany | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).thenMany(query != null ? domainService.search_migrated(organizationId, environmentId, query) : domainService.findAllByEnvironment_migrated(organizationId, environmentId)).flatMap
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))
1 | Mono | filter | METHOD_INVOCATION | hasPermission_migrated(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).then(domainService.create_migrated(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap((domain)->reporterService.createDefault_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((domain)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain.getId())).entity(domain).build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).then(domainService.create_migrated(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap((domain)->reporterService.createDefault_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain)))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).then(domainService.create_migrated(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap((domain)->reporterService.createDefault_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.create_migrated(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap
1 | Mono | map | METHOD_INVOCATION | (domain)->identityProviderManager.create_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))
1 | Mono | map | METHOD_INVOCATION | (domain)->reporterService.createDefault_migrated(domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain))
1 | Mono | subscribe | METHOD_INVOCATION | domainService.findByHrid_migrated(environmentId, hrid).flatMap((domain)->checkAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).then(Mono.defer(()->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions)))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findByHrid_migrated(environmentId, hrid).flatMap((domain)->checkAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).then(Mono.defer(()->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions)))))).subscribe
1 | Mono | then | METHOD_INVOCATION | (domain)->checkAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).then(Mono.defer(()->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions)))))
1 | Mono | defer | METHOD_INVOCATION | checkAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).then(Mono.defer(()->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions)))))
1 | Mono | map | METHOD_INVOCATION | ()->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))).apply(y))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))).apply(y))))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE).then(domainService.delete_migrated(domain, authenticatedUser)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(entrypointService.findAll_migrated(organizationId).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))
1 | Flux | collectList | METHOD_INVOCATION | entrypointService.findAll_migrated(organizationId).collectList().map
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(domainService.patch_migrated(domainId, patchDomain, authenticatedUser).flatMap((v)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(domainService.patch_migrated(domainId, patchDomain, authenticatedUser).flatMap((v)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(domainService.patch_migrated(domainId, patchDomain, authenticatedUser).flatMap((v)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions)))))
1 | Mono | map | METHOD_INVOCATION | (v)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domainId).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
    } else {
        return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
    }
})).flatMap((pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size()))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
    } else {
        return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
    }
})).flatMap((pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size()))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return RxJava2Adapter.monoToSingle(applicationService.search_migrated(domain, query, 0, Integer.MAX_VALUE));
    } else {
        return RxJava2Adapter.monoToSingle(applicationService.findByDomain_migrated(domain, 0, Integer.MAX_VALUE));
    }
})).flatMap((pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | (pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map
1 | Flux | sort | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))
1 | Mono | filter | METHOD_INVOCATION | hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.create_migrated(domain, newApplication, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | Flux | sort | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.create_migrated(domain, newIdentityProvider, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((sortedCertificates)->Response.ok(sortedCertificates).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((sortedCertificates)->Response.ok(sortedCertificates).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((sortedCertificates)->Response.ok(sortedCertificates).build())))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map
1 | Flux | sort | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort
1 | Flux | filter | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain_migrated(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.create_migrated(domain, newCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size)))).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchRoles_migrated(domain, query, page, size)))).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
})).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(roleService.create_migrated(domain, newRole, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))
1 | Mono | RETURN_TYPE
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size)))).flatMap((pagedUsers)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size)))).flatMap((pagedUsers)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(searchUsers_migrated(ReferenceType.DOMAIN, domain, query, filter, page, size)))).flatMap((pagedUsers)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | flatMap | METHOD_INVOCATION | (pagedUsers)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))
1 | Mono | map | METHOD_INVOCATION | (hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->RxJava2Adapter.monoToSingle(filterUserInfos_migrated(hasPermission, user))).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(userService.create_migrated(domain, newUser, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty(filteredUser).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(user.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | return Mono.just(filteredUser);
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())
1 | Flux | sort | METHOD_INVOCATION | extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList
1 | Flux | map | METHOD_INVOCATION | extensionGrantService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(extensionGrantService.create_migrated(domain, newExtensionGrant, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))))).map(RxJavaReactorMigrationUtil.toJdkFunction((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))))).map(RxJavaReactorMigrationUtil.toJdkFunction((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount()))).subscribe
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? RxJava2Adapter.monoToSingle(scopeService.search_migrated(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))) : RxJava2Adapter.monoToSingle(scopeService.findByDomain_migrated(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)))))).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.create_migrated(domain, newScope, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).then(formService.findByDomainAndTemplate_migrated(domain, formTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).then(formService.findByDomainAndTemplate_migrated(domain, formTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).then(formService.findByDomainAndTemplate_migrated(domain, formTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).then(formService.findByDomainAndTemplate_migrated(domain, formTemplate.template())).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(formService.create_migrated(domain, newForm, authenticatedUser).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findByDomain_migrated(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.create_migrated(domain, newGroup, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndTemplate_migrated(domain, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndTemplate_migrated(domain, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndTemplate_migrated(domain, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndTemplate_migrated(domain, emailTemplate.template())).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).then(auditService.search_migrated(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).then(auditService.search_migrated(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).then(auditService.search_migrated(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))
1 | Mono | map | METHOD_INVOCATION | (auditPage)->hasPermission_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())))).flatMap((reporters)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())))).flatMap((reporters)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
}))).subscribe
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(reporterService.findByDomain_migrated(domain).collectList())
1 | Mono | map | METHOD_INVOCATION | (reporters)->hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
}))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.create_migrated(domain, newReporter, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((reporter)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/reporters/" + reporter.getId())).entity(reporter).build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(reporterService.create_migrated(domain, newReporter, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(domain1.getId(), ReferenceType.DOMAIN).collectList())
1 | Mono | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | (membership1)->membershipService.addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Mono | just | METHOD_INVOCATION | membershipService.addEnvironmentUserRoleIfNecessary_migrated(organizationId, environmentId, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.DOMAIN, domain).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.DOMAIN, domain).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.DOMAIN, domain).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ).then(analyticsService.execute_migrated(query)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ).then(analyticsService.execute_migrated(query)).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.create_migrated(domain, newFactor, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain_migrated(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.create_migrated(domain, newResource, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())
1 | Mono | flatMapMany | METHOD_INVOCATION | hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(flowService.findAll_migrated(ReferenceType.DOMAIN, domain, true).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())
1 | Flux | map | METHOD_INVOCATION | botDetectionService.findByDomain_migrated(domain).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.create_migrated(domain, newBotDetection, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && botDetection.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && botDetection.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && botDetection.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById_migrated(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(domain, botDetection, updateBotDetection, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(botDetectionService.update_migrated(domain, botDetection, updateBotDetection, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE).then(botDetectionService.delete_migrated(domain, botDetectionId, authenticatedUser)))
1 | Flux | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).thenMany(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria())).sort(Comparator.comparingInt((o)->o.getType().getOrder())).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).thenMany(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria())).sort(Comparator.comparingInt((o)->o.getType().getOrder())).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).thenMany(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria())).sort(Comparator.comparingInt((o)->o.getType().getOrder())).collectList
1 | Mono | thenMany | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).thenMany(alertTriggerService.findByDomainAndCriteria_migrated(domainId, new AlertTriggerCriteria())).sort
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).thenMany(Flux.fromIterable(patchAlertTriggers))).flatMapSingle((patchAlertTrigger)->RxJava2Adapter.monoToSingle(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).thenMany(Flux.fromIterable(patchAlertTriggers))).flatMapSingle((patchAlertTrigger)->RxJava2Adapter.monoToSingle(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))).collectList().subscribe
1 | Mono | thenMany | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).thenMany(Flux.fromIterable(patchAlertTriggers)))
1 | Flux | fromIterable | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).thenMany(Flux.fromIterable(patchAlertTriggers))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).thenMany(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria())).sort(Comparator.comparing(AlertNotifier::getCreatedAt)).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).thenMany(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria())).sort(Comparator.comparing(AlertNotifier::getCreatedAt)).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).thenMany(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria())).sort(Comparator.comparing(AlertNotifier::getCreatedAt)).collectList
1 | Mono | thenMany | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).thenMany(alertNotifierService.findByDomainAndCriteria_migrated(domainId, new AlertNotifierCriteria())).sort
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE).then(alertNotifierService.create_migrated(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE).then(alertNotifierService.create_migrated(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).then(alertNotifierService.getById_migrated(ReferenceType.DOMAIN, domainId, notifierId)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).then(alertNotifierService.getById_migrated(ReferenceType.DOMAIN, domainId, notifierId)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE).then(alertNotifierService.update_migrated(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE).then(alertNotifierService.update_migrated(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).then(alertNotifierService.delete_migrated(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map
1 | Mono | error | METHOD_INVOCATION | flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && res1.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && res1.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && res1.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById_migrated(resource)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.update_migrated(domain, resource, updateResource, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(resourceService.update_migrated(domain, resource, updateResource, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE).then(resourceService.delete_migrated(domain, resource, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById_migrated(factor)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.update_migrated(domain, factor, updateFactor, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(factorService.update_migrated(domain, factor, updateFactor, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE).then(factorService.delete_migrated(domain, factor, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->membershipService.delete_migrated(membershipId, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(reporterService.update_migrated(domain, reporter, updateReporter, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(reporterService.update_migrated(domain, reporter, updateReporter, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return RxJava2Adapter.monoToCompletable(reporterService.delete_migrated(reporter, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap
1 | Mono | map | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | just | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById_migrated(reporter)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty()))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).then(auditService.findById_migrated(domain, audit)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).then(auditService.findById_migrated(domain, audit)).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, email, updateEmail, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, email, updateEmail, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(group1))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser)))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.delete_migrated(ReferenceType.DOMAIN, domain, group, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.delete_migrated(ReferenceType.DOMAIN, domain, group, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.delete_migrated(ReferenceType.DOMAIN, domain, group, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(groupService.findMembers_migrated(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(pagedMembers))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))))
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty(member).single
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(member.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    member.setSource(idP.getName());
    return member;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(member))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(group1.getRoles()));
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(group1.getRoles()));
}))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.assignRoles_migrated(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(groupService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y))))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y))))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Group, SingleSource<Group>>toJdkFunction((group1)->RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById_migrated(group)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId))))
1 | Mono | error | METHOD_INVOCATION | userService.findById_migrated(userId).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser)))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById_migrated(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.patch_migrated(domain, scope, patchScope, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.patch_migrated(domain, scope, patchScope, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, scope, updateScope, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(scopeService.update_migrated(domain, scope, updateScope, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE).then(scopeService.delete_migrated(scope, false, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById_migrated(extensionGrant)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(extensionGrantService.update_migrated(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE).then(extensionGrantService.delete_migrated(domain, extensionGrant, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap(this::enhanceIdentityProvider_migrated).flatMap(this::enhanceClient_migrated)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap(this::enhanceIdentityProvider_migrated).flatMap(this::enhanceClient_migrated)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap(this::enhanceIdentityProvider_migrated).flatMap(this::enhanceClient_migrated))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap(this::enhanceIdentityProvider_migrated).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.update_migrated(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.updateStatus_migrated(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(userService.updateStatus_migrated(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.delete_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.delete_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.delete_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->userService.resetPassword_migrated(domain, user, password.getPassword(), authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->userService.resetPassword_migrated(domain, user, password.getPassword(), authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->userService.resetPassword_migrated(domain, user, password.getPassword(), authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domainId).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(userService.sendRegistrationConfirmation_migrated(domain, user, authenticatedUser)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.unlock_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.unlock_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.unlock_migrated(ReferenceType.DOMAIN, domain, user, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | return identityProviderService.findById_migrated(userEntity.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty(userEntity);
1 | Mono | map | METHOD_INVOCATION | identityProviderService.findById_migrated(userEntity.getSource()).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
})).defaultIfEmpty
1 | Mono | just | METHOD_INVOCATION | return Mono.just(userEntity);
1 | Mono | RETURN_TYPE
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | return applicationService.findById_migrated(userEntity.getClient()).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(userEntity.getReferenceId(), userEntity.getClient()))).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
})).defaultIfEmpty(userEntity);
1 | Mono | map | METHOD_INVOCATION | applicationService.findById_migrated(userEntity.getClient()).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(userEntity.getReferenceId(), userEntity.getClient()))).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
})).defaultIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | applicationService.findById_migrated(userEntity.getClient()).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(userEntity.getReferenceId(), userEntity.getClient()))).map
1 | Mono | defer | METHOD_INVOCATION | applicationService.findById_migrated(userEntity.getClient()).switchIfEmpty(Mono.defer(()->applicationService.findByDomainAndClientId_migrated(userEntity.getReferenceId(), userEntity.getClient())))
1 | Mono | just | METHOD_INVOCATION | return Mono.just(userEntity);
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser_migrated(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient_migrated(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser_migrated(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient_migrated(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser_migrated(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient_migrated(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList())
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope_migrated(scopeApproval.getDomain(), scopeApproval.getScope()), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUser_migrated(domain, user, authenticatedUser));
    }
    return RxJava2Adapter.monoToCompletable(scopeApprovalService.revokeByUserAndClient_migrated(domain, user, clientId, authenticatedUser));
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single
1 | Mono | map | METHOD_INVOCATION | applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single())
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single
1 | Mono | map | METHOD_INVOCATION | scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map
1 | Mono | map | METHOD_INVOCATION | scopeService.findByDomainAndKey_migrated(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey_migrated(domain, getScopeBase(scopeKey)).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(endUser.getRoles()));
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return RxJava2Adapter.monoToSingle(roleService.findByIdIn_migrated(endUser.getRoles()));
}))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.assignRoles_migrated(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
}))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))
1 | Mono | map | METHOD_INVOCATION | factorService.findById_migrated(enrolledFactor.getFactorId()).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).thenMany(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId_migrated(ReferenceType.DOMAIN, domain, user))).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).thenMany(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId_migrated(ReferenceType.DOMAIN, domain, user))).collectList().subscribe
1 | Mono | thenMany | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).thenMany(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId_migrated(ReferenceType.DOMAIN, domain, user))).collectList
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById_migrated(credential)).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById_migrated(credential)).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential)))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById_migrated(credential)).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById_migrated(credential)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById_migrated(credential)).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.delete_migrated(credential)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.delete_migrated(credential)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.delete_migrated(credential)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(y))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((__)->response.resume(Response.noContent().build())), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(y))))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return RxJava2Adapter.monoToSingle(userService.enrollFactors_migrated(user, enrolledFactors, authenticatedUser));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById_migrated(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))
1 | Mono | just | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(user1))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->RxJava2Adapter.monoToSingle(userService.revokeRoles_migrated(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ScopeApproval, SingleSource<ScopeApprovalEntity>>toJdkFunction((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))).apply(y))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ScopeApproval, SingleSource<ScopeApprovalEntity>>toJdkFunction((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))).apply(y))))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ScopeApproval, SingleSource<ScopeApprovalEntity>>toJdkFunction((scopeApproval)->RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById_migrated(consent)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(getClient_migrated(scopeApproval.getDomain(), scopeApproval.getClientId()).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.revokeByConsent_migrated(domain, user, consent, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.revokeByConsent_migrated(domain, user, consent, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.revokeByConsent_migrated(domain, user, consent, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | RETURN_TYPE
1 | Mono | single | METHOD_INVOCATION | return applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single();
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single
1 | Mono | map | METHOD_INVOCATION | applicationService.findByDomainAndClientId_migrated(domain, clientId).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty(Mono.error(new RoleNotFoundException(role))).map(RxJavaReactorMigrationUtil.toJdkFunction((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty(Mono.error(new RoleNotFoundException(role))).map(RxJavaReactorMigrationUtil.toJdkFunction((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty(Mono.error(new RoleNotFoundException(role))).map(RxJavaReactorMigrationUtil.toJdkFunction((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty(Mono.error(new RoleNotFoundException(role))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById_migrated(role)).switchIfEmpty(Mono.error(new RoleNotFoundException(role)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE).then(roleService.delete_migrated(ReferenceType.DOMAIN, domain, role, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById_migrated(certificate)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMap(CertificateProvider::publicKey_migrated).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMap(CertificateProvider::publicKey_migrated).subscribe
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate))))
1 | Mono | error | METHOD_INVOCATION | certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMap(CertificateProvider::publicKeys_migrated)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMap(CertificateProvider::publicKeys_migrated)).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).then(certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMap(CertificateProvider::publicKeys_migrated))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMap
1 | Mono | error | METHOD_INVOCATION | certificateManager.getCertificateProvider_migrated(certificate).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->Response.ok(certificate1).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->Response.ok(certificate1).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->RxJava2Adapter.monoToSingle(certificateService.update_migrated(domain, certificate, updateCertificate, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->Response.ok(certificate1).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE).then(certificateService.delete_migrated(certificate, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
}))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
}))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
})))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider))).map
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById_migrated(identityProvider)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(domain, identity, updateIdentityProvider, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(identityProviderService.update_migrated(domain, identity, updateIdentityProvider, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE).then(identityProviderService.delete_migrated(domain, identity, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((app)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))).apply(y))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((app)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))).apply(y))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
})).subscribe
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((app)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))).apply(y))))))).map
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((app)->RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE).then(applicationService.updateType_migrated(domain, application, patchApplicationType.getType(), authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE).then(applicationService.updateType_migrated(domain, application, patchApplicationType.getType(), authenticatedUser)).subscribe
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE).then(applicationService.delete_migrated(application, authenticatedUser)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(domain, application, authenticatedUser))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(applicationService.renewClientSecret_migrated(domain, application, authenticatedUser))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, permission, Acl.UPDATE))).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(applicationService.patch_migrated(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))
1 | Mono | map | METHOD_INVOCATION | (updatedApplication)->findAllPermissions_migrated(authenticatedUser, organizationId, environmentId, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).then(emailTemplateService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()))
1 | Mono | map | METHOD_INVOCATION | emailTemplateService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template()).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.create_migrated(domain, application, newEmail, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).then(formService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).then(formService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build()).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).then(formService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).then(formService.findByDomainAndClientAndTemplate_migrated(domain, application, emailTemplate.template())).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build()))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(formService.create_migrated(domain, application, newForm, authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build())))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList()))).flatMap((memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Flux | collectList | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(membershipService.findByReference_migrated(application1.getId(), ReferenceType.APPLICATION).collectList())
1 | Mono | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata_migrated(memberships).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domain, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domain, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(membershipService.addOrUpdate_migrated(organizationId, membership, authenticatedUser)))).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domain, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | then | METHOD_INVOCATION | (membership1)->membershipService.addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domain, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Mono | just | METHOD_INVOCATION | membershipService.addDomainUserRoleIfNecessary_migrated(organizationId, environmentId, domain, newMembership, authenticatedUser).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.APPLICATION, application).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.APPLICATION, application).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).then(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.APPLICATION, application).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(resourceService.findByDomainAndClient_migrated(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | zipWith | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList()).zipWith(resourceService.getMetadata_migrated((List<Resource>)pagedResources.getData()), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
    return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
})))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(resourceService.countAccessPolicyByResource_migrated(r.getId()).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ).then(applicationAnalyticsService.execute_migrated(query)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ).then(applicationAnalyticsService.execute_migrated(query)).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList()).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList()).subscribe
1 | Flux | collectList | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).then(hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())
1 | Mono | flatMapMany | METHOD_INVOCATION | hasAnyPermission_migrated(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList
1 | Flux | map | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(flowService.findByApplication_migrated(ReferenceType.DOMAIN, domain, application).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow))))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(flowService.createOrUpdate_migrated(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).then(flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map
1 | Mono | error | METHOD_INVOCATION | flowService.findById_migrated(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Mono.error(new FlowNotFoundException(flow)))
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).subscribe
1 | Mono | map | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v))))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(resourceService.findByDomainAndClientResource_migrated(domain, application1.getId(), resource).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
    return resourceEntity;
})))
1 | Mono | defaultIfEmpty | METHOD_INVOCATION | userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map
1 | Mono | map | METHOD_INVOCATION | userService.findById_migrated(r.getUserId()).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources_migrated(Collections.singletonList(resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources_migrated(Collections.singletonList(resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList())).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources_migrated(Collections.singletonList(resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList()))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Flux | collectList | METHOD_INVOCATION | (application1)->resourceService.findAccessPoliciesByResources_migrated(Collections.singletonList(resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList()
1 | Flux | map | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources_migrated(Collections.singletonList(resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((z)->resourceService.findAccessPolicy_migrated(policy))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((z)->resourceService.findAccessPolicy_migrated(policy))).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((z)->resourceService.findAccessPolicy_migrated(policy)))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | IMPORT
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->membershipService.delete_migrated(membershipId, authenticatedUser)).then()))
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).then(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->membershipService.delete_migrated(membershipId, authenticatedUser)).then())
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->membershipService.delete_migrated(membershipId, authenticatedUser)).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser)))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE).then(formService.delete_migrated(domain, form, authenticatedUser)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, application, email, updateEmail))))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(emailTemplateService.update_migrated(domain, application, email, updateEmail))))).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))))
1 | Mono | flatMap | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))
1 | Mono | error | METHOD_INVOCATION | domainService.findById_migrated(domain).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById_migrated(application)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(checkAnyPermission_migrated(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE).then(emailTemplateService.delete_migrated(email)))
1 | Mono | subscribe | METHOD_INVOCATION | certificatePluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | certificatePluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).subscribe
1 | Mono | map | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty
1 | Mono | error | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId)))
1 | Mono | subscribe | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema_migrated(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePluginSchema)->Response.ok(certificatePluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema_migrated(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePluginSchema)->Response.ok(certificatePluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema_migrated(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId))).map
1 | Mono | flatMap | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema_migrated(certificateId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap
1 | Mono | error | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId)))
1 | Mono | error | METHOD_INVOCATION | certificatePluginService.findById_migrated(certificateId).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema_migrated(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId)))
1 | Mono | subscribe | METHOD_INVOCATION | notifierPluginService.findById_migrated(notifierId).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPlugin)->Response.ok(notifierPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | notifierPluginService.findById_migrated(notifierId).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPlugin)->Response.ok(notifierPlugin).build())).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | notifierPluginService.findById_migrated(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema_migrated(notifierPlugin.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPluginSchema)->Response.ok(notifierPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | notifierPluginService.findById_migrated(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema_migrated(notifierPlugin.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPluginSchema)->Response.ok(notifierPluginSchema).build())).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | notifierPluginService.findById_migrated(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema_migrated(notifierPlugin.getId())).map
1 | Mono | subscribe | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).then(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | then | METHOD_INVOCATION | checkAnyPermission_migrated(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).then(alertTriggerService.createOrUpdate_migrated(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | policyPluginService.findAll_migrated(expand).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | policyPluginService.findAll_migrated(expand).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).map
1 | Mono | error | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId)))
1 | Mono | subscribe | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema_migrated(policyId)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema_migrated(policyId)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema_migrated(policyId)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId))).map
1 | Mono | flatMap | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema_migrated(policyId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap
1 | Mono | error | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId)))
1 | Mono | error | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema_migrated(policyId)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId)))
1 | Mono | subscribe | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getDocumentation_migrated(policyId)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getDocumentation_migrated(policyId)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build())).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getDocumentation_migrated(policyId)).map
1 | Mono | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap
1 | Mono | error | METHOD_INVOCATION | policyPluginService.findById_migrated(policyId).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId)))
1 | Mono | block | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((org)->Optional.ofNullable(org.getIdentities()).orElse(emptyList()))).block().stream
1 | Mono | map | METHOD_INVOCATION | organizationService.findById_migrated(organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction((org)->Optional.ofNullable(org.getIdentities()).orElse(emptyList()))).block
1 | Mono | block | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(maybe).block().getUri
1 | Flux | subscribe | METHOD_INVOCATION | formService.findAll_migrated(ReferenceType.ORGANIZATION).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((form)->{
    updateForm(form);
    logger.info("Forms loaded");
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to initialize forms", error)));
1 | Mono | subscribe | METHOD_INVOCATION | formService.findById_migrated(formId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d", formId, eventType);
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} form {}", eventType, formId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No form found with id {}", formId)));
1 | Mono | subscribe | METHOD_INVOCATION | flowService.getSchema_migrated().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | subscribe | METHOD_INVOCATION | alertService.isAlertingAvailable_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(AlertServiceStatusEntity::new)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | alertService.isAlertingAvailable_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(AlertServiceStatusEntity::new)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | spelService.getGrammar_migrated().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | subscribe | METHOD_INVOCATION | authenticatorPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | authenticatorPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(authenticatorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(authenticatorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(authenticatorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map
1 | Mono | error | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(authenticatorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId)))
1 | Mono | subscribe | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema_migrated(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema_migrated(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema_migrated(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map
1 | Mono | flatMap | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema_migrated(factorId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap
1 | Mono | error | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId)))
1 | Mono | error | METHOD_INVOCATION | authenticatorPluginService.findById_migrated(factorId).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema_migrated(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId)))
1 | Mono | subscribe | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
})).subscribe
1 | Mono | flatMap | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return RxJava2Adapter.monoToSingle(userService.update_migrated(user));
}).apply(v)))).doOnSuccess
1 | Mono | subscribe | METHOD_INVOCATION | newsletterService.getTaglines_migrated().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer((error)->{
    LOGGER.error("An error has occurred when reading the newsletter taglines response", error);
    response.resume(Collections.emptyList());
}));
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderService.findById_migrated(identityProviderId).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for organization {}", identityProviderId, eventType, organizationId);
}), RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Unable to {} identity provider for organization {}", eventType, organizationId, error)), RxJavaReactorMigrationUtil.toRunnable(()->logger.error("No identity provider found with id {}", identityProviderId)));
1 | Mono | subscribe | METHOD_INVOCATION | roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | roleService.findById_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, role).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).then(installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL)))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | doOnSuccess | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).then(installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL)))).subscribe
1 | Mono | then | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).then(installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new))).doOnSuccess
1 | Mono | map | METHOD_INVOCATION | checkPermission_migrated(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).then(installationService.get_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new)))
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderPluginService.findAll_migrated(external, expand).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | identityProviderPluginService.findAll_migrated(external, expand).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | extensionGrantPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | reporterPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | reporterPluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | resourcePluginService.findAll_migrated(expand).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | resourcePluginService.findAll_migrated(expand).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | subscribe | METHOD_INVOCATION | notifierPluginService.findAll_migrated(expand.toArray(new String[0])).sort(Comparator.comparing(AbstractPlugin::getName)).collectList().subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Flux | collectList | METHOD_INVOCATION | notifierPluginService.findAll_migrated(expand.toArray(new String[0])).sort(Comparator.comparing(AbstractPlugin::getName)).collectList().subscribe
1 | Flux | sort | METHOD_INVOCATION | notifierPluginService.findAll_migrated(expand.toArray(new String[0])).sort(Comparator.comparing(AbstractPlugin::getName)).collectList
1 | Mono | subscribe | METHOD_INVOCATION | pluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList()))).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | pluginService.findAll_migrated().map(RxJavaReactorMigrationUtil.toJdkFunction((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList()))).subscribe
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | pluginService.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | pluginService.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | pluginService.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId))).map
1 | Mono | error | METHOD_INVOCATION | pluginService.findById_migrated(botDetectionId).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId)))
1 | Mono | subscribe | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema_migrated(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema_migrated(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema_migrated(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map
1 | Mono | flatMap | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema_migrated(botDetection)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap
1 | Mono | error | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection)))
1 | Mono | error | METHOD_INVOCATION | pluginService.findById_migrated(botDetection).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema_migrated(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugin)->Response.ok(resourcePlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugin)->Response.ok(resourcePlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map
1 | Mono | error | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId)))
1 | Mono | subscribe | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema_migrated(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema_migrated(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema_migrated(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map
1 | Mono | flatMap | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema_migrated(resourceId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap
1 | Mono | error | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId)))
1 | Mono | error | METHOD_INVOCATION | resourcePluginService.findById_migrated(resourceId).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema_migrated(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugin)->Response.ok(reporterPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugin)->Response.ok(reporterPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).map
1 | Mono | error | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId)))
1 | Mono | subscribe | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema_migrated(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPluginSchema)->Response.ok(reporterPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema_migrated(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPluginSchema)->Response.ok(reporterPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema_migrated(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId))).map
1 | Mono | flatMap | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema_migrated(reporterId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap
1 | Mono | error | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId)))
1 | Mono | error | METHOD_INVOCATION | reporterPluginService.findById_migrated(reporterId).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema_migrated(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map
1 | Mono | error | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId)))
1 | Mono | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema_migrated(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema_migrated(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema_migrated(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map
1 | Mono | flatMap | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema_migrated(extensionGrantId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap
1 | Mono | error | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId)))
1 | Mono | error | METHOD_INVOCATION | extensionGrantPluginService.findById_migrated(extensionGrantId).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema_migrated(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId)))
1 | Mono | IMPORT
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugin)->Response.ok(identityProviderPlugin).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugin)->Response.ok(identityProviderPlugin).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map
1 | Mono | error | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId)))
1 | Mono | subscribe | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema_migrated(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build())).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema_migrated(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build())).subscribe
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema_migrated(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map
1 | Mono | flatMap | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema_migrated(identityProviderId)).switchIfEmpty
1 | Mono | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap
1 | Mono | error | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId)))
1 | Mono | error | METHOD_INVOCATION | identityProviderPluginService.findById_migrated(identityProviderId).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema_migrated(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId)))
1 | Mono | block | METHOD_INVOCATION | final Environment environment = environmentService.findById_migrated((String)jwt.get(Claims.environment), (String)jwt.get(Claims.organization)).block()
1 | Mono | block | METHOD_INVOCATION | Organization organization = organizationService.findById_migrated(organizationId).block()
1 | Mono | block | METHOD_INVOCATION | user = authenticationProvider.loadUserByUsername_migrated(provAuthentication).block()
1 | Mono | IMPORT
1 | Mono | block | METHOD_INVOCATION | io.gravitee.am.model.User endUser = RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).flatMap(userService::enhance_migrated).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(AuthenticationAuditBuilder.class).principal(authentication).referenceType(ReferenceType.ORGANIZATION).referenceId(organizationId).user(user)))).block()
1 | Mono | doOnSuccess | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).flatMap(userService::enhance_migrated).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(AuthenticationAuditBuilder.class).principal(authentication).referenceType(ReferenceType.ORGANIZATION).referenceId(organizationId).user(user)))).block
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))).flatMap(userService::enhance_migrated).doOnSuccess
1 | Mono | onErrorResume | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))))).onErrorResume((err)->RxJava2Adapter.singleToMono(RxJavaReactorMigrationUtil.<Throwable, Single<io.gravitee.am.model.User>>toJdkFunction((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}).apply(err))))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap((y)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))));
}).apply(y)))))
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername()))).flatMap
1 | Mono | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty
1 | Mono | defer | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))
1 | Mono | error | METHOD_INVOCATION | userService.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Mono.defer(()->userService.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.update_migrated(existingUser).flatMap((user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))))
1 | Mono | then | METHOD_INVOCATION | (user)->updateRoles_migrated(principal, existingUser).then(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | updateRoles_migrated(principal, existingUser).then(Mono.just(user))
1 | Mono | flatMap | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(userService.create_migrated(newUser).flatMap((user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))))
1 | Mono | then | METHOD_INVOCATION | (user)->userService.setRoles_migrated(principal, user).then(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | userService.setRoles_migrated(principal, user).then(Mono.just(user))
1 | Mono | error | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.error(ex))
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | then | METHOD_INVOCATION | return membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then());
}).apply(y)))).then();
1 | Mono | flatMap | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then());
}).apply(y)))).then
1 | Mono | switchIfEmpty | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false)).flatMap
1 | Mono | map | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty
1 | Flux | next | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map
1 | Flux | filter | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next
1 | Mono | just | METHOD_INVOCATION | membershipService.findByMember_migrated(existingUser.getId(), MemberType.USER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType())).next().map(RxJavaReactorMigrationUtil.toJdkFunction((membership)->!membership.getRoleId().equals(roleId))).switchIfEmpty(Mono.just(false))
1 | Mono | empty | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.empty())
1 | Mono | then | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then())
1 | Mono | flatMap | METHOD_INVOCATION | roleService.findById_migrated(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate_migrated(existingUser.getReferenceId(), membership)).then
1 | Mono | subscribe | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent())))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
})).subscribe();
1 | Mono | doOnError | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent())))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
})).subscribe
1 | Mono | doOnSuccess | METHOD_INVOCATION | userService.findById_migrated(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent())))).doOnError
1 | Mono | block | METHOD_INVOCATION | !reCaptchaService.isValid_migrated(reCaptchaToken).block()
1 | Mono | block | METHOD_INVOCATION | User user = authenticationProvider.loadUserByUsername_migrated(provAuthentication).block()
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(permissionService.findAllPermissions_migrated(authenticatedUser, ReferenceType.PLATFORM, Platform.DEFAULT).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))
1 | Mono | subscribe | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
})).subscribe(RxJavaReactorMigrationUtil.toJdkConsumer(response::resume), RxJavaReactorMigrationUtil.toJdkConsumer(response::resume));
1 | Mono | map | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
})).subscribe
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockEntrypoint))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new EntrypointNotFoundException(ENTRYPOINT_ID)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockEntrypoint))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new EntrypointNotFoundException(ENTRYPOINT_ID)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(permissionService.hasPermission_migrated(any(User.class), any(PermissionAcls.class))).thenReturn(Mono.just(true))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Collections.singletonList(botDetectionPlugin)))
1 | Flux | IMPORT
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(new Flow(), new Flow()))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockIdentityProvider))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockIdentityProvider))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockCredential))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(pagedUsers))
1 | Mono | just | METHOD_INVOCATION | when(permissionService.findAllPermissions_migrated(any(), eq(ReferenceType.ORGANIZATION), eq(organizationId))).thenReturn(Mono.just(permissions))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(pagedUsers))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Mono | just | METHOD_INVOCATION | when(permissionService.hasPermission_migrated(any(), any())).thenReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(ORGANIZATION_DEFAULT)).thenReturn(Mono.just(new Organization()))
1 | Mono | just | METHOD_INVOCATION | when(organizationUserService.createGraviteeUser_migrated(any(), any(), any())).thenReturn(Mono.just(new User()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockIdentityProvider, mockIdentityProvider2))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(identityProvider))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(plugin))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(plugin))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just("{}"))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(plugin))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(plugin))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockExtensionGrant, mockExtensionGrant2))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(extensionGrant))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockApplication))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockApplication))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockClient))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockApplication))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockApplication))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(false))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockClient))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new ApplicationNotFoundException(clientId)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Collections.singletonList(resourcePlugin)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Collections.singletonList(identityProviderPlugin)))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockRole))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new RoleNotFoundException(roleId)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Email()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new EmailNotFoundException(emailId)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Collections.singleton("role-1")))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | when(organizationService.findById_migrated(Organization.DEFAULT)).thenReturn(Mono.just(defaultOrganization))
1 | Mono | just | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.error(new BadCredentialsException()))
1 | Mono | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.error(new BadCredentialsException()))
1 | Mono | error | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.error(new BadCredentialsException()))
1 | Mono | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername_migrated(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Mono.just(new DefaultUser("username")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(extensionGrantPlugin))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(extensionGrantPlugin))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(schema))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockScope))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockScope))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockExtensionGrant))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockExtensionGrant))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockFlow))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(updatedFlow))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new FlowNotFoundException(FLOW_ID)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockCertificate))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockCertificate))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Collections.singleton("role-1")))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockCertificate, mockCertificate2))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just("certificate-schema"))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(certificate))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockRole))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockRole))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new HashSet<>(Arrays.asList(certificatePlugin))))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Page<>(scopes, 0, 2)))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(scope))
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockGroup))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.of(Permission.DOMAIN, Acl.READ)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(false))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(true))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(Permission.of(Permission.DOMAIN, Acl.READ)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(false))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Domain()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(entrypoint, entrypoint2))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(entrypoint))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(pagedUsers))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(group))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(resourcePlugin))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(resourcePlugin))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just("{}"))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(resourcePlugin))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(resourcePlugin))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockCredential))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockDomain, mockDomain2))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(domain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new IdentityProvider()))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Reporter()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockEmail))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Email()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(pagedRoles))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(roles))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(pagedRoles))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(role))
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new OrganizationNotFoundException(organizationId)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(organization))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockFactor))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(certificatePlugin))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(certificatePlugin))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(schema))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockClient))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockScope))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(scopeApproval))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockForm))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Form()))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new Form()))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new FormNotFoundException(formId)))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(applicationPage))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(application))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new HashSet<>(Arrays.asList(extensionGrantPlugin))))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new OrganizationNotFoundException(organizationId)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(membership))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(organization))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(membership))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(organization))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(Arrays.asList(membership)))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(new HashMap<>()))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new OrganizationNotFoundException(organization.getId())))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | empty | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Mono.empty())
1 | Mono | empty | METHOD_INVOCATION | when(userServiceMock.findByUsernameAndSource_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.create_migrated(any(User.class))).thenReturn(Mono.just(user))
1 | Mono | empty | METHOD_INVOCATION | when(userServiceMock.setRoles_migrated(any(), any(User.class))).thenReturn(Mono.empty())
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.enhance_migrated(any())).thenReturn(Mono.just(user))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Mono.just(repositoryUserMock))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.update_migrated(any(User.class))).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.enhance_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource_migrated(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Mono.just(repositoryUserMock))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.update_migrated(any(User.class))).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(userServiceMock.enhance_migrated(any())).thenReturn(Mono.just(new User()))
1 | Mono | just | METHOD_INVOCATION | when(roleServiceMock.findById_migrated(ReferenceType.ORGANIZATION, "organization-id", "organization-owner-role-id")).thenReturn(Mono.just(new Role()))
1 | Flux | just | METHOD_INVOCATION | when(membershipServiceMock.findByMember_migrated("user-id", MemberType.USER)).thenReturn(Flux.just(membershipMock))
1 | Mono | just | METHOD_INVOCATION | when(membershipServiceMock.addOrUpdate_migrated(anyString(), any(Membership.class))).thenReturn(Mono.just(new Membership()))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(mockRole, mockRole2))
1 | Flux | error | METHOD_INVOCATION | doReturn(Flux.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(tag))
1 | Flux | IMPORT
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockClient))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockScope))
1 | Flux | just | METHOD_INVOCATION | doReturn(Flux.just(scopeApproval))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | empty | METHOD_INVOCATION | doReturn(Mono.empty())
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockDomain))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(mockUser))
1 | Mono | IMPORT
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(identityProviderPlugin))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(identityProviderPlugin))
1 | Mono | just | METHOD_INVOCATION | doReturn(Mono.just(schema))
1 | Mono | error | METHOD_INVOCATION | doReturn(Mono.error(new TechnicalManagementException("Error occurs")))
1 | Mono | IMPORT
1 | Mono | RETURN_TYPE
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
1 | Mono | RETURN_TYPE
1 | Mono | error | METHOD_INVOCATION | return Mono.error(new InvalidCodeException("Invalid 2FA code"));
1 | Mono | empty | METHOD_INVOCATION | return Mono.empty();
