1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | accessTokenRepository.findByToken(TOKEN).subscribe((domain)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error)), ()->future.complete(Result.healthy()));
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | RETURN_TYPE
1 | Observable | RETURN_TYPE
1 | Observable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | domainRepository.findById(DOMAIN).subscribe((domain)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error)), ()->future.complete(Result.healthy()));
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.create(group).test()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(group).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(group).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getReferenceType(), createdGroup.getReferenceId(), createdGroup.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(group).blockingGet()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Group> testUpdate = repository.update(toUpdate).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(toUpdate.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(group).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getId()).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testDelete = repository.delete(createdGroup.getId()).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | final Group existAfterDelete = repository.findById(createdGroup.getId()).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup1 = repository.create(group1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup2 = repository.create(group2).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = repository.findByMember(member1).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByMember(member1).toList().test
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByMember(member2).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByMember(member2).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | List<Group> emptyList = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(buildGroup()).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(item).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | List<Group> groupOfDomain = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | groupOfDomain = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | List<Group> emptyList = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(buildGroup()).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(item).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Page<Group> groupOfDomain = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 0, 20).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | groupOfDomain = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 0, 5).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | groupOfDomain = repository.findAll(ReferenceType.DOMAIN, DOMAIN_ID, 1, 5).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(buildGroup()).blockingGet()
1 | Single | test | METHOD_INVOCATION | final TestObserver<List<Group>> testObserver = repository.findByIdIn(ids).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByIdIn(ids).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Group createdGroup = repository.create(group).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findByName(group.getReferenceType(), group.getReferenceId(), group.getName()).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(group).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findByName(group.getReferenceType(), group.getReferenceId(), "unknown").test()
1 | Single | blockingGet | METHOD_INVOCATION | AccessPolicy apCreated = repository.create(accessPolicy).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = repository.findById(apCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | AccessPolicy apCreated = repository.create(accessPolicy).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = repository.update(toUpdate).test()
1 | Single | blockingGet | METHOD_INVOCATION | AccessPolicy apCreated = repository.create(accessPolicy).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(apCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicyOtherDomain).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = repository.findByDomain(DOMAIN_SINGLE, 0, 20).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicyOtherDomain).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = repository.findByDomain(DOMAIN10, 0, totalCount + 1).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN10, 0, totalCount / 2).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN10, 1, totalCount / 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = repository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(accessPolicy3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = repository.findByResources(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2")).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByResources(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2")).toList().test
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Email> testObserver = repository.findById("unknownId").test()
1 | Single | blockingGet | METHOD_INVOCATION | Email createdEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Email createdEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getReferenceType(), createdEmail.getReferenceId(), createdEmail.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Email createdEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Email> updatedEmail = repository.update(updatableEmail).test()
1 | Single | blockingGet | METHOD_INVOCATION | Email createdEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Completable | blockingGet | METHOD_INVOCATION | repository.delete(createdEmail.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdEmail.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Single | blockingGet | METHOD_INVOCATION | (email)->repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet()
1 | Single | map | METHOD_INVOCATION | repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = repository.findAll().map(Email::getId).test()
1 | Flowable | map | METHOD_INVOCATION | repository.findAll().map(Email::getId).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Single | blockingGet | METHOD_INVOCATION | (email)->repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet()
1 | Single | map | METHOD_INVOCATION | repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | (email)->repository.create(buildEmail()).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID).map(Email::getId).test()
1 | Flowable | map | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID).map(Email::getId).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Single | blockingGet | METHOD_INVOCATION | (email)->repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet()
1 | Single | map | METHOD_INVOCATION | repository.create(email).map((e)->{
    email.setId(e.getId());
    return e;
}).blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(email).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).map(Email::getId).test()
1 | Flowable | map | METHOD_INVOCATION | repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).map(Email::getId).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(email).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Email templateEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = repository.findByTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(email).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Email templateEmail = repository.create(email).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = repository.findByClientAndTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId").test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create(alertNotifier).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.findById(alertNotifierCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertNotifierRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.create(alertNotifier).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create(alertNotifier).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.update(updatedAlertNotifier).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create(alertNotifier).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = alertNotifierRepository.delete(alertNotifierCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertNotifierRepository.findById(alertNotifierCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated = alertNotifierRepository.create(alertNotifierToCreate).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | final AlertNotifier alertNotifierUpdated = alertNotifierRepository.update(alertNotifierCreated).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated1 = alertNotifierRepository.create(alertNotifierToCreate1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | alertNotifierRepository.create(alertNotifierToCreate2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertNotifier alertNotifierCreated1 = alertNotifierRepository.create(alertNotifierToCreate1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | alertNotifierRepository.create(alertNotifierToCreate2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(botDetection).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = repository.findByReference(ReferenceType.DOMAIN, "testDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | BotDetection bdetectionCreated = repository.create(bdectection).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.findById(bdetectionCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | repository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.create(bDetection).test()
1 | Single | blockingGet | METHOD_INVOCATION | BotDetection botDetectionCreated = repository.create(botDetection).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.update(bDetection).test()
1 | Single | blockingGet | METHOD_INVOCATION | BotDetection botDetectionCreated = repository.create(botDetection).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.findById(botDetectionCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = repository.delete(botDetectionCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | repository.findById(botDetectionCreated.getId()).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Form> testObserver = repository.findById("unknownId").test()
1 | Single | blockingGet | METHOD_INVOCATION | Form createdForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Form createdForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getReferenceType(), createdForm.getReferenceId(), createdForm.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Form createdForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Form> updatedForm = repository.update(updatableForm).test()
1 | Single | blockingGet | METHOD_INVOCATION | Form createdForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Completable | blockingGet | METHOD_INVOCATION | repository.delete(createdForm.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdForm.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(form).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(buildForm()).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(form).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(form).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(form).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Form templateForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = repository.findByTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId").test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(form).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Form templateForm = repository.create(form).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = repository.findByClientAndTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId").test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create(alertTrigger).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.findById(alertTriggerCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertTriggerRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.create(alertTrigger).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create(alertTrigger).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.update(updatedAlertTrigger).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create(alertTrigger).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = alertTriggerRepository.delete(alertTriggerCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertTriggerRepository.findById(alertTriggerCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | alertTriggerRepository.create(alertTriggerToCreate).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create(alertTriggerToCreate).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | final AlertTrigger alertTriggerUpdated = alertTriggerRepository.update(alertTriggerCreated).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated = alertTriggerRepository.create(alertTriggerToCreate).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated1 = alertTriggerRepository.create(alertTriggerToCreate1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | alertTriggerRepository.create(alertTriggerToCreate2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | AlertTrigger alertTriggerCreated1 = alertTriggerRepository.create(alertTriggerToCreate1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | alertTriggerRepository.create(alertTriggerToCreate2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(application).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.findByDomain("testDomain", 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(application).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationRepository.findByDomainAndExtensionGrant("testDomain", "test-grant").test()
1 | Single | blockingGet | METHOD_INVOCATION | Application createdApplication = applicationRepository.create(application).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findByDomainAndClientId("testDomain", "clientId1").test()
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.findByDomain("testDomainPagination", 1, 1).test()
1 | Single | blockingGet | METHOD_INVOCATION | Application appCreated = applicationRepository.create(app).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findById(appCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Application appCreated = applicationRepository.create(app).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationRepository.findByIdentityProvider(appCreated.getIdentities().iterator().next()).test()
1 | Maybe | test | METHOD_INVOCATION | applicationRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.create(application).test()
1 | Single | blockingGet | METHOD_INVOCATION | Application appCreated = applicationRepository.create(app).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.update(updatedApp).test()
1 | Single | blockingGet | METHOD_INVOCATION | Application appCreated = applicationRepository.create(app).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findById(appCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = applicationRepository.delete(appCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | applicationRepository.findById(appCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.search(domain, "clientId", 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app3).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | applicationRepository.create(app4).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.search(domain, "clientId*", 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | domainRepository.create(domain).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver1 = domainRepository.findAll().toList().test()
1 | Flowable | toList | METHOD_INVOCATION | domainRepository.findAll().toList().test
1 | Single | blockingGet | METHOD_INVOCATION | domainRepository.create(domain).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | domainRepository.create(otherDomain).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.findAllByReferenceId("environment#1").test()
1 | Single | blockingGet | METHOD_INVOCATION | Domain domainCreated = domainRepository.create(domain).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = domainRepository.findByIdIn(Collections.singleton(domainCreated.getId())).test()
1 | Single | blockingGet | METHOD_INVOCATION | Domain domainCreated = domainRepository.create(domain).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.findById(domainCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | domainRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.create(domain).test()
1 | Single | blockingGet | METHOD_INVOCATION | Domain domainCreated = domainRepository.create(domain).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.update(updatedDomain).test()
1 | Single | blockingGet | METHOD_INVOCATION | Domain domainCreated = domainRepository.create(domain).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.findById(domainCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = domainRepository.delete(domainCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | domainRepository.findById(domainCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | Domain domainCreated = domainRepository.create(domainToCreate).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.findAllByCriteria(criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | final Domain domainUpdated = domainRepository.update(domainCreated).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = domainRepository.findAllByCriteria(criteria).test()
1 | Single | blockingGet | METHOD_INVOCATION | domainRepository.create(domain).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.search("environment#1", "testName").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.create(alertNotifier).test()
1 | Single | blockingGet | METHOD_INVOCATION | Monitoring monitoringCreated = nodeMonitoringRepository.create(monitoring).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.update(updatedMonitoring).test()
1 | Single | blockingGet | METHOD_INVOCATION | nodeMonitoringRepository.create(monitoringToCreate).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | final Monitoring monitoringCreated = nodeMonitoringRepository.create(monitoringToCreate).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Monitoring> obs = nodeMonitoringRepository.findByNodeIdAndType(NODE_ID, MONITORING_TYPE).test()
1 | Single | blockingGet | METHOD_INVOCATION | nodeMonitoringRepository.create(monitoringToCreate).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Monitoring> obs = nodeMonitoringRepository.findByTypeAndTimeFrame(MONITORING_TYPE, from, to).test()
1 | Single | blockingGet | METHOD_INVOCATION | credentialRepository.create(credential).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = credentialRepository.findByUserId(credential.getReferenceType(), credential.getReferenceId(), credential.getUserId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | credentialRepository.create(credential).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUsername(credential.getReferenceType(), credential.getReferenceId(), credential.getUsername()).test()
1 | Single | blockingGet | METHOD_INVOCATION | credentialRepository.create(credential).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByCredentialId(credential.getReferenceType(), credential.getReferenceId(), credential.getCredentialId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.findById(credentialCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | credentialRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.create(credential).test()
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.update(updateCredential).test()
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.findById(credentialCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.delete(credentialCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | credentialRepository.findById(credentialCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByUserId(ReferenceType.DOMAIN, "domain-id", "wrong-user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Single | blockingGet | METHOD_INVOCATION | Credential credentialCreated = credentialRepository.create(credential).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByAaguid(ReferenceType.DOMAIN, "domain-id", "aaguid").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Single | blockingGet | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create(resource).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testDomain = serviceResourceRepository.findByReference(ReferenceType.DOMAIN, "testDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create(resource).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.findById(resourceCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | serviceResourceRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.create(resource).test()
1 | Single | blockingGet | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create(resource).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.update(updateResource).test()
1 | Single | blockingGet | METHOD_INVOCATION | ServiceResource resourceCreated = serviceResourceRepository.create(resource).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.findById(resourceCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = serviceResourceRepository.delete(resourceCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | serviceResourceRepository.findById(resourceCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | Entrypoint cratedEntrypoint = entrypointRepository.create(entrypoint).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> testObserver1 = entrypointRepository.findAll(ORGANIZATION_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create(entrypoint).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | entrypointRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.create(entrypoint).test()
1 | Single | blockingGet | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create(entrypoint).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.update(updatedEntrypoint).test()
1 | Single | blockingGet | METHOD_INVOCATION | Entrypoint entrypointCreated = entrypointRepository.create(entrypoint).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = entrypointRepository.delete(entrypointCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Entrypoint> testFind = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Installation installationCreated = installationRepository.create(installation).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.findById(installationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | installationRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.create(installation).test()
1 | Single | blockingGet | METHOD_INVOCATION | Installation installationCreated = installationRepository.create(installation).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.update(updatedInstallation).test()
1 | Single | blockingGet | METHOD_INVOCATION | Installation installationCreated = installationRepository.create(installation).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = installationRepository.delete(installationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | installationRepository.findById(installationCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = organizationUserRepository.findAll(ReferenceType.ORGANIZATION, "testOrga").test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, "testOrga", user.getUsername(), user.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.findAll(ReferenceType.ORGANIZATION, user.getReferenceId(), 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(userCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = organizationUserRepository.findByIdIn(Arrays.asList(userCreated.getId())).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | organizationUserRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.create(user).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.update(updatedUser).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = organizationUserRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(userCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = organizationUserRepository.delete(userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | organizationUserRepository.findById(userCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, "testUsername*", 0, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, "testUsername*", 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 1).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, query, 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organizationUserRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, query, 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create(organization).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.findById(organizationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> testObserver = organizationRepository.findById("unknown").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.create(organization).test()
1 | Single | blockingGet | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create(organization).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.update(organizationUpdated).test()
1 | Single | blockingGet | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create(organization).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(organizationRepository.findById(organizationCreated.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = organizationRepository.delete(organizationCreated.getId()).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(organizationRepository.findById(organizationCreated.getId()).blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | Organization organizationCreated = organizationRepository.create(organization).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Organization organizationCreated2 = organizationRepository.create(organization2).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Organization>> obs = organizationRepository.findByHrids(Collections.singletonList("Hrid1")).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | organizationRepository.findByHrids(Collections.singletonList("Hrid1")).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flow2Created = flowRepository.create(flow2).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = flowRepository.findAll(ReferenceType.DOMAIN, "DOMAIN1").toList().test()
1 | Flowable | toList | METHOD_INVOCATION | flowRepository.findAll(ReferenceType.DOMAIN, "DOMAIN1").toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flow2Created = flowRepository.create(flow2).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = flowRepository.findByApplication(ReferenceType.DOMAIN, "DOMAIN1", "APP1").toList().test()
1 | Flowable | toList | METHOD_INVOCATION | flowRepository.findByApplication(ReferenceType.DOMAIN, "DOMAIN1", "APP1").toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(ReferenceType.DOMAIN, "DOMAIN1", flowCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | flowRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.create(flow).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.update(flowUpdated).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.update(flowUpdated).test()
1 | Single | blockingGet | METHOD_INVOCATION | Flow flowCreated = flowRepository.create(flow).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(flowRepository.findById(flowCreated.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = flowRepository.delete(flowCreated.getId()).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(flowRepository.findById(flowCreated.getId()).blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | factorRepository.create(factor).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testSubscriber = factorRepository.findByDomain("testDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | Factor factorCreated = factorRepository.create(factor).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.findById(factorCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | factorRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.create(factor).test()
1 | Single | blockingGet | METHOD_INVOCATION | Factor factorCreated = factorRepository.create(factor).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.update(updateFactor).test()
1 | Single | blockingGet | METHOD_INVOCATION | Factor factorCreated = factorRepository.create(factor).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.findById(factorCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = factorRepository.delete(factorCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | factorRepository.findById(factorCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create(task).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.findById(systemTaskCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | taskRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.update(buildSystemTask()).test()
1 | Single | blockingGet | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create(task).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.updateIf(updatedSystemTask, systemTaskCreated.getOperationId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create(task).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.updateIf(updatedSystemTask, "unknownId").test()
1 | Single | blockingGet | METHOD_INVOCATION | SystemTask systemTaskCreated = taskRepository.create(task).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.findById(systemTaskCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = taskRepository.delete(systemTaskCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | taskRepository.findById(systemTaskCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create(membership).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = membershipRepository.findById(createdMembership.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create(membership).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = membershipRepository.findByReference(ORGANIZATION_ID, ReferenceType.ORGANIZATION).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | membershipRepository.findByReference(ORGANIZATION_ID, ReferenceType.ORGANIZATION).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create(membership).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = membershipRepository.findByMember("user#1", MemberType.USER).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | membershipRepository.findByMember("user#1", MemberType.USER).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Membership createdMembership = membershipRepository.create(membership).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = membershipRepository.findByReferenceAndMember(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberType(), membership.getMemberId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | membershipRepository.create(membership).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | membershipRepository.create(groupMembership).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Membership> obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.create(reporter).test()
1 | Single | blockingGet | METHOD_INVOCATION | Reporter createdReporter = repository.create(reporter).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Reporter createdReporter = repository.create(reporter).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Reporter updatedReporter = repository.update(updatableReporter).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdReporter.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Reporter createdReporter = repository.create(reporter).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(createdReporter.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdReporter.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(reporter).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = repository.findAll().toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findAll().toList().test
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(reporter).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = repository.findByDomain(domain).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByDomain(domain).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | certificateRepository.create(certificate).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = certificateRepository.findByDomain("DomainTestFindByDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create(certificate).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.findById(certificateCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | certificateRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.create(certificate).test()
1 | Single | blockingGet | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create(certificate).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.update(updatedCertificate).test()
1 | Single | blockingGet | METHOD_INVOCATION | Certificate certificateCreated = certificateRepository.create(certificate).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.findById(certificateCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = certificateRepository.delete(certificateCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | certificateRepository.findById(certificateCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findAll(ReferenceType.DOMAIN, "testDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, "testDomain", user.getUsername(), user.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.findAll(ReferenceType.DOMAIN, user.getReferenceId(), 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(userCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = userRepository.findByIdIn(Arrays.asList(userCreated.getId())).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource()).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | userRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.create(user).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.update(updatedUser).test()
1 | Single | blockingGet | METHOD_INVOCATION | User userCreated = userRepository.create(user).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(userCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = userRepository.delete(userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | userRepository.findById(userCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, "testUsername*", 0, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, "testUsername*", 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 2).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 1).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findByDomainAndEmail(domain, "test@test.com", true).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findByDomainAndEmail(domain, "test@test.com", false).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.search(ReferenceType.DOMAIN, domain, query, 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.search(ReferenceType.DOMAIN, domain, query, 0, 10).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = userRepository.statistics(query).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user4).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user5).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = userRepository.statistics(query).test()
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user3).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user4).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | userRepository.create(user5).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver1 = userRepository.statistics(query1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver2 = userRepository.statistics(query2).test()
1 | Single | blockingGet | METHOD_INVOCATION | Environment envCreated = environmentRepository.create(environment).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.findById(envCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | environmentRepository.findById("unknown").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.create(env).test()
1 | Single | blockingGet | METHOD_INVOCATION | Environment envCreated = environmentRepository.create(env).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.update(envUpdated).test()
1 | Single | blockingGet | METHOD_INVOCATION | Environment envCreated = environmentRepository.create(env).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(environmentRepository.findById(envCreated.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = environmentRepository.delete(envCreated.getId()).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(environmentRepository.findById(envCreated.getId()).blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | environmentRepository.create(environment).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | environmentRepository.create(buildEnv()).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = environmentRepository.findAll(FIXED_REF_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | environmentRepository.findAll(FIXED_REF_ID).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | environmentRepository.create(buildEnv()).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = environmentRepository.findAll().toList().test()
1 | Flowable | toList | METHOD_INVOCATION | environmentRepository.findAll().toList().test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> observer = authenticationFlowContextRepository.findByTransactionId("unknown-sessions").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = authenticationFlowContextRepository.findLastByTransactionId("unknown-sessions").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = authenticationFlowContextRepository.create(entity).test()
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = authenticationFlowContextRepository.delete(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = authenticationFlowContextRepository.delete(TRANSACTION_ID, 1).test()
1 | Flowable | test | METHOD_INVOCATION | testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Flowable | blockingFirst | METHOD_INVOCATION | AuthenticationFlowContext readValue = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).blockingFirst()
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = authenticationFlowContextRepository.findLastByTransactionId(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(null).test()
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | authenticationFlowContextRepository.create(entity).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = authenticationFlowContextRepository.findLastByTransactionId(TRANSACTION_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = roleRepository.findAll(ReferenceType.DOMAIN, "testDomain").toList().test()
1 | Flowable | toList | METHOD_INVOCATION | roleRepository.findAll(ReferenceType.DOMAIN, "testDomain").toList().test
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role3).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role4).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = roleRepository.findByNamesAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | roleRepository.findByNamesAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated = roleRepository.create(role).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(roleCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated = roleRepository.create(role).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(ReferenceType.DOMAIN, DOMAIN_ID, roleCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated1 = roleRepository.create(role1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated2 = roleRepository.create(role2).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | roleRepository.create(role3).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Role> testObserver = roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Maybe | test | METHOD_INVOCATION | roleRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.create(role).test()
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated = roleRepository.create(role).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.update(updatedRole).test()
1 | Single | blockingGet | METHOD_INVOCATION | Role roleCreated = roleRepository.create(role).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(roleCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = roleRepository.delete(roleCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | roleRepository.findById(roleCreated.getId()).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.findByToken("unknown-token").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByToken("my-token")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByToken(token.getToken())).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByToken(token.getToken())).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testDelete = accessTokenRepository.delete(token.getToken()).test()
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode(token.getAuthorizationCode())).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode(token.getAuthorizationCode())).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode("unknown")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode("unknown")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientIdAndSubject("my-client-id", "my-subject")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientIdAndSubject("my-client-id", "my-subject")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientId("my-client-id-2")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientId("my-client-id-2")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.countByClientId("my-client-id-count")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.countByClientId("my-client-id-count")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObserver = accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen(accessTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen(accessTokenRepository.findByToken("my-token")).test
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken("my-token2").blockingGet())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObservable = accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen(accessTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen(accessTokenRepository.findByToken("my-token")).test
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken("my-token2").blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | Event expectedEvent = eventRepository.create(event).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | eventRepository.create(eventBefore).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | eventRepository.create(eventAfter).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Event> testSubscriber = eventRepository.findByTimeFrame(from, to).test()
1 | Single | blockingGet | METHOD_INVOCATION | Event eventCreated = eventRepository.create(event).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.findById(eventCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | eventRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.create(event).test()
1 | Single | blockingGet | METHOD_INVOCATION | Event eventCreated = eventRepository.create(event).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.findById(eventCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = eventRepository.delete(eventCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | eventRepository.findById(eventCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | identityProviderRepository.create(identityProvider).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | identityProviderRepository.create(identityProvider2).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | identityProviderRepository.create(identityProvider3).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<List<IdentityProvider>> testObserver = identityProviderRepository.findAll(ReferenceType.DOMAIN, "testDomain").toList().test()
1 | Flowable | toList | METHOD_INVOCATION | identityProviderRepository.findAll(ReferenceType.DOMAIN, "testDomain").toList().test
1 | Single | blockingGet | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create(identityProvider).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(identityProviderCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create(identityProvider).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, identityProviderCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | identityProviderRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.create(identityProvider).test()
1 | Single | blockingGet | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create(identityProvider).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.update(updatedIdentityProvider).test()
1 | Single | blockingGet | METHOD_INVOCATION | IdentityProvider identityProviderCreated = identityProviderRepository.create(identityProvider).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(identityProviderCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = identityProviderRepository.delete(identityProviderCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | identityProviderRepository.findById(identityProviderCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | tagRepository.create(tag).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Tag> testObserver1 = tagRepository.findAll(ORGANIZATION_ID).test()
1 | Single | blockingGet | METHOD_INVOCATION | Tag tagCreated = tagRepository.create(tag).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.findById(tagCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | tagRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.create(tag).test()
1 | Single | blockingGet | METHOD_INVOCATION | Tag tagCreated = tagRepository.create(tag).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.update(updatedTag).test()
1 | Single | blockingGet | METHOD_INVOCATION | Tag tagCreated = tagRepository.create(tag).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.findById(tagCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = tagRepository.delete(tagCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | tagRepository.findById(tagCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.create(attempt).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create(attempt).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create(attempt).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(unexpectedAttempt).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findByCriteria(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(attempt).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findByCriteria(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain("unknown").username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create(attempt).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdUnexpectedAttempt = repository.create(unexpectedAttempt).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdUnexpectedAttempt.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdUnexpectedAttempt.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create(attempt).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdAttempt.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | LoginAttempt createdAttempt = repository.create(attempt).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> updateObserver = repository.update(updatableAttempt).test()
1 | Single | blockingGet | METHOD_INVOCATION | scopeRepository.create(scope).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeRepository.findByDomain("testDomain", 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | scopeRepository.create(scope).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | scopeRepository.create(scope).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findByDomainAndKey("testDomain", "one").test()
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated1 = scopeRepository.create(scope).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | scopeRepository.create(scope).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated2 = scopeRepository.create(scope).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeRepository.findByDomainAndKeys("testDomain", Arrays.asList("one", "two", "three")).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | scopeRepository.findByDomainAndKeys("testDomain", Arrays.asList("one", "two", "three")).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create(scope).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findById(scopeCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | scopeRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.create(scope).test()
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create(scope).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.update(updatedScope).test()
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create(scope).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findById(scopeCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = scopeRepository.delete(scopeCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | scopeRepository.findById(scopeCreated.getId()).test().assertEmpty
1 | Single | blockingGet | METHOD_INVOCATION | Scope scopeCreated = scopeRepository.create(scope).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeRepository.search(scopeCreated.getDomain(), "*" + scopeName + "*", 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | authorizationCodeRepository.create(authorizationCode).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.findByCode(code).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> test = authorizationCodeRepository.findByCode(code).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.create(authorizationCode).toCompletable().andThen(authorizationCodeRepository.delete(code)).test()
1 | Completable | andThen | METHOD_INVOCATION | authorizationCodeRepository.create(authorizationCode).toCompletable().andThen(authorizationCodeRepository.delete(code)).test
1 | Single | toCompletable | METHOD_INVOCATION | authorizationCodeRepository.create(authorizationCode).toCompletable().andThen
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated = repository.create(resource).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.findById(rsCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated = repository.create(resource).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.update(toUpdate).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated = repository.create(resource).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(rsCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated = repository.create(resource).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, rsCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated1 = repository.create(resource1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated2 = repository.create(resource2).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Resource>> testObserver = repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID).toList().test
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(resource1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(resource2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE).test()
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(resource1).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | repository.create(resource2).blockingGet();
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = repository.findByDomain(DOMAIN_ID, 0, 1).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN_ID, 1, 1).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated1 = repository.create(resource1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated2 = repository.create(resource2).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = repository.findByResources(Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), "notMatching")).test()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated1 = repository.create(resource1).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated2 = repository.create(resource2).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated3 = repository.create(resource3).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated4 = repository.create(resource4).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Resource rsCreated5 = repository.create(resource5).blockingGet()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = repository.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), rsCreated3.getId(), rsCreated4.getId(), rsCreated5.getId(), "unknown")).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.findById("unknown-id").test()
1 | Single | test | METHOD_INVOCATION | repository.create(par).test().awaitTerminalEvent
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.findById(id).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.create(par).ignoreElement().andThen(repository.findById(id)).ignoreElement().andThen(repository.delete(id)).andThen(repository.findById(id)).test()
1 | Completable | andThen | METHOD_INVOCATION | repository.create(par).ignoreElement().andThen(repository.findById(id)).ignoreElement().andThen(repository.delete(id)).andThen(repository.findById(id)).test
1 | Completable | andThen | METHOD_INVOCATION | repository.create(par).ignoreElement().andThen(repository.findById(id)).ignoreElement().andThen(repository.delete(id)).andThen
1 | Maybe | ignoreElement | METHOD_INVOCATION | repository.create(par).ignoreElement().andThen(repository.findById(id)).ignoreElement().andThen
1 | Completable | andThen | METHOD_INVOCATION | repository.create(par).ignoreElement().andThen(repository.findById(id)).ignoreElement
1 | Single | ignoreElement | METHOD_INVOCATION | repository.create(par).ignoreElement().andThen
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = refreshTokenRepository.findByToken("unknown-token").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = refreshTokenRepository.create(token).toCompletable().andThen(refreshTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().andThen(refreshTokenRepository.findByToken("my-token")).test
1 | Single | toCompletable | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().andThen
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = refreshTokenRepository.create(token).toCompletable().andThen(refreshTokenRepository.delete("my-token")).andThen(refreshTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().andThen(refreshTokenRepository.delete("my-token")).andThen(refreshTokenRepository.findByToken("my-token")).test
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().andThen(refreshTokenRepository.delete("my-token")).andThen
1 | Single | toCompletable | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().andThen
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen(refreshTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen(refreshTokenRepository.findByToken("my-token")).test
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id")).andThen
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken("my-token2").blockingGet())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen(refreshTokenRepository.findByToken("my-token")).test()
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen(refreshTokenRepository.findByToken("my-token")).test
1 | Completable | andThen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).andThen(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id")).andThen
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken("my-token2").blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create(permissionTicket).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.findById(ptCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create(permissionTicket).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.update(toUpdate).test()
1 | Single | blockingGet | METHOD_INVOCATION | PermissionTicket ptCreated = repository.create(permissionTicket).blockingGet()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(ptCreated.getId()).test()
1 | Single | blockingGet | METHOD_INVOCATION | ExtensionGrant createdGrant = extensionGrantRepository.create(extensionGrant).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | extensionGrantRepository.create(excludedElement).blockingGet();
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = extensionGrantRepository.findByDomain("testDomain").test()
1 | Single | blockingGet | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create(extensionGrant).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.findById(extensionGrantCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | extensionGrantRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.create(extensionGrant).test()
1 | Single | blockingGet | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create(extensionGrant).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.update(updatedExtension).test()
1 | Single | blockingGet | METHOD_INVOCATION | ExtensionGrant extensionGrantCreated = extensionGrantRepository.create(extensionGrant).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.findById(extensionGrantCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = extensionGrantRepository.delete(extensionGrantCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantCreated.getId()).test().assertEmpty
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | Single.fromPublisher(collection.createIndex(document, indexOptions)).doOnSuccess((s)->logger.debug("Created an index named: {}", s)).doOnError((throwable)->logger.error("Error occurs during creation of index", throwable)).blockingGet();
1 | Single | doOnError | METHOD_INVOCATION | Single.fromPublisher(collection.createIndex(document, indexOptions)).doOnSuccess((s)->logger.debug("Created an index named: {}", s)).doOnError((throwable)->logger.error("Error occurs during creation of index", throwable)).blockingGet
1 | Single | doOnSuccess | METHOD_INVOCATION | Single.fromPublisher(collection.createIndex(document, indexOptions)).doOnSuccess((s)->logger.debug("Created an index named: {}", s)).doOnError
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.createIndex(document, indexOptions)).doOnSuccess
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.createIndex(document, indexOptions))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(SystemTaskMongo::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(systemTaskCollection.insertOne(task)).flatMap((success)->findById(task.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(systemTaskCollection.insertOne(task)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(systemTaskCollection.insertOne(task))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(task.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task)).flatMap((updateResult)->findById(task.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(task.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(systemTaskCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(systemTaskCollection.deleteOne(eq(FIELD_ID, id)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(or(filterCriteria));
1 | Maybe | METHOD_INVOCATION | Maybe.just(or(filterCriteria))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(and(filterCriteria));
1 | Maybe | METHOD_INVOCATION | Maybe.just(and(filterCriteria))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain)))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<AccessPolicy>> accessPoliciesOperation = Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, accessPoliciesOperation, (count,accessPolicies)->new Page<>(accessPolicies, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, accessPoliciesOperation, (count,accessPolicies)->new Page<>(accessPolicies, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(accessPoliciesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_RESOURCE, resource))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(accessPoliciesCollection.find(in(FIELD_RESOURCE, resources)))
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy)).flatMap((success)->findById(accessPolicy.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(accessPolicy.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy)).flatMap((success)->findById(accessPolicy.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(accessPolicy.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessPoliciesCollection.deleteOne(eq(FIELD_ID, id)))
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name())))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(identitiesCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(identitiesCollection.find())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(identitiesCollection.insertOne(identityProvider)).flatMap((success)->findById(identityProvider.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(identitiesCollection.insertOne(identityProvider)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(identitiesCollection.insertOne(identityProvider))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(identityProvider.getId()).toSingle()
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalException("Identity provider must be present for create"));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException("Identity provider must be present for create"))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider)).flatMap((updateResult)->findById(identityProvider.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(identityProvider.getId()).toSingle()
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalException("Identity provider must be present for update"));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException("Identity provider must be present for update"))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(identitiesCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(identitiesCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find()).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find())
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments()).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments()).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments())
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_CERTIFICATE, certificate)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_IDENTITIES, identityProvider)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_FACTORS, factor))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_FACTORS, factor))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(eq(FIELD_FACTORS, factor)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(MongoApplicationRepository::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()).firstElement().map(MongoApplicationRepository::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant)))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_GRANT_TYPES, extensionGrant))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(applicationsCollection.find(in(FIELD_ID, ids))).map(MongoApplicationRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(in(FIELD_ID, ids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(applicationsCollection.find(in(FIELD_ID, ids)))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.insertOne(application)).flatMap((success)->findById(application.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.insertOne(application)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.insertOne(application))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(application.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application)).flatMap((success)->findById(application.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(application.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(applicationsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(applicationsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.countDocuments());
1 | Single | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.countDocuments())
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)));
1 | Single | METHOD_INVOCATION | Single.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(eq("organizationId", organizationId))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eq("organizationId", organizationId))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eq("organizationId", organizationId)))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(entrypoint)).flatMap((success)->findById(entrypoint.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(entrypoint)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(entrypoint))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(entrypoint.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint)).flatMap((updateResult)->findById(entrypoint.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(entrypoint.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(parCollection.insertOne(convert(par))).flatMap((success)->findById(par.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(parCollection.insertOne(convert(par))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(parCollection.insertOne(convert(par)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(par.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(parCollection.findOneAndDelete(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(parCollection.findOneAndDelete(eq(FIELD_ID, id)))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(usersCollection.find(mongoQuery)).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(mongoQuery)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(mongoQuery))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first())
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application)))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application))))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first(Collections.emptyMap());
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class))
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first(Collections.emptyMap());
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, page, count))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalException("An error has occurred while searching users with filter criteria", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException("An error has occurred while searching users with filter criteria", ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(usersCollection.find(in(FIELD_ID, ids))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(in(FIELD_ID, ids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(usersCollection.find(in(FIELD_ID, ids)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(usersCollection.insertOne((T)user)).flatMap((success)->findById(user.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(usersCollection.insertOne((T)user)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(usersCollection.insertOne((T)user))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(user.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user)).flatMap((updateResult)->findById(user.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(user.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(usersCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(usersCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(policiesCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(policiesCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(policiesCollection.find())
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromPublisher(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)).isEmpty().map((isEmpty)->!isEmpty);
1 | Observable | isEmpty | METHOD_INVOCATION | Observable.fromPublisher(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)).isEmpty().map
1 | Observable | filter | METHOD_INVOCATION | Observable.fromPublisher(mongoOperations.listCollectionNames()).filter((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)).isEmpty
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(mongoOperations.listCollectionNames()).filter
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(mongoOperations.listCollectionNames())
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(mongoOperations.getCollection(COLLECTION_NAME).drop());
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(mongoOperations.getCollection(COLLECTION_NAME).drop())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(scopesCollection.insertOne(scope)).flatMap((success)->findById(scope.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(scopesCollection.insertOne(scope)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(scopesCollection.insertOne(scope))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(scope.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope)).flatMap((updateResult)->findById(scope.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(scope.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(scopesCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(scopesCollection.deleteOne(eq(FIELD_ID, id)))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, scopesOperation, (count,scope)->new Page<Scope>(scope, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, scopesOperation, (count,scope)->new Page<Scope>(scope, page, count))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, scopesOperation, (count,scopes)->new Page<>(scopes, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, scopesOperation, (count,scopes)->new Page<>(scopes, page, count))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), in(FIELD_KEY, keys))))
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType == null ? null : referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, page, count))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(rolesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(mongoQuery)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(mongoQuery))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, 0, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, 0, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(rolesCollection.find(in(FIELD_ID, ids))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(in(FIELD_ID, ids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(in(FIELD_ID, ids)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(rolesCollection.insertOne(role)).flatMap((success)->findById(role.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(rolesCollection.insertOne(role)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(rolesCollection.insertOne(role))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(role.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role)).flatMap((updateResult)->findById(role.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(role.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(rolesCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(rolesCollection.deleteOne(eq(FIELD_ID, id)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name())))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name())))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), in(FIELD_NAME, names), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(reportersCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(reportersCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(reportersCollection.find())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(reportersCollection.find(eq(FIELD_DOMAIN, domain))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(reportersCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(reportersCollection.find(eq(FIELD_DOMAIN, domain)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(reportersCollection.insertOne(reporter)).flatMap((success)->findById(reporter.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(reportersCollection.insertOne(reporter)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(reportersCollection.insertOne(reporter))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(reporter.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter)).flatMap((updateResult)->findById(reporter.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(reporter.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(reportersCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(reportersCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first())
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(monitoring))).map((success)->monitoring);
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(monitoring))).map
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(monitoring)))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring))).map((updateResult)->monitoring);
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring))).map
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(and(filters))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(and(filters))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(and(filters)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name()))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name())))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name())))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(membershipsCollection.find(and(eq(FIELD_MEMBER_ID, memberId), eq(FIELD_MEMBER_TYPE, memberType.name()))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId).map((filter)->and(eqReference, filter)).switchIfEmpty(Single.just(eqReference)).flatMapPublisher((filter)->Flowable.fromPublisher(membershipsCollection.find(filter))).map(this::convert);
1 | Single | flatMapPublisher | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId).map((filter)->and(eqReference, filter)).switchIfEmpty(Single.just(eqReference)).flatMapPublisher((filter)->Flowable.fromPublisher(membershipsCollection.find(filter))).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId).map((filter)->and(eqReference, filter)).switchIfEmpty(Single.just(eqReference)).flatMapPublisher
1 | Maybe | map | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId).map((filter)->and(eqReference, filter)).switchIfEmpty
1 | Single | just | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqGroupId, eqUserId).map((filter)->and(eqReference, filter)).switchIfEmpty(Single.just(eqReference))
1 | Single | METHOD_INVOCATION | Single.just(eqReference)
1 | Flowable | fromPublisher | METHOD_INVOCATION | (filter)->Flowable.fromPublisher(membershipsCollection.find(filter))
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(membershipsCollection.find(filter))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.fromPublisher(membershipsCollection.insertOne(membership)).map((success)->convert(membership));
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(membershipsCollection.insertOne(membership)).map
1 | Single | METHOD_INVOCATION | Single.fromPublisher(membershipsCollection.insertOne(membership))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership)).map((success)->convert(membership));
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership)).map
1 | Single | METHOD_INVOCATION | Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(membershipsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(membershipsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find().first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find().first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find().first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find().first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(installation))).flatMap((success)->findById(installation.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(installation))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(installation)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(installation.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation))).flatMap((updateResult)->findById(installation.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation)))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(installation.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId), eq(FIELD_USER_ID, userId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo)).flatMap((success)->_findById(scopeApprovalMongo.getId()));
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo)).flatMap((updateResult)->_findById(scopeApprovalMongo.getId()));
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).firstElement().map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return create(scopeApproval);
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return update(scopeApproval);
    }
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).firstElement().map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).firstElement().map(Optional::of).defaultIfEmpty
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first())
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_SCOPE, scope))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_SCOPE, scope))))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(scopeApprovalsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user), eq(FIELD_CLIENT_ID, client))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user), eq(FIELD_CLIENT_ID, client))))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(scopeApprovalsCollection.deleteMany(and(eq(FIELD_DOMAIN, domain), eq(FIELD_USER_ID, user))))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert);
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()).map
1 | Single | METHOD_INVOCATION | Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode))).flatMap((success)->findById(authorizationCode.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(authorizationCode.getId()).toSingle()
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(emailsCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(emailsCollection.insertOne(email)).flatMap((success)->findById(email.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(emailsCollection.insertOne(email)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(emailsCollection.insertOne(email))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(email.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email)).flatMap((updateResult)->findById(email.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(email.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(emailsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(emailsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(botDetectionMongoCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(botDetectionMongoCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(botDetectionMongoCollection.find())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name())))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(botDetectionMongoCollection.find(and(eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_REFERENCE_TYPE, referenceType.name()))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(botDetectionMongoCollection.insertOne(entity)).flatMap((success)->findById(entity.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(botDetectionMongoCollection.insertOne(entity)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(botDetectionMongoCollection.insertOne(entity))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(entity.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity)).flatMap((updateResult)->findById(entity.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(entity.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(botDetectionMongoCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_APPLICATION, application))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(flowsCollection.insertOne(flow)).flatMap((success)->findById(flow.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(flowsCollection.insertOne(flow)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(flowsCollection.insertOne(flow))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(flow.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow)).flatMap((updateResult)->findById(flow.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(flow.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(flowsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(flowsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(eventsCollection.find(and(filters))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(eventsCollection.find(and(filters))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(eventsCollection.find(and(filters)))
1 | Maybe | RETURN_TYPE
1 | Observable | firstElement | METHOD_INVOCATION | return Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert).firstElement();
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert).firstElement
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(eventsCollection.insertOne(event)).flatMap((success)->findById(event.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(eventsCollection.insertOne(event)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(eventsCollection.insertOne(event))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(event.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event)).flatMap((updateResult)->findById(event.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(event.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(eventsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(eventsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eq(FIELD_ORGANIZATION_ID, organizationId)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(environment))).flatMap((success)->findById(environment.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(environment))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(environment)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(environment.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment))).flatMap((updateResult)->findById(environment.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment)))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(environment.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(collection.countDocuments());
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.countDocuments())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt)).flatMap((success)->findById(loginAttempt.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(loginAttempt.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt)).flatMap((success)->findById(loginAttempt.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(loginAttempt.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(loginAttemptsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(loginAttemptsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(loginAttemptsCollection.deleteOne(query(criteria)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(loginAttemptsCollection.deleteOne(query(criteria)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(certificatesCollection.find(eq(FIELD_DOMAIN, domain))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(certificatesCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(certificatesCollection.find(eq(FIELD_DOMAIN, domain)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(certificatesCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(certificatesCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(certificatesCollection.find())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(certificatesCollection.insertOne(certificate)).flatMap((success)->findById(certificate.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(certificatesCollection.insertOne(certificate)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(certificatesCollection.insertOne(certificate))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(certificate.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate)).flatMap((updateResult)->findById(certificate.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(certificate.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(certificatesCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(certificatesCollection.deleteOne(eq(FIELD_ID, id)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(authContextCollection.insertOne(contextMongo)).flatMap((success)->findById(contextMongo.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(authContextCollection.insertOne(contextMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(authContextCollection.insertOne(contextMongo))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(contextMongo.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(authContextCollection.deleteMany(eq(FIELD_TRANSACTION_ID, transactionId)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(authContextCollection.deleteMany(eq(FIELD_TRANSACTION_ID, transactionId)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(authContextCollection.deleteOne(and(eq(FIELD_TRANSACTION_ID, transactionId), eq(FIELD_VERSION, version))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(authContextCollection.deleteOne(and(eq(FIELD_TRANSACTION_ID, transactionId), eq(FIELD_VERSION, version))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(eqReference)).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eqReference)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eqReference))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(query)).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(query)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(query))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(alertTrigger))).flatMap((success)->findById(alertTrigger.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(alertTrigger))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(alertTrigger)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(alertTrigger.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo)).flatMap((updateResult)->findById(alertTriggerMongo.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(alertTriggerMongo.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject))).flatMap((success)->findById(requestObject.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(requestObject.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(requestObjectCollection.findOneAndDelete(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(requestObjectCollection.findOneAndDelete(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name()))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(eq(FIELD_REFERENCE_TYPE, referenceType.name())))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(formsCollection.insertOne(page)).flatMap((success)->findById(page.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(formsCollection.insertOne(page)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(formsCollection.insertOne(page))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(page.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page)).flatMap((updateResult)->findById(page.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(page.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(formsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(formsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(eqReference)).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eqReference)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(eqReference))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(and(eqReference, query))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(and(eqReference, query))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(and(eqReference, query)))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(alertNotifier))).flatMap((success)->findById(alertNotifier.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(alertNotifier))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(alertNotifier)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(alertNotifier.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo)).flatMap((updateResult)->findById(alertNotifierMongo.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(alertNotifierMongo.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(resourceCollection.insertOne(res)).flatMap((success)->findById(res.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.insertOne(res)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.insertOne(res))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(res.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)).flatMap((updateResult)->findById(authenticator.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(authenticator.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(resourceCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(resourceCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket)).flatMap((success)->findById(permissionTicket.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(permissionTicket.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket)).flatMap((success)->findById(permissionTicket.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(permissionTicket.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(permissionTicketCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(permissionTicketCollection.deleteOne(eq(FIELD_ID, id)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(tagsCollection.find(eq(FIELD_ORGANIZATION_ID, organizationId)))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(tagsCollection.insertOne(tag)).flatMap((success)->findById(tag.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(tagsCollection.insertOne(tag)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(tagsCollection.insertOne(tag))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(tag.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag)).flatMap((updateResult)->findById(tag.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(tag.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(tagsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(tagsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(factorsCollection.find()).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(factorsCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(factorsCollection.find())
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(factorsCollection.find(eq(FIELD_DOMAIN, domain))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(factorsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(factorsCollection.find(eq(FIELD_DOMAIN, domain)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(factorsCollection.insertOne(authenticator)).flatMap((success)->findById(authenticator.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(factorsCollection.insertOne(authenticator)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(factorsCollection.insertOne(authenticator))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(authenticator.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)).flatMap((updateResult)->findById(authenticator.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(authenticator.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(factorsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(factorsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(credentialsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CREDENTIAL_ID, credentialId))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(credentialsCollection.insertOne(credential)).flatMap((success)->findById(credential.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(credentialsCollection.insertOne(credential)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(credentialsCollection.insertOne(credential))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(credential.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential)).flatMap((updateResult)->findById(credential.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(credential.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(credentialsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(credentialsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USER_ID, userId))))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_AAGUID, aaguid))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(credentialsCollection.deleteMany(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_AAGUID, aaguid))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_DOMAIN, domain)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant)).flatMap((success)->findById(extensionGrant.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(extensionGrant.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant)).flatMap((updateResult)->findById(extensionGrant.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(extensionGrant.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(extensionGrantsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))))
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Resource>> resourcesOperation = Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, resourcesOperation, (count,resourceSets)->new Page<>(resourceSets, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, resourcesOperation, (count,resourceSets)->new Page<>(resourceSets, page, count))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(resourceCollection.insertOne(resource)).flatMap((success)->findById(resource.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.insertOne(resource)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.insertOne(resource))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(resource.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo)).flatMap((success)->findById(resourceMongo.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(resourceMongo.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(resourceCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(resourceCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user))))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain)))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Resource>> resourceSetOperation = Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, resourceSetOperation, (count,resourceSet)->new Page<>(resourceSet, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, resourceSetOperation, (count,resourceSet)->new Page<>(resourceSet, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(resourceCollection.find(in(FIELD_ID, resources))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(in(FIELD_ID, resources))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(in(FIELD_ID, resources)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), in(FIELD_ID, resources))))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken))).flatMap((success)->findById(refreshToken.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(refreshToken.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(refreshTokenCollection.bulkWrite(convert(refreshTokens)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(refreshTokenCollection.bulkWrite(convert(refreshTokens)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(refreshTokenCollection.deleteOne(eq(FIELD_TOKEN, token)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(refreshTokenCollection.deleteOne(eq(FIELD_TOKEN, token)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(refreshTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(refreshTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId))))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(refreshTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(collection.find(in(HRID_KEY, hrids))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(in(HRID_KEY, hrids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(collection.find(in(HRID_KEY, hrids)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.insertOne(convert(organization))).flatMap((success)->findById(organization.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(organization))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.insertOne(convert(organization)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(organization.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization))).flatMap((updateResult)->findById(organization.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization)))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(organization.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(collection.deleteOne(eq(FIELD_ID, id)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(collection.countDocuments());
1 | Single | METHOD_INVOCATION | Single.fromPublisher(collection.countDocuments())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken))).flatMap((success)->findById(accessToken.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken))).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken)))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(accessToken.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessTokenCollection.bulkWrite(convert(accessTokens)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessTokenCollection.bulkWrite(convert(accessTokens)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessTokenCollection.findOneAndDelete(eq(FIELD_TOKEN, token)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessTokenCollection.findOneAndDelete(eq(FIELD_TOKEN, token)))
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject)))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject)))).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject))))
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_CLIENT, clientId))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_CLIENT, clientId))).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_CLIENT, clientId)))
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode))).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(accessTokenCollection.countDocuments(eq(FIELD_CLIENT, clientId)));
1 | Single | METHOD_INVOCATION | Single.fromPublisher(accessTokenCollection.countDocuments(eq(FIELD_CLIENT, clientId)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessTokenCollection.deleteMany(eq(FIELD_SUBJECT, userId)))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, userId))))
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId))));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(accessTokenCollection.deleteMany(and(eq(FIELD_DOMAIN, domainId), eq(FIELD_SUBJECT, userId))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(groupsCollection.find(eq(FIELD_MEMBERS, memberId))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(eq(FIELD_MEMBERS, memberId))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(eq(FIELD_MEMBERS, memberId)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Group>> groupsOperation = Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, groupsOperation, (count,groups)->new Page<>(groups, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, groupsOperation, (count,groups)->new Page<>(groups, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(groupsCollection.find(in(FIELD_ID, ids))).map(this::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(in(FIELD_ID, ids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(groupsCollection.find(in(FIELD_ID, ids)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(groupsCollection.insertOne(group)).flatMap((success)->findById(group.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(groupsCollection.insertOne(group)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(groupsCollection.insertOne(group))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(group.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group)).flatMap((success)->findById(group.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(group.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(groupsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(groupsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(domainsCollection.find()).map(MongoDomainRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find()).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map(MongoDomainRepository::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))).firstElement().map(MongoDomainRepository::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid))))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(domainsCollection.find(in(FIELD_ID, ids))).map(MongoDomainRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(in(FIELD_ID, ids))).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(in(FIELD_ID, ids)))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(domainsCollection.find(mongoQuery)).map(MongoDomainRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(mongoQuery)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(mongoQuery))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return Flowable.fromPublisher(domainsCollection.find(mongoQuery)).map(MongoDomainRepository::convert);
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(mongoQuery)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(mongoQuery))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Single.just(new BsonDocument())).flatMapPublisher((filter)->Flowable.fromPublisher(domainsCollection.find(filter))).map(MongoDomainRepository::convert);
1 | Single | flatMapPublisher | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Single.just(new BsonDocument())).flatMapPublisher((filter)->Flowable.fromPublisher(domainsCollection.find(filter))).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Single.just(new BsonDocument())).flatMapPublisher
1 | Single | just | METHOD_INVOCATION | toBsonFilter(criteria.isLogicalOR(), eqAlertEnabled).switchIfEmpty(Single.just(new BsonDocument()))
1 | Single | METHOD_INVOCATION | Single.just(new BsonDocument())
1 | Flowable | fromPublisher | METHOD_INVOCATION | (filter)->Flowable.fromPublisher(domainsCollection.find(filter))
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(domainsCollection.find(filter))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(domainsCollection.insertOne(domain)).flatMap((success)->findById(domain.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(domainsCollection.insertOne(domain)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(domainsCollection.insertOne(domain))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(domain.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain)).flatMap((updateResult)->findById(domain.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(domain.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | fromPublisher | METHOD_INVOCATION | return Completable.fromPublisher(domainsCollection.deleteOne(eq(FIELD_ID, id)));
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(domainsCollection.deleteOne(eq(FIELD_ID, id)))
1 | Observable | IMPORT
1 | Observable | blockingSubscribe | METHOD_INVOCATION | Observable.fromPublisher(mongoDatabase.listCollectionNames()).flatMap((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).blockingSubscribe();
1 | Observable | flatMap | METHOD_INVOCATION | Observable.fromPublisher(mongoDatabase.listCollectionNames()).flatMap((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).blockingSubscribe
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(mongoDatabase.listCollectionNames()).flatMap
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(mongoDatabase.listCollectionNames())
1 | Observable | fromPublisher | METHOD_INVOCATION | (collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return organizationRepository.findByHrids(hrids).map(this::toOrganization);
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> identities = identitiesRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Identity::getIdentity).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | identitiesRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Identity::getIdentity).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | identitiesRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Identity::getIdentity).toList
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> domains = domainRestrictionRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.DomainRestriction::getDomainRestriction).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | domainRestrictionRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.DomainRestriction::getDomainRestriction).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | domainRestrictionRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.DomainRestriction::getDomainRestriction).toList
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> hrids = hridsRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Hrid::getHrid).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | hridsRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Hrid::getHrid).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | hridsRepository.findAllByOrganizationId(organizationId).map(JdbcOrganization.Hrid::getHrid).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return organizationRepository.findById(organizationId).map(this::toOrganization).zipWith(identities, (org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
}).zipWith(domains, (org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
}).zipWith(hrids, (org,hrid)->{
    LOGGER.debug("findById({}) fetch {} hrids", organizationId, hrid.size());
    org.setHrids(hrid);
    return org;
});
1 | Maybe | zipWith | METHOD_INVOCATION | organizationRepository.findById(organizationId).map(this::toOrganization).zipWith(identities, (org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
}).zipWith(domains, (org,domain)->{
    LOGGER.debug("findById({}) fetch {} domainRestrictions", organizationId, domain.size());
    org.setDomainRestrictions(domain);
    return org;
}).zipWith
1 | Maybe | zipWith | METHOD_INVOCATION | organizationRepository.findById(organizationId).map(this::toOrganization).zipWith(identities, (org,idp)->{
    LOGGER.debug("findById({}) fetch {} identities", organizationId, idp.size());
    org.setIdentities(idp);
    return org;
}).zipWith
1 | Maybe | map | METHOD_INVOCATION | organizationRepository.findById(organizationId).map(this::toOrganization).zipWith
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcBotDetection.class).fetch().all()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcBotDetection.class).matching(from(where(REFERENCE_ID_FIELD).is(referenceId).and(where(REF_TYPE_FIELD).is(referenceType.name())))).fetch().all()).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return monoToMaybe(dbClient.select().from(JdbcBotDetection.class).matching(from(where(ID_FIELD).is(id))).fetch().first()).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return monoToMaybe(dbClient.select().from(JdbcSystemTask.class).project("*").matching(from(where("id").is(id))).as(JdbcSystemTask.class).first()).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("SystemTask can\'t be updated without control on the operationId"))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList().flatMap((content)->countByDomain(domain).map((count)->new Page<>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from("scopes").project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.by("scopes." + databaseDialectHelper.toSql(SqlIdentifier.quoted("key")))).page(PageRequest.of(page, size)).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithClaims(Maybe.just(scope), scope.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Single | map | METHOD_INVOCATION | (content)->countByDomain(domain).map((count)->new Page<>(content, page, count))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first()).map((total)->new Page<>(data, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcScope.class).fetch().all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithClaims(Maybe.just(scope), scope.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Single | map | METHOD_INVOCATION | (data)->monoToSingle(dbClient.execute(count).bind("domain", domain).bind("value", wildcardSearch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first()).map((total)->new Page<>(data, page, total))
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> scopeClaims = claimRepository.findByScopeId(id).map(JdbcScope.Claims::getClaim).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | claimRepository.findByScopeId(id).map(JdbcScope.Claims::getClaim).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | claimRepository.findByScopeId(id).map(JdbcScope.Claims::getClaim).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return maybeScope.zipWith(scopeClaims, (scope,claims)->{
    LOGGER.debug("findById({}) fetch {} scopeClaims", id, claims == null ? 0 : claims.size());
    scope.setClaims(claims);
    return scope;
});
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return monoToMaybe(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).is(key)))).as(JdbcScope.class).first()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()));
1 | Maybe | map | METHOD_INVOCATION | monoToMaybe(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).is(key)))).as(JdbcScope.class).first()).map(this::toEntity).flatMap
1 | Maybe | just | METHOD_INVOCATION | completeWithClaims(Maybe.just(scope), scope.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).in(keys)))).as(JdbcScope.class).all()).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcScope.class).project("*").matching(from(where("domain").is(domain).and(where(databaseDialectHelper.toSql(SqlIdentifier.quoted("key"))).in(keys)))).as(JdbcScope.class).all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (scope)->completeWithClaims(Maybe.just(scope), scope.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithClaims(Maybe.just(scope), scope.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return scopeRepository.findById(id).map(this::toEntity).flatMap((scope)->completeWithClaims(Maybe.just(scope), scope.getId()));
1 | Maybe | map | METHOD_INVOCATION | scopeRepository.findById(id).map(this::toEntity).flatMap
1 | Maybe | just | METHOD_INVOCATION | completeWithClaims(Maybe.just(scope), scope.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(deleteClaims.then(action).as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return userRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | userRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap((content)->userRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<User>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | map | METHOD_INVOCATION | (content)->userRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<User>(content, page, count))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<User>(data, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeUser(app).toFlowable()
1 | Single | map | METHOD_INVOCATION | (data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<User>(data, page, total))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList().flatMap((list)->monoToSingle(userCount).map((total)->new Page<User>(list, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | map | METHOD_INVOCATION | (list)->monoToSingle(userCount).map((total)->new Page<User>(list, page, total))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindUserByReferenceAndEmail(DOMAIN, domain, email, strict)).bind("refId", domain).bind("refType", DOMAIN.name()).bind("email", email).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindUserByReferenceAndEmail(DOMAIN, domain, email, strict)).bind("refId", domain).bind("refType", DOMAIN.name()).bind("email", email).as(JdbcUser.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findByUsername(ReferenceType.DOMAIN.name(), domain, username).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findByUsername(ReferenceType.DOMAIN.name(), domain, username).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | flatMap | METHOD_INVOCATION | return userRepository.findByIdIn(ids).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP);
1 | Flowable | map | METHOD_INVOCATION | userRepository.findByIdIn(ids).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findById(referenceType.name(), referenceId, userId).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findById(referenceType.name(), referenceId, userId).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | flatMap | METHOD_INVOCATION | return Single.just(new HashMap<>()).flatMap((stats)->disabled.map((count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
})).flatMap((stats)->locked.map((count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
})).flatMap((stats)->inactive.map((count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
})).flatMap((stats)->total.map((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
}));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap((stats)->disabled.map((count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
})).flatMap((stats)->locked.map((count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
})).flatMap((stats)->inactive.map((count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap((stats)->disabled.map((count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
})).flatMap((stats)->locked.map((count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap((stats)->disabled.map((count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
})).flatMap
1 | Single | just | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap
1 | Single | METHOD_INVOCATION | Single.just(new HashMap<>())
1 | Single | map | METHOD_INVOCATION | (stats)->disabled.map((count)->{
    LOGGER.debug("usersStatusRepartition(disabled) = {}", count);
    stats.put("disabled", count);
    return stats;
})
1 | Single | map | METHOD_INVOCATION | (stats)->locked.map((count)->{
    LOGGER.debug("usersStatusRepartition(locked) = {}", count);
    stats.put("locked", count);
    return stats;
})
1 | Single | map | METHOD_INVOCATION | (stats)->inactive.map((count)->{
    LOGGER.debug("usersStatusRepartition(inactive) = {}", count);
    stats.put("inactive", count);
    return stats;
})
1 | Single | map | METHOD_INVOCATION | (stats)->total.map((count)->{
    long value = count - (stats.values().stream().mapToLong((l)->(Long)l).sum());
    stats.put("active", value);
    LOGGER.debug("usersStatusRepartition(active) = {}", value);
    return stats;
})
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | flatMap | METHOD_INVOCATION | return Single.just(new HashMap<>()).flatMap((stats)->total.map((count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
})).flatMap((stats)->completed.map((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
}));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap((stats)->total.map((count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
})).flatMap
1 | Single | just | METHOD_INVOCATION | Single.just(new HashMap<>()).flatMap
1 | Single | METHOD_INVOCATION | Single.just(new HashMap<>())
1 | Single | map | METHOD_INVOCATION | (stats)->total.map((count)->{
    LOGGER.debug("registrationsStatusRepartition(total) = {}", count);
    stats.put("total", count);
    return stats;
})
1 | Single | map | METHOD_INVOCATION | (stats)->completed.map((count)->{
    LOGGER.debug("registrationsStatusRepartition(completed) = {}", count);
    stats.put("completed", count);
    return stats;
})
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findById(id).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findById(id).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(updateAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap((user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})).flatMap((user)->attributesRepository.findByUserId(user.getId()).toList().map((attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
}));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap((user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap
1 | Single | just | METHOD_INVOCATION | Single.just(userToComplete).flatMap
1 | Single | METHOD_INVOCATION | Single.just(userToComplete)
1 | Single | map | METHOD_INVOCATION | (user)->roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList().map
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findByUserId(user.getId()).map(JdbcUser.Role::getRole).toList
1 | Single | map | METHOD_INVOCATION | (user)->entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList().map
1 | Flowable | map | METHOD_INVOCATION | entitlementRepository.findByUserId(user.getId()).map(JdbcUser.Entitlements::getEntitlement).toList
1 | Single | map | METHOD_INVOCATION | (user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map
1 | Flowable | map | METHOD_INVOCATION | addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList
1 | Single | map | METHOD_INVOCATION | (user)->attributesRepository.findByUserId(user.getId()).toList().map((attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcUser.Attribute::getUserField, (attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | attributesRepository.findByUserId(user.getId()).toList().map
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return reporterRepository.findAll().map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return reporterRepository.findByDomain(domain).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return reporterRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertResult).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return reporterRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return entrypointRepository.findById(id, organizationId).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toMaybe()).doOnError((error)->LOGGER.error("Unable to retrieve entrypoint with id={} and organization={}", id, organizationId, error));
1 | Maybe | flatMap | METHOD_INVOCATION | entrypointRepository.findById(id, organizationId).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toMaybe()).doOnError
1 | Maybe | map | METHOD_INVOCATION | entrypointRepository.findById(id, organizationId).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (entrypoint)->completeTags(entrypoint).toMaybe()
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return entrypointRepository.findAllByOrganization(organizationId).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toFlowable()).doOnError((error)->LOGGER.error("Unable to list all entrypoints with organization {}", organizationId, error));
1 | Flowable | flatMap | METHOD_INVOCATION | entrypointRepository.findAllByOrganization(organizationId).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toFlowable()).doOnError
1 | Flowable | map | METHOD_INVOCATION | entrypointRepository.findAllByOrganization(organizationId).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (entrypoint)->completeTags(entrypoint).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return tagRepository.findAllByEntrypoint(entrypoint.getId()).map(JdbcEntrypoint.Tag::getTag).toList().map((tags)->{
    entrypoint.setTags(tags);
    return entrypoint;
});
1 | Flowable | toList | METHOD_INVOCATION | tagRepository.findAllByEntrypoint(entrypoint.getId()).map(JdbcEntrypoint.Tag::getTag).toList().map
1 | Flowable | map | METHOD_INVOCATION | tagRepository.findAllByEntrypoint(entrypoint.getId()).map(JdbcEntrypoint.Tag::getTag).toList
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return entrypointRepository.findById(id).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toMaybe()).doOnError((error)->LOGGER.error("Unable to retrieve entrypoint with id={} ", id, error));
1 | Maybe | flatMap | METHOD_INVOCATION | entrypointRepository.findById(id).map(this::toEntity).flatMap((entrypoint)->completeTags(entrypoint).toMaybe()).doOnError
1 | Maybe | map | METHOD_INVOCATION | entrypointRepository.findById(id).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (entrypoint)->completeTags(entrypoint).toMaybe()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(deleteTags(item.getId()).then(action).as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError((error)->LOGGER.error("unable to create entrypoint with id {}", item.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(deleteTags(item.getId()).then(action).as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(deleteTags(id).then(delete).as(trx::transactional)).doOnError((error)->LOGGER.error("Unable to delete entrypoint with id {}", id, error));
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return parRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve PushedAuthorizationRequest with id {}", id, error));
1 | Maybe | map | METHOD_INVOCATION | parRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity).doOnError
1 | Maybe | filter | METHOD_INVOCATION | parRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->parRepository.findById(par.getId()).map(this::toEntity).toSingle()).doOnError((error)->LOGGER.error("Unable to create PushedAuthorizationRequest with id {}", par.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->parRepository.findById(par.getId()).map(this::toEntity).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->parRepository.findById(par.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | parRepository.findById(par.getId()).map(this::toEntity).toSingle
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return parRepository.deleteById(id).doOnError((error)->LOGGER.error("Unable to delete PushedAuthorizationRequest with id {}", id, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcPushedAuthorizationRequest.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge PushedAuthorizationRequest", error));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return serviceResourceRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertResult).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return serviceResourceRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return serviceResourceRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity);
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.membershipRepository.findByReference(referenceId, referenceType.name()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.membershipRepository.findByMember(memberId, memberType.name()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcMembership.class).matching(from(whereClause)).as(JdbcMembership.class).all()).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.membershipRepository.findByReferenceAndMember(referenceId, referenceType.name(), memberId, memberType.name()).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return membershipRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return membershipRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return factorRepository.findAll().map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return factorRepository.findByDomain(domain).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return factorRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return this.factorRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return credentialRepository.findByUserId(referenceType.name(), referenceId, userId).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return credentialRepository.findByUsername(referenceType.name(), referenceId, username).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return credentialRepository.findByCredentialId(referenceType.name(), referenceId, credentialId).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return credentialRepository.findById(id).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve credential for Id {}", id, error));
1 | Maybe | map | METHOD_INVOCATION | credentialRepository.findById(id).map(this::toEntity).doOnError
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return this.credentialRepository.save(toJdbcEntity(item)).map(this::toEntity).doOnError((error)->LOGGER.error("unable to create credential with id {}", item.getId(), error));
1 | Single | map | METHOD_INVOCATION | this.credentialRepository.save(toJdbcEntity(item)).map(this::toEntity).doOnError
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return credentialRepository.deleteById(id).doOnError((error)->LOGGER.error("Unable to delete credential for Id {}", id, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcCredential.class).matching(from(where("reference_type").is(referenceType.name()).and(where("reference_id").is(referenceId)).and(where("user_id").is(userId)))).then()).doOnError((error)->LOGGER.error("Unable to delete credential for userId {}", userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcCredential.class).matching(from(where("reference_type").is(referenceType.name()).and(where("reference_id").is(referenceId)).and(where("aaguid").is(aaguid)))).then()).doOnError((error)->LOGGER.error("Unable to delete credential for aaguid {}", aaguid, error));
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all()).map(this::toEntity).flatMap((res)->completeWithScopes(Maybe.just(res), res.getId()).toFlowable(), MAX_CONCURRENCY).toList().flatMap((content)->resourceRepository.countByDomain(domain).map((count)->new Page<Resource>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all()).map(this::toEntity).flatMap((res)->completeWithScopes(Maybe.just(res), res.getId()).toFlowable(), MAX_CONCURRENCY).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all()).map(this::toEntity).flatMap((res)->completeWithScopes(Maybe.just(res), res.getId()).toFlowable(), MAX_CONCURRENCY).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (res)->completeWithScopes(Maybe.just(res), res.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(res), res.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(res)
1 | Single | map | METHOD_INVOCATION | (content)->resourceRepository.countByDomain(domain).map((count)->new Page<Resource>(content, page, count))
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = resourceScopeRepository.findAllByResourceId(id).map(JdbcResource.Scope::getScope).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | resourceScopeRepository.findAllByResourceId(id).map(JdbcResource.Scope::getScope).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | resourceScopeRepository.findAllByResourceId(id).map(JdbcResource.Scope::getScope).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return maybeResource.zipWith(scopes, (res,scope)->{
    LOGGER.debug("findById({}) fetch {} resource scopes", id, scope == null ? 0 : scope.size());
    res.setResourceScopes(scope);
    return res;
});
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | flatMap | METHOD_INVOCATION | return resourceRepository.findByIdIn(resources).map(this::toEntity).flatMap((resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | resourceRepository.findByIdIn(resources).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(resource), resource.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(resource)
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return resourceRepository.findByDomainAndClientAndUser(domain, client, userId).map(this::toEntity).flatMap((resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | resourceRepository.findByDomainAndClientAndUser(domain, client, userId).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(resource), resource.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(resource)
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return resourceRepository.findByDomainAndClientAndResources(domain, client, resources).map(this::toEntity).flatMap((resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | resourceRepository.findByDomainAndClientAndResources(domain, client, resources).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (resource)->completeWithScopes(Maybe.just(resource), resource.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(resource), resource.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(resource)
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | completeWithScopes(resourceRepository.findByDomainAndClientAndUserIdAndResource(domain, client, userId, resource).map(this::toEntity), resource)
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | completeWithScopes(resourceRepository.findById(id).map(this::toEntity), id)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertResult.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(deleteScopes.then(updateResource).as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return requestObjectRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve RequestObject with id {}", id, error));
1 | Maybe | map | METHOD_INVOCATION | requestObjectRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity).doOnError
1 | Maybe | filter | METHOD_INVOCATION | requestObjectRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->requestObjectRepository.findById(requestObject.getId()).map(this::toEntity).toSingle()).doOnError((error)->LOGGER.error("Unable to create requestObject with id {}", requestObject.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->requestObjectRepository.findById(requestObject.getId()).map(this::toEntity).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->requestObjectRepository.findById(requestObject.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | requestObjectRepository.findById(requestObject.getId()).map(this::toEntity).toSingle
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return requestObjectRepository.deleteById(id).doOnError((error)->LOGGER.error("Unable to delete RequestObject with id {}", id, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRequestObject.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge RequestObjects", error));
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all()).toList().map((content)->content.stream().map(this::toAccessPolicy).collect(Collectors.toList())).flatMap((content)->accessPolicyRepository.countByDomain(domain).map((count)->new Page<AccessPolicy>(content, page, count)));
1 | Single | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all()).toList().map((content)->content.stream().map(this::toAccessPolicy).collect(Collectors.toList())).flatMap
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcAccessPolicy.class).project("*").matching(from(where("domain").is(domain))).orderBy(Sort.Order.desc("updated_at")).page(PageRequest.of(page, size)).as(JdbcAccessPolicy.class).all()).toList().map
1 | Single | map | METHOD_INVOCATION | (content)->accessPolicyRepository.countByDomain(domain).map((count)->new Page<AccessPolicy>(content, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return accessPolicyRepository.findByDomainAndResource(domain, resource).map(this::toAccessPolicy);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return accessPolicyRepository.findByResourceIn(resources).map(this::toAccessPolicy);
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return accessPolicyRepository.findById(id).map(this::toAccessPolicy);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUserAndClient(domain, userId, clientId).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map(this::toEntity);
1 | Flowable | filter | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClient(domain, userId, clientId).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUser(domain, user).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map(this::toEntity);
1 | Flowable | filter | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser(domain, user).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(this::toEntity).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return create(scopeApproval);
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return update(scopeApproval);
    }
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(this::toEntity).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(this::toEntity).map(Optional::of).defaultIfEmpty
1 | Maybe | map | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope()).map(this::toEntity).map
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return scopeApprovalRepository.findById(id).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map(this::toEntity);
1 | Maybe | filter | METHOD_INVOCATION | scopeApprovalRepository.findById(id).filter((bean)->bean.getExpiresAt() == null || bean.getExpiresAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->scopeApprovalRepository.findById(item.getId()).map(this::toEntity).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->scopeApprovalRepository.findById(item.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | scopeApprovalRepository.findById(item.getId()).map(this::toEntity).toSingle
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return scopeApprovalRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return formRepository.findAll(referenceType.name(), referenceId).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return formRepository.findAll(referenceType.name()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return formRepository.findByClient(referenceType.name(), referenceId, client).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return formRepository.findByTemplate(referenceType.name(), referenceId, template).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return formRepository.findByClientAndTemplate(referenceType.name(), referenceId, client, template).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return formRepository.findById(referenceType.name(), referenceId, id).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return formRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return this.formRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return flow.map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP);
1 | Flowable | map | METHOD_INVOCATION | flow.map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithMembersAndRole(Maybe.just(group), group.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return flow.map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP);
1 | Flowable | map | METHOD_INVOCATION | flow.map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithMembersAndRole(Maybe.just(group), group.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all()).map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap((content)->counter.map((count)->new Page<Group>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all()).map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all()).map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithMembersAndRole(Maybe.just(group), group.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | map | METHOD_INVOCATION | (content)->counter.map((count)->new Page<Group>(content, page, count))
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return flow.map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable(), CONCURRENT_FLATMAP);
1 | Flowable | map | METHOD_INVOCATION | flow.map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (group)->completeWithMembersAndRole(Maybe.just(group), group.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithMembersAndRole(Maybe.just(group), group.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | flatMap | METHOD_INVOCATION | return maybe.map(this::toEntity).flatMap((group)->completeWithMembersAndRole(Maybe.just(group), group.getId()));
1 | Maybe | map | METHOD_INVOCATION | maybe.map(this::toEntity).flatMap
1 | Maybe | just | METHOD_INVOCATION | completeWithMembersAndRole(Maybe.just(group), group.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | map | METHOD_INVOCATION | completeWithMembersAndRole(maybe.map(this::toEntity), id)
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | map | METHOD_INVOCATION | completeWithMembersAndRole(maybe.map(this::toEntity), id)
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> members = memberRepository.findAllByGroup(id).map(JdbcGroup.JdbcMember::getMember).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | memberRepository.findAllByGroup(id).map(JdbcGroup.JdbcMember::getMember).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | memberRepository.findAllByGroup(id).map(JdbcGroup.JdbcMember::getMember).toList
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> roles = roleRepository.findAllByGroup(id).map(JdbcGroup.JdbcRole::getRole).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | roleRepository.findAllByGroup(id).map(JdbcGroup.JdbcRole::getRole).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findAllByGroup(id).map(JdbcGroup.JdbcRole::getRole).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return maybeGroup.zipWith(members, (grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
}).zipWith(roles, (grp,role)->{
    LOGGER.debug("findById({}) fetch {} group roles", id, role == null ? 0 : role.size());
    grp.setRoles(role);
    return grp;
});
1 | Maybe | zipWith | METHOD_INVOCATION | maybeGroup.zipWith(members, (grp,member)->{
    LOGGER.debug("findById({}) fetch {} group members", id, member == null ? 0 : member.size());
    grp.setMembers(member);
    return grp;
}).zipWith
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | map | METHOD_INVOCATION | Flowable<Domain> domains = domainRepository.findAll().map(this::toDomain)
1 | Flowable | flatMap | METHOD_INVOCATION | return domains.flatMap(this::completeDomain);
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcDomain.class).matching(from(whereClause)).as(JdbcDomain.class).all()).map(this::toDomain).flatMap(this::completeDomain);
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcDomain.class).matching(from(whereClause)).as(JdbcDomain.class).all()).map(this::toDomain).flatMap
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | map | METHOD_INVOCATION | Flowable<Domain> domains = domainRepository.findAllById(ids).map(this::toDomain)
1 | Flowable | flatMap | METHOD_INVOCATION | return domains.flatMap(this::completeDomain);
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | map | METHOD_INVOCATION | Flowable<Domain> domains = domainRepository.findAllByReferenceId(environmentId, ReferenceType.ENVIRONMENT.name()).map(this::toDomain)
1 | Flowable | flatMap | METHOD_INVOCATION | return domains.flatMap(this::completeDomain);
1 | Maybe | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | toFlowable | METHOD_INVOCATION | Flowable<Domain> domains = domainRepository.findById(id).map(this::toDomain).toFlowable()
1 | Maybe | map | METHOD_INVOCATION | domainRepository.findById(id).map(this::toDomain).toFlowable
1 | Flowable | firstElement | METHOD_INVOCATION | return domains.flatMap(this::completeDomain).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | domains.flatMap(this::completeDomain).firstElement
1 | Maybe | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | toFlowable | METHOD_INVOCATION | Flowable<Domain> domains = domainRepository.findByHrid(referenceId, referenceType.name(), hrid).map(this::toDomain).toFlowable()
1 | Maybe | map | METHOD_INVOCATION | domainRepository.findByHrid(referenceId, referenceType.name(), hrid).map(this::toDomain).toFlowable
1 | Flowable | firstElement | METHOD_INVOCATION | return domains.flatMap(this::completeDomain).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | domains.flatMap(this::completeDomain).firstElement
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcDomain.class).matching(from(where("id").is(domainId))).fetch().rowsUpdated().then(deleteChildEntities(domainId)).as(trx::transactional)).doOnError((error)->LOGGER.error("unable to delete Domain with id {}", domainId, error));
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("refType", ReferenceType.ENVIRONMENT.name()).bind("refId", environmentId).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcDomain.class).fetch().all()).map(this::toDomain).flatMap(this::completeDomain);
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("refType", ReferenceType.ENVIRONMENT.name()).bind("refId", environmentId).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcDomain.class).fetch().all()).map(this::toDomain).flatMap
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return Flowable.just(entity).flatMap((domain)->identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable().map((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})).flatMap((domain)->tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList().toFlowable().map((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})).flatMap((domain)->vHostsRepository.findAllByDomainId(domain.getId()).map(this::toVirtualHost).toList().toFlowable().map((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
}));
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.just(entity).flatMap((domain)->identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable().map((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})).flatMap((domain)->tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList().toFlowable().map((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})).flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.just(entity).flatMap((domain)->identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable().map((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})).flatMap
1 | Flowable | just | METHOD_INVOCATION | Flowable.just(entity).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.just(entity)
1 | Flowable | map | METHOD_INVOCATION | (domain)->identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable().map((idps)->{
    domain.setIdentities(new HashSet<>(idps));
    return domain;
})
1 | Single | toFlowable | METHOD_INVOCATION | identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable().map
1 | Flowable | toList | METHOD_INVOCATION | identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList().toFlowable
1 | Flowable | map | METHOD_INVOCATION | identitiesRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Identity::getIdentity).toList
1 | Flowable | map | METHOD_INVOCATION | (domain)->tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList().toFlowable().map((tags)->{
    domain.setTags(new HashSet<>(tags));
    return domain;
})
1 | Single | toFlowable | METHOD_INVOCATION | tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList().toFlowable().map
1 | Flowable | toList | METHOD_INVOCATION | tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList().toFlowable
1 | Flowable | map | METHOD_INVOCATION | tagRepository.findAllByDomainId(domain.getId()).map(JdbcDomain.Tag::getTag).toList
1 | Flowable | map | METHOD_INVOCATION | (domain)->vHostsRepository.findAllByDomainId(domain.getId()).map(this::toVirtualHost).toList().toFlowable().map((vhosts)->{
    domain.setVhosts(vhosts);
    return domain;
})
1 | Single | toFlowable | METHOD_INVOCATION | vHostsRepository.findAllByDomainId(domain.getId()).map(this::toVirtualHost).toList().toFlowable().map
1 | Flowable | toList | METHOD_INVOCATION | vHostsRepository.findAllByDomainId(domain.getId()).map(this::toVirtualHost).toList().toFlowable
1 | Flowable | map | METHOD_INVOCATION | vHostsRepository.findAllByDomainId(domain.getId()).map(this::toVirtualHost).toList
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.identityProviderRepository.findAll(referenceType.name(), referenceId).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.identityProviderRepository.findAll(referenceType.name()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.identityProviderRepository.findAll().map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.identityProviderRepository.findById(referenceType.name(), referenceId, identityProviderId).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.identityProviderRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return emailRepository.findAll().map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return emailRepository.findAllByReference(referenceId, referenceType.name()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return emailRepository.findAllByReferenceAndClient(referenceId, referenceType.name(), client).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return emailRepository.findByTemplate(referenceId, referenceType.name(), template).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return emailRepository.findByClientAndTemplate(referenceId, referenceType.name(), client, template).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return emailRepository.findById(referenceId, referenceType.name(), id).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return emailRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return monoToMaybe(from.as(JdbcLoginAttempt.class).first()).map(this::toEntity);
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return loginAttemptRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity);
1 | Maybe | filter | METHOD_INVOCATION | loginAttemptRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->loginAttemptRepository.findById(item.getId()).map(this::toEntity).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->loginAttemptRepository.findById(item.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | loginAttemptRepository.findById(item.getId()).map(this::toEntity).toSingle
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return loginAttemptRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return permissionTicketRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map(this::toEntity);
1 | Maybe | filter | METHOD_INVOCATION | permissionTicketRepository.findById(id).filter((bean)->bean.getExpireAt() == null || bean.getExpireAt().isAfter(now)).map
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->permissionTicketRepository.findById(item.getId()).map(this::toEntity).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->permissionTicketRepository.findById(item.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | permissionTicketRepository.findById(item.getId()).map(this::toEntity).toSingle
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return extensionGrantRepository.findByDomain(domain).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return extensionGrantRepository.findByDomainAndName(domain, name).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return extensionGrantRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return this.extensionGrantRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return eventRepository.findByTimeFrame(LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC)).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return eventRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return userRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | userRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap((content)->userRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<User>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all()).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | map | METHOD_INVOCATION | (content)->userRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<User>(content, page, count))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<User>(data, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all()).map(this::toEntity).flatMap((app)->completeUser(app).toFlowable(), CONCURRENT_FLATMAP).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeUser(app).toFlowable()
1 | Single | map | METHOD_INVOCATION | (data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<User>(data, page, total))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList().flatMap((list)->monoToSingle(userCount).map((total)->new Page<User>(list, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(userFlux).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Single | map | METHOD_INVOCATION | (list)->monoToSingle(userCount).map((total)->new Page<User>(list, page, total))
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource(referenceType.name(), referenceId, username, source).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findByExternalIdAndSource(referenceType.name(), referenceId, externalId, source).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | flatMap | METHOD_INVOCATION | return userRepository.findByIdIn(ids).map(this::toEntity).flatMap((user)->completeUser(user).toFlowable(), CONCURRENT_FLATMAP);
1 | Flowable | map | METHOD_INVOCATION | userRepository.findByIdIn(ids).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (user)->completeUser(user).toFlowable()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findById(referenceType.name(), referenceId, userId).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findById(referenceType.name(), referenceId, userId).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userRepository.findById(id).map(this::toEntity).flatMap((user)->completeUser(user).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | userRepository.findById(id).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->completeUser(user).toMaybe()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(updateAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap((user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})).flatMap((user)->attributesRepository.findByUserId(user.getId()).toList().map((attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
}));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap((user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap((user)->entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(userToComplete).flatMap((user)->roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})).flatMap
1 | Single | just | METHOD_INVOCATION | Single.just(userToComplete).flatMap
1 | Single | METHOD_INVOCATION | Single.just(userToComplete)
1 | Single | map | METHOD_INVOCATION | (user)->roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map((roles)->{
    user.setRoles(roles);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList().map
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Role::getRole).toList
1 | Single | map | METHOD_INVOCATION | (user)->entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList().map((entitlements)->{
    user.setEntitlements(entitlements);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList().map
1 | Flowable | map | METHOD_INVOCATION | entitlementRepository.findByUserId(user.getId()).map(JdbcOrganizationUser.Entitlements::getEntitlement).toList
1 | Single | map | METHOD_INVOCATION | (user)->addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map((addresses)->{
    user.setAddresses(addresses);
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList().map
1 | Flowable | map | METHOD_INVOCATION | addressesRepository.findByUserId(user.getId()).map((jdbcAddr)->mapper.map(jdbcAddr, Address.class)).toList
1 | Single | map | METHOD_INVOCATION | (user)->attributesRepository.findByUserId(user.getId()).toList().map((attributes)->{
    Map<String, List<Attribute>> map = attributes.stream().collect(StreamUtils.toMultiMap(JdbcOrganizationUser.Attribute::getUserField, (attr)->mapper.map(attr, Attribute.class)));
    if (map.containsKey(ATTRIBUTE_USER_FIELD_EMAIL)) {
        user.setEmails(map.get(ATTRIBUTE_USER_FIELD_EMAIL));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHONE)) {
        user.setPhoneNumbers(map.get(ATTRIBUTE_USER_FIELD_PHONE));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_PHOTO)) {
        user.setPhotos(map.get(ATTRIBUTE_USER_FIELD_PHOTO));
    }
    if (map.containsKey(ATTRIBUTE_USER_FIELD_IM)) {
        user.setIms(map.get(ATTRIBUTE_USER_FIELD_IM));
    }
    return user;
})
1 | Flowable | toList | METHOD_INVOCATION | attributesRepository.findByUserId(user.getId()).toList().map
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.alertNotifierRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all()).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve AlertNotifier with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error));
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all()).map(this::toEntity).doOnError
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | map | METHOD_INVOCATION | return monoToMaybe(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("id").is(id))).as(JdbcAuthenticationFlowContext.class).one()).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | map | METHOD_INVOCATION | return monoToMaybe(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).first()).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | map | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcAuthenticationFlowContext.class).matching(from(where("transaction_id").is(transactionId).and(where("expire_at").greaterThan(now)))).orderBy(Sort.Order.desc("version")).as(JdbcAuthenticationFlowContext.class).all()).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertAction).flatMap((i)->this.findById(id).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(id).toSingle()
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAuthenticationFlowContext.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge authentication contexts", error));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMapSingleElement | METHOD_INVOCATION | return flowRepository.findById(id).map(this::toEntity).flatMapSingleElement(this::completeFlow);
1 | Maybe | map | METHOD_INVOCATION | flowRepository.findById(id).map(this::toEntity).flatMapSingleElement
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(updateAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return flowRepository.findById(referenceType.name(), referenceId, id).map(this::toEntity).flatMap((flow)->completeFlow(flow).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | flowRepository.findById(referenceType.name(), referenceId, id).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (flow)->completeFlow(flow).toMaybe()
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return flowRepository.findAll(referenceType.name(), referenceId).map(this::toEntity).flatMap((flow)->completeFlow(flow).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | flowRepository.findAll(referenceType.name(), referenceId).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (flow)->completeFlow(flow).toFlowable()
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return flowRepository.findByApplication(referenceType.name(), referenceId, application).map(this::toEntity).flatMap((flow)->completeFlow(flow).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | flowRepository.findByApplication(referenceType.name(), referenceId, application).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (flow)->completeFlow(flow).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all()).toList().map((steps)->{
    if (steps != null && !steps.isEmpty()) {
        List<Step> preSteps = new ArrayList<>();
        List<Step> postSteps = new ArrayList<>();
        for (JdbcFlow.JdbcStep jStep : steps) {
            if (jStep.getStage().equals(JdbcFlow.StepType.pre.name())) {
                preSteps.add(convertToStep(jStep));
            } else if (jStep.getStage().equals(JdbcFlow.StepType.post.name())) {
                postSteps.add(convertToStep(jStep));
            } else {
                LOGGER.debug("Unknown step type \'{}\', ignore it!", jStep.getStage());
            }
        }
        if (!preSteps.isEmpty()) {
            flow.setPre(preSteps);
        }
        if (!postSteps.isEmpty()) {
            flow.setPost(postSteps);
        }
    }
    return flow;
});
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcFlow.JdbcStep.class).matching(from(where("flow_id").is(flow.getId()))).orderBy(Sort.Order.asc("stage_order")).as(JdbcFlow.JdbcStep.class).all()).toList().map
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | final Flowable<Environment> result = environmentRepository.findAll().map(this::toEnvironment).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle(this::retrieveHrids)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | environmentRepository.findAll().map(this::toEnvironment).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle
1 | Flowable | map | METHOD_INVOCATION | environmentRepository.findAll().map(this::toEnvironment).flatMapSingle
1 | Flowable | doOnError | METHOD_INVOCATION | return result.doOnError((error)->LOGGER.error("unable to retrieve all environments", error));
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | final Flowable<Environment> result = environmentRepository.findByOrganization(organizationId).map(this::toEnvironment).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle(this::retrieveHrids)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | environmentRepository.findByOrganization(organizationId).map(this::toEnvironment).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle
1 | Flowable | map | METHOD_INVOCATION | environmentRepository.findByOrganization(organizationId).map(this::toEnvironment).flatMapSingle
1 | Flowable | doOnError | METHOD_INVOCATION | return result.doOnError((error)->LOGGER.error("unable to retrieve Environments with organizationId {}", organizationId, error));
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return environmentRepository.findByIdAndOrganization(id, organizationId).map(this::toEnvironment).flatMap((environment)->retrieveDomainRestrictions(environment).toMaybe()).flatMap((environment)->retrieveHrids(environment).toMaybe());
1 | Maybe | flatMap | METHOD_INVOCATION | environmentRepository.findByIdAndOrganization(id, organizationId).map(this::toEnvironment).flatMap((environment)->retrieveDomainRestrictions(environment).toMaybe()).flatMap
1 | Maybe | map | METHOD_INVOCATION | environmentRepository.findByIdAndOrganization(id, organizationId).map(this::toEnvironment).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (environment)->retrieveDomainRestrictions(environment).toMaybe()
1 | Single | toMaybe | METHOD_INVOCATION | (environment)->retrieveHrids(environment).toMaybe()
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | flatMap | METHOD_INVOCATION | Maybe<Environment> result = environmentRepository.findById(id).map(this::toEnvironment).flatMap((environment)->retrieveDomainRestrictions(environment).toMaybe()).flatMap((environment)->retrieveHrids(environment).toMaybe())
1 | Maybe | flatMap | METHOD_INVOCATION | environmentRepository.findById(id).map(this::toEnvironment).flatMap((environment)->retrieveDomainRestrictions(environment).toMaybe()).flatMap
1 | Maybe | map | METHOD_INVOCATION | environmentRepository.findById(id).map(this::toEnvironment).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (environment)->retrieveDomainRestrictions(environment).toMaybe()
1 | Single | toMaybe | METHOD_INVOCATION | (environment)->retrieveHrids(environment).toMaybe()
1 | Maybe | doOnError | METHOD_INVOCATION | return result.doOnError((error)->LOGGER.error("unable to retrieve Environment with id {}", id, error));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return domainRestrictionRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.DomainRestriction::getDomainRestriction).toList().doOnSuccess((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size())).doOnSuccess(environment::setDomainRestrictions).map((domainRestriction)->environment);
1 | Single | doOnSuccess | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.DomainRestriction::getDomainRestriction).toList().doOnSuccess((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size())).doOnSuccess(environment::setDomainRestrictions).map
1 | Single | doOnSuccess | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.DomainRestriction::getDomainRestriction).toList().doOnSuccess((domainRestrictions)->LOGGER.debug("findById({}) fetch {} domainRestrictions", environment.getId(), domainRestrictions.size())).doOnSuccess
1 | Flowable | toList | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.DomainRestriction::getDomainRestriction).toList().doOnSuccess
1 | Flowable | map | METHOD_INVOCATION | domainRestrictionRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.DomainRestriction::getDomainRestriction).toList
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return hridsRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.Hrid::getHrid).toList().doOnSuccess((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size())).doOnSuccess(environment::setHrids).map((hrids)->environment);
1 | Single | doOnSuccess | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.Hrid::getHrid).toList().doOnSuccess((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size())).doOnSuccess(environment::setHrids).map
1 | Single | doOnSuccess | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.Hrid::getHrid).toList().doOnSuccess((hrids)->LOGGER.debug("findById({}) fetch {} hrids", environment.getId(), hrids.size())).doOnSuccess
1 | Flowable | toList | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.Hrid::getHrid).toList().doOnSuccess
1 | Flowable | map | METHOD_INVOCATION | hridsRepository.findAllByEnvironmentId(environment.getId()).map(JdbcEnvironment.Hrid::getHrid).toList
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.just(entity).flatMap((app)->identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList().map((idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
})).flatMap((app)->factorRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Factor::getFactor).toList().map((factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
})).flatMap((app)->scopeRepository.findAllByApplicationId(app.getId()).map((jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class)).toList().map((scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
}));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(entity).flatMap((app)->identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList().map((idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
})).flatMap((app)->factorRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Factor::getFactor).toList().map((factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
})).flatMap
1 | Single | flatMap | METHOD_INVOCATION | Single.just(entity).flatMap((app)->identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList().map((idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
})).flatMap
1 | Single | just | METHOD_INVOCATION | Single.just(entity).flatMap
1 | Single | METHOD_INVOCATION | Single.just(entity)
1 | Single | map | METHOD_INVOCATION | (app)->identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList().map((idps)->{
    app.setIdentities(new HashSet<>(idps));
    return app;
})
1 | Flowable | toList | METHOD_INVOCATION | identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList().map
1 | Flowable | map | METHOD_INVOCATION | identityRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Identity::getIdentity).toList
1 | Single | map | METHOD_INVOCATION | (app)->factorRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Factor::getFactor).toList().map((factors)->{
    app.setFactors(new HashSet<>(factors));
    return app;
})
1 | Flowable | toList | METHOD_INVOCATION | factorRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Factor::getFactor).toList().map
1 | Flowable | map | METHOD_INVOCATION | factorRepository.findAllByApplicationId(app.getId()).map(JdbcApplication.Factor::getFactor).toList
1 | Single | map | METHOD_INVOCATION | (app)->scopeRepository.findAllByApplicationId(app.getId()).map((jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class)).toList().map((scopeSettings)->{
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        app.getSettings().getOauth().setScopeSettings(scopeSettings);
    }
    return app;
})
1 | Flowable | toList | METHOD_INVOCATION | scopeRepository.findAllByApplicationId(app.getId()).map((jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class)).toList().map
1 | Flowable | map | METHOD_INVOCATION | scopeRepository.findAllByApplicationId(app.getId()).map((jdbcScopeSettings)->mapper.map(jdbcScopeSettings, ApplicationScopeSettings.class)).toList
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findAll().map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findAll().map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap((data)->applicationRepository.count().map((total)->new Page<Application>(data, page, total))).doOnError((error)->LOGGER.error("Unable to retrieve all applications (page={}/size={})", page, size, error));
1 | Single | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap((data)->applicationRepository.count().map((total)->new Page<Application>(data, page, total))).doOnError
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | map | METHOD_INVOCATION | (data)->applicationRepository.count().map((total)->new Page<Application>(data, page, total))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findByDomain(domain).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findByDomain(domain).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap((data)->applicationRepository.countByDomain(domain).map((total)->new Page<Application>(data, page, total))).doOnError((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error));
1 | Single | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap((data)->applicationRepository.countByDomain(domain).map((total)->new Page<Application>(data, page, total))).doOnError
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable(), MAX_CONCURRENCY).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | map | METHOD_INVOCATION | (data)->applicationRepository.countByDomain(domain).map((total)->new Page<Application>(data, page, total))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first()).map((total)->new Page<Application>(data, page, total))).doOnError((error)->LOGGER.error("Unable to retrieve all applications with domain {} (page={}/size={})", domain, page, size, error));
1 | Single | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first()).map((total)->new Page<Application>(data, page, total))).doOnError
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | map | METHOD_INVOCATION | (data)->monoToSingle(dbClient.execute(count).bind("domain", domain).bind("value", wildcardMatch ? wildcardQuery.toUpperCase() : query.toUpperCase()).as(Long.class).fetch().first()).map((total)->new Page<Application>(data, page, total))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findByCertificate(certificate).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findByCertificate(certificate).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute("SELECT a.* FROM applications a INNER JOIN application_identities i ON a.id = i.application_id where i." + databaseDialectHelper.toSql(SqlIdentifier.quoted("identity")) + " = :identity").bind("identity", identityProvider).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute("SELECT a.* FROM applications a INNER JOIN application_identities i ON a.id = i.application_id where i." + databaseDialectHelper.toSql(SqlIdentifier.quoted("identity")) + " = :identity").bind("identity", identityProvider).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findAllByFactor(factor).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findAllByFactor(factor).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findAllByDomainAndGrant(domain, extensionGrant).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findAllByDomainAndGrant(domain, extensionGrant).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | flatMap | METHOD_INVOCATION | return applicationRepository.findByIdIn(ids).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | applicationRepository.findByIdIn(ids).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap((app)->completeApplication(app).toFlowable()).firstElement
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(databaseDialectHelper.buildFindApplicationByDomainAndClient()).bind("domain", domain).bind("clientId", clientId).as(JdbcApplication.class).fetch().all()).map(this::toEntity).flatMap
1 | Single | toFlowable | METHOD_INVOCATION | (app)->completeApplication(app).toFlowable()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return applicationRepository.findById(id).map(this::toEntity).flatMap((app)->completeApplication(app).toMaybe());
1 | Maybe | map | METHOD_INVOCATION | applicationRepository.findById(id).map(this::toEntity).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (app)->completeApplication(app).toMaybe()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(insertAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(updateAction.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return monoToCompletable(delete.then(deleteChildEntities(id)).as(trx::transactional)).andThen(applicationRepository.deleteById(id));
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return nodeMonitoringRepository.findByNodeIdAndType(nodeId, type).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return nodeMonitoringRepository.findByTypeAndTimeFrame(type, LocalDateTime.ofInstant(Instant.ofEpochMilli(from), UTC), LocalDateTime.ofInstant(Instant.ofEpochMilli(to), UTC)).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return nodeMonitoringRepository.save(toJdbcEntity(monitoring)).map(this::toEntity);
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> alertNotifierIds = alertTriggerAlertNotifierRepository.findByAlertTriggerId(id).map(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | alertTriggerAlertNotifierRepository.findByAlertTriggerId(id).map(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | alertTriggerAlertNotifierRepository.findByAlertTriggerId(id).map(JdbcAlertTrigger.AlertNotifier::getAlertNotifierId).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return this.alertTriggerRepository.findById(id).map(this::toEntity).zipWith(alertNotifierIds, (alertTrigger,ids)->{
    LOGGER.debug("findById({}) fetch {} alert triggers", alertTrigger.getId(), ids.size());
    alertTrigger.setAlertNotifiers(ids);
    return alertTrigger;
});
1 | Maybe | map | METHOD_INVOCATION | this.alertTriggerRepository.findById(id).map(this::toEntity).zipWith
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return fluxToFlowable(execute.as(String.class).fetch().all()).flatMapMaybe(this::findById).doOnError((error)->LOGGER.error("Unable to retrieve AlertTrigger with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error));
1 | Flowable | flatMapMaybe | METHOD_INVOCATION | fluxToFlowable(execute.as(String.class).fetch().all()).flatMapMaybe(this::findById).doOnError
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.installationRepository.findAll().firstElement().map(this::toEntity);
1 | Flowable | firstElement | METHOD_INVOCATION | this.installationRepository.findAll().firstElement().map
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.installationRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return monoToCompletable(insertSpec.then()).andThen(Single.defer(()->this.findById(installation.getId()).toSingle()));
1 | Single | defer | METHOD_INVOCATION | monoToCompletable(insertSpec.then()).andThen(Single.defer(()->this.findById(installation.getId()).toSingle()))
1 | Single | METHOD_INVOCATION | Single.defer(()->this.findById(installation.getId()).toSingle())
1 | Maybe | toSingle | METHOD_INVOCATION | ()->this.findById(installation.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return monoToCompletable(updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then()).andThen(Single.defer(()->this.findById(installation.getId()).toSingle()));
1 | Single | defer | METHOD_INVOCATION | monoToCompletable(updateSpec.using(Update.from(updateFields)).matching(from(where("id").is(installation.getId()))).then()).andThen(Single.defer(()->this.findById(installation.getId()).toSingle()))
1 | Single | METHOD_INVOCATION | Single.defer(()->this.findById(installation.getId()).toSingle())
1 | Maybe | toSingle | METHOD_INVOCATION | ()->this.findById(installation.getId()).toSingle()
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return accessTokenRepository.findByToken(token, LocalDateTime.now(UTC)).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve AccessToken", error));
1 | Maybe | map | METHOD_INVOCATION | accessTokenRepository.findByToken(token, LocalDateTime.now(UTC)).map(this::toEntity).doOnError
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->accessTokenRepository.findById(accessToken.getId()).map(this::toEntity).toSingle()).doOnError((error)->LOGGER.error("Unable to create accessToken with id {}", accessToken.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->accessTokenRepository.findById(accessToken.getId()).map(this::toEntity).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->accessTokenRepository.findById(accessToken.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | accessTokenRepository.findById(accessToken.getId()).map(this::toEntity).toSingle
1 | Completable | OTHER
1 | Completable | fromMaybe | METHOD_INVOCATION | return Completable.fromMaybe(findByToken(token).flatMap((accessToken)->monoToMaybe(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).map((i)->accessToken)).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error)));
1 | Completable | METHOD_INVOCATION | Completable.fromMaybe(findByToken(token).flatMap((accessToken)->monoToMaybe(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).map((i)->accessToken)).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error)))
1 | Maybe | doOnError | METHOD_INVOCATION | Completable.fromMaybe(findByToken(token).flatMap((accessToken)->monoToMaybe(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).map((i)->accessToken)).doOnError((error)->LOGGER.error("Unable to delete AccessToken", error)))
1 | Maybe | flatMap | METHOD_INVOCATION | findByToken(token).flatMap((accessToken)->monoToMaybe(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).map((i)->accessToken)).doOnError
1 | Maybe | map | METHOD_INVOCATION | (accessToken)->monoToMaybe(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).map((i)->accessToken)
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return Flowable.fromIterable(accessTokens).flatMap((accessToken)->create(accessToken).toFlowable()).ignoreElements().doOnError((error)->LOGGER.error("Unable to bulk load access tokens", error));
1 | Flowable | ignoreElements | METHOD_INVOCATION | Flowable.fromIterable(accessTokens).flatMap((accessToken)->create(accessToken).toFlowable()).ignoreElements().doOnError
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromIterable(accessTokens).flatMap((accessToken)->create(accessToken).toFlowable()).ignoreElements
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(accessTokens).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(accessTokens)
1 | Single | toFlowable | METHOD_INVOCATION | (accessToken)->create(accessToken).toFlowable()
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {} and subject {}", clientId, subject, error));
1 | Flowable | toObservable | METHOD_INVOCATION | accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError
1 | Flowable | map | METHOD_INVOCATION | accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC)).map(this::toEntity).toObservable
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {}", clientId, error));
1 | Flowable | toObservable | METHOD_INVOCATION | accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError
1 | Flowable | map | METHOD_INVOCATION | accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC)).map(this::toEntity).toObservable
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with authorization code {}", authorizationCode, error));
1 | Flowable | toObservable | METHOD_INVOCATION | accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC)).map(this::toEntity).toObservable().doOnError
1 | Flowable | map | METHOD_INVOCATION | accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC)).map(this::toEntity).toObservable
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId))).then()).doOnError((error)->LOGGER.error("Unable to delete access tokens with subject {}", userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)).and(where("client").is(clientId)))).then()).doOnError((error)->LOGGER.error("Unable to delete access token with domain {}, client {} and subject {}", domainId, clientId, userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAccessToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)))).then()).doOnError((error)->LOGGER.error("Unable to delete access tokens with domain {} and subject {}", domainId, userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAccessToken.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge access tokens", error));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return tagRepository.findById(id, organizationId).map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return tagRepository.findByOrganization(organizationId).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return tagRepository.findById(id).map(this::toEntity);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return tagRepository.save(toJdbcEntity(item)).map(this::toEntity);
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return refreshTokenRepository.findByToken(token, LocalDateTime.now(UTC)).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve RefreshToken", error));
1 | Maybe | map | METHOD_INVOCATION | refreshTokenRepository.findByToken(token, LocalDateTime.now(UTC)).map(this::toEntity).doOnError
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->refreshTokenRepository.findById(refreshToken.getId()).map(this::toEntity).toSingle()).doOnError((error)->LOGGER.error("Unable to create refreshToken with id {}", refreshToken.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->refreshTokenRepository.findById(refreshToken.getId()).map(this::toEntity).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->refreshTokenRepository.findById(refreshToken.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | refreshTokenRepository.findById(refreshToken.getId()).map(this::toEntity).toSingle
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return Flowable.fromIterable(refreshTokens).flatMap((refreshToken)->create(refreshToken).toFlowable()).ignoreElements().doOnError((error)->LOGGER.error("Unable to bulk load refresh tokens", error));
1 | Flowable | ignoreElements | METHOD_INVOCATION | Flowable.fromIterable(refreshTokens).flatMap((refreshToken)->create(refreshToken).toFlowable()).ignoreElements().doOnError
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromIterable(refreshTokens).flatMap((refreshToken)->create(refreshToken).toFlowable()).ignoreElements
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(refreshTokens).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(refreshTokens)
1 | Single | toFlowable | METHOD_INVOCATION | (refreshToken)->create(refreshToken).toFlowable()
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated()).doOnError((error)->LOGGER.error("Unable to delete RefreshToken", error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId))).then()).doOnError((error)->LOGGER.error("Unable to delete refresh token with subject {}", userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)).and(where("client").is(clientId)))).then()).doOnError((error)->LOGGER.error("Unable to delete refresh token with domain {}, client {} and subject {}", domainId, clientId, userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRefreshToken.class).matching(from(where("subject").is(userId).and(where("domain").is(domainId)))).then()).doOnError((error)->LOGGER.error("Unable to delete refresh token with domain {} and subject {}", domainId, userId, error));
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcRefreshToken.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge refresh tokens", error));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.certificateRepository.findAll().map(this::toEntity);
1 | Flowable | RETURN_TYPE
1 | Flowable | map | METHOD_INVOCATION | return this.certificateRepository.findByDomain(domain).map(this::toEntity);
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return this.certificateRepository.findById(id).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve Certificate with id {}", id, error));
1 | Maybe | map | METHOD_INVOCATION | this.certificateRepository.findById(id).map(this::toEntity).doOnError
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError((error)->LOGGER.error("unable to create certificate with id {}", item.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError((error)->LOGGER.error("unable to update certificate with id {}", item.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(action).flatMap((i)->this.findById(item.getId()).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return this.certificateRepository.deleteById(id).doOnError((error)->LOGGER.error("Unable to delete Certificate with id {}", id, error));
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return monoToSingle(insertAction).flatMap((i)->authorizationCodeRepository.findById(authorizationCode.getId()).map(this::toEntity).toSingle()).doOnError((error)->LOGGER.error("Unable to create authorizationCode with id {}", authorizationCode.getId(), error));
1 | Single | flatMap | METHOD_INVOCATION | monoToSingle(insertAction).flatMap((i)->authorizationCodeRepository.findById(authorizationCode.getId()).map(this::toEntity).toSingle()).doOnError
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->authorizationCodeRepository.findById(authorizationCode.getId()).map(this::toEntity).toSingle()
1 | Maybe | map | METHOD_INVOCATION | authorizationCodeRepository.findById(authorizationCode.getId()).map(this::toEntity).toSingle
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return authorizationCodeRepository.findById(id).map(this::toEntity).flatMap((authCode)->monoToMaybe(dbClient.delete().from(JdbcAuthorizationCode.class).matching(from(where("id").is(id))).fetch().rowsUpdated()).map((i)->authCode));
1 | Maybe | map | METHOD_INVOCATION | authorizationCodeRepository.findById(id).map(this::toEntity).flatMap
1 | Maybe | map | METHOD_INVOCATION | (authCode)->monoToMaybe(dbClient.delete().from(JdbcAuthorizationCode.class).matching(from(where("id").is(id))).fetch().rowsUpdated()).map((i)->authCode)
1 | Maybe | RETURN_TYPE
1 | Maybe | doOnError | METHOD_INVOCATION | return authorizationCodeRepository.findByCode(code, LocalDateTime.now(UTC)).map(this::toEntity).doOnError((error)->LOGGER.error("Unable to retrieve AuthorizationCode with code {}", code));
1 | Maybe | map | METHOD_INVOCATION | authorizationCodeRepository.findByCode(code, LocalDateTime.now(UTC)).map(this::toEntity).doOnError
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return monoToCompletable(dbClient.delete().from(JdbcAuthorizationCode.class).matching(where("expire_at").lessThan(now)).then()).doOnError((error)->LOGGER.error("Unable to purge authorization tokens", error));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return roleRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findByReference(referenceType.name(), referenceId).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList().flatMap((content)->roleRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<Role>(content, page, count)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.select().from(JdbcRole.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("name")).page(PageRequest.of(page, size)).as(JdbcRole.class).all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | map | METHOD_INVOCATION | (content)->roleRepository.countByReference(referenceType.name(), referenceId).map((count)->new Page<Role>(content, page, count))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList().flatMap((data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<Role>(data, page, total)));
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList().flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()).toList
1 | Flowable | map | METHOD_INVOCATION | fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcRole.class).fetch().all()).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | map | METHOD_INVOCATION | (data)->monoToSingle(dbClient.execute(count).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(Long.class).fetch().first()).map((total)->new Page<Role>(data, page, total))
1 | Flowable | RETURN_TYPE
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | flatMap | METHOD_INVOCATION | return roleRepository.findByIdIn(ids).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable());
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findByIdIn(ids).map(this::toEntity).flatMap
1 | Maybe | toFlowable | METHOD_INVOCATION | (role)->completeWithScopes(Maybe.just(role), role.getId()).toFlowable()
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | completeWithScopes(roleRepository.findById(referenceType.name(), referenceId, role).map(this::toEntity), role)
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType(referenceType.name(), referenceId, name, assignableType.name()).map(this::toEntity).flatMap((role)->completeWithScopes(Maybe.just(role), role.getId()));
1 | Maybe | map | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType(referenceType.name(), referenceId, name, assignableType.name()).map(this::toEntity).flatMap
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapMaybe | METHOD_INVOCATION | return roleRepository.findByNamesAndAssignableType(referenceType.name(), referenceId, names, assignableType.name()).map(this::toEntity).flatMapMaybe((role)->completeWithScopes(Maybe.just(role), role.getId()));
1 | Flowable | map | METHOD_INVOCATION | roleRepository.findByNamesAndAssignableType(referenceType.name(), referenceId, names, assignableType.name()).map(this::toEntity).flatMapMaybe
1 | Maybe | just | METHOD_INVOCATION | completeWithScopes(Maybe.just(role), role.getId())
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | completeWithScopes(roleRepository.findById(id).map(this::toEntity), id)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(action.as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return monoToSingle(deleteScopes.then(action).as(trx::transactional)).flatMap((i)->this.findById(item.getId()).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (i)->this.findById(item.getId()).toSingle()
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | toMaybe | METHOD_INVOCATION | Maybe<List<String>> scopes = oauthScopeRepository.findAllByRole(id).map(JdbcRole.OAuthScope::getScope).toList().toMaybe()
1 | Flowable | toList | METHOD_INVOCATION | oauthScopeRepository.findAllByRole(id).map(JdbcRole.OAuthScope::getScope).toList().toMaybe
1 | Flowable | map | METHOD_INVOCATION | oauthScopeRepository.findAllByRole(id).map(JdbcRole.OAuthScope::getScope).toList
1 | Maybe | zipWith | METHOD_INVOCATION | return maybeRole.zipWith(scopes, (role,scope)->{
    LOGGER.debug("findById({}) fetch {} oauth scopes", id, scope == null ? 0 : scope.size());
    role.setOauthScopes(scope);
    return role;
});
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.create(attemptExpired).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.create(attemptExpired2).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.create(attemptNotExpired).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(repository.findById(attemptExpired.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(repository.findById(attemptExpired2.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(repository.findById(attemptNotExpired.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = repository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(repository.findById(attemptNotExpired.getId()).blockingGet())
1 | Single | test | METHOD_INVOCATION | parRepository.create(object1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | parRepository.create(object2).test().awaitTerminalEvent
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(parRepository.findById(object1.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(parRepository.findById(object2.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = parRepository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(parRepository.findById(object1.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(parRepository.findById(object2.getId()).blockingGet())
1 | Single | test | METHOD_INVOCATION | requestObjectRepository.create(object1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | requestObjectRepository.create(object2).test().awaitTerminalEvent
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(requestObjectRepository.findById(object1.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(requestObjectRepository.findById(object2.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = requestObjectRepository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(requestObjectRepository.findById(object1.getId()).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(requestObjectRepository.findById(object2.getId()).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken("my-token").blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(accessTokenRepository.findByToken("my-token2").blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = accessTokenRepository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(accessTokenRepository.findByToken("my-token").blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(accessTokenRepository.findByToken("my-token2").blockingGet())
1 | Flowable | IMPORT
1 | Flowable | blockingFirst | METHOD_INVOCATION | io.r2dbc.spi.Connection connection = Flowable.fromPublisher(connectionFactory.create()).blockingFirst()
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(connectionFactory.create()).blockingFirst
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(connectionFactory.create())
1 | Flowable | blockingSubscribe | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement("delete from " + table).execute()).subscribeOn(Schedulers.single()).blockingSubscribe();
1 | Flowable | subscribeOn | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement("delete from " + table).execute()).subscribeOn(Schedulers.single()).blockingSubscribe
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement("delete from " + table).execute()).subscribeOn
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement("delete from " + table).execute())
1 | Single | test | METHOD_INVOCATION | scopeApprovalRepository.create(scope1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | scopeApprovalRepository.create(scope2).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = scopeApprovalRepository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | testObserver = scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken("my-token").blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(refreshTokenRepository.findByToken("my-token2").blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = refreshTokenRepository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(refreshTokenRepository.findByToken("my-token").blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(refreshTokenRepository.findByToken("my-token2").blockingGet())
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.create(authorizationCode).test()
1 | Single | test | METHOD_INVOCATION | testObserver = authorizationCodeRepository.create(authorizationCodeExpired).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(authorizationCodeRepository.findByCode(code).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(authorizationCodeRepository.findByCode(codeExpired).blockingGet())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = authorizationCodeRepository.purgeExpiredData().test()
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNotNull(authorizationCodeRepository.findByCode(code).blockingGet())
1 | Maybe | blockingGet | METHOD_INVOCATION | assertNull(authorizationCodeRepository.findByCode(codeExpired).blockingGet())
1 | Single | blockingGet | METHOD_INVOCATION | PermissionTicket ptValid = repository.create(permissionTicketNoExpireAt).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | PermissionTicket ptValid2 = repository.create(permissionTicket).blockingGet()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> test = repository.create(permissionTicketExpired).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.findById(ptValid.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid2.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = repository.purgeExpiredData().test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid2.getId()).test()
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | enrichProfile(context).subscribe((user)->{
    LOGGER.debug("User profile updated", user.getId());
    policyChain.doNext(request, response);
}, (error)->{
    if (configuration.isExitOnError()) {
        LOGGER.warn("Update of user profile failed!", error.getMessage());
        policyChain.failWith(PolicyResult.failure(errorMessage));
    } else {
        LOGGER.info("Update of user profile failed!", error.getMessage());
        policyChain.doNext(request, response);
    }
});
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(Single.error(new RuntimeException("Exception thrown for test")))
1 | Single | METHOD_INVOCATION | Single.error(new RuntimeException("Exception thrown for test"))
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(request);
1 | Maybe | METHOD_INVOCATION | Maybe.just(request)
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.<Request>empty();
1 | Maybe | METHOD_INVOCATION | Maybe.<Request>empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new Page<>(Collections.emptyList(), page, size));
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptyList(), page, size))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(result);
1 | Single | METHOD_INVOCATION | Single.just(result)
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.singletonMap("data", 0L));
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonMap("data", 0L))
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeApprovalRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval by id: {}", id);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUser(domain, user).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {} and user: {}", domain, user);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s and user: %s", domain, user), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, client).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval for domain: {}, user: {} and client: {}", domain, user, client);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval for domain: %s, user: %s and client: %s", domain, user, client), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList().doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to save consent for domain: {}, client: {} and user: {} ", domain, client.getId(), approvals.get(0).getUserId());
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex));
});
1 | Single | doOnError | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList().doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable))).onErrorResumeNext
1 | Single | doOnSuccess | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList().doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals))).doOnError
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList().doOnSuccess
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(approvals)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((user)->scopeApprovalRepository.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId))).flatMapCompletable((scopeApproval)->scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to revoke approval for scope: {}", consentId);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((user)->scopeApprovalRepository.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId))).flatMapCompletable((scopeApproval)->scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | (user)->scopeApprovalRepository.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId))).flatMapCompletable((scopeApproval)->scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeApprovalRepository.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | scopeApprovalRepository.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeApprovalNotFoundException(consentId))
1 | Completable | andThen | METHOD_INVOCATION | (scopeApproval)->scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))
1 | Completable | doOnError | METHOD_INVOCATION | scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen
1 | Completable | doOnComplete | METHOD_INVOCATION | scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))
1 | Completable | METHOD_INVOCATION | Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable((user1)->scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {} and user : {}", domain, user);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable((user1)->scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user)))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Completable | andThen | METHOD_INVOCATION | (user1)->scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user)))
1 | Single | flatMapCompletable | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable
1 | Completable | doOnError | METHOD_INVOCATION | (scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user)))
1 | Completable | METHOD_INVOCATION | Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable((user1)->scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {}, user: {} and client: {}", domain, user, clientId);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable((user1)->scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user)))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | userService.findById(user).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Completable | andThen | METHOD_INVOCATION | (user1)->scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user)))
1 | Single | flatMapCompletable | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable
1 | Completable | doOnError | METHOD_INVOCATION | (scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add).flatMapCompletable((scopeApprovals)->scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(scopeApprovals))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable)))).andThen(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user)))
1 | Completable | METHOD_INVOCATION | Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidPathException("Path must not be null or empty"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidPathException("Path must not be null or empty"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidPathException("Path [" + path + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidPathException("Path [" + path + "] is invalid"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidPathException("Path must start with a \'/\'"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidPathException("Path must start with a \'/\'"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidPathException("Path [" + path + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidPathException("Path [" + path + "] is invalid"))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | roleObs = roleService.findById(user.getReferenceType(), user.getReferenceId(), roleId).toMaybe().onErrorResumeNext((throwable)->{
    if (throwable instanceof RoleNotFoundException) {
        return roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).toMaybe().switchIfEmpty(defaultRoleObs).onErrorResumeNext(defaultRoleObs);
    } else {
        return defaultRoleObs;
    }
})
1 | Single | toMaybe | METHOD_INVOCATION | roleService.findById(user.getReferenceType(), user.getReferenceId(), roleId).toMaybe().onErrorResumeNext
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).toMaybe().switchIfEmpty(defaultRoleObs).onErrorResumeNext(defaultRoleObs);
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).toMaybe().switchIfEmpty(defaultRoleObs).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId).toMaybe().switchIfEmpty
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return roleObs.switchIfEmpty(Maybe.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMapCompletable((role)->{
    membership.setRoleId(role.getId());
    return membershipService.addOrUpdate(user.getReferenceId(), membership).ignoreElement();
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleObs.switchIfEmpty(Maybe.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | roleObs.switchIfEmpty(Maybe.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId()))))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("Cannot add user membership to organization %s. Unable to find ORGANIZATION_USER role", user.getReferenceId())))
1 | Single | ignoreElement | METHOD_INVOCATION | return membershipService.addOrUpdate(user.getReferenceId(), membership).ignoreElement();
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(user).andThen(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
}).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
}));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(user).andThen(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
}).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
}))
1 | Single | flatMap | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
}).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(user1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(user1)
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByIdIn(ids).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users by ids {}", userIds, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by ids %s", userIds), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findAll(referenceType, referenceId, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users by {} {}", referenceType, referenceId, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().search(referenceType, referenceId, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to search users for {} {} and query {}", referenceType, referenceId, query, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().search(referenceType, referenceId, filterCriteria, page, size).onErrorResumeNext((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return Single.error(new InvalidParameterException(ex.getMessage()));
    }
    LOGGER.error("An error occurs while trying to search users for {} {} and filter {}", referenceType, referenceId, filterCriteria, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidParameterException(ex.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidParameterException(ex.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new UserNotFoundException(id)));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
}).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex))
1 | Single | error | METHOD_INVOCATION | getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new UserNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(id))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByUsernameAndSource(referenceType, referenceId, username, source).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its username: {} for the {} {}  and source {}", username, referenceType, referenceId, source, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByExternalIdAndSource(referenceType, referenceId, externalId, source).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its externalId: {} for the {} {} and source {}", externalId, referenceType, referenceId, source, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return create(user);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to create a user", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
    }
});
1 | Single | flatMap | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return create(user);
    }
}).onErrorResumeNext
1 | Maybe | isEmpty | METHOD_INVOCATION | getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException(newUser.getUsername()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userValidator.validate(user).andThen(getUserRepository().create(user)).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | userValidator.validate(user).andThen(getUserRepository().create(user)).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext
1 | Completable | andThen | METHOD_INVOCATION | userValidator.validate(user).andThen(getUserRepository().create(user)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(user1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(user1)
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapSingle((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return update(oldUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | getUserRepository().findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapSingle((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return update(oldUser);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | getUserRepository().findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | getUserRepository().findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new UserNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen(getUserRepository().delete(userId)).andThen(eventService.create(event).ignoreElement());
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | getUserRepository().findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen(getUserRepository().delete(userId)).andThen(eventService.create(event).ignoreElement());
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | getUserRepository().findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | getUserRepository().findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Completable | andThen | METHOD_INVOCATION | return credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen(getUserRepository().delete(userId)).andThen(eventService.create(event).ignoreElement());
1 | Completable | andThen | METHOD_INVOCATION | credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen(getUserRepository().delete(userId)).andThen
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen
1 | Single | ignoreElement | METHOD_INVOCATION | credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId()).flatMapCompletable((credential)->credentialService.delete(credential.getId())).andThen(getUserRepository().delete(userId)).andThen(eventService.create(event).ignoreElement())
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupService.findByMember(user.getId()).toList().flatMap((groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return roleService.findByIdIn(new ArrayList<>(roles)).map((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        });
    }
    return Single.just(user);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to enhance user {}", user.getId(), ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | groupService.findByMember(user.getId()).toList().flatMap((groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return roleService.findByIdIn(new ArrayList<>(roles)).map((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        });
    }
    return Single.just(user);
}).onErrorResumeNext
1 | Flowable | toList | METHOD_INVOCATION | groupService.findByMember(user.getId()).toList().flatMap
1 | Single | map | METHOD_INVOCATION | return roleService.findByIdIn(new ArrayList<>(roles)).map((roles1)->{
    user.setRolesPermissions(roles1);
    return user;
});
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("Username [%s] is not a valid value", user.getUsername())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("Username [%s] is not a valid value", user.getUsername())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new EmailFormatInvalidException(user.getEmail()));
1 | Completable | METHOD_INVOCATION | Completable.error(new EmailFormatInvalidException(user.getEmail()))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("First name [%s] is not a valid value", user.getFirstName())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("First name [%s] is not a valid value", user.getFirstName())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("Last name [%s] is not a valid value", user.getLastName())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("Last name [%s] is not a valid value", user.getLastName())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("Display name [%s] is not a valid value", user.getDisplayName())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("Display name [%s] is not a valid value", user.getDisplayName())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("Nick name [%s] is not a valid value", user.getNickName())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("Nick name [%s] is not a valid value", user.getNickName())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException(String.format("External id [%s] is not a valid value", user.getExternalId())));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException(String.format("External id [%s] is not a valid value", user.getExternalId())))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return organizationRepository.findById(id).switchIfEmpty(Single.error(new OrganizationNotFoundException(id)));
1 | Single | error | METHOD_INVOCATION | organizationRepository.findById(id).switchIfEmpty(Single.error(new OrganizationNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new OrganizationNotFoundException(id))
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return organizationRepository.count().filter((aLong)->aLong == 0).flatMap((aLong)->createInternal(organization, null).toMaybe());
1 | Single | filter | METHOD_INVOCATION | organizationRepository.count().filter((aLong)->aLong == 0).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (aLong)->createInternal(organization, null).toMaybe()
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return organizationRepository.findById(organizationId).flatMap((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return updateInternal(toUpdate, byUser, organization).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
}));
1 | Maybe | flatMap | METHOD_INVOCATION | organizationRepository.findById(organizationId).flatMap((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return updateInternal(toUpdate, byUser, organization).toMaybe();
}).switchIfEmpty
1 | Single | toMaybe | METHOD_INVOCATION | return updateInternal(toUpdate, byUser, organization).toMaybe();
1 | Single | defer | METHOD_INVOCATION | organizationRepository.findById(organizationId).flatMap((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return updateInternal(toUpdate, byUser, organization).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
}))
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
})
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findById(organizationId).flatMap((organization)->updateInternal(patchOrganization.patch(organization), updatedBy, organization));
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return organizationRepository.create(toCreate).flatMap((createdOrganization)->Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen(Single.just(createdOrganization))).doOnSuccess((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner))).doOnError((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(toCreate).principal(owner).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | organizationRepository.create(toCreate).flatMap((createdOrganization)->Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen(Single.just(createdOrganization))).doOnSuccess((organization)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_CREATED).organization(organization).principal(owner))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | organizationRepository.create(toCreate).flatMap((createdOrganization)->Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen(Single.just(createdOrganization))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (createdOrganization)->Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen(Single.just(createdOrganization))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen
1 | Completable | METHOD_INVOCATION | Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId()))
1 | Flowable | ignoreElements | METHOD_INVOCATION | Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId()))
1 | Single | just | METHOD_INVOCATION | Completable.mergeArrayDelayError(entrypointService.createDefaults(createdOrganization).ignoreElements(), roleService.createDefaultRoles(createdOrganization.getId())).andThen(Single.just(createdOrganization))
1 | Single | METHOD_INVOCATION | Single.just(createdOrganization)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return organizationRepository.update(organization).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous))).doOnError((throwable)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(previous).principal(updatedBy).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | organizationRepository.update(organization).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(OrganizationAuditBuilder.class).type(EventType.ORGANIZATION_UPDATED).organization(updated).principal(updatedBy).oldValue(previous))).doOnError
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return membershipRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find membership by id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return membershipRepository.findByReference(referenceId, referenceType).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by reference id {} and reference type {}", referenceId, referenceType, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by reference id %s and reference type %s", referenceId, referenceType), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return membershipRepository.findByMember(memberId, memberType).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find memberships by member id {} and member type {}", memberId, memberType, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find memberships by member id %s and member type %s", memberId, memberType), ex))
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return checkMember(organizationId, membership).andThen(checkRole(organizationId, membership)).andThen(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return createInternal(newMembership, principal);
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return membershipRepository.update(updateMembership).flatMap((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(membership1));
        }).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return Single.error(ex);
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
        }).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)));
    }
}));
1 | Completable | andThen | METHOD_INVOCATION | checkMember(organizationId, membership).andThen(checkRole(organizationId, membership)).andThen
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkMember(organizationId, membership).andThen(checkRole(organizationId, membership)).andThen(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return createInternal(newMembership, principal);
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return membershipRepository.update(updateMembership).flatMap((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(membership1));
        }).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return Single.error(ex);
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
        }).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)));
    }
}))
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId()).map(Optional::of).defaultIfEmpty
1 | Single | doOnError | METHOD_INVOCATION | return membershipRepository.update(updateMembership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
}).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | membershipRepository.update(updateMembership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
}).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | membershipRepository.update(updateMembership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | membershipRepository.update(updateMembership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(membership1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(membership1)
1 | Single | METHOD_INVOCATION | Single.just(membership1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Single.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))).flatMap((role)->findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).firstElement().switchIfEmpty(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
})));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Single.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))).flatMap
1 | Single | error | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM).switchIfEmpty(Single.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name())))
1 | Single | METHOD_INVOCATION | Single.error(new RoleNotFoundException(SystemRole.PLATFORM_ADMIN.name()))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | (role)->findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).firstElement().switchIfEmpty(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
}))
1 | Flowable | firstElement | METHOD_INVOCATION | findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).firstElement().switchIfEmpty
1 | Single | defer | METHOD_INVOCATION | findByCriteria(ReferenceType.PLATFORM, Platform.DEFAULT, criteria).firstElement().switchIfEmpty(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
}))
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
})
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | zip | METHOD_INVOCATION | return Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
});
1 | Single | METHOD_INVOCATION | Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return membershipRepository.findById(membershipId).switchIfEmpty(Maybe.error(new MembershipNotFoundException(membershipId))).flatMapCompletable((membership)->membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))).doOnError((throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete membership: {}", membershipId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | membershipRepository.findById(membershipId).switchIfEmpty(Maybe.error(new MembershipNotFoundException(membershipId))).flatMapCompletable((membership)->membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))).doOnError((throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | membershipRepository.findById(membershipId).switchIfEmpty(Maybe.error(new MembershipNotFoundException(membershipId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | membershipRepository.findById(membershipId).switchIfEmpty(Maybe.error(new MembershipNotFoundException(membershipId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new MembershipNotFoundException(membershipId))
1 | Completable | doOnError | METHOD_INVOCATION | (membership)->membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))).doOnError((throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))).doOnComplete
1 | Completable | fromSingle | METHOD_INVOCATION | membershipRepository.delete(membershipId).andThen(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex))
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable())).ignoreElements().andThen(addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, principal));
1 | Flowable | ignoreElements | METHOD_INVOCATION | this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable())).ignoreElements().andThen
1 | Flowable | switchIfEmpty | METHOD_INVOCATION | this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable())).ignoreElements
1 | Flowable | defer | METHOD_INVOCATION | this.findByCriteria(ReferenceType.DOMAIN, domainId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable()))
1 | Flowable | METHOD_INVOCATION | Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable())
1 | Single | toFlowable | METHOD_INVOCATION | ()->roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable()
1 | Maybe | flatMapSingle | METHOD_INVOCATION | roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}).toFlowable
1 | Completable | OTHER
1 | Flowable | ignoreElements | METHOD_INVOCATION | return this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable())).ignoreElements();
1 | Flowable | switchIfEmpty | METHOD_INVOCATION | this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable())).ignoreElements
1 | Flowable | defer | METHOD_INVOCATION | this.findByCriteria(ReferenceType.ENVIRONMENT, environmentId, criteria).switchIfEmpty(Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable()))
1 | Flowable | METHOD_INVOCATION | Flowable.defer(()->roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable())
1 | Single | toFlowable | METHOD_INVOCATION | ()->roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable()
1 | Maybe | flatMapSingle | METHOD_INVOCATION | roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}).toFlowable
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return membershipRepository.create(membership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex));
}).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | membershipRepository.create(membership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex));
}).doOnSuccess((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_CREATED).membership(membership1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | membershipRepository.create(membership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | membershipRepository.create(membership).flatMap((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(membership1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(membership1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(membership1)
1 | Single | METHOD_INVOCATION | Single.just(membership1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex))
1 | Completable | OTHER
1 | Single | ignoreElement | METHOD_INVOCATION | return orgUserService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId()).ignoreElement();
1 | Single | ignoreElement | METHOD_INVOCATION | return groupService.findById(ReferenceType.ORGANIZATION, organizationId, membership.getMemberId()).ignoreElement();
1 | Completable | OTHER
1 | Single | ignoreElement | METHOD_INVOCATION | return roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
    }
    return Maybe.just(role);
}).filter((role1)->role1.getAssignableType().equals(membership.getReferenceType()) && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId())))).switchIfEmpty(Single.error(new InvalidRoleException("Invalid role"))).ignoreElement();
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
    }
    return Maybe.just(role);
}).filter((role1)->role1.getAssignableType().equals(membership.getReferenceType()) && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId())))).switchIfEmpty(Single.error(new InvalidRoleException("Invalid role"))).ignoreElement
1 | Maybe | filter | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
    }
    return Maybe.just(role);
}).filter((role1)->role1.getAssignableType().equals(membership.getReferenceType()) && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId())))).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
    }
    return Maybe.just(role);
}).filter
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap
1 | Maybe | error | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new RoleNotFoundException(membership.getRoleId()))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"))
1 | Single | flatMapMaybe | METHOD_INVOCATION | return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
1 | Flowable | count | METHOD_INVOCATION | membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe
1 | Flowable | filter | METHOD_INVOCATION | membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count
1 | Maybe | error | METHOD_INVOCATION | count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role)
1 | Maybe | METHOD_INVOCATION | Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType()))
1 | Maybe | just | METHOD_INVOCATION | count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role)
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(role);
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | error | METHOD_INVOCATION | roleService.findById(membership.getRoleId()).switchIfEmpty(Maybe.error(new RoleNotFoundException(membership.getRoleId()))).flatMap((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return Maybe.error(new InvalidRoleException("This role cannot be assigned to a group"));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria).filter((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())).count().flatMapMaybe((count)->count >= 1 ? Maybe.error(new SinglePrimaryOwnerException(membership.getReferenceType())) : Maybe.just(role));
    }
    return Maybe.just(role);
}).filter((role1)->role1.getAssignableType().equals(membership.getReferenceType()) && (role1.isSystem() || (role1.getReferenceType() == ReferenceType.ORGANIZATION && organizationId.equals(role1.getReferenceId())) || (role1.getReferenceType() == membership.getReferenceType() && membership.getReferenceId().equals(role1.getReferenceId())))).switchIfEmpty(Single.error(new InvalidRoleException("Invalid role")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRoleException("Invalid role"))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return factorRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an factor using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return factorRepository.findByDomain(domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find factors by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find factors by domain", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkFactorConfiguration(factor).flatMap(factorRepository::create).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkFactorConfiguration(factor).flatMap(factorRepository::create).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_CREATED).factor(factor1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | checkFactorConfiguration(factor).flatMap(factorRepository::create).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkFactorConfiguration(factor).flatMap(factorRepository::create).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | checkFactorConfiguration(factor).flatMap(factorRepository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(factor1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(factor1)
1 | Single | METHOD_INVOCATION | Single.just(factor1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new FactorConfigurationException(CONFIG_KEY_COUNTRY_CODES, code));
1 | Single | METHOD_INVOCATION | Single.error(new FactorConfigurationException(CONFIG_KEY_COUNTRY_CODES, code))
1 | Single | just | METHOD_INVOCATION | return Single.just(factor);
1 | Single | METHOD_INVOCATION | Single.just(factor)
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return factorRepository.findById(id).switchIfEmpty(Maybe.error(new FactorNotFoundException(id))).flatMapSingle((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(factor1));
    }).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a factor", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | factorRepository.findById(id).switchIfEmpty(Maybe.error(new FactorNotFoundException(id))).flatMapSingle((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(factor1));
    }).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | factorRepository.findById(id).switchIfEmpty(Maybe.error(new FactorNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | factorRepository.findById(id).switchIfEmpty(Maybe.error(new FactorNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FactorNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(factor1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkFactorConfiguration(factorToUpdate).flatMap(factorRepository::update).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(factor1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(factor1)
1 | Single | METHOD_INVOCATION | Single.just(factor1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return factorRepository.findById(factorId).switchIfEmpty(Maybe.error(new FactorNotFoundException(factorId))).flatMapSingle((factor)->applicationService.findByFactor(factorId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return Single.just(factor);
})).flatMapCompletable((factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete factor: {}", factorId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | factorRepository.findById(factorId).switchIfEmpty(Maybe.error(new FactorNotFoundException(factorId))).flatMapSingle((factor)->applicationService.findByFactor(factorId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return Single.just(factor);
})).flatMapCompletable((factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | factorRepository.findById(factorId).switchIfEmpty(Maybe.error(new FactorNotFoundException(factorId))).flatMapSingle((factor)->applicationService.findByFactor(factorId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return Single.just(factor);
})).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | factorRepository.findById(factorId).switchIfEmpty(Maybe.error(new FactorNotFoundException(factorId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | factorRepository.findById(factorId).switchIfEmpty(Maybe.error(new FactorNotFoundException(factorId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FactorNotFoundException(factorId))
1 | Single | flatMap | METHOD_INVOCATION | (factor)->applicationService.findByFactor(factorId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return Single.just(factor);
})
1 | Flowable | count | METHOD_INVOCATION | applicationService.findByFactor(factorId).count().flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(factor);
1 | Single | METHOD_INVOCATION | Single.just(factor)
1 | Completable | doOnError | METHOD_INVOCATION | return factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | factorRepository.delete(factorId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return findAll(0, Integer.MAX_VALUE).map((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData()));
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return findByDomain(domain, 0, Integer.MAX_VALUE).map((pagedApplications)->(pagedApplications.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedApplications.getData()));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findAll(referenceType, referenceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all emails for {} {}", referenceType, referenceId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a all emails for %s %s", referenceType, referenceId), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findAll().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all emails", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find a all emails", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findByClient(referenceType, referenceId, client).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and its client %s", referenceType, referenceId, client), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findByTemplate(referenceType, referenceId, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and template {}", referenceType, referenceId, template, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findByClientAndTemplate(referenceType, referenceId, client, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | return findByClient(ReferenceType.DOMAIN, domain, clientSource).flatMapSingle((source)->{
    NewEmail email = new NewEmail();
    email.setEnabled(source.isEnabled());
    email.setTemplate(Template.parse(source.getTemplate()));
    email.setFrom(source.getFrom());
    email.setFromName(source.getFromName());
    email.setSubject(source.getSubject());
    email.setContent(source.getContent());
    email.setExpiresAfter(source.getExpiresAfter());
    return this.create(domain, clientTarget, email);
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findById(emailId).switchIfEmpty(Maybe.error(new EmailNotFoundException(emailId))).flatMapCompletable((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete email: {}", emailId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | emailRepository.findById(emailId).switchIfEmpty(Maybe.error(new EmailNotFoundException(emailId))).flatMapCompletable((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | emailRepository.findById(emailId).switchIfEmpty(Maybe.error(new EmailNotFoundException(emailId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | emailRepository.findById(emailId).switchIfEmpty(Maybe.error(new EmailNotFoundException(emailId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new EmailNotFoundException(emailId))
1 | Completable | doOnError | METHOD_INVOCATION | return emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | emailRepository.delete(emailId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a email", ex));
}).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a email", ex));
}).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_CREATED).email(email))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a email", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template()).flatMap((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(email));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(email)
1 | Single | METHOD_INVOCATION | Single.just(email)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a email", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a email", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new EmailNotFoundException(id))).flatMapSingle((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return emailRepository.update(emailToUpdate).flatMap((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(email));
    }).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a email", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a email", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | emailRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new EmailNotFoundException(id))).flatMapSingle((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return emailRepository.update(emailToUpdate).flatMap((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(email));
    }).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | emailRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new EmailNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | emailRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new EmailNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new EmailNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return emailRepository.update(emailToUpdate).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | emailRepository.update(emailToUpdate).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).doOnSuccess((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | emailRepository.update(emailToUpdate).flatMap((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(email));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(email));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(email)
1 | Single | METHOD_INVOCATION | Single.just(email)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a email", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a email", ex))
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | map | METHOD_INVOCATION | return maybeSource.isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new EmailAlreadyExistsException(emailTemplate);
    }
    return true;
});
1 | Maybe | isEmpty | METHOD_INVOCATION | maybeSource.isEmpty().map
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
        InputStream resourceAsStream = this.getClass().getResourceAsStream(GRAMMAR_PATH);
        JSONObject parse = (JSONObject)parser.parse(resourceAsStream);
        Map<String, Object> types = buildTypes();
        parse.appendField("_types", types);
        emitter.onSuccess(parse);
    } catch (ParseException | UnsupportedEncodingException e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load Spel grammar", e));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
        InputStream resourceAsStream = this.getClass().getResourceAsStream(GRAMMAR_PATH);
        JSONObject parse = (JSONObject)parser.parse(resourceAsStream);
        Map<String, Object> types = buildTypes();
        parse.appendField("_types", types);
        emitter.onSuccess(parse);
    } catch (ParseException | UnsupportedEncodingException e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load Spel grammar", e));
    }
})
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return eventRepository.create(event).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create an event", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an event", ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create an event", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create an event", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return eventRepository.findByTimeFrame(from, to).toList().onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to find events by time frame", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex));
});
1 | Flowable | toList | METHOD_INVOCATION | eventRepository.findByTimeFrame(from, to).toList().onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return tagRepository.findById(id, organizationId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a tag using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return tagRepository.findAll(organizationId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all tags", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find all tags", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return tagRepository.findById(id, organizationId).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex));
}).doOnSuccess((tag)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).tag(tag).principal(principal).type(EventType.TAG_CREATED))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).referenceId(organizationId).principal(principal).type(EventType.TAG_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | tagRepository.findById(id, organizationId).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex));
}).doOnSuccess((tag)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).tag(tag).principal(principal).type(EventType.TAG_CREATED))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | tagRepository.findById(id, organizationId).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | tagRepository.findById(id, organizationId).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).onErrorResumeNext
1 | Maybe | isEmpty | METHOD_INVOCATION | tagRepository.findById(id, organizationId).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return tagRepository.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapSingle((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return tagRepository.update(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a tag", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | tagRepository.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapSingle((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return tagRepository.update(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | tagRepository.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | tagRepository.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TagNotFoundException(tagId))
1 | Single | doOnError | METHOD_INVOCATION | return tagRepository.update(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | tagRepository.update(tag).doOnSuccess((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag))).doOnError
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return tagRepository.findById(tagId, orgaizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapCompletable((tag)->tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
})).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete tag {}", tagId, ex);
    return Completable.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | tagRepository.findById(tagId, orgaizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapCompletable((tag)->tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
})).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | tagRepository.findById(tagId, orgaizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | tagRepository.findById(tagId, orgaizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TagNotFoundException(tagId))
1 | Completable | doOnError | METHOD_INVOCATION | (tag)->tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
})).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))).doOnError((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
})).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
})).doOnComplete
1 | Observable | flatMapCompletable | METHOD_INVOCATION | tagRepository.delete(tagId).andThen(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return Completable.complete();
}))
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | toCompletable | METHOD_INVOCATION | return domainService.update(domain.getId(), domain).toCompletable();
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findAll().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all reporter", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find all reporters", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findByDomain(domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by domain: {}", domain, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by domain: %s", domain), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by id: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new ReporterNotFoundException("Reporter type " + this.environment.getProperty("management.type") + " not found"));
1 | Single | METHOD_INVOCATION | Single.error(new ReporterNotFoundException("Reporter type " + this.environment.getProperty("management.type") + " not found"))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkReporterConfiguration(reporter).flatMap((ignore)->reporterRepository.create(reporter)).flatMap((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(reporter1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return Single.error(new TechnicalManagementException(message, ex));
}).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkReporterConfiguration(reporter).flatMap((ignore)->reporterRepository.create(reporter)).flatMap((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(reporter1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return Single.error(new TechnicalManagementException(message, ex));
}).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_CREATED).reporter(reporter1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | checkReporterConfiguration(reporter).flatMap((ignore)->reporterRepository.create(reporter)).flatMap((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(reporter1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return Single.error(new TechnicalManagementException(message, ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkReporterConfiguration(reporter).flatMap((ignore)->reporterRepository.create(reporter)).flatMap((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(reporter1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | checkReporterConfiguration(reporter).flatMap((ignore)->reporterRepository.create(reporter)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(reporter1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(reporter1)
1 | Single | METHOD_INVOCATION | Single.just(reporter1)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(message, ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(message, ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findById(id).switchIfEmpty(Maybe.error(new ReporterNotFoundException(id))).flatMapSingle((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return checkReporterConfiguration(reporterToUpdate).flatMap((ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(reporter1));
        } else {
            return Single.just(reporter1);
        }
    })).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a reporter", ex);
    String message = "An error occurs while trying to update a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return Single.error(new TechnicalManagementException(message, ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | reporterRepository.findById(id).switchIfEmpty(Maybe.error(new ReporterNotFoundException(id))).flatMapSingle((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return checkReporterConfiguration(reporterToUpdate).flatMap((ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(reporter1));
        } else {
            return Single.just(reporter1);
        }
    })).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | reporterRepository.findById(id).switchIfEmpty(Maybe.error(new ReporterNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | reporterRepository.findById(id).switchIfEmpty(Maybe.error(new ReporterNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return checkReporterConfiguration(reporterToUpdate).flatMap((ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(reporter1));
    } else {
        return Single.just(reporter1);
    }
})).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkReporterConfiguration(reporterToUpdate).flatMap((ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(reporter1));
    } else {
        return Single.just(reporter1);
    }
})).doOnSuccess((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | checkReporterConfiguration(reporterToUpdate).flatMap((ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(reporter1));
    } else {
        return Single.just(reporter1);
    }
})).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | (ignore)->reporterRepository.update(reporterToUpdate).flatMap((reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(reporter1));
    } else {
        return Single.just(reporter1);
    }
})
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(reporter1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(reporter1)
1 | Single | METHOD_INVOCATION | Single.just(reporter1)
1 | Single | just | METHOD_INVOCATION | return Single.just(reporter1);
1 | Single | METHOD_INVOCATION | Single.just(reporter1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(message, ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(message, ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporterId))).flatMapCompletable((reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete reporter: {}", reporterId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | reporterRepository.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporterId))).flatMapCompletable((reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | reporterRepository.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporterId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | reporterRepository.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporterId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterNotFoundException(reporterId))
1 | Completable | doOnError | METHOD_INVOCATION | return reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | reporterRepository.delete(reporterId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | just | METHOD_INVOCATION | Single<Reporter> result = Single.just(reporter)
1 | Single | METHOD_INVOCATION | Single.just(reporter)
1 | Single | flatMap | METHOD_INVOCATION | result = reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map((r)->(JsonObject)Json.decodeValue(r.getConfiguration())).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))).count().flatMap((reporters)->{
    if (reporters > 0) {
        return Single.error(new ReporterConfigurationException("Filename already defined"));
    } else {
        return Single.just(reporter);
    }
})
1 | Flowable | count | METHOD_INVOCATION | reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map((r)->(JsonObject)Json.decodeValue(r.getConfiguration())).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))).count().flatMap
1 | Flowable | filter | METHOD_INVOCATION | reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map((r)->(JsonObject)Json.decodeValue(r.getConfiguration())).filter((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))).count
1 | Flowable | map | METHOD_INVOCATION | reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map((r)->(JsonObject)Json.decodeValue(r.getConfiguration())).filter
1 | Flowable | filter | METHOD_INVOCATION | reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter((r)->reporterId == null || !r.getId().equals(reporterId)).map
1 | Flowable | filter | METHOD_INVOCATION | reporterRepository.findByDomain(reporter.getDomain()).filter((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE)).filter
1 | Single | error | METHOD_INVOCATION | return Single.error(new ReporterConfigurationException("Filename already defined"));
1 | Single | METHOD_INVOCATION | Single.error(new ReporterConfigurationException("Filename already defined"))
1 | Single | just | METHOD_INVOCATION | return Single.just(reporter);
1 | Single | METHOD_INVOCATION | Single.just(reporter)
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token)).map((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
}).onErrorResumeNext((throwable)->{
    logger.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return Single.just(false);
});
1 | Single | map | METHOD_INVOCATION | client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token)).map((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findByUserId(referenceType, referenceId, userId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and user id: %s", referenceType, referenceId, userId), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findByUsername(referenceType, referenceId, username).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and username: {}", referenceType, referenceId, username, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and username: %s", referenceType, referenceId, username), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using {} {} and credential ID: {}", referenceType, referenceId, credentialId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using %s %s and credential ID: %s", referenceType, referenceId, credentialId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.create(credential).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a credential", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findById(credential.getId()).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential.getId()))).flatMapSingle((__)->credentialRepository.update(credential)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a credential", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | credentialRepository.findById(credential.getId()).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential.getId()))).flatMapSingle((__)->credentialRepository.update(credential)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | credentialRepository.findById(credential.getId()).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential.getId()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | credentialRepository.findById(credential.getId()).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential.getId())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CredentialNotFoundException(credential.getId()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex))
1 | Completable | OTHER
1 | Flowable | ignoreElements | METHOD_INVOCATION | return credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return credentialRepository.update(credentialToUpdate);
}).ignoreElements();
1 | Flowable | flatMapSingle | METHOD_INVOCATION | credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return credentialRepository.update(credentialToUpdate);
}).ignoreElements
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findById(id).switchIfEmpty(Maybe.error(new CredentialNotFoundException(id))).flatMapCompletable((email)->credentialRepository.delete(id)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete credential: {}", id, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | credentialRepository.findById(id).switchIfEmpty(Maybe.error(new CredentialNotFoundException(id))).flatMapCompletable((email)->credentialRepository.delete(id)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | credentialRepository.findById(id).switchIfEmpty(Maybe.error(new CredentialNotFoundException(id))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | credentialRepository.findById(id).switchIfEmpty(Maybe.error(new CredentialNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CredentialNotFoundException(id))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.deleteByUserId(referenceType, referenceId, userId).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex));
});
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.deleteByAaguid(referenceType, referenceId, aaguid).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and aaguid: {}", referenceType, referenceId, aaguid, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex));
});
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findById(id).switchIfEmpty(Single.error(new AlertTriggerNotFoundException(id)));
1 | Single | error | METHOD_INVOCATION | alertTriggerRepository.findById(id).switchIfEmpty(Single.error(new AlertTriggerNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new AlertTriggerNotFoundException(id))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findById(id).filter((alertTrigger)->alertTrigger.getReferenceType().equals(referenceType) && alertTrigger.getReferenceId().equals(referenceId)).switchIfEmpty(Single.error(new AlertTriggerNotFoundException(id)));
1 | Maybe | filter | METHOD_INVOCATION | alertTriggerRepository.findById(id).filter((alertTrigger)->alertTrigger.getReferenceType().equals(referenceType) && alertTrigger.getReferenceId().equals(referenceId)).switchIfEmpty
1 | Single | error | METHOD_INVOCATION | alertTriggerRepository.findById(id).filter((alertTrigger)->alertTrigger.getReferenceType().equals(referenceType) && alertTrigger.getReferenceId().equals(referenceId)).switchIfEmpty(Single.error(new AlertTriggerNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new AlertTriggerNotFoundException(id))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria).firstElement().flatMap((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return Maybe.just(alertTrigger);
    }
    return updateInternal(toUpdate, byUser, alertTrigger).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
}));
1 | Maybe | flatMap | METHOD_INVOCATION | alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria).firstElement().flatMap((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return Maybe.just(alertTrigger);
    }
    return updateInternal(toUpdate, byUser, alertTrigger).toMaybe();
}).switchIfEmpty
1 | Flowable | firstElement | METHOD_INVOCATION | alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria).firstElement().flatMap
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(alertTrigger);
1 | Maybe | METHOD_INVOCATION | Maybe.just(alertTrigger)
1 | Single | toMaybe | METHOD_INVOCATION | return updateInternal(toUpdate, byUser, alertTrigger).toMaybe();
1 | Single | defer | METHOD_INVOCATION | alertTriggerRepository.findByCriteria(referenceType, referenceId, criteria).firstElement().flatMap((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return Maybe.just(alertTrigger);
    }
    return updateInternal(toUpdate, byUser, alertTrigger).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
}))
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
})
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return this.getById(referenceType, referenceId, alertTriggerId).flatMapCompletable((alertTrigger)->deleteInternal(alertTrigger, byUser));
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return alertTriggerRepository.create(toCreate).flatMap((created)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(created))).doOnSuccess((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(toCreate).principal(byUser).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | alertTriggerRepository.create(toCreate).flatMap((created)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(created))).doOnSuccess((alertTrigger)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_CREATED).alertTrigger(alertTrigger).principal(byUser))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | alertTriggerRepository.create(toCreate).flatMap((created)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(created))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (created)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(created))
1 | Single | ignoreElement | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen
1 | Single | just | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(created.getId(), created.getReferenceType(), created.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(created))
1 | Single | METHOD_INVOCATION | Single.just(created)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return alertTriggerRepository.update(alertTrigger).flatMap((updated)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(previous).principal(updatedBy).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | alertTriggerRepository.update(alertTrigger).flatMap((updated)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_UPDATED).alertTrigger(updated).principal(updatedBy).oldValue(previous))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | alertTriggerRepository.update(alertTrigger).flatMap((updated)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (updated)->eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | ignoreElement | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen
1 | Single | just | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | METHOD_INVOCATION | Single.just(updated)
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return alertTriggerRepository.delete(alertTrigger.getId()).andThen(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | alertTriggerRepository.delete(alertTrigger.getId()).andThen(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | alertTriggerRepository.delete(alertTrigger.getId()).andThen(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete
1 | Single | ignoreElement | METHOD_INVOCATION | alertTriggerRepository.delete(alertTrigger.getId()).andThen(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE))).ignoreElement())
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return entrypointRepository.findById(id, organizationId).switchIfEmpty(Single.error(new EntrypointNotFoundException(id)));
1 | Single | error | METHOD_INVOCATION | entrypointRepository.findById(id, organizationId).switchIfEmpty(Single.error(new EntrypointNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new EntrypointNotFoundException(id))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | OTHER
1 | Single | mergeDelayError | METHOD_INVOCATION | return Single.mergeDelayError(toCreateObsList);
1 | Single | METHOD_INVOCATION | Single.mergeDelayError(toCreateObsList)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findById(entrypointId, organizationId).flatMap((oldEntrypoint)->{
    Entrypoint toUpdate = new Entrypoint(oldEntrypoint);
    toUpdate.setName(updateEntrypoint.getName());
    toUpdate.setDescription(updateEntrypoint.getDescription());
    toUpdate.setUrl(updateEntrypoint.getUrl());
    toUpdate.setTags(updateEntrypoint.getTags());
    toUpdate.setUpdatedAt(new Date());
    return validate(toUpdate, oldEntrypoint).andThen(entrypointRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))));
});
1 | Completable | andThen | METHOD_INVOCATION | return validate(toUpdate, oldEntrypoint).andThen(entrypointRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))));
1 | Single | doOnError | METHOD_INVOCATION | validate(toUpdate, oldEntrypoint).andThen(entrypointRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).throwable(throwable))))
1 | Single | doOnSuccess | METHOD_INVOCATION | entrypointRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_UPDATED).entrypoint(updated).oldValue(oldEntrypoint))).doOnError
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return findById(id, organizationId).flatMapCompletable((entrypoint)->entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable))));
1 | Completable | doOnError | METHOD_INVOCATION | (entrypoint)->entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint))).doOnError
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return validate(toCreate).andThen(entrypointRepository.create(toCreate).doOnSuccess((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable))));
1 | Single | doOnError | METHOD_INVOCATION | validate(toCreate).andThen(entrypointRepository.create(toCreate).doOnSuccess((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).referenceId(toCreate.getOrganizationId()).principal(principal).type(EventType.ENTRYPOINT_CREATED).throwable(throwable))))
1 | Single | doOnSuccess | METHOD_INVOCATION | entrypointRepository.create(toCreate).doOnSuccess((entrypoint)->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).entrypoint(entrypoint).principal(principal).type(EventType.ENTRYPOINT_CREATED))).doOnError
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidEntrypointException("Only the url of the default entrypoint can be updated."));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidEntrypointException("Only the url of the default entrypoint can be updated."))
1 | Single | flatMapCompletable | METHOD_INVOCATION | return organizationService.findById(entrypoint.getOrganizationId()).flatMapCompletable((organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return Completable.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions()));
    }
    return Completable.complete();
});
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions()));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions()))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidEntrypointException("Entrypoint must have a valid url."));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidEntrypointException("Entrypoint must have a valid url."))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return findByDomain(domain, 0, Integer.MAX_VALUE).map((pagedResources)->(pagedResources.getData() == null) ? Collections.emptySet() : new HashSet<>(pagedResources.getData()));
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById(id, organizationId).switchIfEmpty(Single.error(new EnvironmentNotFoundException(id)));
1 | Single | error | METHOD_INVOCATION | environmentRepository.findById(id, organizationId).switchIfEmpty(Single.error(new EnvironmentNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new EnvironmentNotFoundException(id))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById(id).switchIfEmpty(Single.error(new EnvironmentNotFoundException(id)));
1 | Single | error | METHOD_INVOCATION | environmentRepository.findById(id).switchIfEmpty(Single.error(new EnvironmentNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new EnvironmentNotFoundException(id))
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return environmentRepository.count().filter((aLong)->aLong == 0).flatMap((aLong)->createInternal(environment, null).toMaybe());
1 | Single | filter | METHOD_INVOCATION | environmentRepository.count().filter((aLong)->aLong == 0).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (aLong)->createInternal(environment, null).toMaybe()
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return environmentRepository.findById(environmentId, organizationId).flatMap((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return updateInternal(environment, byUser).toMaybe();
}).switchIfEmpty(Single.defer(()->organizationService.findById(organizationId).map((organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
}).flatMap((toCreate)->createInternal(toCreate, byUser))));
1 | Maybe | flatMap | METHOD_INVOCATION | environmentRepository.findById(environmentId, organizationId).flatMap((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return updateInternal(environment, byUser).toMaybe();
}).switchIfEmpty
1 | Single | toMaybe | METHOD_INVOCATION | return updateInternal(environment, byUser).toMaybe();
1 | Single | defer | METHOD_INVOCATION | environmentRepository.findById(environmentId, organizationId).flatMap((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return updateInternal(environment, byUser).toMaybe();
}).switchIfEmpty(Single.defer(()->organizationService.findById(organizationId).map((organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
}).flatMap((toCreate)->createInternal(toCreate, byUser))))
1 | Single | METHOD_INVOCATION | Single.defer(()->organizationService.findById(organizationId).map((organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
}).flatMap((toCreate)->createInternal(toCreate, byUser)))
1 | Single | flatMap | METHOD_INVOCATION | ()->organizationService.findById(organizationId).map((organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
}).flatMap((toCreate)->createInternal(toCreate, byUser))
1 | Single | map | METHOD_INVOCATION | organizationService.findById(organizationId).map((organization)->{
    Environment toCreate = new Environment();
    toCreate.setId(environmentId);
    toCreate.setHrids(newEnvironment.getHrids());
    toCreate.setName(newEnvironment.getName());
    toCreate.setDescription(newEnvironment.getDescription());
    toCreate.setOrganizationId(organization.getId());
    toCreate.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    return toCreate;
}).flatMap
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return environmentRepository.create(toCreate).doOnSuccess((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(toCreate).principal(createdBy).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | environmentRepository.create(toCreate).doOnSuccess((environment)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_CREATED).environment(environment).principal(createdBy))).doOnError
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return environmentRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(toUpdate).principal(updatedBy).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | environmentRepository.update(toUpdate).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(EnvironmentAuditBuilder.class).type(EventType.ENVIRONMENT_UPDATED).environment(updated).principal(updatedBy).oldValue(toUpdate))).doOnError
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return Single.just(totalToken);
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by domain: {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return Single.just(totalToken);
}).onErrorResumeNext
1 | Observable | toList | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | just | METHOD_INVOCATION | return Single.just(totalToken);
1 | Single | METHOD_INVOCATION | Single.just(totalToken)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return countByClientId(application).map((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by application: {}", application, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex));
});
1 | Single | map | METHOD_INVOCATION | countByClientId(application).map((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
}).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return Single.just(totalToken);
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return Single.just(totalToken);
}).onErrorResumeNext
1 | Observable | toList | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList().flatMap
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | just | METHOD_INVOCATION | return Single.just(totalToken);
1 | Single | METHOD_INVOCATION | Single.just(totalToken)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return accessTokenRepository.deleteByUserId(userId).andThen(refreshTokenRepository.deleteByUserId(userId)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete tokens by user {}", userId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex));
});
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.deleteByUserId(userId).andThen(refreshTokenRepository.deleteByUserId(userId)).onErrorResumeNext
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(0L);
1 | Single | METHOD_INVOCATION | Single.just(0L)
1 | Single | just | METHOD_INVOCATION | return Single.just(0L);
1 | Single | METHOD_INVOCATION | Single.just(0L)
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | LOCAL_VARIABLE
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("Domain name cannot contain \'/\' character"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("Domain name cannot contain \'/\' character"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("Domain can only work in vhost mode"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("Domain can only work in vhost mode"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("VHost mode requires at least one VHost"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("VHost mode requires at least one VHost"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("Only one vhost can be used to override entrypoint"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("Only one vhost can be used to override entrypoint"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("You must select one vhost to override entrypoint"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("You must select one vhost to override entrypoint"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("\'/\' path is not allowed in context-path mode"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("\'/\' path is not allowed in context-path mode"))
1 | Completable | merge | METHOD_INVOCATION | return Completable.merge(chain);
1 | Completable | METHOD_INVOCATION | Completable.merge(chain)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        emitter.onSuccess(certificatePluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all certificate plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all certificate plugins", ex));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        emitter.onSuccess(certificatePluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all certificate plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all certificate plugins", ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin certificate = certificatePluginManager.findById(certificatePluginId);
        if (certificate != null) {
            emitter.onSuccess(convert(certificate));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get certificate plugin : {}", certificatePluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get certificate plugin : " + certificatePluginId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin certificate = certificatePluginManager.findById(certificatePluginId);
        if (certificate != null) {
            emitter.onSuccess(convert(certificate));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get certificate plugin : {}", certificatePluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get certificate plugin : " + certificatePluginId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = certificatePluginManager.getSchema(certificatePluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for certificate plugin {}", certificatePluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for certificate plugin " + certificatePluginId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = certificatePluginManager.getSchema(certificatePluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for certificate plugin {}", certificatePluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for certificate plugin " + certificatePluginId, e));
    }
})
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host is required"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host is required"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] is invalid"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] must be a subdomain of " + domainRestrictions));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host [" + hostWithoutPort + "] must be a subdomain of " + domainRestrictions))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host port [" + port + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host port [" + port + "] is invalid"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Host port for [" + host + "] is invalid"))
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] overlap path defined in another security domain"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] overlap path defined in another security domain"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] is overlapped by another security domain"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Path [" + vhost.getPath() + "] is overlapped by another security domain"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] overlap path defined in another security domain"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] overlap path defined in another security domain"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] is overlapped by another security domain"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidVirtualHostException("Path [" + domain.getPath() + "] is overlapped by another security domain"))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return botDetectionRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a bot detection using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return botDetectionRepository.findByReference(ReferenceType.DOMAIN, domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find bot detections by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find bot detections by domain", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return botDetectionRepository.create(botDetection).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex));
}).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | botDetectionRepository.create(botDetection).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex));
}).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_CREATED).botDetection(detection))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | botDetectionRepository.create(botDetection).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | botDetectionRepository.create(botDetection).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(detection));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(detection)
1 | Single | METHOD_INVOCATION | Single.just(detection)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return botDetectionRepository.findById(id).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(id))).flatMapSingle((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return botDetectionRepository.update(botDetectionToUpdate).flatMap((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(detection));
    }).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update bot detection", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | botDetectionRepository.findById(id).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(id))).flatMapSingle((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return botDetectionRepository.update(botDetectionToUpdate).flatMap((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(detection));
    }).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | botDetectionRepository.findById(id).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | botDetectionRepository.findById(id).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return botDetectionRepository.update(botDetectionToUpdate).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | botDetectionRepository.update(botDetectionToUpdate).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).doOnSuccess((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | botDetectionRepository.update(botDetectionToUpdate).flatMap((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(detection));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(detection));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(detection)
1 | Single | METHOD_INVOCATION | Single.just(detection)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).flatMap(checkBotDetectionReleasedByApp(domainId, botDetectionId)).flatMapCompletable((botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete bot detection: {}", botDetectionId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).flatMap(checkBotDetectionReleasedByApp(domainId, botDetectionId)).flatMapCompletable((botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).flatMap(checkBotDetectionReleasedByApp(domainId, botDetectionId)).flatMapCompletable
1 | Maybe | flatMapSingle | METHOD_INVOCATION | botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId)).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | botDetectionRepository.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionNotFoundException(botDetectionId))
1 | Completable | doOnError | METHOD_INVOCATION | return botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))).doOnError((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | botDetectionRepository.delete(botDetectionId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex))
1 | Single | flatMap | METHOD_INVOCATION | (botDetection)->applicationService.findByDomain(domainId).flatMap((applications)->{
    if (applications.stream().filter((app)->app.getSettings() != null && app.getSettings().getAccount() != null && botDetectionId.equals(app.getSettings().getAccount().getBotDetectionPlugin())).count() > 0) {
        throw new BotDetectionUsedException();
    }
    return Single.just(botDetection);
})
1 | Single | just | METHOD_INVOCATION | return Single.just(botDetection);
1 | Single | METHOD_INVOCATION | Single.just(botDetection)
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (botDetection)->domainService.findById(domainId).flatMapSingle((domain)->{
    if (domain.getAccountSettings() != null && botDetectionId.equals(domain.getAccountSettings().getBotDetectionPlugin())) {
        throw new BotDetectionUsedException();
    }
    return Single.just(botDetection);
})
1 | Single | just | METHOD_INVOCATION | return Single.just(botDetection);
1 | Single | METHOD_INVOCATION | Single.just(botDetection)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.search(domain, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain and query : {} {}", domain, query, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap(scopeRepository::create).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex));
}).doOnSuccess((scope)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).scope(scope))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap(scopeRepository::create).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex));
}).doOnSuccess((scope)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_CREATED).scope(scope))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap(scopeRepository::create).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap(scopeRepository::create).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap(scopeRepository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap(this::validateIconUri).flatMap
1 | Single | map | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
}).flatMap
1 | Maybe | isEmpty | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().map
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(scope));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(scope)
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a system scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).flatMap
1 | Maybe | isEmpty | METHOD_INVOCATION | scopeRepository.findByDomainAndKey(domain, scopeKey).isEmpty().flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(scope));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(scope)
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to patch a scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return this.validateIconUri(toUpdate).flatMap(scopeRepository::update).flatMap((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(scope1));
}).doOnSuccess((scope1)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).oldValue(oldValue).scope(scope1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | this.validateIconUri(toUpdate).flatMap(scopeRepository::update).flatMap((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(scope1));
}).doOnSuccess((scope1)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_UPDATED).oldValue(oldValue).scope(scope1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | this.validateIconUri(toUpdate).flatMap(scopeRepository::update).flatMap((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(scope1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | this.validateIconUri(toUpdate).flatMap(scopeRepository::update).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(scope1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(scope1)
1 | Single | METHOD_INVOCATION | Single.just(scope1)
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
}).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a system scope", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
}).flatMap((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(scope));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | scopeRepository.findById(id).switchIfEmpty(Maybe.error(new ScopeNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeNotFoundException(id))
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(scope));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(scope)
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(scopeId).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return Single.just(scope);
}).flatMapCompletable((scope)->Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete scope: {}", scopeId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | scopeRepository.findById(scopeId).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return Single.just(scope);
}).flatMapCompletable((scope)->Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | scopeRepository.findById(scopeId).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return Single.just(scope);
}).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeRepository.findById(scopeId).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | scopeRepository.findById(scopeId).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeNotFoundException(scopeId))
1 | Single | just | METHOD_INVOCATION | return Single.just(scope);
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Completable | doOnError | METHOD_INVOCATION | (scope)->Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))).doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen
1 | Completable | andThen | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen
1 | Single | toCompletable | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen
1 | Completable | andThen | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable
1 | Completable | fromSingle | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())
1 | Observable | toList | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))
1 | Observable | toList | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))
1 | Completable | fromSingle | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((roles)->Observable.fromIterable(roles.stream().filter((role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()).andThen(applicationService.findByDomain(scope.getDomain()).flatMapObservable((applications)->Observable.fromIterable(applications.stream().filter((application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()).toCompletable().andThen(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).andThen(scopeRepository.delete(scopeId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomainAndKey(domain, scopeKey).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope key: {}", domain, scopeKey, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomainAndKeys(domain, scopeKeys).toList().onErrorResumeNext((ex)->{
    String keys = scopeKeys != null ? String.join(",", scopeKeys) : null;
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope keys: {}", domain, keys, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex));
});
1 | Flowable | toList | METHOD_INVOCATION | scopeRepository.findByDomainAndKeys(domain, scopeKeys).toList().onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | flatMap | METHOD_INVOCATION | return findByDomain(domain, 0, Integer.MAX_VALUE).map((domainSet)->domainSet.getData().stream().map(Scope::getKey).collect(Collectors.toSet())).flatMap((domainScopes)->this.validateScope(domainScopes, scopes));
1 | Single | map | METHOD_INVOCATION | findByDomain(domain, 0, Integer.MAX_VALUE).map((domainSet)->domainSet.getData().stream().map(Scope::getKey).collect(Collectors.toSet())).flatMap
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("scope " + scope + " is not valid."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("scope " + scope + " is not valid."))
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new MalformedIconUriException(scope.getIconUri()));
1 | Single | METHOD_INVOCATION | Single.error(new MalformedIconUriException(scope.getIconUri()))
1 | Single | just | METHOD_INVOCATION | return Single.just(scope);
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findAll().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all identity providers", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find all identity providers", ex))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new IdentityProviderNotFoundException(id)));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
}).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex))
1 | Single | error | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new IdentityProviderNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new IdentityProviderNotFoundException(id))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findAll(referenceType, referenceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find identity providers by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find identity providers by " + referenceType.name(), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return identityProviderRepository.create(identityProvider).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex));
}).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderRepository.create(identityProvider).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex));
}).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_CREATED).identityProvider(identityProvider1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | identityProviderRepository.create(identityProvider).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | identityProviderRepository.create(identityProvider).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(identityProvider1)
1 | Single | METHOD_INVOCATION | Single.just(identityProvider1)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(id))).flatMapSingle((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return identityProviderRepository.update(identityToUpdate).flatMap((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
    }).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update an identity provider", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(id))).flatMapSingle((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return identityProviderRepository.update(identityToUpdate).flatMap((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
    }).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return identityProviderRepository.update(identityToUpdate).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderRepository.update(identityToUpdate).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).doOnSuccess((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | identityProviderRepository.update(identityToUpdate).flatMap((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(identityProvider1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(identityProvider1)
1 | Single | METHOD_INVOCATION | Single.just(identityProvider1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findById(referenceType, referenceId, identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProviderId))).flatMapSingle((identityProvider)->applicationService.findByIdentityProvider(identityProviderId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return Single.just(identityProvider);
})).flatMapCompletable((identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete identity provider: {}", identityProviderId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProviderId))).flatMapSingle((identityProvider)->applicationService.findByIdentityProvider(identityProviderId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return Single.just(identityProvider);
})).flatMapCompletable((identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProviderId))).flatMapSingle((identityProvider)->applicationService.findByIdentityProvider(identityProviderId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return Single.just(identityProvider);
})).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProviderId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderRepository.findById(referenceType, referenceId, identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProviderId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderNotFoundException(identityProviderId))
1 | Single | flatMap | METHOD_INVOCATION | (identityProvider)->applicationService.findByIdentityProvider(identityProviderId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return Single.just(identityProvider);
})
1 | Flowable | count | METHOD_INVOCATION | applicationService.findByIdentityProvider(identityProviderId).count().flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(identityProvider);
1 | Single | METHOD_INVOCATION | Single.just(identityProvider)
1 | Completable | doOnError | METHOD_INVOCATION | return identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))).doOnError((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | identityProviderRepository.delete(identityProviderId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return serviceResourceRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a resource using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return serviceResourceRepository.findByReference(ReferenceType.DOMAIN, domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find resources by domain", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return serviceResourceRepository.create(resource).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | serviceResourceRepository.create(resource).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_CREATED).resource(factor1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | serviceResourceRepository.create(resource).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | serviceResourceRepository.create(resource).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(resource1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(resource1)
1 | Single | METHOD_INVOCATION | Single.just(resource1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return serviceResourceRepository.findById(id).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(id))).flatMapSingle((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return serviceResourceRepository.update(factorToUpdate).flatMap((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(resource1));
    }).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a resource", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | serviceResourceRepository.findById(id).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(id))).flatMapSingle((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return serviceResourceRepository.update(factorToUpdate).flatMap((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(resource1));
    }).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | serviceResourceRepository.findById(id).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | serviceResourceRepository.findById(id).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ServiceResourceNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return serviceResourceRepository.update(factorToUpdate).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | serviceResourceRepository.update(factorToUpdate).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).doOnSuccess((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | serviceResourceRepository.update(factorToUpdate).flatMap((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(resource1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(resource1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(resource1)
1 | Single | METHOD_INVOCATION | Single.just(resource1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return serviceResourceRepository.findById(resourceId).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(resourceId))).flatMapSingle((resource)->factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList().flatMap((factors)->{
    if (factors.isEmpty()) {
        return Single.just(resource);
    } else {
        return Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"));
    }
})).flatMapCompletable((resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete resource: {}", resourceId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | serviceResourceRepository.findById(resourceId).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(resourceId))).flatMapSingle((resource)->factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList().flatMap((factors)->{
    if (factors.isEmpty()) {
        return Single.just(resource);
    } else {
        return Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"));
    }
})).flatMapCompletable((resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | serviceResourceRepository.findById(resourceId).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(resourceId))).flatMapSingle((resource)->factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList().flatMap((factors)->{
    if (factors.isEmpty()) {
        return Single.just(resource);
    } else {
        return Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"));
    }
})).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | serviceResourceRepository.findById(resourceId).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(resourceId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | serviceResourceRepository.findById(resourceId).switchIfEmpty(Maybe.error(new ServiceResourceNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ServiceResourceNotFoundException(resourceId))
1 | Single | flatMap | METHOD_INVOCATION | (resource)->factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList().flatMap((factors)->{
    if (factors.isEmpty()) {
        return Single.just(resource);
    } else {
        return Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"));
    }
})
1 | Flowable | toList | METHOD_INVOCATION | factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList().flatMap
1 | Flowable | filter | METHOD_INVOCATION | factorService.findByDomain(domain).filter((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\"")).toList
1 | Single | just | METHOD_INVOCATION | return Single.just(resource);
1 | Single | METHOD_INVOCATION | Single.just(resource)
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"));
1 | Single | METHOD_INVOCATION | Single.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication"))
1 | Completable | doOnError | METHOD_INVOCATION | return serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))).doOnError
1 | Single | ignoreElement | METHOD_INVOCATION | serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | serviceResourceRepository.delete(resourceId).andThen(eventService.create(event)).ignoreElement
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex))
1 | Observable | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findAll(page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find applications", ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find applications", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find applications", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by domain {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.search(domain, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to search applications with query {} for domain {}", query, domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByCertificate(certificate).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by certificate", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by certificate", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByIdentityProvider(identityProvider).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by identity provider", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by identity provider", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByFactor(factor).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by factor", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by factor", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomainAndExtensionGrant(domain, extensionGrant).collect(()->(Set<Application>)new HashSet(), Set::add).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by extension grant", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex));
});
1 | Flowable | collect | METHOD_INVOCATION | applicationRepository.findByDomainAndExtensionGrant(domain, extensionGrant).collect(()->(Set<Application>)new HashSet(), Set::add).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByIdIn(ids).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by ids {}", ids, ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find applications by ids", ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomainAndClientId(domain, clientId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its domain: {} and client_id : {}", domain, clientId, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return create0(domain, application, principal).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No domain set on application"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No domain set on application"))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return create0(application.getDomain(), application, null).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create an application", ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No domain set on application"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No domain set on application"))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(application.getId()).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application.getId()))).flatMapSingle((application1)->update0(application1.getDomain(), application1, application, null)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update an application", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update an application", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationRepository.findById(application.getId()).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application.getId()))).flatMapSingle((application1)->update0(application1.getDomain(), application1, application, null)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById(application.getId()).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application.getId()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | applicationRepository.findById(application.getId()).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application.getId())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application.getId()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update an application", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update an application", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return Single.error(new InvalidParameterException("Unexpected forgot password field"));
    }
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return Single.error(new InvalidParameterException("Unexpected forgot password field"));
    }
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidParameterException("Unexpected forgot password field"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidParameterException("Unexpected forgot password field"))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return Single.error(new IllegalStateException("Application settings is undefined"));
    }
    if (application.getSettings().getOauth() == null) {
        return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to renew client secret for application {} and domain {}", id, domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex));
});
1 | Single | doOnError | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return Single.error(new IllegalStateException("Application settings is undefined"));
    }
    if (application.getSettings().getOauth() == null) {
        return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable))).onErrorResumeNext
1 | Single | doOnSuccess | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return Single.error(new IllegalStateException("Application settings is undefined"));
    }
    if (application.getSettings().getOauth() == null) {
        return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return Single.error(new IllegalStateException("Application settings is undefined"));
    }
    if (application.getSettings().getOauth() == null) {
        return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return Single.error(new IllegalStateException("Application settings is undefined"));
    }
    if (application.getSettings().getOauth() == null) {
        return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(id))
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("Application settings is undefined"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("Application settings is undefined"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("Application OAuth 2.0 settings is undefined"))
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((domain1)->Single.just(application1));
1 | Single | just | METHOD_INVOCATION | (domain1)->Single.just(application1)
1 | Single | METHOD_INVOCATION | Single.just(application1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapCompletable((application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete application: {}", id, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapCompletable((application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | applicationRepository.findById(id).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(id))
1 | Completable | doOnError | METHOD_INVOCATION | return applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen
1 | Single | toCompletable | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable())
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationRepository.delete(id).andThen(eventService.create(event).toCompletable()).andThen(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId()).flatMapCompletable((email)->emailTemplateService.delete(email.getId()))).andThen(formService.findByDomainAndClient(application.getDomain(), application.getId()).flatMapCompletable((form)->formService.delete(application.getDomain(), form.getId()))).andThen(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION).flatMapCompletable((membership)->membershipService.delete(membership.getId())))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.count().onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to count applications", ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.countByDomain(domainId).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to count applications for domain {}", domainId, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find top applications", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex));
});
1 | Single | map | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())).onErrorResumeNext
1 | Observable | toList | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (pagedApplications)->Observable.fromIterable(pagedApplications.getData())
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedApplications.getData())
1 | Single | map | METHOD_INVOCATION | (application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find top applications for domain {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex));
});
1 | Single | map | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())).onErrorResumeNext
1 | Observable | toList | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (pagedApplications)->Observable.fromIterable(pagedApplications.getData())
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedApplications.getData())
1 | Single | map | METHOD_INVOCATION | (application)->tokenService.findTotalTokensByApplication(application).map((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap(applicationRepository::create).flatMap((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return Single.just(application1);
    }
    return roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
    });
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application));
}).doOnSuccess((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap(applicationRepository::create).flatMap((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return Single.just(application1);
    }
    return roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
    });
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application));
}).doOnSuccess((application1)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CREATED).application(application1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap(applicationRepository::create).flatMap((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return Single.just(application1);
    }
    return roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
    });
}).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap(applicationRepository::create).flatMap((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return Single.just(application1);
    }
    return roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
    });
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap(applicationRepository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap(this::setDefaultCertificate).flatMap
1 | Completable | andThen | METHOD_INVOCATION | checkApplicationUniqueness(domain, application).andThen(validateApplicationMetadata(application)).flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(application1);
1 | Single | METHOD_INVOCATION | Single.just(application1)
1 | Single | flatMap | METHOD_INVOCATION | return roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap
1 | Single | error | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))
1 | Single | map | METHOD_INVOCATION | return membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership).map((__)->domain);
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((domain1)->Single.just(application));
1 | Single | just | METHOD_INVOCATION | (domain1)->Single.just(application)
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return validateApplicationMetadata(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders).flatMap(applicationRepository::update).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | validateApplicationMetadata(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders).flatMap(applicationRepository::update).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess((application)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_UPDATED).oldValue(currentApplication).application(application))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | validateApplicationMetadata(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders).flatMap(applicationRepository::update).flatMap((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((domain1)->Single.just(application1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | validateApplicationMetadata(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders).flatMap(applicationRepository::update).flatMap
1 | Single | flatMap | METHOD_INVOCATION | validateApplicationMetadata(applicationToUpdate).flatMap(this::validateApplicationIdentityProviders).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((domain1)->Single.just(application1));
1 | Single | just | METHOD_INVOCATION | (domain1)->Single.just(application1)
1 | Single | METHOD_INVOCATION | Single.just(application1)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | map | METHOD_INVOCATION | return certificateService.findByDomain(application.getDomain()).toList().map((certificates)->{
    if (certificates == null || certificates.isEmpty()) {
        return application;
    }
    Certificate defaultCertificate = certificates.stream().filter((certificate)->"Default".equals(certificate.getName())).findFirst().orElse(certificates.get(0));
    application.setCertificate(defaultCertificate.getId());
    return application;
});
1 | Flowable | toList | METHOD_INVOCATION | certificateService.findByDomain(application.getDomain()).toList().map
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return findByDomainAndClientId(domain, clientId).isEmpty().flatMapCompletable((isEmpty)->{
    if (!isEmpty) {
        return Completable.error(new ApplicationAlreadyExistsException(clientId, domain));
    }
    return Completable.complete();
});
1 | Maybe | isEmpty | METHOD_INVOCATION | findByDomainAndClientId(domain, clientId).isEmpty().flatMapCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new ApplicationAlreadyExistsException(clientId, domain));
1 | Completable | METHOD_INVOCATION | Completable.error(new ApplicationAlreadyExistsException(clientId, domain))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle()).toList().map((optionalIdentities)->{
    if (optionalIdentities == null || optionalIdentities.isEmpty()) {
        application.setIdentities(Collections.emptySet());
    } else {
        Set<String> identities = optionalIdentities.stream().filter(Optional::isPresent).map(Optional::get).map(IdentityProvider::getId).collect(Collectors.toSet());
        application.setIdentities(identities);
    }
    return application;
});
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle()).toList().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle()).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities())
1 | Maybe | toSingle | METHOD_INVOCATION | (identity)->identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle()
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(identity).map(Optional::of).defaultIfEmpty
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | flatMap | METHOD_INVOCATION | return GrantTypeUtils.validateGrantTypes(application).flatMap(this::validateRedirectUris).flatMap(this::validateScopes).flatMap(this::validateTokenEndpointAuthMethod).flatMap(this::validateTlsClientAuth);
1 | Single | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes(application).flatMap(this::validateRedirectUris).flatMap(this::validateScopes).flatMap(this::validateTokenEndpointAuthMethod).flatMap
1 | Single | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes(application).flatMap(this::validateRedirectUris).flatMap(this::validateScopes).flatMap
1 | Single | flatMap | METHOD_INVOCATION | GrantTypeUtils.validateGrantTypes(application).flatMap(this::validateRedirectUris).flatMap
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return domainService.findById(application.getDomain()).switchIfEmpty(Maybe.error(new DomainNotFoundException(application.getDomain()))).flatMapSingle((domain)->{
    if (GrantTypeUtils.isRedirectUriRequired(oAuthSettings.getGrantTypes()) && CollectionUtils.isEmpty(oAuthSettings.getRedirectUris())) {
        if (AM_V2_VERSION.equals(oAuthSettings.getSoftwareVersion())) {
            oAuthSettings.setSoftwareVersion(null);
        } else {
            return Single.error(new InvalidRedirectUriException());
        }
    }
    if (oAuthSettings.getRedirectUris() != null) {
        for (String redirectUri : oAuthSettings.getRedirectUris()) {
            try {
                URI uri = UriBuilder.fromURIString(redirectUri).build();
                if (uri.getScheme() == null) {
                    return Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"));
                }
                if (!domain.isRedirectUriLocalhostAllowed() && UriBuilder.isHttp(uri.getScheme()) && UriBuilder.isLocalhost(uri.getHost())) {
                    return Single.error(new InvalidRedirectUriException("localhost is forbidden"));
                }
                if (!domain.isRedirectUriUnsecuredHttpSchemeAllowed() && uri.getScheme().equalsIgnoreCase("http")) {
                    return Single.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden"));
                }
                if (!domain.isRedirectUriWildcardAllowed() && uri.getPath().contains("*")) {
                    return Single.error(new InvalidRedirectUriException("Wildcard are forbidden"));
                }
                if (uri.getFragment() != null) {
                    return Single.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden"));
                }
            } catch (IllegalArgumentException | URISyntaxException ex) {
                return Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"));
            }
        }
    }
    return Single.just(application);
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(application.getDomain()).switchIfEmpty(Maybe.error(new DomainNotFoundException(application.getDomain()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(application.getDomain()).switchIfEmpty(Maybe.error(new DomainNotFoundException(application.getDomain())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(application.getDomain()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException())
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("localhost is forbidden"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("localhost is forbidden"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("Wildcard are forbidden"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("Wildcard are forbidden"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed"))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("non valid default scopes"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("non valid default scopes"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("non valid scope approvals"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("non valid scope approvals"))
1 | Single | flatMap | METHOD_INVOCATION | return scopeService.validateScope(application.getDomain(), scopes).flatMap((isValid)->{
    if (!isValid) {
        return Single.error(new InvalidClientMetadataException("non valid scopes"));
    }
    return Single.just(application);
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("non valid scopes"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("non valid scopes"))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Invalid token_endpoint_auth_method for service application (client_credentials grant type)"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Invalid token_endpoint_auth_method for service application (client_credentials grant type)"))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return certificateRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a certificate using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return certificateRepository.findByDomain(domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find certificates by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find certificates by domain", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return certificateRepository.findAll().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all certificates", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find all certificates by domain", ex))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | Single<Certificate> certificateSingle = certificatePluginService.getSchema(newCertificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map((schema)->objectMapper.readValue(schema, CertificateSchema.class)).flatMapSingle(new Function<CertificateSchema, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(CertificateSchema certificateSchema) throws Exception {
        return Single.create((emitter)->{
            String certificateId = RandomString.generate();
            Certificate certificate = new Certificate();
            certificate.setId(certificateId);
            certificate.setDomain(domain);
            certificate.setName(newCertificate.getName());
            certificate.setType(newCertificate.getType());
            try {
                JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
                certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                    try {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    } catch (IOException ex) {
                        LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                        emitter.onError(ex);
                    }
                });
                certificate.setConfiguration(newCertificate.getConfiguration());
                certificate.setCreatedAt(new Date());
                certificate.setUpdatedAt(certificate.getCreatedAt());
            } catch (Exception ex) {
                LOGGER.error("An error occurs while trying to create certificate configuration", ex);
                emitter.onError(ex);
            }
            emitter.onSuccess(certificate);
        });
    }
})
1 | Maybe | map | METHOD_INVOCATION | certificatePluginService.getSchema(newCertificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map((schema)->objectMapper.readValue(schema, CertificateSchema.class)).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.getSchema(newCertificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map
1 | Maybe | error | METHOD_INVOCATION | certificatePluginService.getSchema(newCertificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    String certificateId = RandomString.generate();
    Certificate certificate = new Certificate();
    certificate.setId(certificateId);
    certificate.setDomain(domain);
    certificate.setName(newCertificate.getName());
    certificate.setType(newCertificate.getType());
    try {
        JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificate.setConfiguration(newCertificate.getConfiguration());
        certificate.setCreatedAt(new Date());
        certificate.setUpdatedAt(certificate.getCreatedAt());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to create certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificate);
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    String certificateId = RandomString.generate();
    Certificate certificate = new Certificate();
    certificate.setId(certificateId);
    certificate.setDomain(domain);
    certificate.setName(newCertificate.getName());
    certificate.setType(newCertificate.getType());
    try {
        JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificate.setConfiguration(newCertificate.getConfiguration());
        certificate.setCreatedAt(new Date());
        certificate.setUpdatedAt(certificate.getCreatedAt());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to create certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificate);
})
1 | Single | doOnError | METHOD_INVOCATION | return certificateSingle.flatMap(certificateRepository::create).flatMap((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate));
}).doOnError((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
}).doOnSuccess((certificate)->{
    auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).certificate(certificate));
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::create).flatMap((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate));
}).doOnError((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
}).doOnSuccess((certificate)->{
    auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_CREATED).certificate(certificate));
}).doOnError
1 | Single | doOnError | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::create).flatMap((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate));
}).doOnError((ex)->{
    LOGGER.error("An error occurs while trying to create a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to create a certificate", ex);
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::create).flatMap((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate));
}).doOnError
1 | Single | flatMap | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(certificate));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(certificate)
1 | Single | METHOD_INVOCATION | Single.just(certificate)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return certificateRepository.findById(id).switchIfEmpty(Maybe.error(new CertificateNotFoundException(id))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return certificatePluginService.getSchema(certificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return Single.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class)));
            }
        });
    }
}).flatMap((oldCertificate)->{
    Single<Certificate> certificateSingle = Single.create((emitter)->{
        Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
        certificateToUpdate.setName(updateCertificate.getName());
        try {
            CertificateSchema certificateSchema = oldCertificate.getSchema();
            JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
            JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
            certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                try {
                    String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                    String fileInformation = certificateConfiguration.get(key).asText();
                    if (!oldFileInformation.equals(fileInformation)) {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    }
                } catch (IOException ex) {
                    LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                    emitter.onError(ex);
                }
            });
            certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
            certificateToUpdate.setUpdatedAt(new Date());
        } catch (Exception ex) {
            LOGGER.error("An error occurs while trying to update certificate configuration", ex);
            emitter.onError(ex);
        }
        emitter.onSuccess(certificateToUpdate);
    });
    return certificateSingle.flatMap(certificateRepository::update).flatMap((certificate1)->{
        Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(certificate1));
    }).onErrorResumeNext((ex)->{
        LOGGER.error("An error occurs while trying to update a certificate", ex);
        throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
    }).doOnSuccess((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | certificateRepository.findById(id).switchIfEmpty(Maybe.error(new CertificateNotFoundException(id))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return certificatePluginService.getSchema(certificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return Single.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class)));
            }
        });
    }
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateRepository.findById(id).switchIfEmpty(Maybe.error(new CertificateNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | certificateRepository.findById(id).switchIfEmpty(Maybe.error(new CertificateNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificateNotFoundException(id))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificatePluginService.getSchema(certificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
        return Single.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class)));
    }
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.getSchema(certificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | certificatePluginService.getSchema(certificate.getType()).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificatePluginSchemaNotFoundException(certificate.getType()))
1 | Single | just | METHOD_INVOCATION | return Single.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class)));
1 | Single | METHOD_INVOCATION | Single.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class)))
1 | Single | LOCAL_VARIABLE
1 | Single | create | METHOD_INVOCATION | Single<Certificate> certificateSingle = Single.create((emitter)->{
    Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
    certificateToUpdate.setName(updateCertificate.getName());
    try {
        CertificateSchema certificateSchema = oldCertificate.getSchema();
        JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
        JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                String fileInformation = certificateConfiguration.get(key).asText();
                if (!oldFileInformation.equals(fileInformation)) {
                    JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                    byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                    certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                    ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                    updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                }
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
        certificateToUpdate.setUpdatedAt(new Date());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to update certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificateToUpdate);
})
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
    certificateToUpdate.setName(updateCertificate.getName());
    try {
        CertificateSchema certificateSchema = oldCertificate.getSchema();
        JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
        JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                String fileInformation = certificateConfiguration.get(key).asText();
                if (!oldFileInformation.equals(fileInformation)) {
                    JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                    byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                    certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                    ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                    updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                }
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
        certificateToUpdate.setUpdatedAt(new Date());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to update certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificateToUpdate);
})
1 | Single | doOnError | METHOD_INVOCATION | return certificateSingle.flatMap(certificateRepository::update).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).doOnSuccess((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::update).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).doOnSuccess((certificate)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_UPDATED).oldValue(oldCertificate).certificate(certificate))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::update).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::update).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | certificateSingle.flatMap(certificateRepository::update).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(certificate1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(certificate1)
1 | Single | METHOD_INVOCATION | Single.just(certificate1)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return certificateRepository.update(certificate).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).doOnError((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
});
1 | Single | flatMap | METHOD_INVOCATION | certificateRepository.update(certificate).flatMap((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(certificate1));
}).doOnError
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(certificate1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(certificate1)
1 | Single | METHOD_INVOCATION | Single.just(certificate1)
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return certificateRepository.findById(certificateId).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificateId))).flatMapSingle((certificate)->applicationService.findByCertificate(certificateId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return Single.just(certificate);
})).flatMapCompletable((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete certificate: {}", certificateId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | certificateRepository.findById(certificateId).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificateId))).flatMapSingle((certificate)->applicationService.findByCertificate(certificateId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return Single.just(certificate);
})).flatMapCompletable((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | certificateRepository.findById(certificateId).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificateId))).flatMapSingle((certificate)->applicationService.findByCertificate(certificateId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return Single.just(certificate);
})).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateRepository.findById(certificateId).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificateId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | certificateRepository.findById(certificateId).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificateId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificateNotFoundException(certificateId))
1 | Single | flatMap | METHOD_INVOCATION | (certificate)->applicationService.findByCertificate(certificateId).count().flatMap((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return Single.just(certificate);
})
1 | Flowable | count | METHOD_INVOCATION | applicationService.findByCertificate(certificateId).count().flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(certificate);
1 | Single | METHOD_INVOCATION | Single.just(certificate)
1 | Completable | doOnError | METHOD_INVOCATION | return certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))).doOnError((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | certificateRepository.delete(certificateId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificatePluginService.getSchema(certificate.getType()).map(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
}).map(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}).flatMapSingle(new Function<String, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(String configuration) throws Exception {
        certificate.setConfiguration(configuration);
        return create(domain, certificate);
    }
});
1 | Maybe | map | METHOD_INVOCATION | certificatePluginService.getSchema(certificate.getType()).map(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
}).map(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | certificatePluginService.getSchema(certificate.getType()).map(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
}).map
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No application to validate grant"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No application to validate grant"))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Missing or invalid grant type."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Missing or invalid grant type."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException(REFRESH_TOKEN + " grant type must be associated with one of " + String.join(", ", allowedRefreshTokenGrant)));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException(REFRESH_TOKEN + " grant type must be associated with one of " + String.join(", ", allowedRefreshTokenGrant)))
1 | Single | just | METHOD_INVOCATION | return Single.just(application);
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return repository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return repository.findByDomainAndClient(domain, client, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {} and client {}", domain, client, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return this.findByDomainAndClientAndResources(domain, client, Arrays.asList(resourceId)).firstElement();
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | zip | METHOD_INVOCATION | return Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
});
1 | Single | METHOD_INVOCATION | Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.validateScopes(toCreate).flatMap(this::validateIconUri).flatMap(repository::create).flatMap((r)->{
    AccessPolicy accessPolicy = new AccessPolicy();
    accessPolicy.setName("Deny all");
    accessPolicy.setDescription("Default deny access policy. Created by Gravitee.io.");
    accessPolicy.setType(AccessPolicyType.GROOVY);
    accessPolicy.setCondition("{\"onRequestScript\":\"import io.gravitee.policy.groovy.PolicyResult.State\\nresult.state = State.FAILURE;\"}");
    accessPolicy.setEnabled(true);
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    return accessPolicyRepository.create(accessPolicy).map((__)->r);
});
1 | Single | flatMap | METHOD_INVOCATION | this.validateScopes(toCreate).flatMap(this::validateIconUri).flatMap(repository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateScopes(toCreate).flatMap(this::validateIconUri).flatMap
1 | Single | map | METHOD_INVOCATION | return accessPolicyRepository.create(accessPolicy).map((__)->r);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map(newResource::update).map((toUpdate)->toUpdate.setUpdatedAt(new Date())).flatMap(this::validateScopes).flatMap(this::validateIconUri).flatMap(repository::update);
1 | Single | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map(newResource::update).map((toUpdate)->toUpdate.setUpdatedAt(new Date())).flatMap(this::validateScopes).flatMap(this::validateIconUri).flatMap
1 | Single | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map(newResource::update).map((toUpdate)->toUpdate.setUpdatedAt(new Date())).flatMap(this::validateScopes).flatMap
1 | Single | map | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map(newResource::update).map((toUpdate)->toUpdate.setUpdatedAt(new Date())).flatMap
1 | Single | map | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map(newResource::update).map
1 | Maybe | flatMapSingle | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle(Single::just).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException(resourceId))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapCompletable((found)->repository.delete(resourceId));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException(resourceId))
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId()).flatMapCompletable((accessPolicy)->accessPolicyRepository.delete(accessPolicy.getId())).andThen(repository.delete(resource.getId()));
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | accessPolicyRepository.findByDomainAndResource(resource.getDomain(), resource.getId()).flatMapCompletable((accessPolicy)->accessPolicyRepository.delete(accessPolicy.getId())).andThen
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMapPublisher((r)->accessPolicyRepository.findByDomainAndResource(domain, r.getId())).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Flowable.error(ex);
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex));
});
1 | Single | flatMapPublisher | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMapPublisher((r)->accessPolicyRepository.findByDomainAndResource(domain, r.getId())).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMapPublisher
1 | Single | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource)))
1 | Single | METHOD_INVOCATION | Single.error(new ResourceNotFoundException(resource))
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(ex);
1 | Flowable | METHOD_INVOCATION | Flowable.error(ex)
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return accessPolicyRepository.findByResources(resourceIds).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find access policies by resource ids {}", resourceIds, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by resource ids %s", resourceIds), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return accessPolicyRepository.countByResource(resourceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to count access policies by resource id {}", resourceId, ex);
    return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicy)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Maybe.error(ex);
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex));
});
1 | Maybe | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicy)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap
1 | Maybe | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException(resource))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return accessPolicyRepository.findById(accessPolicy).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find access policy by id {}", accessPolicy, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMap((r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return accessPolicyRepository.create(accessPolicy);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while trying to create an access policy for domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMap((r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return accessPolicyRepository.create(accessPolicy);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource))).flatMap
1 | Single | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Single.error(new ResourceNotFoundException(resource)))
1 | Single | METHOD_INVOCATION | Single.error(new ResourceNotFoundException(resource))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicyId)).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(resource))).flatMap((oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return accessPolicyRepository.update(policyToUpdate);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while trying to update access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicyId, ex);
    return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicyId)).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(resource))).flatMap((oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return accessPolicyRepository.update(policyToUpdate);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicyId)).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(resource))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicyId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap
1 | Maybe | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException(resource))
1 | Single | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMap((r)->accessPolicyRepository.findById(accessPolicyId)).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(resource)))
1 | Single | METHOD_INVOCATION | Single.error(new AccessPolicyNotFoundException(resource))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMapCompletable((__)->accessPolicyRepository.delete(accessPolicy)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error has occurred while trying to delete access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMapCompletable((__)->accessPolicyRepository.delete(accessPolicy)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | findByDomainAndClientAndUserAndResource(domain, client, user, resource).switchIfEmpty(Maybe.error(new ResourceNotFoundException(resource)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException(resource))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new MissingScopeException());
1 | Single | METHOD_INVOCATION | Single.error(new MissingScopeException())
1 | Single | flatMap | METHOD_INVOCATION | return scopeService.findByDomainAndKeys(toValidate.getDomain(), toValidate.getResourceScopes()).flatMap((scopes)->{
    if (toValidate.getResourceScopes().size() != scopes.size()) {
        return Single.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(","))));
    }
    return Single.just(toValidate);
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(","))));
1 | Single | METHOD_INVOCATION | Single.error(new ScopeNotFoundException(toValidate.getResourceScopes().stream().filter((s)->!scopes.contains(s)).collect(Collectors.joining(","))))
1 | Single | just | METHOD_INVOCATION | return Single.just(toValidate);
1 | Single | METHOD_INVOCATION | Single.just(toValidate)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new MalformedIconUriException(toValidate.getIconUri()));
1 | Single | METHOD_INVOCATION | Single.error(new MalformedIconUriException(toValidate.getIconUri()))
1 | Single | just | METHOD_INVOCATION | return Single.just(toValidate);
1 | Single | METHOD_INVOCATION | Single.just(toValidate)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return loginAttemptRepository.findByCriteria(criteria).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return loginAttemptRepository.update(loginAttempt);
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return loginAttemptRepository.create(loginAttempt);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to add a login attempt", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | loginAttemptRepository.findByCriteria(criteria).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return loginAttemptRepository.update(loginAttempt);
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return loginAttemptRepository.create(loginAttempt);
    }
}).onErrorResumeNext
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | loginAttemptRepository.findByCriteria(criteria).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | loginAttemptRepository.findByCriteria(criteria).map(Optional::of).defaultIfEmpty
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return loginAttemptRepository.delete(criteria).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete login attempt for", criteria, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex));
});
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return loginAttemptRepository.findById(id).switchIfEmpty(Maybe.error(new LoginAttemptNotFoundException(id))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Maybe.error(ex);
    }
    LOGGER.error("An error occurs while trying to find login attempt by id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | loginAttemptRepository.findById(id).switchIfEmpty(Maybe.error(new LoginAttemptNotFoundException(id))).onErrorResumeNext
1 | Maybe | error | METHOD_INVOCATION | loginAttemptRepository.findById(id).switchIfEmpty(Maybe.error(new LoginAttemptNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new LoginAttemptNotFoundException(id))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | RETURN_TYPE
1 | Maybe | retryWhen | METHOD_INVOCATION | return authContextRepository.findLastByTransactionId(transactionId).switchIfEmpty(Maybe.fromCallable(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}).retryWhen(new RetryWithDelay(consistencyRetries, retryDelay));
1 | Maybe | map | METHOD_INVOCATION | authContextRepository.findLastByTransactionId(transactionId).switchIfEmpty(Maybe.fromCallable(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}).retryWhen
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authContextRepository.findLastByTransactionId(transactionId).switchIfEmpty(Maybe.fromCallable(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})).map
1 | Maybe | fromCallable | METHOD_INVOCATION | authContextRepository.findLastByTransactionId(transactionId).switchIfEmpty(Maybe.fromCallable(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
}))
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
})
1 | Maybe | RETURN_TYPE
1 | Maybe | doFinally | METHOD_INVOCATION | return this.loadContext(transactionId, expectedVersion).doFinally(()->{
    clearContext(transactionId).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
});
1 | Completable | subscribe | METHOD_INVOCATION | clearContext(transactionId).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | flatMap | METHOD_INVOCATION | return attempts.flatMap((throwable)->{
    if (throwable instanceof AuthenticationFlowConsistencyException) {
        if (++retryCount < maxRetries) {
            return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
        }
    }
    return Flowable.error(throwable);
});
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Flowable | METHOD_INVOCATION | Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS)
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(throwable);
1 | Flowable | METHOD_INVOCATION | Flowable.error(throwable)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findAll(ReferenceType.DOMAIN, domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users by domain {}", domain, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by domain %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findByUsernameAndDomain(domain, username).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID: {} for the domain {}", username, domain, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(user).andThen(getUserRepository().update(user).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
}));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(user).andThen(getUserRepository().update(user).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
}))
1 | Single | flatMap | METHOD_INVOCATION | getUserRepository().update(user).flatMap((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(user1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(user1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(user1)
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.countByReference(ReferenceType.DOMAIN, domain).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to count users by domain: {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.countByApplication(domain, application).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to count users by application: {}", application, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.statistics(query).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to get users analytics : {}", query, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((oldUser)->{
    User user = new User(oldUser);
    List<EnrolledFactor> enrolledFactors = user.getFactors();
    if (enrolledFactors == null || enrolledFactors.isEmpty()) {
        enrolledFactors = Collections.singletonList(enrolledFactor);
    } else {
        if (Boolean.TRUE.equals(enrolledFactor.isPrimary())) {
            enrolledFactors.forEach((e)->e.setPrimary(false));
        }
        Optional<EnrolledFactor> optFactor = enrolledFactors.stream().filter((existingFactor)->existingFactor.getFactorId().equals(enrolledFactor.getFactorId())).findFirst();
        if (optFactor.isPresent()) {
            EnrolledFactor factorToUpdate = new EnrolledFactor(optFactor.get());
            factorToUpdate.setStatus(enrolledFactor.getStatus());
            factorToUpdate.setChannel(enrolledFactor.getChannel());
            factorToUpdate.setSecurity(enrolledFactor.getSecurity());
            factorToUpdate.setPrimary(enrolledFactor.isPrimary());
            enrolledFactors.removeIf((ef)->factorToUpdate.getFactorId().equals(ef.getFactorId()));
            enrolledFactors.add(factorToUpdate);
        } else {
            enrolledFactors.add(enrolledFactor);
        }
    }
    user.setFactors(enrolledFactors);
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.SMS.equals(enrolledFactor.getChannel().getType())) {
        List<Attribute> phoneNumbers = user.getPhoneNumbers();
        if (phoneNumbers == null) {
            phoneNumbers = new ArrayList<>();
            user.setPhoneNumbers(phoneNumbers);
        }
        String enrolledPhoneNumber = enrolledFactor.getChannel().getTarget();
        if (!phoneNumbers.stream().filter((p)->p.getValue().equals(enrolledPhoneNumber)).findFirst().isPresent()) {
            Attribute newPhoneNumber = new Attribute();
            newPhoneNumber.setType("mobile");
            newPhoneNumber.setPrimary(phoneNumbers.isEmpty());
            newPhoneNumber.setValue(enrolledPhoneNumber);
            phoneNumbers.add(newPhoneNumber);
        }
    }
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.EMAIL.equals(enrolledFactor.getChannel().getType())) {
        String email = user.getEmail();
        String enrolledEmail = enrolledFactor.getChannel().getTarget();
        if (email == null) {
            user.setEmail(enrolledEmail);
        } else if (!email.equals(enrolledEmail)) {
            List<Attribute> emails = user.getEmails();
            if (emails == null) {
                emails = new ArrayList<>();
                user.setEmails(emails);
            }
            if (!emails.stream().filter((p)->p.getValue().equals(enrolledEmail)).findFirst().isPresent()) {
                Attribute additionalEmail = new Attribute();
                additionalEmail.setPrimary(false);
                additionalEmail.setValue(enrolledEmail);
                emails.add(additionalEmail);
            }
        }
    }
    return update(user).doOnSuccess((user1)->{
        if (needToAuditUserFactorsOperation(user1, oldUser)) {
            removeSensitiveFactorsData(user1.getFactors());
            removeSensitiveFactorsData(oldUser.getFactors());
            auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
        }
    }).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Single | doOnError | METHOD_INVOCATION | return update(user).doOnSuccess((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | update(user).doOnSuccess((user1)->{
    if (needToAuditUserFactorsOperation(user1, oldUser)) {
        removeSensitiveFactorsData(user1.getFactors());
        removeSensitiveFactorsData(oldUser.getFactors());
        auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
    }
}).doOnError
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((oldUser)->{
    if (oldUser.getFactors() == null) {
        return Completable.complete();
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).ignoreElement();
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | ignoreElement | METHOD_INVOCATION | return update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).ignoreElement();
1 | Single | doOnError | METHOD_INVOCATION | update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable))).ignoreElement
1 | Single | doOnSuccess | METHOD_INVOCATION | update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findAll(referenceType, referenceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {}", referenceType, referenceId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s", referenceType, referenceId), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findByClient(referenceType, referenceId, client).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and its client {}", referenceType, referenceId, client, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s and client %s", referenceType, referenceId, client), ex))
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findByTemplate(referenceType, referenceId, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and template {}", referenceType, referenceId, template, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findByClientAndTemplate(referenceType, referenceId, client, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | toList | METHOD_INVOCATION | return findByDomainAndClient(domain, clientSource).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return this.create(domain, clientTarget, form);
}).toList();
1 | Flowable | flatMapSingle | METHOD_INVOCATION | findByDomainAndClient(domain, clientSource).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return this.create(domain, clientTarget, form);
}).toList
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FormNotFoundException(id))).flatMapSingle((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return formRepository.update(formToUpdate).flatMap((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(page));
    }).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a form", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a form", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FormNotFoundException(id))).flatMapSingle((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return formRepository.update(formToUpdate).flatMap((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(page));
    }).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FormNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FormNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FormNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return formRepository.update(formToUpdate).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | formRepository.update(formToUpdate).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | formRepository.update(formToUpdate).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(page));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(page)
1 | Single | METHOD_INVOCATION | Single.just(page)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a form", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a form", ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a form", ex));
}).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a form", ex));
}).doOnSuccess((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_CREATED).form(form))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a form", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).flatMap((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(page));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template()).flatMap((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(page));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(page)
1 | Single | METHOD_INVOCATION | Single.just(page)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a form", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a form", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findById(referenceType, referenceId, formId).switchIfEmpty(Maybe.error(new FormNotFoundException(formId))).flatMapCompletable((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return formRepository.delete(formId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete form: {}", formId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, formId).switchIfEmpty(Maybe.error(new FormNotFoundException(formId))).flatMapCompletable((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return formRepository.delete(formId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, formId).switchIfEmpty(Maybe.error(new FormNotFoundException(formId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | formRepository.findById(referenceType, referenceId, formId).switchIfEmpty(Maybe.error(new FormNotFoundException(formId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FormNotFoundException(formId))
1 | Completable | doOnError | METHOD_INVOCATION | return formRepository.delete(formId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | formRepository.delete(formId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | formRepository.delete(formId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | formRepository.delete(formId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | map | METHOD_INVOCATION | return maybeSource.isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new FormAlreadyExistsException(formTemplate);
    }
    return true;
});
1 | Maybe | isEmpty | METHOD_INVOCATION | maybeSource.isEmpty().map
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a domain using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Single.error(new DomainNotFoundException(hrid))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred when trying to find a domain using its hrid: {}", hrid, ex);
    return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Single.error(new DomainNotFoundException(hrid))).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).switchIfEmpty(Single.error(new DomainNotFoundException(hrid)))
1 | Single | METHOD_INVOCATION | Single.error(new DomainNotFoundException(hrid))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher((envId)->domainRepository.search(environmentId, query)).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to search domains with query {} for environmentId {}", query, environmentId, ex);
});
1 | Single | flatMapPublisher | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher((envId)->domainRepository.search(environmentId, query)).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher(domainRepository::findAllByReferenceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to find domains by environment", ex);
});
1 | Single | flatMapPublisher | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher(domainRepository::findAllByReferenceId).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map(Environment::getId).flatMapPublisher
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findAll().toList().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all domains", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex));
});
1 | Flowable | toList | METHOD_INVOCATION | domainRepository.findAll().toList().onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findByIdIn(ids).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find domains by id in {}", ids, ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find domains by id in", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap((domain)->{
    if (principal == null) {
        return Single.just(domain);
    }
    return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
    });
}).flatMap((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(domain));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex));
}).doOnSuccess((domain)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).domain(domain).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap((domain)->{
    if (principal == null) {
        return Single.just(domain);
    }
    return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
    });
}).flatMap((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(domain));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex));
}).doOnSuccess((domain)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_CREATED).domain(domain).referenceType(ReferenceType.ENVIRONMENT).referenceId(environmentId))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap((domain)->{
    if (principal == null) {
        return Single.just(domain);
    }
    return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
    });
}).flatMap((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(domain));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap((domain)->{
    if (principal == null) {
        return Single.just(domain);
    }
    return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
    });
}).flatMap((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(domain));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap((domain)->{
    if (principal == null) {
        return Single.just(domain);
    }
    return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
    });
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap(this::createDefaultCertificate).flatMap
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap(this::createSystemScopes).flatMap
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
    }
}).flatMap
1 | Maybe | isEmpty | METHOD_INVOCATION | domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid).isEmpty().flatMap
1 | Completable | andThen | METHOD_INVOCATION | return environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)));
1 | Single | flatMapCompletable | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen
1 | Single | doOnSuccess | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable
1 | Single | defer | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).doOnSuccess((environment)->setDeployMode(domain, environment)).flatMapCompletable((environment)->validateDomain(domain, environment)).andThen(Single.defer(()->domainRepository.create(domain)))
1 | Single | METHOD_INVOCATION | Single.defer(()->domainRepository.create(domain))
1 | Single | just | METHOD_INVOCATION | return Single.just(domain);
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | flatMap | METHOD_INVOCATION | return roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap
1 | Single | error | METHOD_INVOCATION | roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN).switchIfEmpty(Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))
1 | Single | map | METHOD_INVOCATION | return membershipService.addOrUpdate(organizationId, membership).map((__)->domain);
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(domain));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(domain)
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return validateDomain(domain).andThen(Single.defer(()->domainRepository.update(domain)));
}).flatMap((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(domain1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a domain", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return validateDomain(domain).andThen(Single.defer(()->domainRepository.update(domain)));
}).flatMap((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(domain1));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return validateDomain(domain).andThen(Single.defer(()->domainRepository.update(domain)));
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Completable | andThen | METHOD_INVOCATION | return validateDomain(domain).andThen(Single.defer(()->domainRepository.update(domain)));
1 | Single | defer | METHOD_INVOCATION | validateDomain(domain).andThen(Single.defer(()->domainRepository.update(domain)))
1 | Single | METHOD_INVOCATION | Single.defer(()->domainRepository.update(domain))
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(domain1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(domain1)
1 | Single | METHOD_INVOCATION | Single.just(domain1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return Single.error(new InvalidParameterException("Unexpected forgot password field"));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(domain1));
    }).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to patch a domain", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return Single.error(new InvalidParameterException("Unexpected forgot password field"));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(domain1));
    }).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidParameterException("Unexpected forgot password field"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidParameterException("Unexpected forgot password field"))
1 | Single | doOnError | METHOD_INVOCATION | return validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(domain1));
}).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(domain1));
}).doOnSuccess((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(domain1));
}).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch))).flatMap
1 | Single | defer | METHOD_INVOCATION | validateDomain(toPatch).andThen(Single.defer(()->domainRepository.update(toPatch)))
1 | Single | METHOD_INVOCATION | Single.defer(()->domainRepository.update(toPatch))
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(domain1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(domain1)
1 | Single | METHOD_INVOCATION | Single.just(domain1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain)->{
    return applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    })).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    })).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    })).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete security domain {}", domainId, ex);
    return Completable.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain)->{
    return applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    })).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    })).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    })).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainRepository.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Completable | doOnError | METHOD_INVOCATION | return applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))).doOnError((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))).doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen
1 | Completable | andThen | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen
1 | Single | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteApplicationsCompletable);
1 | Completable | METHOD_INVOCATION | Completable.concat(deleteApplicationsCompletable)
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())))
1 | Single | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteRolesCompletable);
1 | Completable | METHOD_INVOCATION | Completable.concat(deleteRolesCompletable)
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())))
1 | Single | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteScopesCompletable);
1 | Completable | METHOD_INVOCATION | Completable.concat(deleteScopesCompletable)
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId())))
1 | Flowable | filter | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId())))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId())))
1 | Single | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deletedResourceCompletable);
1 | Completable | METHOD_INVOCATION | Completable.concat(deletedResourceCompletable)
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)))
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)))
1 | Completable | fromSingle | METHOD_INVOCATION | applicationService.findByDomain(domainId).flatMapCompletable((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).andThen(certificateService.findByDomain(domainId).flatMapCompletable((certificate)->certificateService.delete(certificate.getId()))).andThen(identityProviderService.findByDomain(domainId).flatMapCompletable((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId()))).andThen(extensionGrantService.findByDomain(domainId).flatMapCompletable((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId()))).andThen(roleService.findByDomain(domainId).flatMapCompletable((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
})).andThen(userService.findByDomain(domainId).flatMapCompletable((user)->userService.delete(user.getId()))).andThen(groupService.findByDomain(domainId).flatMapCompletable((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId()))).andThen(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE).flatMapCompletable((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
})).andThen(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId).flatMapCompletable((emailTemplate)->emailTemplateService.delete(emailTemplate.getId()))).andThen(formService.findByDomain(domainId).flatMapCompletable((formTemplate)->formService.delete(domainId, formTemplate.getId()))).andThen(reporterService.findByDomain(domainId).flatMapCompletable((reporter)->reporterService.delete(reporter.getId()))).andThen(flowService.findAll(ReferenceType.DOMAIN, domainId).filter((f)->f.getId() != null).flatMapCompletable((flows)->flowService.delete(flows.getId()))).andThen(membershipService.findByReference(domainId, ReferenceType.DOMAIN).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).andThen(factorService.findByDomain(domainId).flatMapCompletable((factor)->factorService.delete(domainId, factor.getId()))).andThen(resourceService.findByDomain(domainId).flatMapCompletable((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
})).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria()).flatMapCompletable((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal))).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria()).flatMapCompletable((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal))).andThen(domainRepository.delete(domainId)).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError().map((scope)->domain);
1 | Observable | lastOrError | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values())
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return certificateService.create(domain.getId()).map((certificate)->domain);
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidDomainException("Domain must be attached to an environment"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidDomainException("Domain must be attached to an environment"))
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapCompletable((optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return Completable.error(new DomainAlreadyExistsException(domain.getName()));
    } else {
        return environmentService.findById(domain.getReferenceId()).flatMapCompletable((environment)->validateDomain(domain, environment));
    }
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapCompletable
1 | Maybe | map | METHOD_INVOCATION | domainRepository.findByHrid(domain.getReferenceType(), domain.getReferenceId(), domain.getHrid()).map(Optional::of).defaultIfEmpty
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new DomainAlreadyExistsException(domain.getName()));
1 | Completable | METHOD_INVOCATION | Completable.error(new DomainAlreadyExistsException(domain.getName()))
1 | Single | flatMapCompletable | METHOD_INVOCATION | return environmentService.findById(domain.getReferenceId()).flatMapCompletable((environment)->validateDomain(domain, environment));
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return DomainValidator.validate(domain, environment.getDomainRestrictions()).andThen(findAll().flatMapCompletable((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)));
1 | Single | flatMapCompletable | METHOD_INVOCATION | DomainValidator.validate(domain, environment.getDomainRestrictions()).andThen(findAll().flatMapCompletable((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return Flowable.merge(findAllSystem(assignableType), roleRepository.findAll(referenceType, referenceId)).filter((role)->assignableType == null || assignableType == role.getAssignableType()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find roles by {}: {} assignable to {}", referenceType, referenceId, assignableType, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex));
});
1 | Flowable | filter | METHOD_INVOCATION | Flowable.merge(findAllSystem(assignableType), roleRepository.findAll(referenceType, referenceId)).filter((role)->assignableType == null || assignableType == role.getAssignableType()).onErrorResumeNext
1 | Flowable | merge | METHOD_INVOCATION | Flowable.merge(findAllSystem(assignableType), roleRepository.findAll(referenceType, referenceId)).filter
1 | Flowable | METHOD_INVOCATION | Flowable.merge(findAllSystem(assignableType), roleRepository.findAll(referenceType, referenceId))
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles by %s %s assignable to %s", referenceType, referenceId, assignableType), ex))
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return roleRepository.findAll(ReferenceType.DOMAIN, domain).collect(HashSet::new, Set::add);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new RoleNotFoundException(id)));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
}).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex))
1 | Single | error | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
}).switchIfEmpty(Single.error(new RoleNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new RoleNotFoundException(id))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(Role::isSystem).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find system role : {} for type : {}", systemRole.name(), assignableType, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex));
});
1 | Maybe | filter | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType).filter(Role::isSystem).onErrorResumeNext
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findByNamesAndAssignableType(referenceType, referenceId, roleNames, assignableType).onErrorResumeNext((ex)->{
    String joinedRoles = roleNames.stream().collect(Collectors.joining(", "));
    LOGGER.error("An error occurs while trying to find roles : {}", joinedRoles, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find roles : %s", joinedRoles), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(Role::isDefaultRole).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find default role {} of organization {} for the type {}", defaultRole.name(), organizationId, assignableType, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex));
});
1 | Maybe | filter | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType).filter(Role::isDefaultRole).onErrorResumeNext
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findByIdIn(ids).collect(()->(Set<Role>)new HashSet<Role>(), Set::add).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find roles by ids", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex));
});
1 | Flowable | collect | METHOD_INVOCATION | roleRepository.findByIdIn(ids).collect(()->(Set<Role>)new HashSet<Role>(), Set::add).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId).flatMap((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId).flatMap((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_CREATED).role(role))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId).flatMap((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId).flatMap((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId).flatMap((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(role));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(role)
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return findById(referenceType, referenceId, id).flatMap((role)->{
    if (role.isSystem()) {
        return Single.error(new SystemRoleUpdateException(role.getName()));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return Single.error(new DefaultRoleUpdateException(role.getName()));
    }
    return Single.just(role);
}).flatMap((oldRole)->{
    return checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return roleRepository.update(roleToUpdate).flatMap((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(role));
        }).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)));
    });
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a role", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | findById(referenceType, referenceId, id).flatMap((role)->{
    if (role.isSystem()) {
        return Single.error(new SystemRoleUpdateException(role.getName()));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return Single.error(new DefaultRoleUpdateException(role.getName()));
    }
    return Single.just(role);
}).flatMap((oldRole)->{
    return checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return roleRepository.update(roleToUpdate).flatMap((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(role));
        }).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)));
    });
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | findById(referenceType, referenceId, id).flatMap((role)->{
    if (role.isSystem()) {
        return Single.error(new SystemRoleUpdateException(role.getName()));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return Single.error(new DefaultRoleUpdateException(role.getName()));
    }
    return Single.just(role);
}).flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new SystemRoleUpdateException(role.getName()));
1 | Single | METHOD_INVOCATION | Single.error(new SystemRoleUpdateException(role.getName()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new DefaultRoleUpdateException(role.getName()));
1 | Single | METHOD_INVOCATION | Single.error(new DefaultRoleUpdateException(role.getName()))
1 | Single | just | METHOD_INVOCATION | return Single.just(role);
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | flatMap | METHOD_INVOCATION | return checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId).flatMap((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return roleRepository.update(roleToUpdate).flatMap((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(role));
    }).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)));
});
1 | Single | doOnError | METHOD_INVOCATION | return roleRepository.update(roleToUpdate).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | roleRepository.update(roleToUpdate).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).doOnSuccess((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | roleRepository.update(roleToUpdate).flatMap((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(role));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(role)
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findById(referenceType, referenceId, roleId).switchIfEmpty(Maybe.error(new RoleNotFoundException(roleId))).map((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
}).flatMapCompletable((role)->roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete role: {}", roleId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, roleId).switchIfEmpty(Maybe.error(new RoleNotFoundException(roleId))).map((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
}).flatMapCompletable((role)->roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))).onErrorResumeNext
1 | Maybe | map | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, roleId).switchIfEmpty(Maybe.error(new RoleNotFoundException(roleId))).map((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
}).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, roleId).switchIfEmpty(Maybe.error(new RoleNotFoundException(roleId))).map
1 | Maybe | error | METHOD_INVOCATION | roleRepository.findById(referenceType, referenceId, roleId).switchIfEmpty(Maybe.error(new RoleNotFoundException(roleId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new RoleNotFoundException(roleId))
1 | Completable | doOnError | METHOD_INVOCATION | (role)->roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))).doOnComplete
1 | Completable | fromSingle | METHOD_INVOCATION | roleRepository.delete(roleId).andThen(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex))
1 | Completable | OTHER
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(roles).flatMapCompletable(this::upsert);
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(roles).flatMapCompletable
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(roles)
1 | Completable | OTHER
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(roles).flatMapCompletable(this::upsert);
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(roles).flatMapCompletable
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(roles)
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapCompletable((optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return roleRepository.create(role).flatMap((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return eventService.create(event).flatMap((__)->Single.just(role1));
        }).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return Single.error(ex);
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
        }).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return Completable.complete();
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return roleRepository.update(role).flatMap((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return eventService.create(event).flatMap((__)->Single.just(role1));
        }).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return Single.error(ex);
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
        }).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))).toCompletable();
    }
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapCompletable
1 | Maybe | map | METHOD_INVOCATION | roleRepository.findByNameAndAssignableType(role.getReferenceType(), role.getReferenceId(), role.getName(), role.getAssignableType()).map(Optional::ofNullable).defaultIfEmpty
1 | Single | toCompletable | METHOD_INVOCATION | return roleRepository.create(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))).toCompletable();
1 | Single | doOnError | METHOD_INVOCATION | roleRepository.create(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))).toCompletable
1 | Single | doOnSuccess | METHOD_INVOCATION | roleRepository.create(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | roleRepository.create(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | roleRepository.create(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(role1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(role1)
1 | Single | METHOD_INVOCATION | Single.just(role1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a role", ex))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | toCompletable | METHOD_INVOCATION | return roleRepository.update(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))).toCompletable();
1 | Single | doOnError | METHOD_INVOCATION | roleRepository.update(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))).toCompletable
1 | Single | doOnSuccess | METHOD_INVOCATION | roleRepository.update(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
}).doOnSuccess((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | roleRepository.update(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | roleRepository.update(role).flatMap((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(role1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(role1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(role1)
1 | Single | METHOD_INVOCATION | Single.just(role1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a role", ex))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add).flatMap((roles)->{
    if (roles.stream().filter((role)->!role.getId().equals(roleId)).anyMatch((role)->role.getName().equals(roleName))) {
        throw new RoleAlreadyExistsException(roleName);
    }
    return Single.just(roles);
});
1 | Flowable | collect | METHOD_INVOCATION | roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add).flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(roles);
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Flowable | RETURN_TYPE
1 | Flowable | filter | METHOD_INVOCATION | return roleRepository.findAll(ReferenceType.PLATFORM, Platform.DEFAULT).filter((role)->role.isSystem() && !role.isInternalOnly()).filter((role)->assignableType == null || role.getAssignableType() == assignableType);
1 | Flowable | filter | METHOD_INVOCATION | roleRepository.findAll(ReferenceType.PLATFORM, Platform.DEFAULT).filter((role)->role.isSystem() && !role.isInternalOnly()).filter
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an extension grant using its ID: {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantRepository.findByDomain(domain).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find extension grants by domain", ex);
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to find extension grants by domain", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName()).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return extensionGrantRepository.create(extensionGrant).flatMap((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
        });
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex));
}).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName()).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return extensionGrantRepository.create(extensionGrant).flatMap((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
        });
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex));
}).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_CREATED).extensionGrant(extensionGrant))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName()).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return extensionGrantRepository.create(extensionGrant).flatMap((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
        });
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName()).isEmpty().flatMap((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return extensionGrantRepository.create(extensionGrant).flatMap((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
        });
    }
}).onErrorResumeNext
1 | Maybe | isEmpty | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName()).isEmpty().flatMap
1 | Single | flatMap | METHOD_INVOCATION | return extensionGrantRepository.create(extensionGrant).flatMap((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
});
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(extensionGrant1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(extensionGrant1)
1 | Single | METHOD_INVOCATION | Single.just(extensionGrant1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantRepository.findById(id).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(id))).flatMapSingle((tokenGranter)->extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle().flatMap((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return Single.just(tokenGranter);
})).flatMap((oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return extensionGrantRepository.update(extensionGrantToUpdate).flatMap((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
    }).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a extension grant", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | extensionGrantRepository.findById(id).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(id))).flatMapSingle((tokenGranter)->extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle().flatMap((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return Single.just(tokenGranter);
})).flatMap((oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return extensionGrantRepository.update(extensionGrantToUpdate).flatMap((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
    }).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | extensionGrantRepository.findById(id).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(id))).flatMapSingle((tokenGranter)->extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle().flatMap((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return Single.just(tokenGranter);
})).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findById(id).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | extensionGrantRepository.findById(id).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantNotFoundException(id))
1 | Single | flatMap | METHOD_INVOCATION | (tokenGranter)->extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle().flatMap((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return Single.just(tokenGranter);
})
1 | Maybe | toSingle | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle().flatMap
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).toSingle
1 | Maybe | map | METHOD_INVOCATION | extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName()).map(Optional::of).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenGranter);
1 | Single | METHOD_INVOCATION | Single.just(tokenGranter)
1 | Single | doOnError | METHOD_INVOCATION | return extensionGrantRepository.update(extensionGrantToUpdate).flatMap((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
}).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | extensionGrantRepository.update(extensionGrantToUpdate).flatMap((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
}).doOnSuccess((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | extensionGrantRepository.update(extensionGrantToUpdate).flatMap((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(extensionGrant));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(extensionGrant)
1 | Single | METHOD_INVOCATION | Single.just(extensionGrant)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantRepository.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMapSingle((extensionGrant)->applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId()).flatMap((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
})).flatMapCompletable((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to extension grant: {}", extensionGrantId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMapSingle((extensionGrant)->applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId()).flatMap((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
})).flatMapCompletable((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMapSingle((extensionGrant)->applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId()).flatMap((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
})).flatMapCompletable
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantNotFoundException(extensionGrantId))
1 | Single | flatMap | METHOD_INVOCATION | (extensionGrant)->applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId()).flatMap((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
})
1 | Single | zip | METHOD_INVOCATION | return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
    if (clients1.size() == 0) {
        return extensionGrant;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (extensionGrant.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return extensionGrant;
    }
});
1 | Single | METHOD_INVOCATION | Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
    if (clients1.size() == 0) {
        return extensionGrant;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (extensionGrant.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return extensionGrant;
    }
})
1 | Flowable | toList | METHOD_INVOCATION | Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), findByDomain(domain).toList(), (clients1,extensionGrants)->{
    if (clients1.size() == 0) {
        return extensionGrant;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (extensionGrant.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return extensionGrant;
    }
})
1 | Completable | doOnError | METHOD_INVOCATION | return extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))).doOnError((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))).doOnError
1 | Single | toCompletable | METHOD_INVOCATION | extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | extensionGrantRepository.delete(extensionGrantId).andThen(eventService.create(event)).toCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return resourceService.findByDomainAndClientAndResources(domain, client, requestedResourcesIds).toList().flatMap((fetchedResourceSet)->this.validatePermissionRequest(requestedPermission, fetchedResourceSet, requestedResourcesIds).map((permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
})).flatMap(repository::create);
1 | Single | flatMap | METHOD_INVOCATION | resourceService.findByDomainAndClientAndResources(domain, client, requestedResourcesIds).toList().flatMap((fetchedResourceSet)->this.validatePermissionRequest(requestedPermission, fetchedResourceSet, requestedResourcesIds).map((permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
})).flatMap
1 | Flowable | toList | METHOD_INVOCATION | resourceService.findByDomainAndClientAndResources(domain, client, requestedResourcesIds).toList().flatMap
1 | Single | map | METHOD_INVOCATION | (fetchedResourceSet)->this.validatePermissionRequest(requestedPermission, fetchedResourceSet, requestedResourcesIds).map((permissionRequests)->{
    String userId = fetchedResourceSet.get(0).getUserId();
    PermissionTicket toCreate = new PermissionTicket();
    return toCreate.setPermissionRequest(permissionRequests).setDomain(domain).setClientId(client).setUserId(userId).setCreatedAt(new Date()).setExpireAt(new Date(System.currentTimeMillis() + umaPermissionValidity));
})
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return repository.findById(id).switchIfEmpty(Maybe.error(new InvalidPermissionTicketException())).flatMapSingle((permissionTicket)->repository.delete(permissionTicket.getId()).andThen(Single.just(permissionTicket)));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | repository.findById(id).switchIfEmpty(Maybe.error(new InvalidPermissionTicketException())).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | repository.findById(id).switchIfEmpty(Maybe.error(new InvalidPermissionTicketException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidPermissionTicketException())
1 | Completable | andThen | METHOD_INVOCATION | (permissionTicket)->repository.delete(permissionTicket.getId()).andThen(Single.just(permissionTicket))
1 | Single | just | METHOD_INVOCATION | repository.delete(permissionTicket.getId()).andThen(Single.just(permissionTicket))
1 | Single | METHOD_INVOCATION | Single.just(permissionTicket)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID);
1 | Single | METHOD_INVOCATION | Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_OWNER);
1 | Single | METHOD_INVOCATION | Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_OWNER)
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID);
1 | Single | METHOD_INVOCATION | Single.error(InvalidPermissionRequestException.INVALID_RESOURCE_ID)
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPermissionRequestException.INVALID_SCOPE_RESOURCE);
1 | Single | METHOD_INVOCATION | Single.error(InvalidPermissionRequestException.INVALID_SCOPE_RESOURCE)
1 | Single | just | METHOD_INVOCATION | return Single.just(requestedPermissions);
1 | Single | METHOD_INVOCATION | Single.just(requestedPermissions)
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return this.installationRepository.find().switchIfEmpty(Single.error(new InstallationNotFoundException()));
1 | Single | error | METHOD_INVOCATION | this.installationRepository.find().switchIfEmpty(Single.error(new InstallationNotFoundException()))
1 | Single | METHOD_INVOCATION | Single.error(new InstallationNotFoundException())
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return this.installationRepository.find().switchIfEmpty(createInternal());
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return get().flatMap((installation)->{
    Installation toUpdate = new Installation(installation);
    toUpdate.setAdditionalInformation(additionalInformation);
    return updateInternal(toUpdate);
});
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return getOrInitialize().doOnSuccess((installation)->installation.getAdditionalInformation().putAll(additionalInformation)).flatMap(this::updateInternal);
1 | Single | doOnSuccess | METHOD_INVOCATION | getOrInitialize().doOnSuccess((installation)->installation.getAdditionalInformation().putAll(additionalInformation)).flatMap
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return this.installationRepository.find().flatMapCompletable((installation)->installationRepository.delete(installation.getId()));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findAll(referenceType, referenceId, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex))
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findAll(referenceType, referenceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex))
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByName(referenceType, referenceId, groupName).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its name: {} for the {} {}", groupName, referenceType, referenceId, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByMember(memberId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex));
}).switchIfEmpty(Single.error(new GroupNotFoundException(id)));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex));
}).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex))
1 | Single | error | METHOD_INVOCATION | groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex));
}).switchIfEmpty(Single.error(new GroupNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new GroupNotFoundException(id))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findById(referenceType, referenceId, groupId).flatMap((group)->{
    if (group.getMembers() == null || group.getMembers().isEmpty()) {
        return Single.just(new Page<>(null, page, size));
    } else {
        List<String> sortedMembers = group.getMembers().stream().sorted().collect(Collectors.toList());
        List<String> pagedMemberIds = sortedMembers.subList(Math.min(sortedMembers.size(), page), Math.min(sortedMembers.size(), page + size));
        CommonUserService service = (group.getReferenceType() == ReferenceType.ORGANIZATION ? organizationUserService : userService);
        return service.findByIdIn(pagedMemberIds).toList().map((users)->new Page<>(users, page, pagedMemberIds.size()));
    }
});
1 | Single | just | METHOD_INVOCATION | return Single.just(new Page<>(null, page, size));
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(null, page, size))
1 | Single | map | METHOD_INVOCATION | return service.findByIdIn(pagedMemberIds).toList().map((users)->new Page<>(users, page, pagedMemberIds.size()));
1 | Flowable | toList | METHOD_INVOCATION | service.findByIdIn(pagedMemberIds).toList().map
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByIdIn(ids).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using ids {}", ids, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex));
});
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using ids: %s", ids), ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap(groupRepository::create).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to create a group", ex));
    }
}).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap(groupRepository::create).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to create a group", ex));
    }
}).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_CREATED).group(group))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap(groupRepository::create).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to create a group", ex));
    }
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap(groupRepository::create).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap(groupRepository::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap(this::setMembers).flatMap
1 | Single | map | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
}).flatMap
1 | Maybe | isEmpty | METHOD_INVOCATION | findByName(referenceType, referenceId, newGroup.getName()).isEmpty().map
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(group));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(group)
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a group", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a group", ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return findById(referenceType, referenceId, id).flatMapMaybe((existingGroup)->groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).map((optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return existingGroup;
})).flatMapSingle((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(group));
    }).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a group", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | findById(referenceType, referenceId, id).flatMapMaybe((existingGroup)->groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).map((optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return existingGroup;
})).flatMapSingle((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return eventService.create(event).flatMap((__)->Single.just(group));
    }).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Single | flatMapMaybe | METHOD_INVOCATION | findById(referenceType, referenceId, id).flatMapMaybe((existingGroup)->groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).map((optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return existingGroup;
})).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | (existingGroup)->groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).map((optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return existingGroup;
})
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty(Optional.empty()).map
1 | Maybe | map | METHOD_INVOCATION | groupRepository.findByName(referenceType, referenceId, updateGroup.getName()).map(Optional::of).defaultIfEmpty
1 | Single | doOnError | METHOD_INVOCATION | return setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).doOnSuccess((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return eventService.create(event).flatMap((__)->Single.just(group));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | setMembers(groupToUpdate).flatMap(groupRepository::update).flatMap
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(group));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(group)
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return findById(referenceType, referenceId, groupId).flatMapCompletable((group)->groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | findById(referenceType, referenceId, groupId).flatMapCompletable((group)->groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))).onErrorResumeNext
1 | Completable | doOnError | METHOD_INVOCATION | (group)->groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))).doOnComplete
1 | Completable | fromSingle | METHOD_INVOCATION | groupRepository.delete(groupId).andThen(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))
1 | Completable | METHOD_INVOCATION | Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findById(referenceType, referenceId, groupId).flatMap((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    if (revoke) {
        if (groupToUpdate.getRoles() != null) {
            groupToUpdate.getRoles().removeAll(roles);
        }
    } else {
        groupToUpdate.setRoles(roles);
    }
    return checkRoles(roles).andThen(Single.defer(()->groupRepository.update(groupToUpdate))).doOnSuccess((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)));
});
1 | Single | doOnError | METHOD_INVOCATION | return checkRoles(roles).andThen(Single.defer(()->groupRepository.update(groupToUpdate))).doOnSuccess((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->groupRepository.update(groupToUpdate))).doOnSuccess((group1)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_ROLES_ASSIGNED).oldValue(oldGroup).group(group1))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->groupRepository.update(groupToUpdate))).doOnSuccess
1 | Single | defer | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->groupRepository.update(groupToUpdate)))
1 | Single | METHOD_INVOCATION | Single.defer(()->groupRepository.update(groupToUpdate))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return service.findByIdIn(userMembers).map(User::getId).toList().map((userIds)->{
    group.setMembers(userIds);
    return group;
});
1 | Flowable | toList | METHOD_INVOCATION | service.findByIdIn(userMembers).map(User::getId).toList().map
1 | Flowable | map | METHOD_INVOCATION | service.findByIdIn(userMembers).map(User::getId).toList
1 | Single | just | METHOD_INVOCATION | return Single.just(group);
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Completable | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | return roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).toCompletable();
1 | Single | map | METHOD_INVOCATION | roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).toCompletable
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return this.alertNotifierRepository.findById(notifierId).filter((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId)).switchIfEmpty(Single.error(new AlertNotifierNotFoundException(notifierId)));
1 | Maybe | filter | METHOD_INVOCATION | this.alertNotifierRepository.findById(notifierId).filter((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId)).switchIfEmpty
1 | Single | error | METHOD_INVOCATION | this.alertNotifierRepository.findById(notifierId).filter((alertNotifier)->alertNotifier.getReferenceType() == referenceType && alertNotifier.getReferenceId().equals(referenceId)).switchIfEmpty(Single.error(new AlertNotifierNotFoundException(notifierId)))
1 | Single | METHOD_INVOCATION | Single.error(new AlertNotifierNotFoundException(notifierId))
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.getById(referenceType, referenceId, alertNotifierId).flatMap((alertNotifier)->{
    AlertNotifier toUpdate = patchAlertNotifier.patch(alertNotifier);
    if (toUpdate.equals(alertNotifier)) {
        return Single.just(alertNotifier);
    }
    return updateInternal(toUpdate, byUser, alertNotifier);
});
1 | Single | just | METHOD_INVOCATION | return Single.just(alertNotifier);
1 | Single | METHOD_INVOCATION | Single.just(alertNotifier)
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return this.getById(referenceType, referenceId, notifierId).flatMapCompletable((alertNotifier)->deleteInternal(alertNotifier, byUser));
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return alertNotifierRepository.create(toCreate).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(toCreate).principal(byUser).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | alertNotifierRepository.create(toCreate).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((alertTrigger)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_CREATED).alertNotifier(alertTrigger).principal(byUser))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | alertNotifierRepository.create(toCreate).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | ignoreElement | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen
1 | Single | just | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.CREATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | METHOD_INVOCATION | Single.just(updated)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return alertNotifierRepository.update(alertNotifier).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(previous).principal(updatedBy).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | alertNotifierRepository.update(alertNotifier).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess((updated)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_UPDATED).alertNotifier(updated).principal(updatedBy).oldValue(previous))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | alertNotifierRepository.update(alertNotifier).flatMap((updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (updated)->eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | ignoreElement | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen
1 | Single | just | METHOD_INVOCATION | eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(updated.getId(), updated.getReferenceType(), updated.getReferenceId(), Action.UPDATE))).ignoreElement().andThen(Single.just(updated))
1 | Single | METHOD_INVOCATION | Single.just(updated)
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return alertNotifierRepository.delete(alertNotifier.getId()).andThen(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).doOnError((throwable)->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | alertNotifierRepository.delete(alertNotifier.getId()).andThen(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | alertNotifierRepository.delete(alertNotifier.getId()).andThen(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).ignoreElement()).doOnComplete
1 | Single | ignoreElement | METHOD_INVOCATION | alertNotifierRepository.delete(alertNotifier.getId()).andThen(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE))).ignoreElement())
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findAll(referenceType, referenceId).filter((f)->(!excludeApps) ? true : f.getApplication() == null).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {}", referenceType, referenceId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex));
});
1 | Flowable | switchIfEmpty | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).filter((f)->(!excludeApps) ? true : f.getApplication() == null).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId))).onErrorResumeNext
1 | Flowable | sorted | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).filter((f)->(!excludeApps) ? true : f.getApplication() == null).sorted(getFlowComparator()).switchIfEmpty
1 | Flowable | filter | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).filter((f)->(!excludeApps) ? true : f.getApplication() == null).sorted
1 | Flowable | fromIterable | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).filter((f)->(!excludeApps) ? true : f.getApplication() == null).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId)))
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(defaultFlows(referenceType, referenceId))
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s", referenceType, referenceId), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findByApplication(referenceType, referenceId, application).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId)).map((flow)->{
    flow.setApplication(application);
    return flow;
})).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find all flows for {} {} and application {}", referenceType, referenceId, application, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex));
});
1 | Flowable | switchIfEmpty | METHOD_INVOCATION | flowRepository.findByApplication(referenceType, referenceId, application).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId)).map((flow)->{
    flow.setApplication(application);
    return flow;
})).onErrorResumeNext
1 | Flowable | sorted | METHOD_INVOCATION | flowRepository.findByApplication(referenceType, referenceId, application).sorted(getFlowComparator()).switchIfEmpty
1 | Flowable | map | METHOD_INVOCATION | flowRepository.findByApplication(referenceType, referenceId, application).sorted(getFlowComparator()).switchIfEmpty(Flowable.fromIterable(defaultFlows(referenceType, referenceId)).map((flow)->{
    flow.setApplication(application);
    return flow;
}))
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(defaultFlows(referenceType, referenceId)).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(defaultFlows(referenceType, referenceId))
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a all flows for %s %s and application %s", referenceType, referenceId, application), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its id {}", id, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex));
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapSingle((oldFlow)->{
    if (flow.getType() != null && !oldFlow.getType().equals(flow.getType())) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT.equals(flowToUpdate.getType())) {
        flowToUpdate.setPost(emptyList());
    }
    return flowRepository.update(flowToUpdate).flatMap((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT.equals(flow1.getType())) {
            flow1.setPost(emptyList());
        }
        return eventService.create(event).flatMap((__)->Single.just(flow1));
    }).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while trying to update a flow", ex);
    return Single.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | flowRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapSingle((oldFlow)->{
    if (flow.getType() != null && !oldFlow.getType().equals(flow.getType())) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT.equals(flowToUpdate.getType())) {
        flowToUpdate.setPost(emptyList());
    }
    return flowRepository.update(flowToUpdate).flatMap((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT.equals(flow1.getType())) {
            flow1.setPost(emptyList());
        }
        return eventService.create(event).flatMap((__)->Single.just(flow1));
    }).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | flowRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | flowRepository.findById(referenceType, referenceId, id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FlowNotFoundException(id))
1 | Single | doOnError | METHOD_INVOCATION | return flowRepository.update(flowToUpdate).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT.equals(flow1.getType())) {
        flow1.setPost(emptyList());
    }
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | flowRepository.update(flowToUpdate).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT.equals(flow1.getType())) {
        flow1.setPost(emptyList());
    }
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | flowRepository.update(flowToUpdate).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT.equals(flow1.getType())) {
        flow1.setPost(emptyList());
    }
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(flow1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(flow1)
1 | Single | METHOD_INVOCATION | Single.just(flow1)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapCompletable((flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error has occurred while trying to delete flow: {}", id, ex);
    return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex));
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | flowRepository.findById(id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapCompletable((flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | flowRepository.findById(id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | flowRepository.findById(id).switchIfEmpty(Maybe.error(new FlowNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FlowNotFoundException(id))
1 | Completable | doOnError | METHOD_INVOCATION | return flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)));
1 | Completable | doOnComplete | METHOD_INVOCATION | flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement().doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))).doOnError
1 | Single | ignoreElement | METHOD_INVOCATION | flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement().doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | flowRepository.delete(id).andThen(eventService.create(event)).ignoreElement
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex))
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        InputStream resourceAsStream = this.getClass().getResourceAsStream(DEFINITION_PATH);
        String schema = IOUtils.toString(resourceAsStream, defaultCharset());
        emitter.onSuccess(schema);
    } catch (Exception e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load flow schema", e));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        InputStream resourceAsStream = this.getClass().getResourceAsStream(DEFINITION_PATH);
        String schema = IOUtils.toString(resourceAsStream, defaultCharset());
        emitter.onSuccess(schema);
    } catch (Exception e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load flow schema", e));
    }
})
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidParameterException("Multiple flows have the same Id"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidParameterException("Multiple flows have the same Id"))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findAll(referenceType, referenceId).toList().flatMap((existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && !mapOfExistingFlows.get(flow.getId()).getType().equals(flow.getType())) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList().flatMap((persistedFlows)->Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while trying to update flows", ex);
    return Single.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).toList().flatMap((existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && !mapOfExistingFlows.get(flow.getId()).getType().equals(flow.getType())) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList().flatMap((persistedFlows)->Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows));
}).onErrorResumeNext
1 | Flowable | toList | METHOD_INVOCATION | flowRepository.findAll(referenceType, referenceId).toList().flatMap
1 | Single | flatMap | METHOD_INVOCATION | return Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList().flatMap((persistedFlows)->Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList().flatMap
1 | Observable | sorted | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(flows)
1 | Completable | toSingleDefault | METHOD_INVOCATION | (persistedFlows)->Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows)
1 | Observable | flatMapCompletable | METHOD_INVOCATION | Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flowIdsToDelete).flatMapCompletable
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(flowIdsToDelete)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return flowRepository.create(flow).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return Single.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex));
}).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | flowRepository.create(flow).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return Single.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex));
}).doOnSuccess((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_CREATED).flow(flow1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | flowRepository.create(flow).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return Single.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | flowRepository.create(flow).flatMap((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return eventService.create(event).flatMap((__)->Single.just(flow1));
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | return eventService.create(event).flatMap((__)->Single.just(flow1));
1 | Single | just | METHOD_INVOCATION | (__)->Single.just(flow1)
1 | Single | METHOD_INVOCATION | Single.just(flow1)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(entrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(entrypoint)
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = cut.createDefaults(organization).test()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = cut.createDefaults(organization).test()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.create(ORGANIZATION_ID, newEntrypoint, user).test()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.create(ORGANIZATION_ID, newEntrypoint, user).test()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(new Organization()))
1 | Single | METHOD_INVOCATION | Single.just(new Organization())
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEntrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEntrypoint)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEntrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEntrypoint)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Maybe | empty | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, new UpdateEntrypoint(), user).test()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(new Organization()))
1 | Single | METHOD_INVOCATION | Single.just(new Organization())
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEntrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEntrypoint)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEntrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEntrypoint)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEntrypoint))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEntrypoint)
1 | Completable | complete | METHOD_INVOCATION | when(entrypointRepository.delete(ENTRYPOINT_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = cut.delete(ENTRYPOINT_ID, ORGANIZATION_ID, user).test()
1 | Maybe | empty | METHOD_INVOCATION | when(entrypointRepository.findById(ENTRYPOINT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = cut.delete(ENTRYPOINT_ID, ORGANIZATION_ID, user).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same"))))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same")))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(resourceService.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList("one"))).thenReturn(Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b"))))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")))
1 | Single | just | METHOD_INVOCATION | when(repository.create(any())).thenReturn(Single.just(new PermissionTicket().setId("success")))
1 | Single | METHOD_INVOCATION | Single.just(new PermissionTicket().setId("success"))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | just | METHOD_INVOCATION | Flowable<Resource> found = FlowableRange.just(new Resource().setId("one").setResourceScopes(Arrays.asList("not", "same")))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | map | METHOD_INVOCATION | Flowable<Resource> found = Flowable.fromIterable(request).map((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()).setUserId("user_" + s.getResourceId()))
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(request).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(request)
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | just | METHOD_INVOCATION | Flowable<Resource> found = Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")), new Resource().setId("two").setResourceScopes(Arrays.asList("not", "same")))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b")), new Resource().setId("two").setResourceScopes(Arrays.asList("not", "same")))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | map | METHOD_INVOCATION | Flowable<Resource> found = Flowable.fromIterable(request).map((s)->new Resource().setId(s.getResourceId()).setResourceScopes(s.getResourceScopes()))
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(request).map
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(request)
1 | Single | just | METHOD_INVOCATION | when(repository.create(any())).thenReturn(Single.just(new PermissionTicket().setId("success")))
1 | Single | METHOD_INVOCATION | Single.just(new PermissionTicket().setId("success"))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | just | METHOD_INVOCATION | Flowable<Resource> found = Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b", "c")), new Resource().setId("two").setResourceScopes(Arrays.asList("c", "d")))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId("one").setResourceScopes(Arrays.asList("a", "b", "c")), new Resource().setId("two").setResourceScopes(Arrays.asList("c", "d")))
1 | Single | just | METHOD_INVOCATION | when(repository.create(permissionTicketArgumentCaptor.capture())).thenReturn(Single.just(new PermissionTicket().setId("success")))
1 | Single | METHOD_INVOCATION | Single.just(new PermissionTicket().setId("success"))
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(Maybe.just(new PermissionTicket()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new PermissionTicket())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.findById("id").test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.remove("id").test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById("id")).thenReturn(Maybe.just(new PermissionTicket().setId("id")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new PermissionTicket().setId("id"))
1 | Completable | complete | METHOD_INVOCATION | when(repository.delete("id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.remove("id").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(Maybe.just(new ScopeApproval()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ScopeApproval())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.findById("my-consent").test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.findById("my-consent").test()
1 | Maybe | error | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | scopeApprovalService.findById("my-consent").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser(DOMAIN, "userId")).thenReturn(Flowable.just(dummyScopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(dummyScopeApproval)
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | error | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser(DOMAIN, "userId")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ScopeApproval> testSubscriber = scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").test()
1 | Flowable | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId")).thenReturn(Flowable.just(dummyScopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(dummyScopeApproval)
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | error | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.revokeByConsent("my-domain", "user-id", "my-consent").test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.delete("my-consent")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | just | METHOD_INVOCATION | when(scopeApprovalRepository.findById("my-consent")).thenReturn(Maybe.just(scopeApproval))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scopeApproval)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.revokeByConsent("my-domain", "user-id", "my-consent").test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Flowable | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUser("my-domain", "user-id")).thenReturn(Flowable.just(scopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(scopeApproval)
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUser("my-domain", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdAndUserId("my-domain", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdAndUserId("my-domain", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUser("my-domain", "user-id", new DefaultUser("user-id")).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUser("my-domain", "user-id", new DefaultUser("user-id")).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Flowable | just | METHOD_INVOCATION | when(scopeApprovalRepository.findByDomainAndUserAndClient("my-domain", "user-id", "client-id")).thenReturn(Flowable.just(scopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(scopeApproval)
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndUserAndClient("my-domain", "user-id", "client-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("my-domain", "client-id", "user-id")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUserAndClient("my-domain", "user-id", "client-id", new DefaultUser("user-id")).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findById("user-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUserAndClient("my-domain", "user-id", "client-id", new DefaultUser("user-id")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.just(new BotDetection()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new BotDetection())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.findById("bot-detection").test()
1 | Maybe | empty | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.findById("bot-detection").test()
1 | Maybe | error | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | botDetectionService.findById("bot-detection").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(botDetectionRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new BotDetection()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new BotDetection())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = botDetectionService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(botDetectionRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = botDetectionService.findByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(botDetectionRepository.create(any(BotDetection.class))).thenReturn(Single.just(new BotDetection()))
1 | Single | METHOD_INVOCATION | Single.just(new BotDetection())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.create(DOMAIN, newBotDetection).test()
1 | Single | error | METHOD_INVOCATION | when(botDetectionRepository.create(any())).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | botDetectionService.create(DOMAIN, newBotDetection).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.just(new BotDetection()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new BotDetection())
1 | Single | just | METHOD_INVOCATION | when(botDetectionRepository.update(any(BotDetection.class))).thenReturn(Single.just(new BotDetection()))
1 | Single | METHOD_INVOCATION | Single.just(new BotDetection())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.update(DOMAIN, "bot-detection", updateBotDetection).test()
1 | Maybe | error | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.update(DOMAIN, "bot-detection", updateBotDetection).test()
1 | Maybe | empty | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, "bot-detection").test()
1 | Maybe | error | METHOD_INVOCATION | when(botDetectionRepository.findById("bot-detection")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, "bot-detection").test()
1 | Maybe | just | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(Maybe.just(detection))
1 | Maybe | METHOD_INVOCATION | Maybe.just(detection)
1 | Completable | complete | METHOD_INVOCATION | when(botDetectionRepository.delete(detection.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(Maybe.just(detection))
1 | Maybe | METHOD_INVOCATION | Maybe.just(detection)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(botDetectionRepository.findById(detection.getId())).thenReturn(Maybe.just(detection))
1 | Maybe | METHOD_INVOCATION | Maybe.just(detection)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(Sets.newHashSet(app)))
1 | Single | METHOD_INVOCATION | Single.just(Sets.newHashSet(app))
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(Maybe.just(new Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Group())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = groupService.findById("my-group").test()
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = groupService.findById("my-group").test()
1 | Maybe | error | METHOD_INVOCATION | when(groupRepository.findById("my-group")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | groupService.findById("my-group").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new Group()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Group())
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = groupService.findByDomain(DOMAIN).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | groupService.findByDomain(DOMAIN).toList().test
1 | Flowable | error | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = groupService.findByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(Single.just(pagedGroups))
1 | Single | METHOD_INVOCATION | Single.just(pagedGroups)
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Group>> testObserver = groupService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | error | METHOD_INVOCATION | when(groupRepository.findAll(ReferenceType.DOMAIN, DOMAIN, 1, 1)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | groupService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(groupRepository.create(any(Group.class))).thenReturn(Single.just(group))
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.create(DOMAIN, newGroup).test()
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(groupRepository.create(any(Group.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(DOMAIN, newGroup).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, newGroup.getName())).thenReturn(Maybe.just(new Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Group())
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(DOMAIN, newGroup).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, DOMAIN, updateGroup.getName())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(groupRepository.update(any(Group.class))).thenReturn(Single.just(group))
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.update(DOMAIN, "my-group", updateGroup).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.just(new Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Group())
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(DOMAIN, "my-group", updateGroup).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(DOMAIN, "my-group", updateGroup).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.just(new Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Group())
1 | Completable | complete | METHOD_INVOCATION | when(groupRepository.delete("my-group")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.just(new Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Group())
1 | Completable | error | METHOD_INVOCATION | when(groupRepository.delete("my-group")).thenReturn(Completable.error(TechnicalException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalException::new)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-group")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | just | METHOD_INVOCATION | when(groupRepository.update(any())).thenReturn(Single.just(new Group()))
1 | Single | METHOD_INVOCATION | Single.just(new Group())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.assignRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.assignRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | just | METHOD_INVOCATION | when(groupRepository.update(any())).thenReturn(Single.just(new Group()))
1 | Single | METHOD_INVOCATION | Single.just(new Group())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.revokeRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.revokeRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Flowable | just | METHOD_INVOCATION | when(userService.findByIdIn(any())).thenReturn(Flowable.just(new User()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new User())
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = groupService.findMembers(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0).test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("group-id"))).thenReturn(Maybe.just(group))
1 | Maybe | METHOD_INVOCATION | Maybe.just(group)
1 | Flowable | just | METHOD_INVOCATION | when(organizationUserService.findByIdIn(any())).thenReturn(Flowable.just(new User()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new User())
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = groupService.findMembers(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = domainService.findById("my-domain").test()
1 | Maybe | empty | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = domainService.findById("my-domain").test()
1 | Maybe | error | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | domainService.findById("my-domain").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(new Domain()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Domain())
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver = domainService.findAll().test()
1 | Flowable | error | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | domainService.findAll().subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findByIdIn(Arrays.asList("1", "2"))).thenReturn(Flowable.just(new Domain()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Domain())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = domainService.findByIdIn(Arrays.asList("1", "2")).test()
1 | Flowable | error | METHOD_INVOCATION | when(domainRepository.findByIdIn(Arrays.asList("1", "2"))).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = domainService.findByIdIn(Arrays.asList("1", "2")).test()
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(domainRepository.create(any(Domain.class))).thenReturn(Single.just(domain))
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | just | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(certificateService.create(eq(domain.getId()))).thenReturn(Single.just(new Certificate()))
1 | Single | METHOD_INVOCATION | Single.just(new Certificate())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(ORGANIZATION_ID), any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).thenReturn(Maybe.just(new Role()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Role())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain, new DefaultUser("username")).test()
1 | Maybe | error | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Flowable | empty | METHOD_INVOCATION | when((domainRepository.findAll())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | error | METHOD_INVOCATION | when(domainRepository.create(any(Domain.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, "my-domain")).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(Single.just(domain))
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(Single.just(domain))
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(ENVIRONMENT_ID)).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(domainRepository.update(any(Domain.class))).thenReturn(Single.just(domain))
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, domain.getHrid())).thenReturn(Maybe.just(otherDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(otherDomain)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | error | METHOD_INVOCATION | when(domainRepository.findById("my-domain")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Completable | complete | METHOD_INVOCATION | when(domainRepository.delete(DOMAIN_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(mockApplications))
1 | Single | METHOD_INVOCATION | Single.just(mockApplications)
1 | Completable | complete | METHOD_INVOCATION | when(applicationService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(certificate))
1 | Flowable | METHOD_INVOCATION | Flowable.just(certificate)
1 | Completable | complete | METHOD_INVOCATION | when(certificateService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(identityProvider))
1 | Flowable | METHOD_INVOCATION | Flowable.just(identityProvider)
1 | Completable | complete | METHOD_INVOCATION | when(identityProviderService.delete(eq(DOMAIN_ID), anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(extensionGrantService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(extensionGrant))
1 | Flowable | METHOD_INVOCATION | Flowable.just(extensionGrant)
1 | Completable | complete | METHOD_INVOCATION | when(extensionGrantService.delete(eq(DOMAIN_ID), anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Completable | complete | METHOD_INVOCATION | when(roleService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(userService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(user))
1 | Flowable | METHOD_INVOCATION | Flowable.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(scope), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(scope), 0, 1))
1 | Completable | complete | METHOD_INVOCATION | when(scopeService.delete(SCOPE_ID, true)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(groupService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(group))
1 | Flowable | METHOD_INVOCATION | Flowable.just(group)
1 | Completable | complete | METHOD_INVOCATION | when(groupService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(formService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(form))
1 | Flowable | METHOD_INVOCATION | Flowable.just(form)
1 | Completable | complete | METHOD_INVOCATION | when(formService.delete(eq(DOMAIN_ID), anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flowable.just(email))
1 | Flowable | METHOD_INVOCATION | Flowable.just(email)
1 | Completable | complete | METHOD_INVOCATION | when(emailTemplateService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(reporterService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(reporter))
1 | Flowable | METHOD_INVOCATION | Flowable.just(reporter)
1 | Completable | complete | METHOD_INVOCATION | when(reporterService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Completable | complete | METHOD_INVOCATION | when(flowService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByReference(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Completable | complete | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(factor))
1 | Flowable | METHOD_INVOCATION | Flowable.just(factor)
1 | Completable | complete | METHOD_INVOCATION | when(factorService.delete(DOMAIN_ID, FACTOR_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(resourceService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(new HashSet<>(Collections.singletonList(resource))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Collections.singletonList(resource)))
1 | Completable | complete | METHOD_INVOCATION | when(resourceService.delete(resource)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flowable.just(alertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertTrigger)
1 | Completable | complete | METHOD_INVOCATION | when(alertTriggerService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_TRIGGER_ID), isNull())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Completable | complete | METHOD_INVOCATION | when(alertNotifierService.delete(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq(ALERT_NOTIFIER_ID), isNull())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Completable | complete | METHOD_INVOCATION | when(domainRepository.delete(DOMAIN_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Flowable | empty | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(extensionGrantService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Flowable | empty | METHOD_INVOCATION | when(userService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptySet(), 0, 1))
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(formService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(reporterService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByReference(DOMAIN_ID, ReferenceType.DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(resourceService.findByDomain(DOMAIN_ID)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Flowable | empty | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(alertNotifierService.findByDomainAndCriteria(DOMAIN_ID, new AlertNotifierCriteria())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById(DOMAIN_ID)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | error | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN_ID)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAllByCriteria(eq(criteria))).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<Domain> obs = domainService.findAllByCriteria(criteria).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(resourceRepository.findById("my-resource")).thenReturn(Maybe.just(new ServiceResource()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ServiceResource())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = resourceService.findById("my-resource").test()
1 | Maybe | empty | METHOD_INVOCATION | when(resourceRepository.findById("my-resource")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = resourceService.findById("my-resource").test()
1 | Flowable | just | METHOD_INVOCATION | when(resourceRepository.findByReference(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new ServiceResource()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new ServiceResource())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testObserver = resourceService.findByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(resourceRepository.create(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(Single.just(record))
1 | Single | METHOD_INVOCATION | Single.just(record)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.create(DOMAIN, resource, null).test()
1 | Single | error | METHOD_INVOCATION | when(resourceRepository.create(argThat((bean)->bean.getName().equals(resource.getName())))).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.create(DOMAIN, resource, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(Maybe.just(record))
1 | Maybe | METHOD_INVOCATION | Maybe.just(record)
1 | Single | just | METHOD_INVOCATION | when(resourceRepository.update(argThat((bean)->bean.getId().equals(record.getId())))).thenReturn(Single.just(record))
1 | Single | METHOD_INVOCATION | Single.just(record)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.update(DOMAIN, record.getId(), resource, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(resourceRepository.findById(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.update(DOMAIN, UUID.randomUUID().toString(), new UpdateServiceResource(), null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(resourceRepository.findById(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, UUID.randomUUID().toString(), null).test()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Maybe | just | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(Maybe.just(record))
1 | Maybe | METHOD_INVOCATION | Maybe.just(record)
1 | Completable | complete | METHOD_INVOCATION | when(resourceRepository.delete(record.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | empty | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, record.getId(), null).test()
1 | Maybe | just | METHOD_INVOCATION | when(resourceRepository.findById(record.getId())).thenReturn(Maybe.just(record))
1 | Maybe | METHOD_INVOCATION | Maybe.just(record)
1 | Flowable | just | METHOD_INVOCATION | when(factorService.findByDomain(DOMAIN)).thenReturn(Flowable.just(factor))
1 | Flowable | METHOD_INVOCATION | Flowable.just(factor)
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, record.getId(), null).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findById("my-user").test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findById("my-user").test()
1 | Maybe | error | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | userService.findById("my-user").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(userRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new User()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new User())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(userRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = userService.findByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(userRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(Single.just(pageUsers))
1 | Single | METHOD_INVOCATION | Single.just(pageUsers)
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | error | METHOD_INVOCATION | when(userRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq(1), eq(1))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | userService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findByDomainAndUsername(DOMAIN, "my-user").test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findByDomainAndUsername(DOMAIN, "my-user").test()
1 | Maybe | error | METHOD_INVOCATION | when(userRepository.findByUsernameAndDomain(DOMAIN, "my-user")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | userService.findByDomainAndUsername(DOMAIN, "my-user").subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.create(DOMAIN, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(DOMAIN, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(DOMAIN, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | userService.create(DOMAIN, newUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, DOMAIN, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | subscribe | METHOD_INVOCATION | userService.create(DOMAIN, newUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | error | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | userService.update(DOMAIN, "my-user", updateUser).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-user"))).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | userService.update(DOMAIN, "my-user", updateUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | empty | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | just | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flowable.just(credential))
1 | Flowable | METHOD_INVOCATION | Flowable.just(credential)
1 | Completable | complete | METHOD_INVOCATION | when(credentialService.delete(credential.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Maybe | error | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Flowable | just | METHOD_INVOCATION | when(formRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flowable.just(formOne, formTwo))
1 | Flowable | METHOD_INVOCATION | Flowable.just(formOne, formTwo)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = formService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Maybe | just | METHOD_INVOCATION | when(formRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Maybe.just(new Form()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Form())
1 | Flowable | just | METHOD_INVOCATION | when(formRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flowable.just(formOne))
1 | Flowable | METHOD_INVOCATION | Flowable.just(formOne)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = formService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Flowable | just | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.just(form))
1 | Flowable | METHOD_INVOCATION | Flowable.just(form)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | empty | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | error | METHOD_INVOCATION | when(formRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(0, 1)).thenReturn(Flowable.just(new Event()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.findByTimeFrame(0, 1).test()
1 | Flowable | error | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(0, 1)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.findByTimeFrame(0, 1).test()
1 | Single | just | METHOD_INVOCATION | when(eventRepository.create(any(Event.class))).thenReturn(Single.just(newEvent))
1 | Single | METHOD_INVOCATION | Single.just(newEvent)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.create(newEvent).test()
1 | Single | error | METHOD_INVOCATION | when(eventRepository.create(any(Event.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.create(newEvent).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Flowable | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(group))
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | error | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.error(new UserNotFoundException("user-id")))
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException("user-id"))
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Flowable | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), argThat((criteria)->criteria.getRoleId().isPresent()))).thenReturn(Flowable.just(new Membership()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Membership())
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(group))
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | error | METHOD_INVOCATION | when(groupService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.error(new GroupNotFoundException("group-id")))
1 | Single | METHOD_INVOCATION | Single.error(new GroupNotFoundException("group-id"))
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | just | METHOD_INVOCATION | when(userService.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberId())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findById(role.getId())).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Maybe | empty | METHOD_INVOCATION | when(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(Maybe.just(environmentUserRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(environmentUserRole)
1 | Single | just | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addEnvironmentUserRoleIfNecessary("orga#1", "env#1", membership, principal).test()
1 | Flowable | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flowable.just(new Membership()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Membership())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addEnvironmentUserRoleIfNecessary("orga#1", "env#1", membership, principal).test()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN)).thenReturn(Maybe.just(environmentUserRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(environmentUserRole)
1 | Single | just | METHOD_INVOCATION | when(membershipRepository.create(any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findDefaultRole("orga#1", DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT)).thenReturn(Maybe.just(environmentUserRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(environmentUserRole)
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addDomainUserRoleIfNecessary("orga#1", "env#1", "domain#1", membership, principal).test()
1 | Flowable | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq("env#1"), any(MembershipCriteria.class))).thenReturn(Flowable.just(new Membership()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Membership())
1 | Flowable | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.DOMAIN), eq("domain#1"), any(MembershipCriteria.class))).thenReturn(Flowable.just(new Membership()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Membership())
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addDomainUserRoleIfNecessary("orga#1", "env#1", "domain#1", membership, principal).test()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Maybe.just(platformAdminRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(platformAdminRole)
1 | Flowable | empty | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Maybe | empty | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.PLATFORM_ADMIN, ReferenceType.PLATFORM)).thenReturn(Maybe.just(platformAdminRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(platformAdminRole)
1 | Flowable | just | METHOD_INVOCATION | when(membershipRepository.findByCriteria(eq(ReferenceType.PLATFORM), eq(Platform.DEFAULT), argThat((criteria)->criteria != null && criteria.getUserId().get().equals(userId)))).thenReturn(Flowable.just(alreadyExisting))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alreadyExisting)
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(environment))
1 | Maybe | METHOD_INVOCATION | Maybe.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(Maybe.just(environment))
1 | Maybe | METHOD_INVOCATION | Maybe.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(Flowable.just(environment))
1 | Flowable | METHOD_INVOCATION | Flowable.just(environment)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Flowable | empty | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Flowable | error | METHOD_INVOCATION | when(environmentRepository.findAll(ORGANIZATION_ID)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Single | just | METHOD_INVOCATION | when(environmentRepository.count()).thenReturn(Single.just(0L))
1 | Single | METHOD_INVOCATION | Single.just(0L)
1 | Single | just | METHOD_INVOCATION | when(environmentRepository.create(argThat((environment)->environment.getId().equals(Environment.DEFAULT)))).thenReturn(Single.just(defaultEnvironment))
1 | Single | METHOD_INVOCATION | Single.just(defaultEnvironment)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createDefault().test()
1 | Single | just | METHOD_INVOCATION | when(environmentRepository.count()).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createDefault().test()
1 | Maybe | empty | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Maybe | empty | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | error | METHOD_INVOCATION | when(environmentRepository.create(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(Single.error(new TechnicalManagementException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException())
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Maybe | empty | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_ID)).thenReturn(Single.error(new OrganizationNotFoundException(ORGANIZATION_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new OrganizationNotFoundException(ORGANIZATION_ID))
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Maybe | just | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEnvironment))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEnvironment)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Maybe | just | METHOD_INVOCATION | when(environmentRepository.findById(ENVIRONMENT_ID, ORGANIZATION_ID)).thenReturn(Maybe.just(existingEnvironment))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingEnvironment)
1 | Single | error | METHOD_INVOCATION | when(environmentRepository.update(argThat((environment)->environment.getId().equals(ENVIRONMENT_ID)))).thenReturn(Single.error(new TechnicalManagementException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException())
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.just(new Credential()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Credential())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.findById("my-credential").test()
1 | Maybe | empty | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.findById("my-credential").test()
1 | Maybe | error | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | credentialService.findById("my-credential").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(credentialRepository.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(Flowable.just(new Credential()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Credential())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialService.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id").test()
1 | Flowable | error | METHOD_INVOCATION | when(credentialRepository.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id").test()
1 | Flowable | just | METHOD_INVOCATION | when(credentialRepository.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(Flowable.just(new Credential()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Credential())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = credentialService.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username").test()
1 | Flowable | error | METHOD_INVOCATION | when(credentialRepository.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username").test()
1 | Flowable | just | METHOD_INVOCATION | when(credentialRepository.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(Flowable.just(new Credential()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Credential())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialService.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId").test()
1 | Flowable | error | METHOD_INVOCATION | when(credentialRepository.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId").test()
1 | Single | just | METHOD_INVOCATION | when(credentialRepository.create(any(Credential.class))).thenReturn(Single.just(new Credential()))
1 | Single | METHOD_INVOCATION | Single.just(new Credential())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.create(newCredential).test()
1 | Single | error | METHOD_INVOCATION | when(credentialRepository.create(any(Credential.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | credentialService.create(newCredential).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.just(new Credential()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Credential())
1 | Single | just | METHOD_INVOCATION | when(credentialRepository.update(any(Credential.class))).thenReturn(Single.just(new Credential()))
1 | Single | METHOD_INVOCATION | Single.just(new Credential())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Maybe | error | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Maybe | just | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.just(new Credential()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Credential())
1 | Single | error | METHOD_INVOCATION | when(credentialRepository.update(any(Credential.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Maybe | error | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Maybe | empty | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Maybe | just | METHOD_INVOCATION | when(credentialRepository.findById("my-credential")).thenReturn(Maybe.just(new Credential()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Credential())
1 | Completable | complete | METHOD_INVOCATION | when(credentialRepository.delete("my-credential")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(alertTriggerRepository.findById(ALERT_TRIGGER_ID)).thenReturn(Maybe.just(alertTrigger))
1 | Maybe | METHOD_INVOCATION | Maybe.just(alertTrigger)
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.getById(ALERT_TRIGGER_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(alertTriggerRepository.findById(ALERT_TRIGGER_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.getById(ALERT_TRIGGER_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flowable.just(alertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertTrigger)
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertTrigger> obs = cut.findByDomainAndCriteria(DOMAIN_ID, criteria).test()
1 | Flowable | empty | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.createOrUpdate(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME)).test()
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flowable.just(existingAlertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingAlertTrigger)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.createOrUpdate(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria(loginAttemptCriteria)).thenReturn(Maybe.just(loginAttempt))
1 | Maybe | METHOD_INVOCATION | Maybe.just(loginAttempt)
1 | Single | just | METHOD_INVOCATION | when(loginAttemptRepository.update(loginAttempt)).thenReturn(Single.just(loginAttempt))
1 | Single | METHOD_INVOCATION | Single.just(loginAttempt)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = loginAttemptService.loginFailed(loginAttemptCriteria, accountSettings).test()
1 | Maybe | just | METHOD_INVOCATION | when(loginAttemptRepository.findByCriteria(loginAttemptCriteria)).thenReturn(Maybe.just(loginAttempt))
1 | Maybe | METHOD_INVOCATION | Maybe.just(loginAttempt)
1 | Single | just | METHOD_INVOCATION | when(loginAttemptRepository.update(loginAttempt)).thenReturn(Single.just(loginAttempt))
1 | Single | METHOD_INVOCATION | Single.just(loginAttempt)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = loginAttemptService.loginFailed(loginAttemptCriteria, accountSettings).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findById("my-client").test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findById("my-client").test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | applicationService.findById("my-client").subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findByDomainAndClientId(DOMAIN, "my-client").test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findByDomainAndClientId(DOMAIN, "my-client").test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | applicationService.findByDomainAndClientId(DOMAIN, "my-client").subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(new Application()), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(new Application()), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findByDomain(DOMAIN).test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomain(DOMAIN).subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 1, 1)).thenReturn(Single.just(pageClients))
1 | Single | METHOD_INVOCATION | Single.just(pageClients)
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.findByDomain(DOMAIN, 1, 1)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider("client-idp")).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationService.findByIdentityProvider("client-idp").test()
1 | Flowable | error | METHOD_INVOCATION | when(applicationRepository.findByIdentityProvider("client-idp")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = applicationService.findByIdentityProvider("client-idp").test()
1 | Flowable | just | METHOD_INVOCATION | when(applicationRepository.findByCertificate("client-certificate")).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testObserver = applicationService.findByCertificate("client-certificate").test()
1 | Flowable | error | METHOD_INVOCATION | when(applicationRepository.findByCertificate("client-certificate")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSub = applicationService.findByCertificate("client-certificate").test()
1 | Flowable | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant")).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant").test()
1 | Flowable | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant")).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant").subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.findAll(0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page(Collections.singleton(new Application()), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page(Collections.singleton(new Application()), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findAll().test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.findAll(0, Integer.MAX_VALUE)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findAll().subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.findAll(1, 1)).thenReturn(Single.just(pageClients))
1 | Single | METHOD_INVOCATION | Single.just(pageClients)
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationService.findAll(1, 1).test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.findAll(1, 1)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findAll(1, 1).subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.countByDomain(DOMAIN)).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = applicationService.countByDomain(DOMAIN).test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.countByDomain(DOMAIN)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.countByDomain(DOMAIN).subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.count()).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = applicationService.count().test()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.count()).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.count().subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(Single.just(createClient))
1 | Single | METHOD_INVOCATION | Single.just(createClient)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(anyString())).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(ORGANIZATION_ID), any())).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).thenReturn(Maybe.just(new Role()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Role())
1 | Flowable | empty | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationService.create(DOMAIN, newClient, user).test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Flowable | empty | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(new Application()).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(toCreate).test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findByDomainAndClientId(DOMAIN, "client_id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.create(any(Application.class))).thenReturn(Single.just(createClient))
1 | Single | METHOD_INVOCATION | Single.just(createClient)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(anyString())).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(anyString(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | empty | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(DOMAIN, newClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(toPatch))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toPatch)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(Maybe.just(idp1))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp1)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(Maybe.just(idp2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp2)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(new Application()).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(any(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById(any())).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(any())).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(any(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(Maybe.just(idp1))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp1)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(Maybe.just(idp2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp2)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id1")).thenReturn(Maybe.just(idp1))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp1)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderService.findById("id2")).thenReturn(Maybe.just(idp2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idp2)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, new ArrayList<>())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById(existingClient.getId())).thenReturn(Maybe.just(existingClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingClient)
1 | Completable | complete | METHOD_INVOCATION | when(applicationRepository.delete(existingClient.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | just | METHOD_INVOCATION | when(formService.findByDomainAndClient(existingClient.getDomain(), existingClient.getId())).thenReturn(Flowable.just(form))
1 | Flowable | METHOD_INVOCATION | Flowable.just(form)
1 | Completable | complete | METHOD_INVOCATION | when(formService.delete(eq("my-domain"), eq(form.getId()))).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(emailTemplateService.findByClient(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(Flowable.just(email))
1 | Flowable | METHOD_INVOCATION | Flowable.just(email)
1 | Completable | complete | METHOD_INVOCATION | when(emailTemplateService.delete(email.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByReference(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Completable | complete | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete(existingClient.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById(existingClient.getId())).thenReturn(Maybe.just(existingClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingClient)
1 | Completable | complete | METHOD_INVOCATION | when(applicationRepository.delete(existingClient.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | empty | METHOD_INVOCATION | when(formService.findByDomainAndClient(existingClient.getDomain(), existingClient.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(emailTemplateService.findByClient(ReferenceType.DOMAIN, existingClient.getDomain(), existingClient.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByReference(existingClient.getId(), ReferenceType.APPLICATION)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete(existingClient.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Completable | error | METHOD_INVOCATION | when(applicationRepository.delete(anyString())).thenReturn(Completable.error(TechnicalException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(DOMAIN)).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | just | METHOD_INVOCATION | when(scopeService.validateScope(DOMAIN, Collections.emptyList())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Maybe | just | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationRepository.findById("my-client")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(Maybe.just(new Role()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Role())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findById("my-role").test()
1 | Maybe | empty | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findById("my-role").test()
1 | Maybe | error | METHOD_INVOCATION | when(roleRepository.findById("my-role")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | roleService.findById("my-role").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new Role()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Role())
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = roleService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalManagementException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalManagementException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findByDomain(DOMAIN).test()
1 | Flowable | just | METHOD_INVOCATION | when(roleRepository.findByIdIn(Arrays.asList("my-role"))).thenReturn(Flowable.just(new Role()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Role())
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = roleService.findByIdIn(Arrays.asList("my-role")).test()
1 | Flowable | error | METHOD_INVOCATION | when(roleRepository.findByIdIn(anyList())).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | roleService.findByIdIn(Arrays.asList("my-role")).subscribe(testObserver);
1 | Flowable | empty | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(roleRepository.create(any(Role.class))).thenReturn(Single.just(role))
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.create(DOMAIN, newRole).test()
1 | Flowable | error | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | roleService.create(DOMAIN, newRole).subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(role))
1 | Flowable | METHOD_INVOCATION | Flowable.just(role)
1 | Single | subscribe | METHOD_INVOCATION | roleService.create(DOMAIN, newRole).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Flowable | empty | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(roleRepository.update(any(Role.class))).thenReturn(Single.just(role))
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(DOMAIN, "my-role", updateRole).test()
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Flowable | empty | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.ORGANIZATION, ORGANIZATION_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(roleRepository.update(argThat((r)->r.getPermissionAcls().equals(Permission.unflatten(updateRole.getPermissions()))))).thenReturn(Single.just(role))
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Maybe | error | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Maybe.just(new Role()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Role())
1 | Flowable | just | METHOD_INVOCATION | when(roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(role))
1 | Flowable | METHOD_INVOCATION | Flowable.just(role)
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role")).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(roleRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-role")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any(Event.class))).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Maybe.just(new Role()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Role())
1 | Completable | error | METHOD_INVOCATION | when(roleRepository.delete(anyString())).thenReturn(Completable.error(TechnicalException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Maybe | just | METHOD_INVOCATION | when(roleRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-role"))).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Completable | complete | METHOD_INVOCATION | when(roleRepository.delete("my-role")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.just(new ExtensionGrant()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ExtensionGrant())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.findById("my-extension-grant").test()
1 | Maybe | empty | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.findById("my-extension-grant").test()
1 | Maybe | error | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantService.findById("my-extension-grant").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(new ExtensionGrant()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new ExtensionGrant())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = extensionGrantService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = extensionGrantService.findByDomain(DOMAIN).test()
1 | Maybe | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(extensionGrantRepository.create(any(ExtensionGrant.class))).thenReturn(Single.just(new ExtensionGrant()))
1 | Single | METHOD_INVOCATION | Single.just(new ExtensionGrant())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.create(DOMAIN, newExtensionGrant).test()
1 | Maybe | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(extensionGrantRepository.create(any(ExtensionGrant.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.just(new ExtensionGrant()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ExtensionGrant())
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.just(new ExtensionGrant()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ExtensionGrant())
1 | Maybe | empty | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(extensionGrantRepository.update(any(ExtensionGrant.class))).thenReturn(Single.just(new ExtensionGrant()))
1 | Single | METHOD_INVOCATION | Single.just(new ExtensionGrant())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Maybe | error | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.just(new ExtensionGrant()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ExtensionGrant())
1 | Maybe | error | METHOD_INVOCATION | when(extensionGrantRepository.findByDomainAndName(DOMAIN, "my-extension-grant")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Maybe | empty | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant.getId())).thenReturn(Maybe.just(extensionGrant))
1 | Maybe | METHOD_INVOCATION | Maybe.just(extensionGrant)
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(Single.just(Collections.singleton(new Application())))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(new Application()))
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant.getId())).thenReturn(Maybe.just(extensionGrant))
1 | Maybe | METHOD_INVOCATION | Maybe.just(extensionGrant)
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant.getGrantType())).thenReturn(Single.just(Collections.singleton(new Application())))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(new Application()))
1 | Flowable | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(extensionGrant, extensionGrant2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(extensionGrant, extensionGrant2)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById(extensionGrant2.getId())).thenReturn(Maybe.just(extensionGrant2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(extensionGrant2)
1 | Completable | complete | METHOD_INVOCATION | when(extensionGrantRepository.delete(extensionGrant2.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant2.getGrantType() + "~" + extensionGrant2.getId())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, extensionGrant2.getGrantType())).thenReturn(Single.just(Collections.singleton(new Application())))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(new Application()))
1 | Flowable | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(extensionGrant, extensionGrant2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(extensionGrant, extensionGrant2)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant2.getId()).test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.just(new ExtensionGrant()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ExtensionGrant())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Maybe | just | METHOD_INVOCATION | when(extensionGrantRepository.findById("my-extension-grant")).thenReturn(Maybe.just(existingExtensionGrant))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingExtensionGrant)
1 | Completable | complete | METHOD_INVOCATION | when(extensionGrantRepository.delete("my-extension-grant")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(extensionGrantRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(existingExtensionGrant))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingExtensionGrant)
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, "my-extension-grant~my-extension-grant")).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomainAndExtensionGrant(DOMAIN, "my-extension-grant")).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(userRepository.create(any(User.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | userService.create(ReferenceType.ORGANIZATION, ORG, newUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORG, newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | subscribe | METHOD_INVOCATION | userService.create(ReferenceType.ORGANIZATION, ORG, newUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any(User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.ORGANIZATION), eq(ORG), any(), any())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | subscribe | METHOD_INVOCATION | userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findById(eq(ReferenceType.ORGANIZATION), eq(ORG), eq("my-user"))).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | empty | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userRepository.delete("my-user")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Flowable | just | METHOD_INVOCATION | when(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).thenReturn(Flowable.just(credential))
1 | Flowable | METHOD_INVOCATION | Flowable.just(credential)
1 | Completable | complete | METHOD_INVOCATION | when(credentialService.delete(credential.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Maybe | error | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findById("my-user")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(Maybe.just(alertNotifier))
1 | Maybe | METHOD_INVOCATION | Maybe.just(alertNotifier)
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.getById(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.getById(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = cut.findByDomainAndCriteria(DOMAIN_ID, criteria).test()
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = cut.findByReferenceAndCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.create(ReferenceType.DOMAIN, DOMAIN_ID, newAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Maybe | just | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(Maybe.just(alertNotifierToUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(alertNotifierToUpdate)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.update(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Maybe | empty | METHOD_INVOCATION | when(alertNotifierRepository.findById(ALERT_NOTIFIER_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.update(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, singletonList("constraint.gravitee.io")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, singletonList(vhost.getHost())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, singletonList(domainConstraint)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io", domainConstraint)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(emailRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new Email()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Email())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN).test()
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Maybe.just(new Email()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Email())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).test()
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).test()
1 | Maybe | error | METHOD_INVOCATION | when(emailRepository.findByTemplate(ReferenceType.DOMAIN, DOMAIN, Template.LOGIN.template())).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(emailRepository.create(any(Email.class))).thenReturn(Single.just(new Email()))
1 | Single | METHOD_INVOCATION | Single.just(new Email())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.create(DOMAIN, newEmail).test()
1 | Maybe | error | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), anyString())).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.create(DOMAIN, newEmail).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findByTemplate(eq(ReferenceType.DOMAIN), eq(DOMAIN), any())).thenReturn(Maybe.just(new Email()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Email())
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.create(DOMAIN, newEmail).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Maybe.just(new Email()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Email())
1 | Single | just | METHOD_INVOCATION | when(emailRepository.update(any(Email.class))).thenReturn(Single.just(new Email()))
1 | Single | METHOD_INVOCATION | Single.just(new Email())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.update(DOMAIN, "my-email", updateEmail).test()
1 | Maybe | error | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.update(DOMAIN, "my-email", updateEmail).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-email")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.update(DOMAIN, "my-email", new UpdateEmail()).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findById("my-email")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete("my-email").test()
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findById("my-email")).thenReturn(Maybe.just(new Email()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Email())
1 | Completable | error | METHOD_INVOCATION | when(emailRepository.delete(anyString())).thenReturn(Completable.error(TechnicalException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete("my-email").test()
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findById(email.getId())).thenReturn(Maybe.just(email))
1 | Maybe | METHOD_INVOCATION | Maybe.just(email)
1 | Completable | complete | METHOD_INVOCATION | when(emailRepository.delete(email.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete(email.getId()).test()
1 | Flowable | just | METHOD_INVOCATION | when(emailRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flowable.just(mailOne, mailTwo))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mailOne, mailTwo)
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "error")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Email>> testObserver = emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid).toList().test
1 | Maybe | just | METHOD_INVOCATION | when(emailRepository.findByClientAndTemplate(ReferenceType.DOMAIN, DOMAIN, targetUid, "login")).thenReturn(Maybe.just(new Email()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Email())
1 | Flowable | just | METHOD_INVOCATION | when(emailRepository.findByClient(ReferenceType.DOMAIN, DOMAIN, sourceUid)).thenReturn(Flowable.just(mailOne))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mailOne)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.just(new Factor()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Factor())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = factorService.findById("my-factor").test()
1 | Maybe | empty | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = factorService.findById("my-factor").test()
1 | Maybe | error | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | factorService.findById("my-factor").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(factorRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(new Factor()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Factor())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testObserver = factorService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(factorRepository.findByDomain(DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = factorService.findByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(Single.just(new Factor()))
1 | Single | METHOD_INVOCATION | Single.just(new Factor())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | just | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(Single.just(new Factor()))
1 | Single | METHOD_INVOCATION | Single.just(new Factor())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | error | METHOD_INVOCATION | when(factorRepository.create(any())).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | factorService.create(DOMAIN, newFactor).subscribe(testObserver);
1 | Single | error | METHOD_INVOCATION | when(factorRepository.create(any(Factor.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | factorService.create(DOMAIN, newFactor).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.just(new Factor()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Factor())
1 | Single | just | METHOD_INVOCATION | when(factorRepository.update(any(Factor.class))).thenReturn(Single.just(new Factor()))
1 | Single | METHOD_INVOCATION | Single.just(new Factor())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Maybe | error | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Maybe | just | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.just(new Factor()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Factor())
1 | Single | error | METHOD_INVOCATION | when(factorRepository.update(any(Factor.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Maybe | empty | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, "my-factor").test()
1 | Maybe | just | METHOD_INVOCATION | when(factorRepository.findById(factor.getId())).thenReturn(Maybe.just(factor))
1 | Maybe | METHOD_INVOCATION | Maybe.just(factor)
1 | Flowable | just | METHOD_INVOCATION | when(applicationService.findByFactor(factor.getId())).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, factor.getId()).test()
1 | Maybe | error | METHOD_INVOCATION | when(factorRepository.findById("my-factor")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, "my-factor").test()
1 | Maybe | just | METHOD_INVOCATION | when(factorRepository.findById(factor.getId())).thenReturn(Maybe.just(factor))
1 | Maybe | METHOD_INVOCATION | Maybe.just(factor)
1 | Flowable | empty | METHOD_INVOCATION | when(applicationService.findByFactor(factor.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | complete | METHOD_INVOCATION | when(factorRepository.delete(factor.getId())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, factor.getId()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(Maybe.just(new IdentityProvider()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new IdentityProvider())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.findById("my-identity-provider").test()
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.findById("my-identity-provider").test()
1 | Maybe | error | METHOD_INVOCATION | when(identityProviderRepository.findById("my-identity-provider")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById("my-identity-provider").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(Flowable.just(new IdentityProvider()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new IdentityProvider())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> testObserver = identityProviderService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(identityProviderRepository.findAll(eq(ReferenceType.DOMAIN), eq(DOMAIN))).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = identityProviderService.findByDomain(DOMAIN).test()
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.just(identityProvider))
1 | Flowable | METHOD_INVOCATION | Flowable.just(identityProvider)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | empty | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | error | METHOD_INVOCATION | when(identityProviderRepository.findAll(ReferenceType.ORGANIZATION)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Single | just | METHOD_INVOCATION | when(identityProviderRepository.create(any(IdentityProvider.class))).thenReturn(Single.just(idp))
1 | Single | METHOD_INVOCATION | Single.just(idp)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.create(DOMAIN, newIdentityProvider).test()
1 | Single | error | METHOD_INVOCATION | when(identityProviderRepository.create(any(IdentityProvider.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | identityProviderService.create(DOMAIN, newIdentityProvider).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.just(new IdentityProvider()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new IdentityProvider())
1 | Single | just | METHOD_INVOCATION | when(identityProviderRepository.update(any(IdentityProvider.class))).thenReturn(Single.just(idp))
1 | Single | METHOD_INVOCATION | Single.just(idp)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.update(DOMAIN, "my-identity-provider", updateIdentityProvider).test()
1 | Maybe | error | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | identityProviderService.update(DOMAIN, "my-identity-provider", updateIdentityProvider).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.just(new IdentityProvider()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new IdentityProvider())
1 | Flowable | just | METHOD_INVOCATION | when(applicationService.findByIdentityProvider("my-identity-provider")).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.just(new IdentityProvider()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new IdentityProvider())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderRepository.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN), eq("my-identity-provider"))).thenReturn(Maybe.just(existingIdentityProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingIdentityProvider)
1 | Completable | complete | METHOD_INVOCATION | when(identityProviderRepository.delete("my-identity-provider")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | empty | METHOD_INVOCATION | when(applicationService.findByIdentityProvider("my-identity-provider")).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(new Flow()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Flow())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.findAll(ReferenceType.DOMAIN, DOMAIN).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, DOMAIN).toList().test
1 | Flowable | error | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, DOMAIN).toList().subscribe(testObserver);
1 | Flowable | toList | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, DOMAIN).toList().subscribe
1 | Single | just | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.create(ReferenceType.DOMAIN, DOMAIN, newFlow).test()
1 | Single | error | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.create(ReferenceType.DOMAIN, DOMAIN, newFlow).test()
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).test()
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).test()
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, ID)).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, ID, updateFlow).test()
1 | Maybe | error | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, "my-flow")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", new Flow()).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Maybe | error | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById("my-flow")).thenReturn(Maybe.just(new Flow()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Flow())
1 | Completable | complete | METHOD_INVOCATION | when(flowRepository.delete("my-flow")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Flowable | empty | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(Single.just(newFlow), Single.just(newFlow2))
1 | Single | METHOD_INVOCATION | Single.just(newFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(Single.just(newFlow), Single.just(newFlow2))
1 | Single | METHOD_INVOCATION | Single.just(newFlow2)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(newFlow, newFlow2)).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(existingFlow, existingFlow2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingFlow, existingFlow2)
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow2.getId())).thenReturn(Maybe.just(existingFlow2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow2)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(updateFlow), Single.just(updateFlow2))
1 | Single | METHOD_INVOCATION | Single.just(updateFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(updateFlow), Single.just(updateFlow2))
1 | Single | METHOD_INVOCATION | Single.just(updateFlow2)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(existingFlow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingFlow)
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, updateFlow.getId())).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(updateFlow2))
1 | Single | METHOD_INVOCATION | Single.just(updateFlow2)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.create(any(Flow.class))).thenReturn(Single.just(updateFlow))
1 | Single | METHOD_INVOCATION | Single.just(updateFlow)
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(existingFlow, existingFlow2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingFlow, existingFlow2)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow)).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowRepository.findAll(ReferenceType.DOMAIN, DOMAIN)).thenReturn(Flowable.just(existingFlow, existingFlow2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(existingFlow, existingFlow2)
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(ReferenceType.DOMAIN, DOMAIN, existingFlow2.getId())).thenReturn(Maybe.just(existingFlow2))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow2)
1 | Maybe | just | METHOD_INVOCATION | when(flowRepository.findById(existingFlow.getId())).thenReturn(Maybe.just(existingFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingFlow)
1 | Single | just | METHOD_INVOCATION | when(flowRepository.update(any(Flow.class))).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Completable | complete | METHOD_INVOCATION | when(flowRepository.delete(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow2)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.just(new Tag()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Tag())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = tagService.findById("my-tag", Organization.DEFAULT).test()
1 | Maybe | empty | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = tagService.findById("my-tag", Organization.DEFAULT).test()
1 | Maybe | error | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | tagService.findById("my-tag", Organization.DEFAULT).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(tagRepository.create(any(Tag.class))).thenReturn(Single.just(new Tag()))
1 | Single | METHOD_INVOCATION | Single.just(new Tag())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = tagService.create(newTag, Organization.DEFAULT, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.just(new Tag()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Tag())
1 | Single | subscribe | METHOD_INVOCATION | tagService.create(newTag, Organization.DEFAULT, null).subscribe(testObserver);
1 | Maybe | error | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | tagService.create(newTag, Organization.DEFAULT, null).subscribe(testObserver);
1 | Maybe | empty | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | subscribe | METHOD_INVOCATION | tagService.delete("my-tag", Organization.DEFAULT, null).subscribe(testObserver);
1 | Maybe | error | METHOD_INVOCATION | when(tagRepository.findById("my-tag", Organization.DEFAULT)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | subscribe | METHOD_INVOCATION | tagService.delete("my-tag", Organization.DEFAULT, null).subscribe(testObserver);
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid(null).test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("").test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid(null).test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | RETURN_TYPE
1 | Single | fromFuture | METHOD_INVOCATION | return Single.fromFuture(spyHttpRequest);
1 | Single | METHOD_INVOCATION | Single.fromFuture(spyHttpRequest)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.findById("my-scope").test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.findById("my-scope").test()
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | scopeService.findById("my-scope").subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(new Scope()), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(new Scope()), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeService.findByDomain(DOMAIN, 0, Integer.MAX_VALUE).test()
1 | Single | error | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, 1)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | scopeService.findByDomain(DOMAIN, 0, 1).subscribe(testObserver);
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeService.findByDomainAndKey(DOMAIN, "my-scope").test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeService.findByDomainAndKey(DOMAIN, "my-scope").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, Collections.emptyList()).test()
1 | Flowable | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys(DOMAIN, searchingScopes)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, searchingScopes).test()
1 | Flowable | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKeys(DOMAIN, searchingScopes)).thenReturn(Flowable.just(new Scope()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Scope())
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, searchingScopes).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "MY-SCOPE")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "MY_scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.create(any(Scope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findByDomainAndKey(DOMAIN, "my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toPatch))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toPatch)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, scopeId, patch).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toPatch))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toPatch)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, scopeId, patch).test()
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findById("toPatchId")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, "toPatchId", new PatchScope()).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.patch(DOMAIN, "my-scope", patchScope).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Single | subscribe | METHOD_INVOCATION | scopeService.patch(DOMAIN, "my-scope", patchScope).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toUpdate)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toUpdate)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toUpdate)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, "toUpdateId", new UpdateScope()).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Single | subscribe | METHOD_INVOCATION | scopeService.update(DOMAIN, "toUpdateId", updateScope).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById(scopeId)).thenReturn(Maybe.just(toUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(toUpdate)
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.update(argument.capture())).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findById("toUpdateId")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, "toUpdateId", new UpdateSystemScope()).test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Maybe | error | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(new Scope()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Scope())
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(scope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Completable | complete | METHOD_INVOCATION | when(scopeRepository.delete("my-scope")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("my-scope", false).test()
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(Collections.singleton(application)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(application))
1 | Single | just | METHOD_INVOCATION | when(roleService.update(anyString(), anyString(), any(UpdateRole.class))).thenReturn(Single.just(new Role()))
1 | Single | METHOD_INVOCATION | Single.just(new Role())
1 | Single | just | METHOD_INVOCATION | when(applicationService.update(any())).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("my-scope")).thenReturn(Maybe.just(scope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Completable | complete | METHOD_INVOCATION | when(scopeRepository.delete("my-scope")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("my-scope", false).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeRepository.findById("scope-id")).thenReturn(Maybe.just(scope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scope)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("scope-id", false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, null).test()
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, Arrays.asList("unknown")).test()
1 | Single | just | METHOD_INVOCATION | when(scopeRepository.findByDomain(DOMAIN, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(new Scope("valid")), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, Arrays.asList("valid")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.just(new Certificate()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Certificate())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.findById("my-certificate").test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.findById("my-certificate").test()
1 | Maybe | error | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | certificateService.findById("my-certificate").subscribe(testObserver);
1 | Flowable | just | METHOD_INVOCATION | when(certificateRepository.findByDomain(DOMAIN)).thenReturn(Flowable.just(new Certificate()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Certificate())
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = certificateService.findByDomain(DOMAIN).test()
1 | Flowable | error | METHOD_INVOCATION | when(certificateRepository.findByDomain(DOMAIN)).thenReturn(Flowable.error(TechnicalException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(TechnicalException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = certificateService.findByDomain(DOMAIN).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.just(certificate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificate)
1 | Flowable | empty | METHOD_INVOCATION | when(applicationService.findByCertificate("my-certificate")).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | complete | METHOD_INVOCATION | when(certificateRepository.delete("my-certificate")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(eventService.create(any())).thenReturn(Single.just(new Event()))
1 | Single | METHOD_INVOCATION | Single.just(new Event())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Maybe | error | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateRepository.findById("my-certificate")).thenReturn(Maybe.just(new Certificate()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Certificate())
1 | Flowable | just | METHOD_INVOCATION | when(applicationService.findByCertificate("my-certificate")).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Maybe | just | METHOD_INVOCATION | when(certificatePluginService.getSchema(CertificateServiceImpl.DEFAULT_CERTIFICATE_PLUGIN)).thenReturn(Maybe.just("{\n  \"type\" : \"object\",\n  \"id\" : \"urn:jsonschema:io:gravitee:am:certificate:pkcs12:PKCS12Configuration\",\n  \"properties\" : {\n    \"content\" : {\n      \"title\": \"PKCS#12 file\",\n      \"description\": \"PKCS file\",\n      \"type\" : \"string\",\n      \"widget\" : \"file\"\n    },\n    \"storepass\" : {\n      \"title\": \"Keystore password\",\n      \"description\": \"The password which is used to protect the integrity of the keystore.\",\n      \"type\" : \"string\"\n    },\n    \"alias\" : {\n      \"title\": \"Key alias\",\n      \"description\": \"Alias which identify the keystore entry.\",\n      \"type\" : \"string\"\n    },\n    \"keypass\" : {\n      \"title\": \"Key password\",\n      \"description\": \"The password used to protect the private key of the generated key pair.\",\n      \"type\" : \"string\"\n    }\n  },\n  \"required\": [\n    \"content\",\n    \"storepass\",\n    \"alias\",\n    \"keypass\"\n  ]\n}"))
1 | Maybe | METHOD_INVOCATION | Maybe.just("{\n  \"type\" : \"object\",\n  \"id\" : \"urn:jsonschema:io:gravitee:am:certificate:pkcs12:PKCS12Configuration\",\n  \"properties\" : {\n    \"content\" : {\n      \"title\": \"PKCS#12 file\",\n      \"description\": \"PKCS file\",\n      \"type\" : \"string\",\n      \"widget\" : \"file\"\n    },\n    \"storepass\" : {\n      \"title\": \"Keystore password\",\n      \"description\": \"The password which is used to protect the integrity of the keystore.\",\n      \"type\" : \"string\"\n    },\n    \"alias\" : {\n      \"title\": \"Key alias\",\n      \"description\": \"Alias which identify the keystore entry.\",\n      \"type\" : \"string\"\n    },\n    \"keypass\" : {\n      \"title\": \"Key password\",\n      \"description\": \"The password used to protect the private key of the generated key pair.\",\n      \"type\" : \"string\"\n    }\n  },\n  \"required\": [\n    \"content\",\n    \"storepass\",\n    \"alias\",\n    \"keypass\"\n  ]\n}")
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.create("my-domain").test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 1).test()
1 | Maybe | just | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(Maybe.just(context))
1 | Maybe | METHOD_INVOCATION | Maybe.just(context)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 1).test()
1 | Maybe | just | METHOD_INVOCATION | when(authFlowContextRepository.findLastByTransactionId(any())).thenReturn(Maybe.just(context))
1 | Maybe | METHOD_INVOCATION | Maybe.just(context)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 2).test()
1 | Completable | complete | METHOD_INVOCATION | when(authFlowContextRepository.delete(SESSION_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = service.clearContext(SESSION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = service.clearContext(null).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(applications))
1 | Single | METHOD_INVOCATION | Single.just(applications)
1 | Single | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app1")).thenReturn(Single.just(2L))
1 | Single | METHOD_INVOCATION | Single.just(2L)
1 | Single | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app2")).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(DOMAIN)).thenReturn(Single.just(applications))
1 | Single | METHOD_INVOCATION | Single.just(applications)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(Single.just(applications))
1 | Single | METHOD_INVOCATION | Single.just(applications)
1 | Single | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app1")).thenReturn(Single.just(2L))
1 | Single | METHOD_INVOCATION | Single.just(2L)
1 | Single | just | METHOD_INVOCATION | when(accessTokenRepository.countByClientId("app2")).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(Single.error(TechnicalException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.findAll()).thenReturn(Single.just(applications))
1 | Single | METHOD_INVOCATION | Single.just(applications)
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.deleteByUserId("userId")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.deleteByUserId("userId")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = tokenService.deleteByUserId("userId").test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test/subpath/subpath2_with-and.dot/AND_UPPERCASE").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate(null).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/////test////").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test$:\\;,+").blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.just(organization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(organization)
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Single | just | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(Single.just(0L))
1 | Single | METHOD_INVOCATION | Single.just(0L)
1 | Single | just | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Completable | complete | METHOD_INVOCATION | when(roleService.createDefaultRoles("DEFAULT")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(entrypointService.createDefaults(defaultOrganization)).thenReturn(Flowable.just(new Entrypoint()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Entrypoint())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Single | just | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Single | just | METHOD_INVOCATION | when(organizationRepository.count()).thenReturn(Single.just(0L))
1 | Single | METHOD_INVOCATION | Single.just(0L)
1 | Single | error | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(Organization.DEFAULT)))).thenReturn(Single.error(new TechnicalManagementException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Maybe | empty | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Completable | complete | METHOD_INVOCATION | when(roleService.createDefaultRoles(ORGANIZATION_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(entrypointService.createDefaults(any(Organization.class))).thenReturn(Flowable.just(new Entrypoint()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Entrypoint())
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Maybe | empty | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | error | METHOD_INVOCATION | when(organizationRepository.create(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(Single.error(new TechnicalManagementException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException())
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Maybe | just | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.just(existingOrganization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingOrganization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Maybe | just | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.just(existingOrganization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingOrganization)
1 | Single | error | METHOD_INVOCATION | when(organizationRepository.update(argThat((organization)->organization.getId().equals(ORGANIZATION_ID)))).thenReturn(Single.error(new TechnicalManagementException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException())
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Maybe | just | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.just(existingOrganization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingOrganization)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.update(ORGANIZATION_ID, patchOrganization, new DefaultUser("username")).test()
1 | Maybe | empty | METHOD_INVOCATION | when(organizationRepository.findById(ORGANIZATION_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.update(ORGANIZATION_ID, patchOrganization, new DefaultUser("username")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flowable.just(new Resource().setId(RESOURCE_ID)))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId(RESOURCE_ID))
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(new Resource().setId(RESOURCE_ID)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Resource().setId(RESOURCE_ID))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(Single.just(Arrays.asList(new Scope("scope"))))
1 | Single | METHOD_INVOCATION | Single.just(Arrays.asList(new Scope("scope")))
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(new Resource().setId(RESOURCE_ID)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Resource().setId(RESOURCE_ID))
1 | Completable | complete | METHOD_INVOCATION | when(repository.delete(RESOURCE_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.update(new NewResource(), DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(exitingRS))
1 | Maybe | METHOD_INVOCATION | Maybe.just(exitingRS)
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKeys(DOMAIN_ID, Arrays.asList("scope"))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(exitingRS))
1 | Maybe | METHOD_INVOCATION | Maybe.just(exitingRS)
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(exitingRS))
1 | Maybe | METHOD_INVOCATION | Maybe.just(exitingRS)
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(exitingRS))
1 | Maybe | METHOD_INVOCATION | Maybe.just(exitingRS)
1 | Single | just | METHOD_INVOCATION | when(repository.update(exitingRS)).thenReturn(Single.just(exitingRS))
1 | Single | METHOD_INVOCATION | Single.just(exitingRS)
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | just | METHOD_INVOCATION | when(repository.create(any())).thenReturn(Single.just(new Resource()))
1 | Single | METHOD_INVOCATION | Single.just(new Resource())
1 | Single | just | METHOD_INVOCATION | when(accessPolicyRepository.create(any())).thenReturn(Single.just(new AccessPolicy()))
1 | Single | METHOD_INVOCATION | Single.just(new AccessPolicy())
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.create(newResource, DOMAIN_ID, CLIENT_ID, USER_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID).test()
1 | Single | error | METHOD_INVOCATION | when(repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.error(new ArrayIndexOutOfBoundsException()))
1 | Single | METHOD_INVOCATION | Single.error(new ArrayIndexOutOfBoundsException())
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = service.findByDomain(DOMAIN_ID).test()
1 | Single | just | METHOD_INVOCATION | when(repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(new Resource()), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(new Resource()), 0, 1))
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = service.findByDomain(DOMAIN_ID).test()
1 | Flowable | empty | METHOD_INVOCATION | when(repository.findByResources(anyList())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = service.findByResources(Collections.emptyList()).test()
1 | Single | just | METHOD_INVOCATION | when(repository.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptyList(), 0, 0)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptyList(), 0, 0))
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE).test()
1 | Single | error | METHOD_INVOCATION | when(repository.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE)).thenReturn(Single.error(RuntimeException::new))
1 | Single | METHOD_INVOCATION | Single.error(RuntimeException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE).test()
1 | Flowable | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Collections.emptyList())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = service.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Collections.emptyList()).test()
1 | Flowable | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndResources(eq(DOMAIN_ID), eq(CLIENT_ID), anyList())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClientResource(DOMAIN_ID, CLIENT_ID, RESOURCE_ID).test()
1 | Single | just | METHOD_INVOCATION | when(repository.update(toUpdate)).thenReturn(Single.just(toUpdate))
1 | Single | METHOD_INVOCATION | Single.just(toUpdate)
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(toUpdate).test()
1 | Flowable | empty | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource(toDelete.getDomain(), toDelete.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | complete | METHOD_INVOCATION | when(repository.delete(RESOURCE_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(toDelete).test()
1 | Flowable | just | METHOD_INVOCATION | when(accessPolicyRepository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID)).thenReturn(Flowable.just(accessPolicy))
1 | Flowable | METHOD_INVOCATION | Flowable.just(accessPolicy)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).toList().test
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.error(RuntimeException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(RuntimeException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Flowable | just | METHOD_INVOCATION | when(accessPolicyRepository.findByResources(resourceIds)).thenReturn(Flowable.just(accessPolicy))
1 | Flowable | METHOD_INVOCATION | Flowable.just(accessPolicy)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = service.findAccessPoliciesByResources(resourceIds).toList().test()
1 | Flowable | toList | METHOD_INVOCATION | service.findAccessPoliciesByResources(resourceIds).toList().test
1 | Flowable | error | METHOD_INVOCATION | when(accessPolicyRepository.findByResources(resourceIds)).thenReturn(Flowable.error(RuntimeException::new))
1 | Flowable | METHOD_INVOCATION | Flowable.error(RuntimeException::new)
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testObserver = service.findAccessPoliciesByResources(resourceIds).test()
1 | Single | just | METHOD_INVOCATION | when(accessPolicyRepository.countByResource(RESOURCE_ID)).thenReturn(Single.just(1L))
1 | Single | METHOD_INVOCATION | Single.just(1L)
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = service.countAccessPolicyByResource(RESOURCE_ID).test()
1 | Single | error | METHOD_INVOCATION | when(accessPolicyRepository.countByResource(RESOURCE_ID)).thenReturn(Single.error(RuntimeException::new))
1 | Single | METHOD_INVOCATION | Single.error(RuntimeException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = service.countAccessPolicyByResource(RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(Maybe.just(accessPolicy))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessPolicy)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.error(RuntimeException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(RuntimeException::new)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(Maybe.just(accessPolicy))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessPolicy)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(POLICY_ID).test()
1 | Maybe | error | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(Maybe.error(RuntimeException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(RuntimeException::new)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(POLICY_ID).test()
1 | Single | just | METHOD_INVOCATION | when(accessPolicyRepository.create(accessPolicy)).thenReturn(Single.just(accessPolicy))
1 | Single | METHOD_INVOCATION | Single.just(accessPolicy)
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.createAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.createAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(Maybe.just(accessPolicy))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessPolicy)
1 | Single | just | METHOD_INVOCATION | when(accessPolicyRepository.update(any())).thenReturn(Single.just(accessPolicy))
1 | Single | METHOD_INVOCATION | Single.just(accessPolicy)
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(accessPolicyRepository.findById(POLICY_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Completable | complete | METHOD_INVOCATION | when(accessPolicyRepository.delete(POLICY_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.deleteAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.deleteAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(Collections.emptyList()).test()
1 | Flowable | just | METHOD_INVOCATION | when(userService.findByIdIn(anyList())).thenReturn(Flowable.just(new User()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new User())
1 | Flowable | just | METHOD_INVOCATION | when(applicationService.findByIdIn(anyList())).thenReturn(Flowable.just(new Application()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(resources).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(request);
1 | Maybe | METHOD_INVOCATION | Maybe.just(request)
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return authenticate(authentication).flatMap((accessToken)->profile(accessToken, authentication));
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Maybe.fromCallable(()->jwtProcessor.process(idToken, null)).onErrorResumeNext((ex)->{
    return Maybe.error(new BadCredentialsException(ex.getMessage()));
}).map((jwtClaimsSet)->createUser(authContext, jwtClaimsSet.getClaims()));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | Maybe.fromCallable(()->jwtProcessor.process(idToken, null)).onErrorResumeNext((ex)->{
    return Maybe.error(new BadCredentialsException(ex.getMessage()));
}).map
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->jwtProcessor.process(idToken, null)).onErrorResumeNext
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->jwtProcessor.process(idToken, null))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException(ex.getMessage()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException(ex.getMessage()))
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new Token(accessToken, TokenTypeHint.ACCESS_TOKEN));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Token(accessToken, TokenTypeHint.ACCESS_TOKEN))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new Token(idToken, TokenTypeHint.ID_TOKEN));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Token(idToken, TokenTypeHint.ID_TOKEN))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing authorization code"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing authorization code"))
1 | Maybe | map | METHOD_INVOCATION | return getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
});
1 | Single | toMaybe | METHOD_INVOCATION | getClient().postAbs(getConfiguration().getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("No suitable value to retrieve user information"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("No suitable value to retrieve user information"))
1 | Maybe | map | METHOD_INVOCATION | return getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
});
1 | Single | toMaybe | METHOD_INVOCATION | getClient().getAbs(getConfiguration().getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token.getValue()).rxSend().toMaybe().map
1 | Single | blockingGet | METHOD_INVOCATION | io.gravitee.am.certificate.api.Key providerKey = provider.key().blockingGet()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKey);
1 | Single | METHOD_INVOCATION | Single.just(certificateKey)
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(factor);
1 | Single | METHOD_INVOCATION | Single.just(factor)
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | subscribe | METHOD_INVOCATION | introspectionTokenService.introspect(token, offlineVerification).flatMapMaybe((jwt)->clientSyncService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud()).map((client)->new OAuth2AuthResponse(jwt, client))).subscribe((accessToken)->handler.handle(Future.succeededFuture(accessToken)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | flatMapMaybe | METHOD_INVOCATION | introspectionTokenService.introspect(token, offlineVerification).flatMapMaybe((jwt)->clientSyncService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud()).map((client)->new OAuth2AuthResponse(jwt, client))).subscribe
1 | Maybe | map | METHOD_INVOCATION | (jwt)->clientSyncService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud()).map((client)->new OAuth2AuthResponse(jwt, client))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | (authenticationProvider != null) ? Maybe.just(authenticationProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(authenticationProvider)
1 | Maybe | empty | METHOD_INVOCATION | (authenticationProvider != null) ? Maybe.just(authenticationProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | (userProvider != null) ? Maybe.just(userProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | empty | METHOD_INVOCATION | (userProvider != null) ? Maybe.just(userProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderRepository.findAll(ReferenceType.DOMAIN, domain.getId()).blockingForEach(this::updateAuthenticationProvider);
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderRepository.findById(identityProviderId).subscribe((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for domain {}", identityProviderId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} identity provider for domain {}", eventType, domain.getName(), error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | client != null ? Maybe.just(client) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | empty | METHOD_INVOCATION | client != null ? Maybe.just(client) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | optClient.isPresent() ? Maybe.just(optClient.get()) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(optClient.get())
1 | Maybe | empty | METHOD_INVOCATION | optClient.isPresent() ? Maybe.just(optClient.get()) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(templates);
1 | Single | METHOD_INVOCATION | Single.just(templates)
1 | Flowable | subscribe | METHOD_INVOCATION | emailRepository.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe(this::updateEmail, (error)->logger.error("Unable to initialize emails for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | emailRepository.findById(emailId).subscribe((email)->{
    if (emails.containsKey(emailId) && !email.isEnabled()) {
        removeEmail(emailId);
    } else {
        updateEmail(email);
    }
    logger.info("Email {} {}d for domain {}", emailId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} email for domain {}", eventType, domain.getName(), error), ()->logger.error("No email found with id {}", emailId));
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
    reporterRepository.findByDomain(domain.getId()).toList().flatMap((reporters)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporters, ctx))).subscribeOn(Schedulers.io()).subscribe((tupleReportersContext)->{
        if (!tupleReportersContext.getT1().isEmpty()) {
            tupleReportersContext.getT1().forEach((reporter)->{
                startReporterProvider(reporter, tupleReportersContext.getT2());
            });
            logger.info("Reporters loaded for domain {}", domain.getName());
        } else {
            logger.info("\tThere is no reporter to start");
        }
    }, (err)->{
        logger.error("Reporter service can not be started", err);
    });
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | subscribe | METHOD_INVOCATION | reporterRepository.findByDomain(domain.getId()).toList().flatMap((reporters)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporters, ctx))).subscribeOn(Schedulers.io()).subscribe((tupleReportersContext)->{
    if (!tupleReportersContext.getT1().isEmpty()) {
        tupleReportersContext.getT1().forEach((reporter)->{
            startReporterProvider(reporter, tupleReportersContext.getT2());
        });
        logger.info("Reporters loaded for domain {}", domain.getName());
    } else {
        logger.info("\tThere is no reporter to start");
    }
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | subscribeOn | METHOD_INVOCATION | reporterRepository.findByDomain(domain.getId()).toList().flatMap((reporters)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporters, ctx))).subscribeOn(Schedulers.io()).subscribe
1 | Single | flatMap | METHOD_INVOCATION | reporterRepository.findByDomain(domain.getId()).toList().flatMap((reporters)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporters, ctx))).subscribeOn
1 | Flowable | toList | METHOD_INVOCATION | reporterRepository.findByDomain(domain.getId()).toList().flatMap
1 | Single | map | METHOD_INVOCATION | (reporters)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporters, ctx))
1 | Single | map | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map
1 | Single | subscribe | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn(Schedulers.io()).subscribe((tupleReporterContext)->{
    updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error));
1 | Single | subscribeOn | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn
1 | Single | map | METHOD_INVOCATION | (reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))
1 | Single | map | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map
1 | Single | subscribe | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn(Schedulers.io()).subscribe((tupleReporterContext)->{
    if (reporters.containsKey(reporterId)) {
        updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    } else {
        startReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    }
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error));
1 | Single | subscribeOn | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | reporterRepository.findById(reporterId).flatMapSingle((reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))).subscribeOn
1 | Single | map | METHOD_INVOCATION | (reporter)->environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map((ctx)->Tuples.of(reporter, ctx))
1 | Single | map | METHOD_INVOCATION | environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId())).map
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()));
1 | Single | METHOD_INVOCATION | Single.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()))
1 | Single | doOnError | METHOD_INVOCATION | return Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError().flatMap((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof UsernameNotFoundException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof AccountStatusException) {
                return Single.error(lastException);
            } else if (lastException instanceof NegotiateContinueException) {
                return Single.error(lastException);
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return Single.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
            }
        } else {
            return Single.error(new BadCredentialsException("The credentials you entered are invalid"));
        }
    } else {
        return connect(user);
    }
}).doOnSuccess((user)->eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(authentication, domain, client, user))).doOnError((throwable)->eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(authentication, domain, client, throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError().flatMap((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof UsernameNotFoundException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof AccountStatusException) {
                return Single.error(lastException);
            } else if (lastException instanceof NegotiateContinueException) {
                return Single.error(lastException);
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return Single.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
            }
        } else {
            return Single.error(new BadCredentialsException("The credentials you entered are invalid"));
        }
    } else {
        return connect(user);
    }
}).doOnSuccess((user)->eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(authentication, domain, client, user))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError().flatMap((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof UsernameNotFoundException) {
                return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
            } else if (lastException instanceof AccountStatusException) {
                return Single.error(lastException);
            } else if (lastException instanceof NegotiateContinueException) {
                return Single.error(lastException);
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return Single.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
            }
        } else {
            return Single.error(new BadCredentialsException("The credentials you entered are invalid"));
        }
    } else {
        return connect(user);
    }
}).doOnSuccess
1 | Observable | lastOrError | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError().flatMap
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(identities)
1 | Single | error | METHOD_INVOCATION | return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
1 | Single | METHOD_INVOCATION | Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException))
1 | Single | error | METHOD_INVOCATION | return Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException));
1 | Single | METHOD_INVOCATION | Single.error(new BadCredentialsException("The credentials you entered are invalid", lastException))
1 | Single | error | METHOD_INVOCATION | return Single.error(lastException);
1 | Single | METHOD_INVOCATION | Single.error(lastException)
1 | Single | error | METHOD_INVOCATION | return Single.error(lastException);
1 | Single | METHOD_INVOCATION | Single.error(lastException)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
1 | Single | METHOD_INVOCATION | Single.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException))
1 | Single | error | METHOD_INVOCATION | return Single.error(new BadCredentialsException("The credentials you entered are invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new BadCredentialsException("The credentials you entered are invalid"))
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InternalAuthenticationServiceException("No identity provider found for client : " + client.getClientId()))
1 | Single | flatMapMaybe | METHOD_INVOCATION | return Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError().flatMapMaybe((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return Maybe.error(new UsernameNotFoundException("Invalid or unknown user"));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return Maybe.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
            }
        } else {
            return Maybe.error(new UsernameNotFoundException("No user found for registered providers"));
        }
    } else {
        return userAuthenticationService.loadPreAuthenticatedUser(user);
    }
});
1 | Observable | lastOrError | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError().flatMapMaybe
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(identities)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new UsernameNotFoundException("Invalid or unknown user"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException("Invalid or unknown user"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new UsernameNotFoundException("No user found for registered providers"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException("No user found for registered providers"))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return preAuthentication(client, authentication, authProvider).andThen(loadUserByUsername0(client, authentication, authProvider, preAuthenticated)).flatMap((userAuthentication)->postAuthentication(client, authentication, authProvider, userAuthentication).andThen(Maybe.just(userAuthentication)));
1 | Completable | andThen | METHOD_INVOCATION | preAuthentication(client, authentication, authProvider).andThen(loadUserByUsername0(client, authentication, authProvider, preAuthenticated)).flatMap
1 | Completable | andThen | METHOD_INVOCATION | (userAuthentication)->postAuthentication(client, authentication, authProvider, userAuthentication).andThen(Maybe.just(userAuthentication))
1 | Maybe | just | METHOD_INVOCATION | postAuthentication(client, authentication, authProvider, userAuthentication).andThen(Maybe.just(userAuthentication))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userAuthentication)
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return identityProviderManager.get(authProvider).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return Maybe.just(preAuthenticated).flatMap((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            });
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).switchIfEmpty(Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString())));
}).map((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}).onErrorResumeNext((error)->{
    logger.debug("Unable to authenticate [{}] with authentication provider [{}]", authentication.getPrincipal(), authProvider, error);
    return Maybe.just(new UserAuthentication(null, error));
});
1 | Maybe | map | METHOD_INVOCATION | identityProviderManager.get(authProvider).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return Maybe.just(preAuthenticated).flatMap((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            });
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).switchIfEmpty(Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString())));
}).map((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}).onErrorResumeNext
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderManager.get(authProvider).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return Maybe.just(preAuthenticated).flatMap((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            });
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).switchIfEmpty(Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString())));
}).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.get(authProvider).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.get(authProvider).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return Maybe.just(preAuthenticated).flatMap((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        });
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).switchIfEmpty(Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString())));
1 | Maybe | flatMap | METHOD_INVOCATION | Maybe.just(preAuthenticated).flatMap((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        });
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).switchIfEmpty
1 | Maybe | just | METHOD_INVOCATION | Maybe.just(preAuthenticated).flatMap
1 | Maybe | METHOD_INVOCATION | Maybe.just(preAuthenticated)
1 | Maybe | flatMap | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap
1 | Maybe | error | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException(username))
1 | Maybe | error | METHOD_INVOCATION | Maybe.just(preAuthenticated).flatMap((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider).switchIfEmpty(Maybe.error(new UsernameNotFoundException(username))).flatMap((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        });
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).switchIfEmpty(Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new UserAuthentication(null, error));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new UserAuthentication(null, error))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return loginAttemptService.checkAccount(criteria, accountSettings).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapCompletable((optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return Completable.error(new AccountLockedException("User " + username + " is locked", details));
    }
    return Completable.complete();
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | loginAttemptService.checkAccount(criteria, accountSettings).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapCompletable
1 | Maybe | map | METHOD_INVOCATION | loginAttemptService.checkAccount(criteria, accountSettings).map(Optional::of).defaultIfEmpty
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new AccountLockedException("User " + username + " is locked", details));
1 | Completable | METHOD_INVOCATION | Completable.error(new AccountLockedException("User " + username + " is locked", details))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource(criteria.domain(), criteria.username(), criteria.identityProvider()).flatMapCompletable((user)->{
    return loginAttemptService.loginFailed(criteria, accountSettings).flatMapCompletable((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
        }
        return Completable.complete();
    });
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | return loginAttemptService.loginFailed(criteria, accountSettings).flatMapCompletable((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
    }
    return Completable.complete();
});
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | subscribe | METHOD_INVOCATION | applicationsSource.map(Application::toClient).subscribeOn(Schedulers.io()).subscribe((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", client.getClientName(), domain.getName());
}, (error)->logger.error("An error has occurred when loading applications for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | applicationsSource.map(Application::toClient).subscribeOn(Schedulers.io()).subscribe
1 | Flowable | map | METHOD_INVOCATION | applicationsSource.map(Application::toClient).subscribeOn
1 | Maybe | subscribe | METHOD_INVOCATION | applicationRepository.findById(applicationId).map(Application::toClient).subscribeOn(Schedulers.io()).subscribe((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", applicationId, domain.getName());
}, (error)->logger.error("An error has occurred when loading application {} for domain {}", applicationId, domain.getName(), error), ()->logger.error("No application found with id {}", applicationId));
1 | Maybe | subscribeOn | METHOD_INVOCATION | applicationRepository.findById(applicationId).map(Application::toClient).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | map | METHOD_INVOCATION | applicationRepository.findById(applicationId).map(Application::toClient).subscribeOn
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty(Maybe.error(new InvalidTokenException("Invalid or unknown client for this token"))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client)).flatMap((jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return Single.just(jwt);
    }
    return accessTokenRepository.findByToken(jwt.getJti()).switchIfEmpty(Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    });
}).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        LOGGER.debug("An error occurs while decoding JWT access token : {}", token, ex);
        return Single.error(new InvalidTokenException(ex.getMessage(), ex));
    }
    if (ex instanceof InvalidTokenException) {
        InvalidTokenException invalidTokenException = (InvalidTokenException)ex;
        String details = invalidTokenException.getDetails();
        JWT jwt = invalidTokenException.getJwt();
        LOGGER.debug("An error occurs while checking JWT access token validity: {}\n\t - details: {}\n\t - decoded jwt: {}", token, details != null ? details : "none", jwt != null ? jwt.toString() : "{}", invalidTokenException);
    }
    return Single.error(ex);
});
1 | Single | flatMap | METHOD_INVOCATION | jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty(Maybe.error(new InvalidTokenException("Invalid or unknown client for this token"))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client)).flatMap((jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return Single.just(jwt);
    }
    return accessTokenRepository.findByToken(jwt.getJti()).switchIfEmpty(Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    });
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty(Maybe.error(new InvalidTokenException("Invalid or unknown client for this token"))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client)).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty(Maybe.error(new InvalidTokenException("Invalid or unknown client for this token"))).flatMapSingle
1 | Single | flatMapMaybe | METHOD_INVOCATION | jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | jwtService.decode(token).flatMapMaybe((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).switchIfEmpty(Maybe.error(new InvalidTokenException("Invalid or unknown client for this token")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidTokenException("Invalid or unknown client for this token"))
1 | Single | just | METHOD_INVOCATION | return Single.just(jwt);
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | map | METHOD_INVOCATION | return accessTokenRepository.findByToken(jwt.getJti()).switchIfEmpty(Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map((accessToken)->{
    if (accessToken.getExpireAt().before(new Date())) {
        throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
    }
    return jwt;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | accessTokenRepository.findByToken(jwt.getJti()).switchIfEmpty(Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map
1 | Single | error | METHOD_INVOCATION | accessTokenRepository.findByToken(jwt.getJti()).switchIfEmpty(Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt)))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidTokenException(ex.getMessage(), ex));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidTokenException(ex.getMessage(), ex))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | just | METHOD_INVOCATION | Single<Map<String, String>> singlePageRendering = Single.just(errorParams)
1 | Single | METHOD_INVOCATION | Single.just(errorParams)
1 | Single | map | METHOD_INVOCATION | singlePageRendering = this.jwtService.decode(jarm).map((jwt)->{
    Map<String, String> result = new HashMap<>();
    result.put(ERROR_PARAM, (String)jwt.get(ERROR_PARAM));
    result.put(ERROR_DESCRIPTION_PARAM, (String)jwt.get(ERROR_DESCRIPTION_PARAM));
    return result;
})
1 | Single | subscribe | METHOD_INVOCATION | singlePageRendering.subscribe((params)->render(routingContext, client, params), (exception)->render(routingContext, client, errorParams));
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByDomainAndClientId(domain, clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new ClientNotFoundException(clientId))));
1 | Single | subscribe | METHOD_INVOCATION | flowManager.findByExtensionPoint(extensionPoint, (Client)executionContext.getAttribute(ConstantKeys.CLIENT_CONTEXT_KEY), FlowPredicate.from(executionContext)).subscribe((policies)->handler.handle(Future.succeededFuture(policies)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | return this.jwtService.encode(jwt, certificateProvider).blockingGet();
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return this.jwtService.decodeAndVerify(payload, certificateProvider).doOnSuccess((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
}).map((jwt)->this);
1 | Single | doOnSuccess | METHOD_INVOCATION | this.jwtService.decodeAndVerify(payload, certificateProvider).doOnSuccess((jwt)->{
    this.lastLogin = new Date(jwt.getExp() * 1000 - this.timeout());
    this.setData(jwt);
}).map
1 | Maybe | subscribe | METHOD_INVOCATION | authenticationFlowContextService.loadContext(transactionId, version).subscribe((ctx)->{
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_KEY, ctx);
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    context.next();
}, (error)->{
    LOGGER.warn("AuthenticationFlowContext can\'t be loaded", error);
    if (exitOnError) {
        context.fail(error);
    } else {
        context.next();
    }
});
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | certificateRepository.findByDomain(domain.getId()).subscribeOn(Schedulers.io()).subscribe((certificate)->{
    certificateProviderManager.create(certificate);
    certificates.put(certificate.getId(), certificate);
    logger.info("Certificate {} loaded for domain {}", certificate.getName(), domain.getName());
}, (error)->logger.error("An error has occurred when loading certificates for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | certificateRepository.findByDomain(domain.getId()).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | certificateProvider != null ? Maybe.just(certificateProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificateProvider)
1 | Maybe | empty | METHOD_INVOCATION | certificateProvider != null ? Maybe.just(certificateProvider) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | certificate.isPresent() ? Maybe.just(certificate.get()) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificate.get())
1 | Maybe | empty | METHOD_INVOCATION | certificate.isPresent() ? Maybe.just(certificate.get()) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | subscribe | METHOD_INVOCATION | certificateRepository.findById(certificateId).subscribeOn(Schedulers.io()).subscribe((certificate)->{
    try {
        certificateProviderManager.create(certificate);
        certificates.put(certificateId, certificate);
        logger.info("Certificate {} loaded for domain {}", certificateId, domain.getName());
    } catch (Exception ex) {
        logger.error("Unable to load certificate {} for domain {}", certificate.getName(), certificate.getDomain(), ex);
        certificates.remove(certificateId, certificate);
    }
}, (error)->logger.error("An error has occurred when loading certificate {} for domain {}", certificateId, domain.getName(), error), ()->logger.error("No certificate found with id {}", certificateId));
1 | Maybe | subscribeOn | METHOD_INVOCATION | certificateRepository.findById(certificateId).subscribeOn(Schedulers.io()).subscribe
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKey);
1 | Single | METHOD_INVOCATION | Single.just(certificateKey)
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | just | METHOD_INVOCATION | Single<CookieSession> sessionObs = Single.just(session)
1 | Single | METHOD_INVOCATION | Single.just(session)
1 | Single | flatMap | METHOD_INVOCATION | sessionObs = session.setValue(sessionCookie.getValue()).flatMap((currentSession)->{
    String userId = currentSession.get(USER_ID_KEY);
    if (!StringUtils.isEmpty(userId)) {
        return userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap((user)->userService.enhance(user).toMaybe()).map((user)->currentSession).switchIfEmpty(cleanupSession(currentSession)).onErrorResumeNext(cleanupSession(currentSession));
    } else {
        return Single.just(currentSession);
    }
})
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap((user)->userService.enhance(user).toMaybe()).map((user)->currentSession).switchIfEmpty(cleanupSession(currentSession)).onErrorResumeNext(cleanupSession(currentSession));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap((user)->userService.enhance(user).toMaybe()).map((user)->currentSession).switchIfEmpty(cleanupSession(currentSession)).onErrorResumeNext
1 | Maybe | map | METHOD_INVOCATION | userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap((user)->userService.enhance(user).toMaybe()).map((user)->currentSession).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap((user)->userService.enhance(user).toMaybe()).map
1 | Maybe | doOnSuccess | METHOD_INVOCATION | userService.findById(userId).doOnSuccess((user)->context.getDelegate().setUser(new User(user))).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (user)->userService.enhance(user).toMaybe()
1 | Single | just | METHOD_INVOCATION | return Single.just(currentSession);
1 | Single | METHOD_INVOCATION | Single.just(currentSession)
1 | Single | subscribe | METHOD_INVOCATION | sessionObs.doOnError((t)->logger.warn("Unable to restore the session", t)).doFinally(context::next).subscribe();
1 | Single | doFinally | METHOD_INVOCATION | sessionObs.doOnError((t)->logger.warn("Unable to restore the session", t)).doFinally(context::next).subscribe
1 | Single | doOnError | METHOD_INVOCATION | sessionObs.doOnError((t)->logger.warn("Unable to restore the session", t)).doFinally
1 | Single | RETURN_TYPE
1 | Single | defer | METHOD_INVOCATION | return Single.defer(()->{
    currentSession.setValue(null);
    return Single.just(currentSession);
});
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    currentSession.setValue(null);
    return Single.just(currentSession);
})
1 | Single | just | METHOD_INVOCATION | return Single.just(currentSession);
1 | Single | METHOD_INVOCATION | Single.just(currentSession)
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificateManager.get(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | certificateManager.get(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificateManager.findByAlgorithm(signedResponseAlg).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(signedResponseAlg).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(signedResponseAlg).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return certificateManager.get(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->decodeAndVerify(jwt, certificateProvider));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | certificateManager.get(client.getCertificate()).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return decode(certificateProvider, jwt).map(JWT::new);
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        String json = new String(Base64.getDecoder().decode(jwt.split("\\.")[1]), "UTF-8");
        emitter.onSuccess(objectMapper.readValue(json, JWT.class));
    } catch (Exception ex) {
        logger.debug("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        String json = new String(Base64.getDecoder().decode(jwt.split("\\.")[1]), "UTF-8");
        emitter.onSuccess(objectMapper.readValue(json, JWT.class));
    } catch (Exception ex) {
        logger.debug("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
})
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
})
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        Map<String, Object> decodedPayload = certificateProvider.getJwtParser().parse(payload);
        emitter.onSuccess(decodedPayload);
    } catch (Exception ex) {
        logger.error("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        Map<String, Object> decodedPayload = certificateProvider.getJwtParser().parse(payload);
        emitter.onSuccess(decodedPayload);
    } catch (Exception ex) {
        logger.error("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
})
1 | Single | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate(client, authentication).subscribe((user)->handler.handle(Future.succeededFuture(new io.gravitee.am.gateway.handler.common.vertx.web.auth.user.User(user))), (error)->handler.handle(Future.failedFuture(error)));
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe();
1 | Completable | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | Single.zip(getClient(clientId), getClient(user.getClient()), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return Completable.complete();
    }
    if (userClient == null) {
        return Completable.complete();
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return Completable.complete();
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return Completable.complete();
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
}).subscribe((__)->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | zip | METHOD_INVOCATION | Single.zip(getClient(clientId), getClient(user.getClient()), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return Completable.complete();
    }
    if (userClient == null) {
        return Completable.complete();
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return Completable.complete();
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return Completable.complete();
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
}).subscribe
1 | Single | METHOD_INVOCATION | Single.zip(getClient(clientId), getClient(user.getClient()), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return Completable.complete();
    }
    if (userClient == null) {
        return Completable.complete();
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return Completable.complete();
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return Completable.complete();
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
})
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return clientSyncService.findById(clientId).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(clientId))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | clientSyncService.findById(clientId).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(clientId))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).toSingle
1 | Maybe | map | METHOD_INVOCATION | clientSyncService.findById(clientId).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(clientId))).map(Optional::ofNullable).defaultIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | clientSyncService.findById(clientId).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(clientId))).map
1 | Maybe | defer | METHOD_INVOCATION | clientSyncService.findById(clientId).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(clientId)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->clientSyncService.findByClientId(clientId))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return userService.search(ReferenceType.DOMAIN, domain, criteria, 0, 2).map((p)->new ArrayList<>(p.getData()));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return saveOrUpdate(principal, afterAuthentication).flatMap((user)->checkAccountStatus(user).andThen(Single.defer(()->userService.enhance(user))));
1 | Completable | andThen | METHOD_INVOCATION | (user)->checkAccountStatus(user).andThen(Single.defer(()->userService.enhance(user)))
1 | Single | defer | METHOD_INVOCATION | checkAccountStatus(user).andThen(Single.defer(()->userService.enhance(user)))
1 | Single | METHOD_INVOCATION | Single.defer(()->userService.enhance(user))
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return userService.findById(subject).switchIfEmpty(Maybe.error(new UserNotFoundException(subject))).flatMap((user)->identityProviderManager.get(user.getSource()).flatMap((authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(user, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).flatMap((idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, user.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, user.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return update(user, idpUser, false).flatMap(userService::enhance).toMaybe();
}).switchIfEmpty(Maybe.defer(()->userService.enhance(user).toMaybe())));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new UserNotFoundException(subject))).flatMap
1 | Maybe | error | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new UserNotFoundException(subject)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(subject))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | (user)->identityProviderManager.get(user.getSource()).flatMap((authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(user, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).flatMap((idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, user.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, user.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return update(user, idpUser, false).flatMap(userService::enhance).toMaybe();
}).switchIfEmpty(Maybe.defer(()->userService.enhance(user).toMaybe()))
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderManager.get(user.getSource()).flatMap((authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(user, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).flatMap((idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, user.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, user.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return update(user, idpUser, false).flatMap(userService::enhance).toMaybe();
}).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderManager.get(user.getSource()).flatMap((authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(user, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | return update(user, idpUser, false).flatMap(userService::enhance).toMaybe();
1 | Single | flatMap | METHOD_INVOCATION | update(user, idpUser, false).flatMap(userService::enhance).toMaybe
1 | Maybe | defer | METHOD_INVOCATION | identityProviderManager.get(user.getSource()).flatMap((authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(user, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).flatMap((idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, user.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, user.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return update(user, idpUser, false).flatMap(userService::enhance).toMaybe();
}).switchIfEmpty(Maybe.defer(()->userService.enhance(user).toMaybe()))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.enhance(user).toMaybe())
1 | Single | toMaybe | METHOD_INVOCATION | ()->userService.enhance(user).toMaybe()
1 | Maybe | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)));
1 | Maybe | defer | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | ignoreElement | METHOD_INVOCATION | return userService.update(user).flatMap((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return Single.just(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).type(EventType.USER_LOCKED).domain(criteria.domain()).client(criteria.client()).principal(null).user(user1))).ignoreElement();
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.update(user).flatMap((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return Single.just(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).type(EventType.USER_LOCKED).domain(criteria.domain()).client(criteria.client()).principal(null).user(user1))).ignoreElement
1 | Single | flatMap | METHOD_INVOCATION | userService.update(user).flatMap((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return Single.just(user);
}).doOnSuccess
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->update(existingUser, principal, afterAuthentication)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return create(principal, afterAuthentication);
    }
    return Single.error(ex);
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->update(existingUser, principal, afterAuthentication)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))).switchIfEmpty
1 | Maybe | defer | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))
1 | Maybe | error | METHOD_INVOCATION | userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(principal.getUsername()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new AccountDisabledException("Account is disabled for user " + user.getUsername()));
1 | Completable | METHOD_INVOCATION | Completable.error(new AccountDisabledException("Account is disabled for user " + user.getUsername()))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | subscribe | METHOD_INVOCATION | factorService.findByDomain(domain.getId()).subscribe(this::updateFactor, (error)->logger.error("Unable to initialize factors for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | factorService.findById(factorId).subscribe(this::updateFactor, (error)->logger.error("Unable to load factor for domain {}", domain.getName(), error), ()->logger.error("No factor found with id {}", factorId));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | just | METHOD_INVOCATION | return Single.just(domainExecutionPolicies);
1 | Single | METHOD_INVOCATION | Single.just(domainExecutionPolicies)
1 | Single | just | METHOD_INVOCATION | return Single.just(applicationExecutionPolicies);
1 | Single | METHOD_INVOCATION | Single.just(applicationExecutionPolicies)
1 | Single | just | METHOD_INVOCATION | return Single.just(Stream.concat(domainExecutionPolicies.stream(), applicationExecutionPolicies.stream()).collect(Collectors.toList()));
1 | Single | METHOD_INVOCATION | Single.just(Stream.concat(domainExecutionPolicies.stream(), applicationExecutionPolicies.stream()).collect(Collectors.toList()))
1 | Maybe | subscribe | METHOD_INVOCATION | flowService.findById(flowId).subscribe((flow)->{
    loadFlow(flow);
    flows.put(flow.getId(), flow);
    logger.info("Flow {} has been deployed for domain {}", flowId, domain.getName());
}, (error)->logger.error("Unable to deploy flow {} for domain {}", flowId, domain.getName(), error), ()->logger.error("No flow found with id {}", flowId));
1 | Flowable | subscribe | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe((flow)->{
    if (flow != null && flow.getId() != null) {
        loadFlow(flow);
        flows.put(flow.getId(), flow);
        logger.info("Flow {} loaded for domain {}", flow.getType(), domain.getName());
    }
}, (error)->logger.error("Unable to initialize flows for domain {}", domain.getName(), error));
1 | Maybe | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm("unknown")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.findByAlgorithm("RS512")).thenReturn(Maybe.just(rs512CertProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(rs512CertProvider)
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get(null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get("notExistingId")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get("existingId")).thenReturn(Maybe.just(rs256CertProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(rs256CertProvider)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jwtService.encode(new JWT(), client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jwtService.encodeUserinfo(new JWT(), client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(domainId, username, source)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userService.create(any())).thenReturn(Single.just(createdUser))
1 | Single | METHOD_INVOCATION | Single.just(createdUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(createdUser)).thenReturn(Single.just(createdUser))
1 | Single | METHOD_INVOCATION | Single.just(createdUser)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(mock(User.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(User.class))
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(mock(User.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(User.class))
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(domainId, username, source)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userService.create(any())).thenReturn(Single.just(createdUser))
1 | Single | METHOD_INVOCATION | Single.just(createdUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(createdUser)).thenReturn(Single.just(createdUser))
1 | Single | METHOD_INVOCATION | Single.just(createdUser)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(mock(User.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(User.class))
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(mock(User.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(User.class))
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(existingUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingUser)
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByDomainAndExternalIdAndSource(domainId, id, source)).thenReturn(Maybe.just(existingUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingUser)
1 | Single | just | METHOD_INVOCATION | when(userService.update(any())).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(updatedUser)).thenReturn(Single.just(updatedUser))
1 | Single | METHOD_INVOCATION | Single.just(updatedUser)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Single.just(Collections.singletonList(policy)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(policy))
1 | Single | just | METHOD_INVOCATION | when(flowManager.findByExtensionPoint(eq(ExtensionPoint.PRE_CONSENT), eq(null), any(FlowPredicate.class))).thenReturn(Single.just(Arrays.asList(policy, policy)))
1 | Single | METHOD_INVOCATION | Single.just(Arrays.asList(policy, policy))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findById("aa").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findById("aa").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientA").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientB").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Client>> test = clientSyncService.findTemplates().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientA").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm(null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("unknown").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("RS512").test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return null;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new DefaultUser("username"));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        throw new BadCredentialsException();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-2")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new DefaultUser("username"));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | error | METHOD_INVOCATION | return Single.error(new AccountDisabledException(idpUser.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new AccountDisabledException(idpUser.getUsername()))
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.just(new DefaultUser("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new DefaultUser("username"));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.error(new UsernameNotFoundException("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.error(new UsernameNotFoundException("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new UsernameNotFoundException("username"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException("username"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(loginAttemptService.checkAccount(any(), any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("idp-1")).thenReturn(Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.error(new BadCredentialsException("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
}))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationProvider(){
    
    () {
        super();
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(Authentication authentication) {
        return Maybe.error(new BadCredentialsException("username"));
    }
    
    @Override()
    public Maybe<io.gravitee.am.identityprovider.api.User> loadUserByUsername(String username) {
        return Maybe.empty();
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("username"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("username"))
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(loginAttemptService.checkAccount(any(), any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | complete | METHOD_INVOCATION | when(authenticationFlowContextService.clearContext(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(Single.just("token"))
1 | Single | METHOD_INVOCATION | Single.just("token")
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(client.getClientId())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(Maybe.empty()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client);
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(requestedClient);
1 | Maybe | METHOD_INVOCATION | Maybe.just(requestedClient)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client);
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(requestedClient);
1 | Maybe | METHOD_INVOCATION | Maybe.just(requestedClient)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, true).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(Maybe.just(accessToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessToken)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | error | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.error(new JWTException("invalid token")))
1 | Single | METHOD_INVOCATION | Single.error(new JWTException("invalid token"))
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | empty | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode(token)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(token, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(accessTokenRepository.findByToken(jwt.getJti())).thenReturn(Maybe.just(accessToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessToken)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), (CertificateProvider)eq(null))).thenReturn(Single.just("token"))
1 | Single | METHOD_INVOCATION | Single.just("token")
1 | Flowable | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(flow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(flow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(domainFlow, appFlow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainFlow, appFlow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(domainFlow, appFlow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainFlow, appFlow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.alwaysTrue()).test()
1 | Flowable | just | METHOD_INVOCATION | when(flowService.findAll(ReferenceType.DOMAIN, domain.getId())).thenReturn(Flowable.just(domainFlow, appFlow))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainFlow, appFlow)
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.from(executionContext)).test()
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | enrichAuthFlowContext(context).subscribe((success)->policyChain.doNext(request, response), (error)->policyChain.failWith(PolicyResult.failure(GATEWAY_POLICY_ENRICH_AUTH_FLOW_ERROR_KEY, error.getMessage())));
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | (arg)->Single.just(arg.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(arg.getArgument(0))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | (user != null) ? Maybe.just(user) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | empty | METHOD_INVOCATION | (user != null) ? Maybe.just(user) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return userDetailsService.loadUserByUsername((String)authentication.getPrincipal()).map((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        throw new BadCredentialsException("Bad credentials");
    }
    return createUser(authentication.getContext(), user);
});
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return userDetailsService.loadUserByUsername(username).map((user)->createUser(new SimpleAuthenticationContext(), user));
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | just | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | error | METHOD_INVOCATION | when(userDetailsService.loadUserByUsername("username")).thenReturn(Maybe.error(new UsernameNotFoundException("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UsernameNotFoundException("username"))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Maybe.fromCallable(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
}).map((ldapUser)->createUser(authentication.getContext(), ldapUser));
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
}).map
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->{
    try {
        String username = (String)authentication.getPrincipal();
        String password = (String)authentication.getCredentials();
        AuthenticationResponse response = authenticator.authenticate(new AuthenticationRequest(username, new Credential(password), ReturnAttributes.ALL_USER.value()));
        if (response.getResult()) {
            LdapEntry userEntry = response.getLdapEntry();
            return userEntry;
        } else {
            LOGGER.debug("Failed to authenticate user", response.getMessage());
            throw new BadCredentialsException(response.getMessage());
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs during LDAP authentication", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Maybe.fromCallable(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
}).map((ldapUser)->createUser(new SimpleAuthenticationContext(), ldapUser));
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
}).map
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->{
    try {
        SearchFilter searchFilter = createSearchFilter(userSearchExecutor, username);
        SearchResult userSearchResult = userSearchExecutor.search(searchConnectionFactory, searchFilter).getResult();
        LdapEntry userEntry = userSearchResult.getEntry();
        if (userEntry != null) {
            return userEntry;
        } else {
            throw new UsernameNotFoundException(username);
        }
    } catch (LdapException e) {
        LOGGER.error("An error occurs while searching for a LDAP user", e);
        throw new InternalAuthenticationServiceException(e.getMessage(), e);
    }
})
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "ben";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "benspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing authorization code"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing authorization code"))
1 | Maybe | map | METHOD_INVOCATION | return client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    Map<String, String> bodyResponse = URLEncodedUtils.format(httpResponse.bodyAsString());
    return new Token(bodyResponse.get("access_token"), TokenTypeHint.ACCESS_TOKEN);
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
});
1 | Single | toMaybe | METHOD_INVOCATION | client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "token " + accessToken.getValue()).rxSend().toMaybe().map
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | flatMapMaybe | METHOD_INVOCATION | return findUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList().flatMapMaybe((users)->{
    if (users.isEmpty()) {
        return Maybe.error(new BadCredentialsException("Bad credentials"));
    }
    if (users.size() > 1) {
        return Maybe.error(new BadCredentialsException("Bad credentials"));
    }
    return Maybe.just(this.createUser(authentication.getContext(), users.get(0)));
});
1 | Flowable | toList | METHOD_INVOCATION | findUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList().flatMapMaybe
1 | Flowable | filter | METHOD_INVOCATION | findUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((user)->{
    String password = user.getString(this.configuration.getPasswordField());
    String presentedPassword = authentication.getCredentials().toString();
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = user.getString(configuration.getPasswordSaltAttribute());
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList
1 | Single | flatMapPublisher | METHOD_INVOCATION | findUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter
1 | Flowable | toList | METHOD_INVOCATION | findUserByMultipleField(username).toList().flatMapPublisher
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new UsernameNotFoundException(username));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new UsernameNotFoundException(username))
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(users);
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(users)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Bad credentials"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Bad credentials"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Bad credentials"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Bad credentials"))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(this.createUser(authentication.getContext(), users.get(0)));
1 | Maybe | METHOD_INVOCATION | Maybe.just(this.createUser(authentication.getContext(), users.get(0)))
1 | Flowable | RETURN_TYPE
1 | Flowable | fromPublisher | METHOD_INVOCATION | return Flowable.fromPublisher(usersCol.find(query));
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(usersCol.find(query))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return findUserByUsername(encodedUsername).map((document)->createUser(new SimpleAuthenticationContext(), document));
1 | Maybe | RETURN_TYPE
1 | Observable | firstElement | METHOD_INVOCATION | return Observable.fromPublisher(usersCol.find(query).first()).firstElement();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCol.find(query).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCol.find(query).first())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(query).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(query).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(query).first())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findByUsername(username).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(user.getUsername()));
    } else {
        Document document = new Document();
        document.put(FIELD_ID, user.getId() != null ? user.getId() : RandomString.generate());
        document.put(configuration.getUsernameField(), username);
        if (user.getCredentials() != null) {
            if (configuration.isUseDedicatedSalt()) {
                byte[] salt = createSalt();
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials(), salt));
                document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
            } else {
                document.put(configuration.getPasswordField(), passwordEncoder.encode(user.getCredentials()));
            }
        }
        if (user.getAdditionalInformation() != null) {
            document.putAll(user.getAdditionalInformation());
        }
        document.put(FIELD_CREATED_AT, new Date());
        document.put(FIELD_UPDATED_AT, document.get(FIELD_CREATED_AT));
        return Single.fromPublisher(usersCollection.insertOne(document)).flatMap((success)->findById(document.getString(FIELD_ID)).toSingle());
    }
});
1 | Maybe | isEmpty | METHOD_INVOCATION | findByUsername(username).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserAlreadyExistsException(user.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException(user.getUsername()))
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(usersCollection.insertOne(document)).flatMap((success)->findById(document.getString(FIELD_ID)).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(usersCollection.insertOne(document)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(usersCollection.insertOne(document))
1 | Maybe | toSingle | METHOD_INVOCATION | (success)->findById(document.getString(FIELD_ID)).toSingle()
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapSingle((oldUser)->{
    Document document = new Document();
    document.put(configuration.getUsernameField(), oldUser.getUsername());
    if (updateUser.getCredentials() != null) {
        if (configuration.isUseDedicatedSalt()) {
            byte[] salt = createSalt();
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials(), salt));
            document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
        } else {
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials()));
        }
    } else {
        document.put(configuration.getPasswordField(), oldUser.getCredentials());
    }
    if (updateUser.getAdditionalInformation() != null) {
        document.putAll(updateUser.getAdditionalInformation());
    }
    document.put(FIELD_CREATED_AT, oldUser.getCreatedAt());
    document.put(FIELD_UPDATED_AT, new Date());
    return Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap((updateResult)->findById(oldUser.getId()).toSingle());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(id))
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap((updateResult)->findById(oldUser.getId()).toSingle());
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))
1 | Maybe | toSingle | METHOD_INVOCATION | (updateResult)->findById(oldUser.getId()).toSingle()
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapCompletable((idpUser)->Completable.fromPublisher(usersCollection.deleteOne(eq(FIELD_ID, id))));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | findById(id).switchIfEmpty(Maybe.error(new UserNotFoundException(id)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(id))
1 | Completable | fromPublisher | METHOD_INVOCATION | (idpUser)->Completable.fromPublisher(usersCollection.deleteOne(eq(FIELD_ID, id)))
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(usersCollection.deleteOne(eq(FIELD_ID, id)))
1 | Observable | subscribe | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1))).subscribe();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1))).subscribe
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1)))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first())
1 | Observable | IMPORT
1 | Observable | blockingFirst | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc)).blockingFirst();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc)).blockingFirst
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc))
1 | Observable | blockingFirst | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc2)).blockingFirst();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc2)).blockingFirst
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc2))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "BOB";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | blockingGet | METHOD_INVOCATION | Map<String, Object> providerConfiguration = client.getAbs(configuration.getWellKnownUri()).rxSend().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new IllegalArgumentException("Invalid OIDC Well-Known Endpoint : " + httpClientResponse.statusMessage());
    }
    return httpClientResponse.bodyAsJsonObject().getMap();
}).blockingGet()
1 | Single | map | METHOD_INVOCATION | client.getAbs(configuration.getWellKnownUri()).rxSend().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new IllegalArgumentException("Invalid OIDC Well-Known Endpoint : " + httpClientResponse.statusMessage());
    }
    return httpClientResponse.bodyAsJsonObject().getMap();
}).blockingGet
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
}).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while creating user {} from the remote HTTP identity provider", user.getUsername(), ex);
    return Single.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex));
});
1 | Single | map | METHOD_INVOCATION | requestHandler.map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex))
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while creating the user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while creating the user", ex))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error has occurred while updating user {} from the remote HTTP identity provider", updateUser.getUsername(), ex);
    return Single.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex));
});
1 | Single | map | METHOD_INVOCATION | requestHandler.map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
}).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex))
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error has occurred while updating the user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error has occurred while updating the user", ex))
1 | Completable | OTHER
1 | Single | LOCAL_VARIABLE
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.flatMapCompletable((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return Completable.complete();
    } catch (Exception ex) {
        return Completable.error(ex);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    }
    LOGGER.error("An error has occurred while deleting user {} from the remote HTTP identity provider", id, ex);
    return Completable.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex));
});
1 | Single | flatMapCompletable | METHOD_INVOCATION | requestHandler.flatMapCompletable((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return Completable.complete();
    } catch (Exception ex) {
        return Completable.error(ex);
    }
}).onErrorResumeNext
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException("An error has occurred while deleting the user", ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException("An error has occurred while deleting the user", ex))
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Maybe.error(ex);
    }
    LOGGER.error("An error has occurred while searching user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return Maybe.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex));
});
1 | Maybe | map | METHOD_INVOCATION | requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | requestHandler.toMaybe().map
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error has occurred while searching the user", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error has occurred while searching the user", ex))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AuthenticationException) {
        return Maybe.error(ex);
    }
    LOGGER.error("An error has occurred while calling the remote HTTP identity provider {}", ex);
    return Maybe.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex));
});
1 | Maybe | map | METHOD_INVOCATION | requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | requestHandler.toMaybe().map
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InternalAuthenticationServiceException("An error has occurred while authenticating the user", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InternalAuthenticationServiceException("An error has occurred while authenticating the user", ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Maybe.error(ex);
    }
    LOGGER.error("An error has occurred when loading pre-authenticated user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return Maybe.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex));
});
1 | Maybe | map | METHOD_INVOCATION | requestHandler.toMaybe().map((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | requestHandler.toMaybe().map
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error has occurred when when loading pre-authenticated user", ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error has occurred when when loading pre-authenticated user", ex))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("johndoe").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("johndoe").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("johndoe@mail.com").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("johndoe@mail.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.update("123456789", user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.update("123456789", user).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("123456789").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("123456789").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | IMPORT
1 | Maybe | blockingGet | METHOD_INVOCATION | Request request = provider.asyncSignInUrl("https://gravitee.io", state).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return authenticate(authentication).flatMap((token)->this.profile(token, authentication));
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing authorization code"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing authorization code"))
1 | Maybe | flatMap | METHOD_INVOCATION | return client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form).toMaybe().flatMap((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
    }
    return Maybe.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN));
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getAccessTokenUri()).rxSendForm(form).toMaybe().flatMap
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN))
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM)).toMaybe().flatMap((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
    }
    return Maybe.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject()));
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getUserProfileUri()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set(ACCESS_TOKEN, accessToken.getValue()).set(FIELDS, ALL_FIELDS_PARAM)).toMaybe().flatMap
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject()));
1 | Maybe | METHOD_INVOCATION | Maybe.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject()))
1 | Maybe | blockingGet | METHOD_INVOCATION | (Request)cut.asyncSignInUrl("https://gravitee.io", state).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend().toMaybe().map((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    String body = httpResponse.bodyAsString();
    String[] tokenResponse = body.split("&");
    String token = null;
    String tokenSecret = null;
    String callbackState = null;
    for (String responsePair : tokenResponse) {
        String[] pair = responsePair.split("=");
        if (pair.length > 1) {
            if (OAUTH_TOKEN.equals(pair[0])) {
                token = pair[1];
            }
            if (OAUTH_TOKEN_SECRET.equals(pair[0])) {
                tokenSecret = pair[1];
            }
            if ("oauth_callback_confirmed".equals(pair[0])) {
                callbackState = pair[1];
            }
        }
    }
    if ("true".equalsIgnoreCase(callbackState)) {
        tokenMemory.put(token, tokenSecret);
        UriBuilder builder = UriBuilder.fromHttpUrl(configuration.getUserAuthorizationUri());
        builder.addParameter(OAUTH_TOKEN, token);
        Request request = new Request();
        request.setMethod(HttpMethod.GET);
        request.setUri(builder.build().toString());
        return request;
    }
    throw new BadCredentialsException("Token returned by Twitter mismatch");
});
1 | Single | toMaybe | METHOD_INVOCATION | getClient().postAbs(getConfiguration().getRequestTokenUrl()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend().toMaybe().map
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing OAuth Token"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing OAuth Token"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing Token Verifier"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing Token Verifier"))
1 | Maybe | flatMap | METHOD_INVOCATION | return client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form).toMaybe().flatMap((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return Maybe.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN));
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSendForm(form).toMaybe().flatMap
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN))
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend().toMaybe().flatMap((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return Maybe.just(user);
});
1 | Single | toMaybe | METHOD_INVOCATION | client.getAbs(configuration.getUserProfileUri() + "?include_email=true").putHeader(HttpHeaders.AUTHORIZATION, authorization).rxSend().toMaybe().flatMap
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException(httpResponse.bodyAsString()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(user);
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | blockingGet | METHOD_INVOCATION | Request request = provider.asyncSignInUrl("https://gravitee.io", RandomString.generate()).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | provider.asyncSignInUrl("https://gravitee.io", RandomString.generate()).blockingGet();
1 | Maybe | blockingGet | METHOD_INVOCATION | provider.asyncSignInUrl("https://gravitee.io", RandomString.generate()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | blockingGet | METHOD_INVOCATION | provider.asyncSignInUrl("https://gravitee.io", RandomString.generate()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing authorization code"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing authorization code"))
1 | Maybe | map | METHOD_INVOCATION | return client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString(ACCESS_TOKEN_PARAMETER);
    String idToken = response.getString(ID_TOKEN_PARAMETER);
    if (!Strings.isNullOrEmpty(idToken)) {
        authentication.getContext().set(ID_TOKEN_PARAMETER, idToken);
    }
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject().getMap());
});
1 | Single | toMaybe | METHOD_INVOCATION | client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | flatMapMaybe | METHOD_INVOCATION | return selectUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList().flatMapMaybe((users)->{
    if (users.isEmpty()) {
        return Maybe.error(new BadCredentialsException("Bad credentials"));
    }
    if (users.size() > 1) {
        return Maybe.error(new BadCredentialsException("Bad credentials"));
    }
    return Maybe.just(createUser(authentication.getContext(), users.get(0)));
});
1 | Flowable | toList | METHOD_INVOCATION | selectUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList().flatMapMaybe
1 | Flowable | filter | METHOD_INVOCATION | selectUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter((result)->{
    String password = String.valueOf(result.get(configuration.getPasswordAttribute()));
    if (password == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (configuration.isUseDedicatedSalt()) {
        String hash = String.valueOf(result.get(configuration.getPasswordSaltAttribute()));
        if (!passwordEncoder.matches(presentedPassword, password, hash)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    } else {
        if (!passwordEncoder.matches(presentedPassword, password)) {
            LOGGER.debug("Authentication failed: password does not match stored value");
            return false;
        }
    }
    return true;
}).toList
1 | Single | flatMapPublisher | METHOD_INVOCATION | selectUserByMultipleField(username).toList().flatMapPublisher((users)->{
    if (users.isEmpty()) {
        return Flowable.error(new UsernameNotFoundException(username));
    }
    return Flowable.fromIterable(users);
}).filter
1 | Flowable | toList | METHOD_INVOCATION | selectUserByMultipleField(username).toList().flatMapPublisher
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new UsernameNotFoundException(username));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new UsernameNotFoundException(username))
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(users);
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(users)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Bad credentials"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Bad credentials"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Bad credentials"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Bad credentials"))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(createUser(authentication.getContext(), users.get(0)));
1 | Maybe | METHOD_INVOCATION | Maybe.just(createUser(authentication.getContext(), users.get(0)))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return Flowable.fromPublisher(connectionPool.create()).flatMap((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return Flowable.fromPublisher(statement.execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe());
}).flatMap((result)->result.map(ColumnMapRowMapper::mapRow));
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create()).flatMap((connection)->{
    Statement statement = connection.createStatement(sql);
    for (int i = 0; i < args.length; ++i) {
        statement = statement.bind(i, username);
    }
    return Flowable.fromPublisher(statement.execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe());
}).flatMap
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create()).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create())
1 | Flowable | doFinally | METHOD_INVOCATION | return Flowable.fromPublisher(statement.execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe());
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(statement.execute()).doFinally
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(statement.execute())
1 | Completable | subscribe | METHOD_INVOCATION | ()->Completable.fromPublisher(connection.close()).subscribe()
1 | Completable | fromPublisher | METHOD_INVOCATION | Completable.fromPublisher(connection.close()).subscribe
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(connection.close())
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return selectUserByUsername(username).map((attributes)->createUser(new SimpleAuthenticationContext(), attributes));
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return Flowable.fromPublisher(connectionPool.create()).flatMap((connection)->Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe())).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create()).flatMap((connection)->Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe())).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create()).flatMap((connection)->Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe())).flatMap
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create()).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(connectionPool.create())
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute()).doFinally(()->Completable.fromPublisher(connection.close()).subscribe())
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute()).doFinally
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(connection.createStatement(sql).bind(0, username).execute())
1 | Completable | subscribe | METHOD_INVOCATION | ()->Completable.fromPublisher(connection.close()).subscribe()
1 | Completable | fromPublisher | METHOD_INVOCATION | Completable.fromPublisher(connection.close()).subscribe
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(connection.close())
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)).flatMap((total)->{
    if (total == 0) {
        return Flowable.fromIterable(sqlStatements).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0));
    } else {
        return Flowable.empty();
    }
}).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).subscribe();
1 | Flowable | doOnError | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)).flatMap((total)->{
    if (total == 0) {
        return Flowable.fromIterable(sqlStatements).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0));
    } else {
        return Flowable.empty();
    }
}).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).subscribe
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)).flatMap((total)->{
    if (total == 0) {
        return Flowable.fromIterable(sqlStatements).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0));
    } else {
        return Flowable.empty();
    }
}).doOnError
1 | Flowable | flatMapSingle | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)).flatMap
1 | Flowable | just | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable())).flatMapSingle
1 | Flowable | METHOD_INVOCATION | Flowable.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))
1 | Flowable | first | METHOD_INVOCATION | (statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)
1 | Flowable | flatMap | METHOD_INVOCATION | query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first
1 | Flowable | flatMapSingle | METHOD_INVOCATION | return Flowable.fromIterable(sqlStatements).flatMapSingle((statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0));
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(sqlStatements).flatMapSingle
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(sqlStatements)
1 | Flowable | first | METHOD_INVOCATION | (statement)->query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first(0)
1 | Flowable | flatMap | METHOD_INVOCATION | query(statement, new Object[0]).flatMap(Result::getRowsUpdated).first
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return selectUserByEmail(email).map(this::createUser);
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return query(sql, email).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | query(sql, email).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return selectUserByUsername(username).map(this::createUser);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromPublisher(connectionPool.create()).flatMap((cnx)->{
    return selectUserByUsername(cnx, user.getUsername()).isEmpty().flatMap((isEmpty)->{
        if (!isEmpty) {
            return Single.error(new UserAlreadyExistsException(user.getUsername()));
        } else {
            String sql;
            Object[] args;
            if (configuration.isUseDedicatedSalt()) {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
                args = new Object[6];
                byte[] salt = createSalt();
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
                args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
                args[4] = user.getEmail();
                args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            } else {
                sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
                args = new Object[5];
                args[0] = user.getId();
                args[1] = user.getUsername();
                args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
                args[3] = user.getEmail();
                args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
            }
            return query(cnx, sql, args).flatMap(Result::getRowsUpdated).first(0).map((result)->user);
        }
    }).doFinally(()->Completable.fromPublisher(cnx.close()).subscribe());
});
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connectionPool.create()).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connectionPool.create())
1 | Single | doFinally | METHOD_INVOCATION | return selectUserByUsername(cnx, user.getUsername()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(user.getUsername()));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return query(cnx, sql, args).flatMap(Result::getRowsUpdated).first(0).map((result)->user);
    }
}).doFinally(()->Completable.fromPublisher(cnx.close()).subscribe());
1 | Single | flatMap | METHOD_INVOCATION | selectUserByUsername(cnx, user.getUsername()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(user.getUsername()));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return query(cnx, sql, args).flatMap(Result::getRowsUpdated).first(0).map((result)->user);
    }
}).doFinally
1 | Maybe | isEmpty | METHOD_INVOCATION | selectUserByUsername(cnx, user.getUsername()).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserAlreadyExistsException(user.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException(user.getUsername()))
1 | Single | map | METHOD_INVOCATION | return query(cnx, sql, args).flatMap(Result::getRowsUpdated).first(0).map((result)->user);
1 | Flowable | first | METHOD_INVOCATION | query(cnx, sql, args).flatMap(Result::getRowsUpdated).first(0).map
1 | Flowable | flatMap | METHOD_INVOCATION | query(cnx, sql, args).flatMap(Result::getRowsUpdated).first
1 | Completable | subscribe | METHOD_INVOCATION | ()->Completable.fromPublisher(cnx.close()).subscribe()
1 | Completable | fromPublisher | METHOD_INVOCATION | Completable.fromPublisher(cnx.close()).subscribe
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(cnx.close())
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return query(cnx, sql, username).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | query(cnx, sql, username).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return query(sql, args).flatMap(Result::getRowsUpdated).first(0).flatMap((rowsUpdated)->{
    if (rowsUpdated == 0) {
        return Single.error(new UserNotFoundException(id));
    }
    ((DefaultUser)updateUser).setId(id);
    return Single.just(updateUser);
});
1 | Flowable | first | METHOD_INVOCATION | query(sql, args).flatMap(Result::getRowsUpdated).first(0).flatMap
1 | Flowable | flatMap | METHOD_INVOCATION | query(sql, args).flatMap(Result::getRowsUpdated).first
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserNotFoundException(id));
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(id))
1 | Single | just | METHOD_INVOCATION | return Single.just(updateUser);
1 | Single | METHOD_INVOCATION | Single.just(updateUser)
1 | Completable | OTHER
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | return query(sql, id).flatMap(Result::getRowsUpdated).flatMapCompletable((rowsUpdated)->{
    if (rowsUpdated == 0) {
        return Completable.error(new UserNotFoundException(id));
    }
    return Completable.complete();
});
1 | Flowable | flatMap | METHOD_INVOCATION | query(sql, id).flatMap(Result::getRowsUpdated).flatMapCompletable
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new UserNotFoundException(id));
1 | Completable | METHOD_INVOCATION | Completable.error(new UserNotFoundException(id))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | RETURN_TYPE
1 | Flowable | firstElement | METHOD_INVOCATION | return query(sql, username).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement();
1 | Flowable | flatMap | METHOD_INVOCATION | query(sql, username).flatMap((result)->result.map(ColumnMapRowMapper::mapRow)).firstElement
1 | Flowable | RETURN_TYPE
1 | Flowable | fromPublisher | METHOD_INVOCATION | return Flowable.fromPublisher(statement.execute());
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(statement.execute())
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return Single.fromPublisher(connectionPool.create()).toFlowable().flatMap((connection)->query(connection, sql, args).doFinally(()->Completable.fromPublisher(connection.close()).subscribe()));
1 | Single | toFlowable | METHOD_INVOCATION | Single.fromPublisher(connectionPool.create()).toFlowable().flatMap
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connectionPool.create()).toFlowable
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connectionPool.create())
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->query(connection, sql, args).doFinally(()->Completable.fromPublisher(connection.close()).subscribe())
1 | Completable | subscribe | METHOD_INVOCATION | ()->Completable.fromPublisher(connection.close()).subscribe()
1 | Completable | fromPublisher | METHOD_INVOCATION | Completable.fromPublisher(connection.close()).subscribe
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(connection.close())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("bob").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("user01@acme.com").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("unknown").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("unknown@acme.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Single | blockingGet | METHOD_INVOCATION | User createdUser = userProvider.create(user).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | userProvider.update(createdUser.getId(), updateUser).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("userToUpdate").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.update("unknown", user).test()
1 | Single | blockingGet | METHOD_INVOCATION | User createdUser = userProvider.create(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | userProvider.delete(createdUser.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("userToDelete").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("unknown").test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | Completable.fromPublisher(connection.close()).subscribe();
1 | Completable | fromPublisher | METHOD_INVOCATION | Completable.fromPublisher(connection.close()).subscribe
1 | Completable | METHOD_INVOCATION | Completable.fromPublisher(connection.close())
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).subscribe
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute())
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).subscribe
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute())
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute()).subscribe
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).blockingGet();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).blockingGet
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute())
1 | Single | blockingGet | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).blockingGet();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).blockingGet
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute())
1 | Single | blockingGet | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute()).flatMap((rp)->Single.fromPublisher(rp.getRowsUpdated())).blockingGet();
1 | Single | flatMap | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute()).flatMap((rp)->Single.fromPublisher(rp.getRowsUpdated())).blockingGet
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute()).flatMap
1 | Single | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute())
1 | Single | fromPublisher | METHOD_INVOCATION | (rp)->Single.fromPublisher(rp.getRowsUpdated())
1 | Single | METHOD_INVOCATION | Single.fromPublisher(rp.getRowsUpdated())
1 | Maybe | blockingGet | METHOD_INVOCATION | (Request)provider.asyncSignInUrl("https://gravitee.io", state).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new BadCredentialsException("Missing authorization code"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Missing authorization code"))
1 | Maybe | map | METHOD_INVOCATION | return client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpResponse.statusMessage());
    }
    JsonObject response = httpResponse.bodyAsJsonObject();
    String accessToken = response.getString("access_token");
    return new Token(accessToken, TokenTypeHint.ACCESS_TOKEN);
});
1 | Single | toMaybe | METHOD_INVOCATION | client.postAbs(configuration.getAccessTokenUri()).putHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(bodyRequest.length())).putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED).rxSendBuffer(Buffer.buffer(bodyRequest)).toMaybe().map
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
}).flatMap((user)->requestEmailAddress(accessToken).map((address)->{
    address.ifPresent((value)->{
        ((DefaultUser)user).setEmail(value);
        ((DefaultUser)user).setUsername(value);
        user.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        user.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return user;
}));
1 | Maybe | map | METHOD_INVOCATION | client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() != 200) {
        throw new BadCredentialsException(httpClientResponse.statusMessage());
    }
    return createUser(authentication.getContext(), httpClientResponse.bodyAsJsonObject());
}).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | client.getAbs(configuration.getUserProfileUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map
1 | Maybe | map | METHOD_INVOCATION | (user)->requestEmailAddress(accessToken).map((address)->{
    address.ifPresent((value)->{
        ((DefaultUser)user).setEmail(value);
        ((DefaultUser)user).setUsername(value);
        user.getAdditionalInformation().put(StandardClaims.EMAIL, value);
        user.getAdditionalInformation().put(StandardClaims.PREFERRED_USERNAME, value);
    });
    return user;
})
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map((httpClientResponse)->{
    if (httpClientResponse.statusCode() == 200) {
        String email = null;
        JsonObject payload = httpClientResponse.bodyAsJsonObject();
        if (payload != null && payload.containsKey("elements")) {
            JsonArray elements = payload.getJsonArray("elements");
            for (int i = 0; i < elements.size(); ++i) {
                JsonObject emailPayload = elements.getJsonObject(i);
                if (emailPayload != null && emailPayload.containsKey("handle~")) {
                    JsonObject handle = emailPayload.getJsonObject("handle~");
                    email = handle.getString("emailAddress");
                    break;
                }
            }
        }
        return Optional.ofNullable(email);
    } else {
        LOGGER.warn("Unable to retrieve the LinkedIn email address : {}", httpClientResponse.statusMessage());
        return Optional.empty();
    }
});
1 | Single | toMaybe | METHOD_INVOCATION | client.getAbs(configuration.getUserEmailAddressUri()).putHeader(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken.getValue()).rxSend().toMaybe().map
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(Optional.empty());
1 | Maybe | METHOD_INVOCATION | Maybe.just(Optional.empty())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | blockingGet | METHOD_INVOCATION | Request request = provider.asyncSignInUrl("https://gravitee.io", state).blockingGet()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | map | METHOD_INVOCATION | return userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee").filter((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (user.getPassword() == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        return false;
    }
    return true;
}).map((user)->{
    DefaultUser idpUser = new DefaultUser(user.getUsername());
    idpUser.setId(user.getId());
    idpUser.setCredentials(user.getPassword());
    idpUser.setEmail(user.getEmail());
    idpUser.setAdditionalInformation(user.getAdditionalInformation() == null ? new HashMap<>() : user.getAdditionalInformation());
    idpUser.setFirstName(user.getFirstName());
    idpUser.setLastName(user.getLastName());
    idpUser.setAccountExpired(!user.isAccountNonExpired());
    idpUser.setCreatedAt(user.getCreatedAt());
    idpUser.setEnabled(user.isEnabled());
    idpUser.setUpdatedAt(user.getUpdatedAt());
    return idpUser;
});
1 | Maybe | filter | METHOD_INVOCATION | userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, (String)context.get(KEY_ORGANIZATION_ID), username, "gravitee").filter((user)->{
    String presentedPassword = authentication.getCredentials().toString();
    if (user.getPassword() == null) {
        LOGGER.debug("Authentication failed: password is null");
        return false;
    }
    if (!passwordEncoder.matches(presentedPassword, user.getPassword())) {
        LOGGER.debug("Authentication failed: password does not match stored value");
        return false;
    }
    return true;
}).map
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(updateUser);
1 | Single | METHOD_INVOCATION | Single.just(updateUser)
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()));
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKey);
1 | Single | METHOD_INVOCATION | Single.just(certificateKey)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get());
1 | Single | METHOD_INVOCATION | Single.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get())
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKeys);
1 | Single | METHOD_INVOCATION | Single.just(certificateKeys)
1 | Flowable | RETURN_TYPE
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(keys);
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(keys)
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()));
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(convert(nimbusJwk, true).collect(Collectors.toList()))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKey);
1 | Single | METHOD_INVOCATION | Single.just(certificateKey)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get());
1 | Single | METHOD_INVOCATION | Single.just(certificateKeys.stream().filter((c)->c.getFmt().equals(CertificateFormat.SSH_RSA)).map(CertificateKey::getPayload).findFirst().get())
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(certificateKeys);
1 | Single | METHOD_INVOCATION | Single.just(certificateKeys)
1 | Flowable | RETURN_TYPE
1 | Flowable | fromIterable | METHOD_INVOCATION | return Flowable.fromIterable(keys);
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(keys)
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | firstElement | METHOD_INVOCATION | return Observable.fromCallable(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
}).firstElement();
1 | Observable | fromCallable | METHOD_INVOCATION | Observable.fromCallable(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
}).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromCallable(()->{
    try {
        JWT jwt = jwtParser.parse(assertion);
        return createUser(jwt);
    } catch (MalformedJWTException | ExpiredJWTException | PrematureJWTException | SignatureException ex) {
        LOGGER.debug(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    } catch (Exception ex) {
        LOGGER.error(ex.getMessage(), ex.getCause());
        throw new InvalidGrantException(ex.getMessage(), ex);
    }
})
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query))
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Audit>> auditsOperation = Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count));
1 | Single | METHOD_INVOCATION | Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map(this::convert);
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()).firstElement
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first())
1 | Flowable | subscribe | METHOD_INVOCATION | disposable = bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(this::bulk).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable)).subscribe()
1 | Flowable | doOnError | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(this::bulk).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable)).subscribe
1 | Flowable | flatMap | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(this::bulk).doOnError
1 | Flowable | buffer | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList().map((docs)->{
    Map<Long, Long> successResult = new HashMap<>();
    Map<Long, Long> failureResult = new HashMap<>();
    docs.forEach((document)->{
        Long timestamp = ((Number)((Document)document.get("_id")).get("_id")).longValue();
        Long successAttempts = ((Number)document.get(fieldSuccess)).longValue();
        Long failureAttempts = ((Number)document.get(fieldFailure)).longValue();
        successResult.put(timestamp, successAttempts);
        failureResult.put(timestamp, failureAttempts);
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
});
1 | Observable | toList | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList().map((docs)->docs.stream().collect(Collectors.toMap((d)->((Document)d.get("_id")).get("_id"), (d)->d.get("count"))));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList().map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L).map((data)->Collections.singletonMap("data", data));
1 | Observable | first | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L).map
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query)).first
1 | Observable | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query))
1 | Flowable | OTHER
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | fromPublisher | METHOD_INVOCATION | return Flowable.fromPublisher(reportableCollection.bulkWrite(this.convert(audits)));
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(reportableCollection.bulkWrite(this.convert(audits)))
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | toList | METHOD_INVOCATION | return fluxToFlowable(histogram.fetch().all()).toList();
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new Page<>(Collections.emptyList(), page, size));
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptyList(), page, size))
1 | Single | doOnError | METHOD_INVOCATION | return fluxToFlowable(query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes)).toList().flatMap((content)->monoToSingle(total).map((value)->new Page<Audit>(content, page, value))).doOnError((error)->LOGGER.error("Unable to retrieve reports for referenceType {} and referenceId {}", referenceType, referenceId, error));
1 | Single | flatMap | METHOD_INVOCATION | fluxToFlowable(query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes)).toList().flatMap((content)->monoToSingle(total).map((value)->new Page<Audit>(content, page, value))).doOnError
1 | Flowable | toList | METHOD_INVOCATION | fluxToFlowable(query.as(AuditJdbc.class).fetch().all().map(this::convert).concatMap(this::fillWithActor).concatMap(this::fillWithTarget).concatMap(this::fillWithAccessPoint).concatMap(this::fillWithOutcomes)).toList().flatMap
1 | Single | map | METHOD_INVOCATION | (content)->monoToSingle(total).map((value)->new Page<Audit>(content, page, value))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalArgumentException("Analytics [" + analyticsType + "] cannot be calculated"))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(result);
1 | Single | METHOD_INVOCATION | Single.just(result)
1 | Single | map | METHOD_INVOCATION | return dialectHelper.buildAndProcessHistogram(dbClient, referenceType, referenceId, criteria).map((stats)->{
    Map<Long, Long> successResult = new TreeMap<>();
    Map<Long, Long> failureResult = new TreeMap<>();
    stats.forEach((slotValue)->{
        Long timestamp = ((Number)slotValue.get("slot")).longValue();
        Long attempts = ((Number)slotValue.get("attempts")).longValue();
        if (((String)slotValue.get("status")).equalsIgnoreCase("success")) {
            successResult.put(timestamp, attempts);
        } else {
            failureResult.put(timestamp, attempts);
        }
    });
    intervals.forEach((k,v)->{
        successResult.putIfAbsent(k, v);
        failureResult.putIfAbsent(k, v);
    });
    List<Long> successData = successResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    List<Long> failureData = failureResult.entrySet().stream().map(Entry::getValue).collect(Collectors.toList());
    Map<Object, Object> result = new HashMap<>();
    result.put(fieldSuccess, successData);
    result.put(fieldFailure, failureData);
    return result;
});
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.singletonMap("data", 0L));
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonMap("data", 0L))
1 | Single | map | METHOD_INVOCATION | return monoToSingle(count.as(Long.class).fetch().first().switchIfEmpty(Mono.just(0L))).map((data)->Collections.singletonMap("data", data));
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | doOnError | METHOD_INVOCATION | return monoToMaybe(auditMono).doOnError((error)->LOGGER.error("Unable to retrieve the Report with referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, error));
1 | Flowable | OTHER
1 | Flowable | empty | METHOD_INVOCATION | return Flowable.empty();
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | doOnError | METHOD_INVOCATION | return Flowable.fromPublisher(Flux.fromIterable(audits).flatMap(this::insertReport, 2)).doOnError((error)->LOGGER.error("Error during bulk loading", error));
1 | Flowable | fromPublisher | METHOD_INVOCATION | Flowable.fromPublisher(Flux.fromIterable(audits).flatMap(this::insertReport, 2)).doOnError
1 | Flowable | METHOD_INVOCATION | Flowable.fromPublisher(Flux.fromIterable(audits).flatMap(this::insertReport, 2))
1 | Flowable | subscribe | METHOD_INVOCATION | disposable = bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(JdbcAuditReporter.this::bulk).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error)).subscribe()
1 | Flowable | doOnError | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(JdbcAuditReporter.this::bulk).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error)).subscribe
1 | Flowable | flatMap | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap(JdbcAuditReporter.this::bulk).doOnError
1 | Flowable | buffer | METHOD_INVOCATION | bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()).flatMap
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | toList | METHOD_INVOCATION | return fluxToFlowable(Flux.fromIterable(intervals.keySet()).flatMap((slot)->{
    String beginSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot), ZoneId.of(ZoneOffset.UTC.getId())));
    String endSlot = dateTimeFormatter.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(slot + criteria.interval()), ZoneId.of(ZoneOffset.UTC.getId())));
    String query = " SELECT " + slot + " as slot, o.status, COUNT(o.status) as attempts " + queryBuilder.toString() + whereClauseBuilder.toString() + " AND \'" + beginSlot + "\' <= a.timestamp and \'" + endSlot + "\' >= a.timestamp  GROUP BY o.status ORDER BY o.status ";
    for (Map.Entry<String, Object> bind : bindings.entrySet()) {
        Object value = bind.getValue();
        if (value instanceof List) {
            String types = ((List<String>)value).stream().collect(Collectors.joining("\',\'", "\'", "\'"));
            query = query.replaceAll(":" + bind.getKey(), types);
        } else if (value instanceof LocalDateTime) {
            query = query.replaceAll(":" + bind.getKey(), "\'" + dateTimeFormatter.format((LocalDateTime)value) + "\'");
        } else {
            query = query.replaceAll(":" + bind.getKey(), "\'" + String.valueOf(value) + "\'");
        }
    }
    return dbClient.execute(query).fetch().all();
})).toList();
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationHistogram", criteria, Type.DATE_HISTO).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationGroupBy", criteria, Type.GROUP_BY).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 20).test()
1 | Single | test | METHOD_INVOCATION | test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 5).test()
1 | Single | test | METHOD_INVOCATION | test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 1, 5).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Audit> test = auditReporter.findById(audit.getReferenceType(), audit.getReferenceId(), audit.getId()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        final String otpCode = TOTP.generateTOTP(SharedSecret.base32Str2Hex(enrolledFactor.getSecurity().getValue()));
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    try {
        final String otpCode = TOTP.generateTOTP(SharedSecret.base32Str2Hex(enrolledFactor.getSecurity().getValue()));
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
})
1 | Single | RETURN_TYPE
1 | Single | fromCallable | METHOD_INVOCATION | return Single.fromCallable(()->{
    final String key = SharedSecret.generate();
    final String barCode = QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), account), 200, 200);
    return new Enrollment(key, barCode);
});
1 | Single | METHOD_INVOCATION | Single.fromCallable(()->{
    final String key = SharedSecret.generate();
    final String barCode = QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), account), 200, 200);
    return new Enrollment(key, barCode);
})
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | RETURN_TYPE
1 | Maybe | fromCallable | METHOD_INVOCATION | return Maybe.fromCallable(()->{
    final String key = enrolledFactor.getSecurity().getValue();
    final String username = user.getUsername();
    return QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), username), 200, 200);
});
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->{
    final String key = enrolledFactor.getSecurity().getValue();
    final String username = user.getUsername();
    return QRCode.generate(QRCode.generateURI(key, otpFactorConfiguration.getIssuer(), username), 200, 200);
})
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | botDetectionManager.validate(context).subscribe((isValid)->{
    if (isValid) {
        LOGGER.debug("No bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.next();
    } else {
        LOGGER.warn("Bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.fail(BAD_REQUEST_400, new BotDetectedException(DEFAULT_ERROR_MSG));
    }
}, (error)->{
    LOGGER.error("BotDetection failed for domain \'{}\' and client \'{}\'", domain.getId(), client.getId(), error);
    routingContext.fail(INTERNAL_SERVER_ERROR_500, new TechnicalManagementException(DEFAULT_ERROR_MSG));
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | authenticationProvider.loadUserByUsername(endUserAuthentication).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value"))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return userAuthenticationManager.connect(user);
}).subscribe((user)->{
    eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(endUserAuthentication, domain, client, user));
    resultHandler.handle(Future.succeededFuture(new io.gravitee.am.gateway.handler.common.vertx.web.auth.user.User(user)));
}, (error)->{
    logger.error("Unable to authenticate social provider", error);
    eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(endUserAuthentication, domain, client, error));
    resultHandler.handle(Future.failedFuture(error));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | authenticationProvider.loadUserByUsername(endUserAuthentication).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value"))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return userAuthenticationManager.connect(user);
}).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authenticationProvider.loadUserByUsername(endUserAuthentication).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value"))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | authenticationProvider.loadUserByUsername(endUserAuthentication).switchIfEmpty(Maybe.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value"))
1 | Single | subscribe | METHOD_INVOCATION | domainRepository.findAllByReferenceId(domain.getReferenceId()).filter((d)->!domain.getId().equals(d.getId())).toList().subscribe((domains)->domains.forEach(clientManager::deployCrossDomain));
1 | Flowable | toList | METHOD_INVOCATION | domainRepository.findAllByReferenceId(domain.getReferenceId()).filter((d)->!domain.getId().equals(d.getId())).toList().subscribe
1 | Flowable | filter | METHOD_INVOCATION | domainRepository.findAllByReferenceId(domain.getReferenceId()).filter((d)->!domain.getId().equals(d.getId())).toList
1 | Single | subscribe | METHOD_INVOCATION | jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider()).doOnSuccess((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
}).subscribe((stateJwt)->handler.handle(Future.succeededFuture(true)), (ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Single | doOnSuccess | METHOD_INVOCATION | jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider()).doOnSuccess((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
}).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}, ()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderManager.get(providerId).subscribe((authenticationProvider)->handler.handle(Future.succeededFuture(authenticationProvider)), (ex)->{
    logger.error("An error occurs while getting identity provider {}", providerId, ex);
    handler.handle(Future.failedFuture(ex));
}, ()->{
    logger.error("Unknown identity provider {}", providerId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Single | subscribe | METHOD_INVOCATION | userService.confirmRegistration(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->logger.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe();
1 | Completable | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->logger.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | userService.register(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Maybe | subscribe | METHOD_INVOCATION | userAuthenticationManager.loadUserByUsername(client, username, request).subscribe((user)->handler.handle(Future.succeededFuture(user)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new UsernameNotFoundException(username))));
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return getAuthorizeUrl(identityProvider.getId(), context).map((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl)).defaultIfEmpty(new SocialProviderData(identityProvider, null));
}).toList().subscribe((socialProviderData)->resultHandler.handle(Future.succeededFuture(socialProviderData)), (error)->resultHandler.handle(Future.failedFuture(error)));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return getAuthorizeUrl(identityProvider.getId(), context).map((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl)).defaultIfEmpty(new SocialProviderData(identityProvider, null));
}).toList().subscribe
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return getAuthorizeUrl(identityProvider.getId(), context).map((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl)).defaultIfEmpty(new SocialProviderData(identityProvider, null));
}).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(identityProviders)
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | return getAuthorizeUrl(identityProvider.getId(), context).map((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl)).defaultIfEmpty(new SocialProviderData(identityProvider, null));
1 | Maybe | map | METHOD_INVOCATION | getAuthorizeUrl(identityProvider.getId(), context).map((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl)).defaultIfEmpty
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return identityProviderManager.get(identityProviderId).flatMap((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider()).flatMapMaybe((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
        return signInURL.map((request)->{
            if (HttpMethod.GET.equals(request.getMethod())) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        });
    });
});
1 | Single | flatMapMaybe | METHOD_INVOCATION | return jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider()).flatMapMaybe((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
    return signInURL.map((request)->{
        if (HttpMethod.GET.equals(request.getMethod())) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    });
});
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | map | METHOD_INVOCATION | return signInURL.map((request)->{
    if (HttpMethod.GET.equals(request.getMethod())) {
        return request.getUri();
    } else {
        final Map<String, String> queryParams = getParams(request.getBody());
        queryParams.put(ACTION_KEY, request.getUri());
        return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
    }
});
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.verify(factorContext).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | PARAM
1 | Single | subscribe | METHOD_INVOCATION | enrolledFactor.flatMap((factor)->userService.addFactor(user.getId(), factor, new DefaultUser(user))).subscribe((user1)->handler.handle(Future.succeededFuture(user1)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | flatMap | METHOD_INVOCATION | enrolledFactor.flatMap((factor)->userService.addFactor(user.getId(), factor, new DefaultUser(user))).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->entry.getValue().enroll(user.getUsername()).map((enrollment)->new Factor(entry.getKey(), enrollment))).toList().subscribe((factors)->handler.handle(Future.succeededFuture(factors)), (error)->handler.handle(Future.failedFuture(error)));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->entry.getValue().enroll(user.getUsername()).map((enrollment)->new Factor(entry.getKey(), enrollment))).toList().subscribe
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->entry.getValue().enroll(user.getUsername()).map((enrollment)->new Factor(entry.getKey(), enrollment))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet())
1 | Single | map | METHOD_INVOCATION | (entry)->entry.getValue().enroll(user.getUsername()).map((enrollment)->new Factor(entry.getKey(), enrollment))
1 | Maybe | subscribe | METHOD_INVOCATION | userService.verifyToken(token).subscribe((userToken)->handler.handle(Future.succeededFuture(userToken)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new InvalidTokenException("The JWT token is invalid"))));
1 | Single | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate(client, authentication, true).subscribe((user)->handler.handle(Future.succeededFuture(new io.gravitee.am.gateway.handler.common.vertx.web.auth.user.User(user))), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | credentialService.update(ReferenceType.DOMAIN, domain.getId(), credentialId, credential).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | userService.forgotPassword(parameters, client, getAuthenticatedUser(context)).subscribe(()->{
    queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
    redirectToPage(context, queryParams);
}, (error)->{
    if (error instanceof UserNotFoundException || error instanceof AccountStatusException) {
        queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        redirectToPage(context, queryParams);
    } else if (error instanceof EnforceUserIdentityException) {
        if (settings.isResetPasswordConfirmIdentity()) {
            queryParams.set(ConstantKeys.WARNING_PARAM_KEY, FORGOT_PASSWORD_CONFIRM);
        } else {
            queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        }
        redirectToPage(context, queryParams);
    } else {
        queryParams.set(ConstantKeys.ERROR_PARAM_KEY, "forgot_password_failed");
        redirectToPage(context, queryParams, error);
    }
});
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Flowable | toList | METHOD_INVOCATION | query.getUserName() != null ? credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName()).toList() : credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), query.getCredID()).toList()
1 | Flowable | toList | METHOD_INVOCATION | query.getUserName() != null ? credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName()).toList() : credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), query.getCredID()).toList()
1 | Single | subscribe | METHOD_INVOCATION | fetchCredentials.flatMap((credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return Single.just(credentials.stream().map(this::convert).collect(Collectors.toList()));
    }
}).subscribe(promise::complete, promise::fail);
1 | Single | flatMap | METHOD_INVOCATION | fetchCredentials.flatMap((credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return Single.just(credentials.stream().map(this::convert).collect(Collectors.toList()));
    }
}).subscribe
1 | Single | zip | METHOD_INVOCATION | return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
});
1 | Single | METHOD_INVOCATION | Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
})
1 | Single | just | METHOD_INVOCATION | return Single.just(credentials.stream().map(this::convert).collect(Collectors.toList()));
1 | Single | METHOD_INVOCATION | Single.just(credentials.stream().map(this::convert).collect(Collectors.toList()))
1 | Completable | subscribe | METHOD_INVOCATION | credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).toList().flatMapCompletable((credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return credentialService.update(credential).ignoreElement();
        });
    }
}).subscribe(promise::complete, (error)->promise.fail(error.getMessage()));
1 | Single | flatMapCompletable | METHOD_INVOCATION | credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).toList().flatMapCompletable((credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return credentialService.update(credential).ignoreElement();
        });
    }
}).subscribe
1 | Flowable | toList | METHOD_INVOCATION | credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID()).toList().flatMapCompletable
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
    credential.setCounter(authenticator.getCounter());
    credential.setUpdatedAt(new Date());
    return credentialService.update(credential).ignoreElement();
});
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(credentials).flatMapCompletable
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(credentials)
1 | Single | ignoreElement | METHOD_INVOCATION | return credentialService.update(credential).ignoreElement();
1 | Completable | OTHER
1 | Single | ignoreElement | METHOD_INVOCATION | return credentialService.create(credential).ignoreElement();
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
})
1 | Maybe | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | resourceService.findByDomain(this.domain.getId()).subscribeOn(Schedulers.io()).subscribe((res)->{
    ResourceProvider provider = resourcePluginManager.create(res.getType(), res.getConfiguration());
    provider.start();
    resourceProviders.put(res.getId(), provider);
    logger.info("Resource {} loaded for domain {}", res.getName(), domain.getName());
}, (error)->logger.error("Unable to initialize resources for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | resourceService.findByDomain(this.domain.getId()).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | resourceService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map((res)->resourcePluginManager.create(res.getType(), res.getConfiguration())).subscribe((provider)->{
    provider.start();
    this.resourceProviders.put(resourceId, provider);
}, (error)->logger.error("Initialization of Resource provider \'{}\' failed", error));
1 | Maybe | map | METHOD_INVOCATION | resourceService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map((res)->resourcePluginManager.create(res.getType(), res.getConfiguration())).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | resourceService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map
1 | Maybe | error | METHOD_INVOCATION | resourceService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("Resource " + resourceId + " not found")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | botDetectionService.findByDomain(domain.getId()).subscribe((detection)->{
    updateBotDetection(detection);
    LOGGER.info("Bot detection {} loaded for domain {}", detection.getName(), domain.getName());
}, (error)->LOGGER.error("Unable to initialize bot detections for domain {}", domain.getName(), error));
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Maybe | subscribe | METHOD_INVOCATION | botDetectionService.findById(pluginId).subscribe(this::updateBotDetection, (error)->LOGGER.error("Unable to load bot detection for domain {}", domain.getName(), error), ()->LOGGER.error("No bot detection found with id {}", pluginId));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(routingContext.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe();
1 | Completable | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext(routingContext.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | tokenService.deleteByUserId(user.getId()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider()).doOnSuccess((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
}).subscribe((stateJwt)->handler.handle(Future.succeededFuture(true)), (ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Single | doOnSuccess | METHOD_INVOCATION | jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider()).doOnSuccess((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
}).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}, ()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Observable | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return Maybe.fromCallable(()->jwtParser.parse(token)).flatMap((jwt)->{
    return userService.findById(jwt.getSub()).zipWith(clientSource(jwt.getAud()), (user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    });
});
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->jwtParser.parse(token)).flatMap
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->jwtParser.parse(token))
1 | Maybe | zipWith | METHOD_INVOCATION | return userService.findById(jwt.getSub()).zipWith(clientSource(jwt.getAud()), (user,optionalClient)->{
    return new UserToken(user, optionalClient.orElse(null), jwt);
});
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(user).andThen(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap(userService::enhance).map((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration())).doOnSuccess((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_REGISTERED).throwable(throwable))));
1 | Single | doOnError | METHOD_INVOCATION | userValidator.validate(user).andThen(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap(userService::enhance).map((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration())).doOnSuccess((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_REGISTERED).throwable(throwable))))
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap(userService::enhance).map((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration())).doOnSuccess((registrationResponse)->{
    final User user1 = registrationResponse.getUser();
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.USER_REGISTERED));
}).doOnError
1 | Single | map | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap(userService::enhance).map((user1)->new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null && accountSettings.isAutoLoginAfterRegistration())).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap(userService::enhance).map
1 | Single | flatMap | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->userProvider.create(convert(user))).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle
1 | Single | flatMapMaybe | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty
1 | Maybe | isEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserAlreadyExistsException(user.getUsername()))
1 | Maybe | error | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source).isEmpty().flatMapMaybe((isEmpty)->{
    if (!isEmpty) {
        return Maybe.error(new UserAlreadyExistsException(user.getUsername()));
    }
    return identityProviderManager.getUserProvider(source);
}).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(source))
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).flatMap(userService::enhance).map((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
}).doOnSuccess((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).flatMap(userService::enhance).map((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
}).doOnSuccess((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.REGISTRATION_CONFIRMATION))).doOnError
1 | Single | map | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).flatMap(userService::enhance).map((user1)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    return new RegistrationResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterRegistration() : null, accountSettings != null ? accountSettings.isAutoLoginAfterRegistration() : false);
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).flatMap(userService::enhance).map
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userProvider.create(convert(user));
    }
    return Single.error(ex);
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user.getUsername()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new AccountInactiveException("User needs to complete the activation process"));
1 | Single | METHOD_INVOCATION | Single.error(new AccountInactiveException("User needs to complete the activation process"))
1 | Single | doOnError | METHOD_INVOCATION | return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
    }
    return Single.just(user1);
}).flatMap(userService::enhance).map((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false)).doOnSuccess((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
    }
    return Single.just(user1);
}).flatMap(userService::enhance).map((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false)).doOnSuccess((response)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(user.getClient()).principal(principal).type(EventType.USER_PASSWORD_RESET))).doOnError
1 | Single | map | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
    }
    return Single.just(user1);
}).flatMap(userService::enhance).map((user1)->new ResetPasswordResponse(user1, accountSettings != null ? accountSettings.getRedirectUriAfterResetPassword() : null, accountSettings != null ? accountSettings.isAutoLoginAfterResetPassword() : false)).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
    }
    return Single.just(user1);
}).flatMap(userService::enhance).map
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
    }
    return Single.just(user1);
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(Single.just(user1));
}).flatMap
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userProvider.create(convert(user));
    }
    return Single.error(ex);
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user.getUsername()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Completable | andThen | METHOD_INVOCATION | return loginAttemptService.reset(criteria).andThen(Single.just(user1));
1 | Single | just | METHOD_INVOCATION | loginAttemptService.reset(criteria).andThen(Single.just(user1))
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Completable | andThen | METHOD_INVOCATION | return credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1));
1 | Single | just | METHOD_INVOCATION | credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId()).andThen(Single.just(user1))
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Single | just | METHOD_INVOCATION | return Single.just(user1);
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new EmailFormatInvalidException(email));
1 | Completable | METHOD_INVOCATION | Completable.error(new EmailFormatInvalidException(email))
1 | Single | ignoreElement | METHOD_INVOCATION | return userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria()).flatMap((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
            }
            return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return Single.just(user);
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        });
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return Single.error(new UserNotFoundException(email));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return Single.error(new UserNotFoundException(email));
    }
    return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
        }).defaultIfEmpty(Optional.empty());
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
        if (!optional.isPresent()) {
            return Single.error(new UserNotFoundException());
        }
        final UserAuthentication idpUser = optional.get();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
}).doOnSuccess((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start()).doOnSuccess((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal).type(EventType.FORGOT_PASSWORD_REQUESTED).throwable(throwable))).ignoreElement();
1 | Single | doOnError | METHOD_INVOCATION | userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria()).flatMap((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
            }
            return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return Single.just(user);
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        });
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return Single.error(new UserNotFoundException(email));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return Single.error(new UserNotFoundException(email));
    }
    return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
        }).defaultIfEmpty(Optional.empty());
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
        if (!optional.isPresent()) {
            return Single.error(new UserNotFoundException());
        }
        final UserAuthentication idpUser = optional.get();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
}).doOnSuccess((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start()).doOnSuccess((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
}).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal).type(EventType.FORGOT_PASSWORD_REQUESTED).throwable(throwable))).ignoreElement
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria()).flatMap((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
            }
            return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return Single.just(user);
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        });
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return Single.error(new UserNotFoundException(email));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return Single.error(new UserNotFoundException(email));
    }
    return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
        }).defaultIfEmpty(Optional.empty());
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
        if (!optional.isPresent()) {
            return Single.error(new UserNotFoundException());
        }
        final UserAuthentication idpUser = optional.get();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
}).doOnSuccess((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start()).doOnSuccess((user1)->{
    io.gravitee.am.identityprovider.api.User principal1 = reloadPrincipal(principal, user1);
    auditService.report(AuditBuilder.builder(UserAuditBuilder.class).domain(domain.getId()).client(client).principal(principal1).type(EventType.FORGOT_PASSWORD_REQUESTED));
}).doOnError
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria()).flatMap((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
            }
            return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return Single.just(user);
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        });
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return Single.error(new UserNotFoundException(email));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return Single.error(new UserNotFoundException(email));
    }
    return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
        }).defaultIfEmpty(Optional.empty());
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
        if (!optional.isPresent()) {
            return Single.error(new UserNotFoundException());
        }
        final UserAuthentication idpUser = optional.get();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
}).doOnSuccess((user)->new Thread(()->emailService.send(Template.RESET_PASSWORD, user, client)).start()).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | userService.findByDomainAndCriteria(domain.getId(), params.buildCriteria()).flatMap((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
            }
            return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return Single.just(user);
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        });
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return Single.error(new UserNotFoundException(email));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return Single.error(new UserNotFoundException(email));
    }
    return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
        }).defaultIfEmpty(Optional.empty());
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
        if (!optional.isPresent()) {
            return Single.error(new UserNotFoundException());
        }
        final UserAuthentication idpUser = optional.get();
        return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
    }
    return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return Single.just(user);
        }
        return userService.update(enhanceUser(user, optUser.get()));
    });
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap
1 | Single | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning")))
1 | Single | METHOD_INVOCATION | Single.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"));
1 | Single | METHOD_INVOCATION | Single.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process"))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optUser)->{
    if (!optUser.isPresent()) {
        return Single.just(user);
    }
    return userService.update(enhanceUser(user, optUser.get()));
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).map(Optional::ofNullable).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserNotFoundException(email));
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(email))
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserNotFoundException(email));
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(email))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
    if (!optional.isPresent()) {
        return Single.error(new UserNotFoundException());
    }
    final UserAuthentication idpUser = optional.get();
    return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())));
1 | Single | flatMap | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
    if (!optional.isPresent()) {
        return Single.error(new UserNotFoundException());
    }
    final UserAuthentication idpUser = optional.get();
    return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).onErrorResumeNext
1 | Observable | lastOrError | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities())
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
    return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
}).defaultIfEmpty(Optional.empty());
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
    return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
}).defaultIfEmpty
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorReturnItem | METHOD_INVOCATION | return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem
1 | Maybe | map | METHOD_INVOCATION | findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserNotFoundException());
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException())
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
    if (!optEndUser.isPresent()) {
        return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
    }
    return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map
1 | Maybe | defer | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))
1 | Single | error | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return identityProviderManager.getUserProvider(authProvider).flatMap((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return findQuery.map((user)->Optional.of(new UserAuthentication(user, authProvider))).defaultIfEmpty(Optional.empty()).onErrorReturnItem(Optional.empty());
    }).defaultIfEmpty(Optional.empty());
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError().flatMap((optional)->{
    if (!optional.isPresent()) {
        return Single.error(new UserNotFoundException());
    }
    final UserAuthentication idpUser = optional.get();
    return userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource()))).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).onErrorResumeNext(Single.error(new UserNotFoundException(email != null ? email : params.getUsername())))
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(email != null ? email : params.getUsername()))
1 | Single | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(Optional.empty());
1 | Maybe | METHOD_INVOCATION | Maybe.just(Optional.empty())
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | return clientSyncService.findById(audience).map(Optional::of).defaultIfEmpty(Optional.empty());
1 | Maybe | map | METHOD_INVOCATION | clientSyncService.findById(audience).map(Optional::of).defaultIfEmpty
1 | Flowable | subscribe | METHOD_INVOCATION | formRepository.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe(this::updateForm, (error)->logger.error("Unable to initialize forms for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | formRepository.findById(formId).subscribe((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d for domain {}", formId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} form for domain {}", eventType, domain.getName(), error), ()->logger.error("No form found with id {}", formId));
1 | Single | subscribe | METHOD_INVOCATION | userService.resetPassword(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe();
1 | Completable | doOnError | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).doOnError((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage())).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | jwtService.decode(idToken).flatMapMaybe((jwt)->clientSyncService.findByClientId(jwt.getAud())).flatMap((client)->jwtService.decodeAndVerify(idToken, client).toMaybe().map((__)->client).onErrorResumeNext((ex)->(ex instanceof ExpiredJWTException) ? Maybe.just(client) : Maybe.error(ex))).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.succeededFuture()), ()->handler.handle(Future.succeededFuture()));
1 | Maybe | flatMap | METHOD_INVOCATION | jwtService.decode(idToken).flatMapMaybe((jwt)->clientSyncService.findByClientId(jwt.getAud())).flatMap((client)->jwtService.decodeAndVerify(idToken, client).toMaybe().map((__)->client).onErrorResumeNext((ex)->(ex instanceof ExpiredJWTException) ? Maybe.just(client) : Maybe.error(ex))).subscribe
1 | Single | flatMapMaybe | METHOD_INVOCATION | jwtService.decode(idToken).flatMapMaybe((jwt)->clientSyncService.findByClientId(jwt.getAud())).flatMap
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | (client)->jwtService.decodeAndVerify(idToken, client).toMaybe().map((__)->client).onErrorResumeNext((ex)->(ex instanceof ExpiredJWTException) ? Maybe.just(client) : Maybe.error(ex))
1 | Maybe | map | METHOD_INVOCATION | jwtService.decodeAndVerify(idToken, client).toMaybe().map((__)->client).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | jwtService.decodeAndVerify(idToken, client).toMaybe().map
1 | Maybe | just | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? Maybe.just(client) : Maybe.error(ex)
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | error | METHOD_INVOCATION | (ex instanceof ExpiredJWTException) ? Maybe.just(client) : Maybe.error(ex)
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findById(endUser.getClient()).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(endUser.getClient()))).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.succeededFuture()), ()->handler.handle(Future.succeededFuture()));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | clientSyncService.findById(endUser.getClient()).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(endUser.getClient()))).subscribe
1 | Maybe | defer | METHOD_INVOCATION | clientSyncService.findById(endUser.getClient()).switchIfEmpty(Maybe.defer(()->clientSyncService.findByClientId(endUser.getClient())))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->clientSyncService.findByClientId(endUser.getClient()))
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | subscribe | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMap((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return Maybe.just(Optional.<String>empty());
    }
}).doOnSuccess((endpoint)->handler.handle(Future.succeededFuture(endpoint))).doOnError((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
}).subscribe();
1 | Maybe | doOnError | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMap((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return Maybe.just(Optional.<String>empty());
    }
}).doOnSuccess((endpoint)->handler.handle(Future.succeededFuture(endpoint))).doOnError((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
}).subscribe
1 | Maybe | doOnSuccess | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMap((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return Maybe.just(Optional.<String>empty());
    }
}).doOnSuccess((endpoint)->handler.handle(Future.succeededFuture(endpoint))).doOnError
1 | Maybe | flatMap | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMap((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return Maybe.just(Optional.<String>empty());
    }
}).doOnSuccess
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMap
1 | Maybe | map | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map
1 | Maybe | filter | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap
1 | Maybe | just | METHOD_INVOCATION | authenticationProviderMaybe.filter((provider)->provider instanceof SocialAuthenticationProvider).flatMap((provider)->((SocialAuthenticationProvider)provider).signOutUrl(authentication)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(Optional.empty())
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(Optional.<String>empty());
1 | Maybe | METHOD_INVOCATION | Maybe.just(Optional.<String>empty())
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider()).map((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(routingContext.request(), routingContext.get(CONTEXT_PATH) + "/logout/callback");
    UriBuilder builder = UriBuilder.fromHttpUrl(endpoint.getUri());
    builder.addParameter(Parameters.POST_LOGOUT_REDIRECT_URI, redirectUri);
    builder.addParameter(Parameters.ID_TOKEN_HINT, (String)endUser.getAdditionalInformation().get(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY));
    builder.addParameter(io.gravitee.am.common.oauth2.Parameters.STATE, state);
    return Optional.of(builder.buildString());
}).toMaybe();
1 | Single | map | METHOD_INVOCATION | jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider()).map((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(routingContext.request(), routingContext.get(CONTEXT_PATH) + "/logout/callback");
    UriBuilder builder = UriBuilder.fromHttpUrl(endpoint.getUri());
    builder.addParameter(Parameters.POST_LOGOUT_REDIRECT_URI, redirectUri);
    builder.addParameter(Parameters.ID_TOKEN_HINT, (String)endUser.getAdditionalInformation().get(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY));
    builder.addParameter(io.gravitee.am.common.oauth2.Parameters.STATE, state);
    return Optional.of(builder.buildString());
}).toMaybe
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.resetPassword(eq(client), eq(user), any())).thenReturn(Single.just(new ResetPasswordResponse()))
1 | Single | METHOD_INVOCATION | Single.just(new ResetPasswordResponse())
1 | Single | just | METHOD_INVOCATION | when(userService.resetPassword(eq(client), eq(user), any())).thenReturn(Single.just(resetPasswordResponse))
1 | Single | METHOD_INVOCATION | Single.just(resetPasswordResponse)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decode("idToken")).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify("idToken", client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(CertificateProvider.class))).thenReturn(Single.just("jwtstatevalue"))
1 | Single | METHOD_INVOCATION | Single.just("jwtstatevalue")
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(authProvider.signOutUrl(any())).thenReturn(Maybe.just(req))
1 | Maybe | METHOD_INVOCATION | Maybe.just(req)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get(any())).thenReturn(Maybe.just(authProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authProvider)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(CertificateProvider.class))).thenReturn(Single.just("jwtstatevalue"))
1 | Single | METHOD_INVOCATION | Single.just("jwtstatevalue")
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findById("client-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(authProvider.signOutUrl(any())).thenReturn(Maybe.just(req))
1 | Maybe | METHOD_INVOCATION | Maybe.just(req)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get(any())).thenReturn(Maybe.just(authProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authProvider)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(anyString())).thenReturn(Maybe.just(new Client()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Client())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.singletonList(user)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(user))
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.singletonList(user)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(user))
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.singletonList(user)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(user))
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.singletonList(user)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(user))
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.singletonList(user)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(user))
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | empty | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Arrays.asList(user, user)))
1 | Single | METHOD_INVOCATION | Single.just(Arrays.asList(user, user))
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername("username")).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(new ForgotPasswordParameters(user.getEmail(), false, false), client, mock(io.gravitee.am.identityprovider.api.User.class)).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Arrays.asList(user, user)))
1 | Single | METHOD_INVOCATION | Single.just(Arrays.asList(user, user))
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(new ForgotPasswordParameters(user.getEmail(), true, true), client, mock(io.gravitee.am.identityprovider.api.User.class)).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndExternalIdAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userProvider.findByEmail(user.getEmail())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndCriteria(eq(domain.getId()), any(FilterCriteria.class))).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider("idp-1")).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(credentialService.deleteByUserId(any(), any(), any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Flowable | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query2.getUserName())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(credentialService.findByUsername(ReferenceType.DOMAIN, domain.getId(), query.getUserName())).thenReturn(Flowable.just(credential))
1 | Flowable | METHOD_INVOCATION | Flowable.just(credential)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userAuthenticationManager.connect(any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Maybe | just | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(Maybe.error(BadCredentialsException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(BadCredentialsException::new)
1 | Maybe | empty | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(EndUserAuthentication.class))).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(appClient.getClientId())).thenReturn(Maybe.just(appClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(appClient)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId("test")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.confirmRegistration(eq(client), eq(user), any())).thenReturn(Single.just(new RegistrationResponse()))
1 | Single | METHOD_INVOCATION | Single.just(new RegistrationResponse())
1 | Single | just | METHOD_INVOCATION | when(userService.confirmRegistration(eq(client), eq(user), any())).thenReturn(Single.just(registrationResponse))
1 | Single | METHOD_INVOCATION | Single.just(registrationResponse)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(Single.just(new RegistrationResponse()))
1 | Single | METHOD_INVOCATION | Single.just(new RegistrationResponse())
1 | Single | just | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(Single.just(registrationResponse))
1 | Single | METHOD_INVOCATION | Single.just(registrationResponse)
1 | Single | error | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(Single.error(new UserAlreadyExistsException("test")))
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException("test"))
1 | Single | error | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(Single.error(new InvalidUserException("Username invalid")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidUserException("Username invalid"))
1 | Single | error | METHOD_INVOCATION | when(userService.register(eq(client), any(), any())).thenReturn(Single.error(new EmailFormatInvalidException("test")))
1 | Single | METHOD_INVOCATION | Single.error(new EmailFormatInvalidException("test"))
1 | Completable | IMPORT
1 | Completable | complete | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Completable.error(new UserNotFoundException("email@test.com")))
1 | Completable | METHOD_INVOCATION | Completable.error(new UserNotFoundException("email@test.com"))
1 | Completable | error | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email.test.com")), eq(client), any(User.class))).thenReturn(Completable.error(new EmailFormatInvalidException("email.test.com")))
1 | Completable | METHOD_INVOCATION | Completable.error(new EmailFormatInvalidException("email.test.com"))
1 | Completable | error | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Completable.error(new EnforceUserIdentityException()))
1 | Completable | METHOD_INVOCATION | Completable.error(new EnforceUserIdentityException())
1 | Completable | error | METHOD_INVOCATION | when(userService.forgotPassword(argThat((p)->p.getEmail().equals("email@test.com")), eq(client), any(User.class))).thenReturn(Completable.error(new EnforceUserIdentityException()))
1 | Completable | METHOD_INVOCATION | Completable.error(new EnforceUserIdentityException())
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new Enrollment(this.configuration.countries()));
1 | Single | METHOD_INVOCATION | Single.just(new Enrollment(this.configuration.countries()))
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication  with type SMS"))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        final String otpCode = generateOTP(enrolledFactor);
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        if (Instant.now().isAfter(Instant.ofEpochMilli(enrolledFactor.getSecurity().getData(FactorDataKeys.KEY_EXPIRE_AT, Long.class)))) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    try {
        final String otpCode = generateOTP(enrolledFactor);
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        if (Instant.now().isAfter(Instant.ofEpochMilli(enrolledFactor.getSecurity().getData(FactorDataKeys.KEY_EXPIRE_AT, Long.class)))) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
})
1 | Single | RETURN_TYPE
1 | Single | fromCallable | METHOD_INVOCATION | return Single.fromCallable(()->new Enrollment(SharedSecret.generate()));
1 | Single | METHOD_INVOCATION | Single.fromCallable(()->new Enrollment(SharedSecret.generate()))
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication with type EMAIL"));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalException("Resource referenced can\'t be used for MultiFactor Authentication with type EMAIL"))
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return provider.sendMessage(emailWrapper.getEmail()).andThen(Single.just(enrolledFactor).flatMap((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).ignoreElement());
1 | Single | ignoreElement | METHOD_INVOCATION | provider.sendMessage(emailWrapper.getEmail()).andThen(Single.just(enrolledFactor).flatMap((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).ignoreElement())
1 | Single | flatMap | METHOD_INVOCATION | Single.just(enrolledFactor).flatMap((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).ignoreElement
1 | Single | just | METHOD_INVOCATION | Single.just(enrolledFactor).flatMap
1 | Single | METHOD_INVOCATION | Single.just(enrolledFactor)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalException("Code can\'t be sent"));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalException("Code can\'t be sent"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalException("Email can\'t be sent"));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalException("Email can\'t be sent"))
1 | Single | RETURN_TYPE
1 | Single | fromCallable | METHOD_INVOCATION | return Single.fromCallable(()->{
    int counter = factor.getSecurity().getData(FactorDataKeys.KEY_MOVING_FACTOR, Integer.class);
    factor.getSecurity().putData(FactorDataKeys.KEY_MOVING_FACTOR, counter + 1);
    factor.getSecurity().removeData(FactorDataKeys.KEY_EXPIRE_AT);
    return factor;
});
1 | Single | METHOD_INVOCATION | Single.fromCallable(()->{
    int counter = factor.getSecurity().getData(FactorDataKeys.KEY_MOVING_FACTOR, Integer.class);
    factor.getSecurity().putData(FactorDataKeys.KEY_MOVING_FACTOR, counter + 1);
    factor.getSecurity().removeData(FactorDataKeys.KEY_EXPIRE_AT);
    return factor;
})
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.addFactor(any(), any(), any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(smtpProvider.sendMessage(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.sendChallenge(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | map | METHOD_INVOCATION | return reporter.map((result)->{
    if (Objects.isNull(result) || Objects.isNull(result.getData())) {
        return new Page<>(new ArrayList<>(), 0, 0);
    }
    return result;
});
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(user).andThen(identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return Single.error(new InvalidRequestException("User does not exist in upstream IDP"));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
}).flatMap((idpUser)->{
    return userRepository.update(user);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return userRepository.update(user);
    }
    return Single.error(ex);
}));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(user).andThen(identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return Single.error(new InvalidRequestException("User does not exist in upstream IDP"));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
}).flatMap((idpUser)->{
    return userRepository.update(user);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return userRepository.update(user);
    }
    return Single.error(ex);
}))
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return Single.error(new InvalidRequestException("User does not exist in upstream IDP"));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
}).flatMap((idpUser)->{
    return userRepository.update(user);
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return Single.error(new InvalidRequestException("User does not exist in upstream IDP"));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("User does not exist in upstream IDP"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("User does not exist in upstream IDP"))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Flowable | toList | METHOD_INVOCATION | return factorService.findByDomain(domain).toList();
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | toList | METHOD_INVOCATION | return credentialService.findByUserId(ReferenceType.DOMAIN, user.getReferenceId(), user.getId()).map((credential)->{
    removeSensitiveData(credential);
    return credential;
}).toList();
1 | Flowable | map | METHOD_INVOCATION | credentialService.findByUserId(ReferenceType.DOMAIN, user.getReferenceId(), user.getId()).map((credential)->{
    removeSensitiveData(credential);
    return credential;
}).toList
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return credentialService.findById(id).switchIfEmpty(Single.error(new CredentialNotFoundException(id))).map((credential)->{
    removeSensitiveData(credential);
    return credential;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | credentialService.findById(id).switchIfEmpty(Single.error(new CredentialNotFoundException(id))).map
1 | Single | error | METHOD_INVOCATION | credentialService.findById(id).switchIfEmpty(Single.error(new CredentialNotFoundException(id)))
1 | Single | METHOD_INVOCATION | Single.error(new CredentialNotFoundException(id))
1 | Maybe | subscribe | METHOD_INVOCATION | accountService.get(token.getSub()).subscribe((user)->{
    routingContext.put(ConstantKeys.USER_CONTEXT_KEY, user);
    routingContext.next();
}, (error)->{
    LOGGER.error("Unable to retrieve user for Id {}", token.getSub());
    routingContext.fail(error);
}, ()->routingContext.fail(new UserNotFoundException(token.getSub())));
1 | Single | subscribe | METHOD_INVOCATION | accountService.getActivity(user, criteria, page, size).subscribe((activities)->AccountResponseHandler.handleDefaultResponse(routingContext, activities), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.update(user).doOnSuccess((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext)).doOnError((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage())).subscribe();
1 | Single | doOnError | METHOD_INVOCATION | accountService.update(user).doOnSuccess((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext)).doOnError((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage())).subscribe
1 | Single | doOnSuccess | METHOD_INVOCATION | accountService.update(user).doOnSuccess((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext)).doOnError
1 | Single | subscribe | METHOD_INVOCATION | accountService.getFactors(user.getReferenceId()).subscribe((factors)->AccountResponseHandler.handleDefaultResponse(routingContext, factors), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | factorProvider.generateQrCode(user, enrolledFactor).subscribe((barCode)->AccountResponseHandler.handleDefaultResponse(routingContext, new JsonObject().put("qrCode", barCode)), routingContext::fail, ()->routingContext.fail(404));
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Completable | subscribe | METHOD_INVOCATION | accountService.removeFactor(user.getId(), factorId, new DefaultUser(user)).subscribe(()->AccountResponseHandler.handleNoBodyResponse(routingContext), routingContext::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | accountService.getFactor(factorId).subscribe((factor)->handler.handle(Future.succeededFuture(factor)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new FactorNotFoundException(factorId))));
1 | Single | subscribe | METHOD_INVOCATION | factorProvider.enroll(endUser.getUsername()).map((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
}).subscribe((enrolledFactor)->handler.handle(Future.succeededFuture(enrolledFactor)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | map | METHOD_INVOCATION | factorProvider.enroll(endUser.getUsername()).map((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
}).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.verify(new FactorContext(applicationContext, factorData)).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe
1 | Single | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredentials(user).subscribe((enrolledCredentials)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledCredentials), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredential(credentialId).subscribe((credential)->AccountResponseHandler.handleDefaultResponse(routingContext, credential), routingContext::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidScopeException("Invalid scope(s): " + invalidScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidScopeException("Invalid scope(s): " + invalidScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidScopeException("Invalid scope(s): " + requestScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidScopeException("Invalid scope(s): " + requestScopes.stream().collect(Collectors.joining(SCOPE_DELIMITER))))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token"))).flatMapSingle((user)->enhance(user, accessToken)).map((user)->processClaims(user, accessToken)).flatMap((claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return Single.just(Json.encodePrettily(claims));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return jwtService.encodeUserinfo(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo(userinfo, client));
    }
}).subscribe((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(buffer), context::fail);
1 | Single | flatMap | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token"))).flatMapSingle((user)->enhance(user, accessToken)).map((user)->processClaims(user, accessToken)).flatMap((claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return Single.just(Json.encodePrettily(claims));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return jwtService.encodeUserinfo(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo(userinfo, client));
    }
}).subscribe
1 | Single | map | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token"))).flatMapSingle((user)->enhance(user, accessToken)).map((user)->processClaims(user, accessToken)).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token"))).flatMapSingle((user)->enhance(user, accessToken)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token"))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userService.findById(subject).switchIfEmpty(Maybe.error(new InvalidTokenException("No user found for this token")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidTokenException("No user found for this token"))
1 | Single | just | METHOD_INVOCATION | return Single.just(Json.encodePrettily(claims));
1 | Single | METHOD_INVOCATION | Single.just(Json.encodePrettily(claims))
1 | Single | flatMap | METHOD_INVOCATION | return jwtService.encodeUserinfo(jwt, client).flatMap((userinfo)->jweService.encryptUserinfo(userinfo, client));
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | map | METHOD_INVOCATION | return userService.enhance(user).map((user1)->{
    Map<String, Object> userClaims = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    if (user.getRolesPermissions() != null && !user.getRolesPermissions().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.ROLES, user.getRolesPermissions().stream().map(Role::getName).collect(Collectors.toList()));
    }
    if (user.getGroups() != null && !user.getGroups().isEmpty()) {
        userClaims.putIfAbsent(CustomClaims.GROUPS, user.getGroups());
    }
    user1.setAdditionalInformation(userClaims);
    return user1;
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | flatMapMaybe | METHOD_INVOCATION | return jwtService.decodeAndVerify(token, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return Single.error(new InvalidTokenException(ex.getMessage(), ex));
    }
    return Single.error(ex);
}).flatMapMaybe((jwt)->accessTokenRepository.findByToken(jwt.getJti()).map((accessToken)->convertAccessToken(jwt)));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | jwtService.decodeAndVerify(token, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return Single.error(new InvalidTokenException(ex.getMessage(), ex));
    }
    return Single.error(ex);
}).flatMapMaybe
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidTokenException(ex.getMessage(), ex));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidTokenException(ex.getMessage(), ex))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Maybe | map | METHOD_INVOCATION | (jwt)->accessTokenRepository.findByToken(jwt.getJti()).map((accessToken)->convertAccessToken(jwt))
1 | Maybe | RETURN_TYPE
1 | Single | flatMapMaybe | METHOD_INVOCATION | return jwtService.decodeAndVerify(refreshToken, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return Single.error(new InvalidTokenException(ex.getMessage(), ex));
    }
    return Single.error(ex);
}).flatMapMaybe((jwt)->refreshTokenRepository.findByToken(jwt.getJti()).map((refreshToken1)->convertRefreshToken(jwt)));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | jwtService.decodeAndVerify(refreshToken, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return Single.error(new InvalidTokenException(ex.getMessage(), ex));
    }
    return Single.error(ex);
}).flatMapMaybe
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidTokenException(ex.getMessage(), ex));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidTokenException(ex.getMessage(), ex))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Maybe | map | METHOD_INVOCATION | (jwt)->refreshTokenRepository.findByToken(jwt.getJti()).map((refreshToken1)->convertRefreshToken(jwt))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return introspectionTokenService.introspect(token, false).map(this::convertAccessToken);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromCallable(()->createExecutionContext(oAuth2Request, client, endUser)).flatMap((executionContext)->{
    JWT accessToken = createAccessTokenJWT(oAuth2Request, client, endUser, executionContext);
    JWT refreshToken = oAuth2Request.isSupportRefreshToken() ? createRefreshTokenJWT(oAuth2Request, client, endUser, accessToken) : null;
    return Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)).flatMap((accessToken1)->tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess((token)->storeTokens(accessToken, refreshToken, oAuth2Request));
});
1 | Single | fromCallable | METHOD_INVOCATION | Single.fromCallable(()->createExecutionContext(oAuth2Request, client, endUser)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromCallable(()->createExecutionContext(oAuth2Request, client, endUser))
1 | Single | doOnSuccess | METHOD_INVOCATION | return Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)).flatMap((accessToken1)->tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess((token)->storeTokens(accessToken, refreshToken, oAuth2Request));
1 | Single | flatMap | METHOD_INVOCATION | Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)).flatMap((accessToken1)->tokenEnhancer.enhance(accessToken1, oAuth2Request, client, endUser, executionContext)).doOnSuccess
1 | Single | zip | METHOD_INVOCATION | Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)).flatMap
1 | Single | METHOD_INVOCATION | Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request))
1 | Single | map | METHOD_INVOCATION | refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())
1 | Single | just | METHOD_INVOCATION | refreshToken != null ? jwtService.encode(refreshToken, client).map(Optional::of) : Single.just(Optional.<String>empty())
1 | Single | METHOD_INVOCATION | Single.just(Optional.<String>empty())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return getRefreshToken(refreshToken, client).switchIfEmpty(Single.error(new InvalidGrantException("Refresh token is invalid"))).flatMap((refreshToken1)->{
    if (refreshToken1.getExpireAt().before(new Date())) {
        throw new InvalidGrantException("Refresh token is expired");
    }
    if (!refreshToken1.getClientId().equals(tokenRequest.getClientId())) {
        throw new InvalidGrantException("Refresh token was issued to another client");
    }
    if (refreshToken1.getAdditionalInformation().get("permissions") != null) {
        tokenRequest.setPermissions((List<PermissionRequest>)refreshToken1.getAdditionalInformation().get("permissions"));
    }
    return refreshTokenRepository.delete(refreshToken1.getValue()).andThen(Single.just(refreshToken1));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | getRefreshToken(refreshToken, client).switchIfEmpty(Single.error(new InvalidGrantException("Refresh token is invalid"))).flatMap
1 | Single | error | METHOD_INVOCATION | getRefreshToken(refreshToken, client).switchIfEmpty(Single.error(new InvalidGrantException("Refresh token is invalid")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException("Refresh token is invalid"))
1 | Completable | andThen | METHOD_INVOCATION | return refreshTokenRepository.delete(refreshToken1.getValue()).andThen(Single.just(refreshToken1));
1 | Single | just | METHOD_INVOCATION | refreshTokenRepository.delete(refreshToken1.getValue()).andThen(Single.just(refreshToken1))
1 | Single | METHOD_INVOCATION | Single.just(refreshToken1)
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Flowable.fromIterable(certificateManager.providers()).flatMap((certificateProvider)->certificateProvider.getProvider().keys()).toList().map((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
});
1 | Flowable | toList | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap((certificateProvider)->certificateProvider.getProvider().keys()).toList().map
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap((certificateProvider)->certificateProvider.getProvider().keys()).toList
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers())
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client.getJwks());
1 | Maybe | METHOD_INVOCATION | Maybe.just(client.getJwks())
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return Flowable.fromIterable(certificateManager.providers()).flatMap((provider)->provider.getProvider().privateKey()).toList().map((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
}).toMaybe();
1 | Single | map | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap((provider)->provider.getProvider().privateKey()).toList().map((keys)->{
    JWKSet jwkSet = new JWKSet();
    jwkSet.setKeys(keys);
    return jwkSet;
}).toMaybe
1 | Flowable | toList | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap((provider)->provider.getProvider().privateKey()).toList().map
1 | Flowable | flatMap | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap((provider)->provider.getProvider().privateKey()).toList
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers()).flatMap
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(certificateManager.providers())
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).map(new JWKSetDeserializer()::convert).flatMapMaybe((jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return Maybe.just(jwkSet.get());
    }
    return Maybe.empty();
}).onErrorResumeNext(Maybe.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri)));
1 | Single | flatMapMaybe | METHOD_INVOCATION | client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).map(new JWKSetDeserializer()::convert).flatMapMaybe((jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return Maybe.just(jwkSet.get());
    }
    return Maybe.empty();
}).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).map(new JWKSetDeserializer()::convert).flatMapMaybe
1 | Single | map | METHOD_INVOCATION | client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).map
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(jwkSet.get());
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwkSet.get())
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).map(new JWKSetDeserializer()::convert).flatMapMaybe((jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return Maybe.just(jwkSet.get());
    }
    return Maybe.empty();
}).onErrorResumeNext(Maybe.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientMetadataException(jwksUri + " is not valid."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientMetadataException(jwksUri + " is not valid."))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(ex);
1 | Maybe | METHOD_INVOCATION | Maybe.error(ex)
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(jwk.get());
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwk.get())
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(jwk.get());
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwk.get())
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return authorizationCodeRepository.findByCode(code).switchIfEmpty(handleInvalidCode(code)).flatMap((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return Maybe.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + "."));
    }
    return Maybe.just(authorizationCode);
}).flatMap((authorizationCode)->authorizationCodeRepository.delete(authorizationCode.getId()));
1 | Maybe | flatMap | METHOD_INVOCATION | authorizationCodeRepository.findByCode(code).switchIfEmpty(handleInvalidCode(code)).flatMap((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return Maybe.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + "."));
    }
    return Maybe.just(authorizationCode);
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authorizationCodeRepository.findByCode(code).switchIfEmpty(handleInvalidCode(code)).flatMap
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + "."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + "."))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(authorizationCode);
1 | Maybe | METHOD_INVOCATION | Maybe.just(authorizationCode)
1 | Maybe | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        deleteAccessTokenAction.andThen(refreshTokenRepository.delete(accessToken.getRefreshToken()));
    }
    return deleteAccessTokenAction;
}).andThen(Maybe.error(new InvalidGrantException("The authorization code " + code + " is invalid.")));
1 | Observable | flatMapCompletable | METHOD_INVOCATION | accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        deleteAccessTokenAction.andThen(refreshTokenRepository.delete(accessToken.getRefreshToken()));
    }
    return deleteAccessTokenAction;
}).andThen
1 | Completable | OTHER
1 | Completable | andThen | METHOD_INVOCATION | deleteAccessTokenAction.andThen(refreshTokenRepository.delete(accessToken.getRefreshToken()));
1 | Maybe | error | METHOD_INVOCATION | accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        deleteAccessTokenAction.andThen(refreshTokenRepository.delete(accessToken.getRefreshToken()));
    }
    return deleteAccessTokenAction;
}).andThen(Maybe.error(new InvalidGrantException("The authorization code " + code + " is invalid.")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException("The authorization code " + code + " is invalid."))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return idTokenService.create(oAuth2Request, client, endUser).map((idToken)->{
    IDTokenResponse response = new IDTokenResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setIdToken(idToken);
    response.setState(authorizationRequest.getState());
    return response;
});
1 | Single | map | METHOD_INVOCATION | return tokenService.create(oAuth2Request, client, endUser).map((accessToken)->{
    ImplicitResponse response = new ImplicitResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setAccessToken(accessToken);
    response.setState(authorizationRequest.getState());
    return response;
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return prepareResponse(authorizationRequest, client, endUser).flatMap((response)->processResponse(response, authorizationRequest, client, endUser));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(authorizationResponse);
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Single | map | METHOD_INVOCATION | return jwtService.encodeAuthorization(jwtAuthorizationResponse.build(), client).flatMap((authorization)->jweService.encryptAuthorization(authorization, client)).map((token)->{
    jwtAuthorizationResponse.setResponseType(authorizationRequest.getResponseType());
    jwtAuthorizationResponse.setResponseMode(authorizationRequest.getResponseMode());
    jwtAuthorizationResponse.setToken(token);
    return jwtAuthorizationResponse;
});
1 | Single | flatMap | METHOD_INVOCATION | jwtService.encodeAuthorization(jwtAuthorizationResponse.build(), client).flatMap((authorization)->jweService.encryptAuthorization(authorization, client)).map
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(scopeManager.findAll());
1 | Single | METHOD_INVOCATION | Single.just(scopeManager.findAll())
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | subscribe | METHOD_INVOCATION | revocationTokenService.revoke(createRequest(context), client).subscribe(()->context.response().setStatusCode(200).end(), context::fail);
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("A refresh token must be supplied."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("A refresh token must be supplied."))
1 | Single | flatMap | METHOD_INVOCATION | return super.parseRequest(tokenRequest, client).flatMap((tokenRequest1)->getTokenService().refresh(refreshToken, tokenRequest, client).map((refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
}));
1 | Single | map | METHOD_INVOCATION | (tokenRequest1)->getTokenService().refresh(refreshToken, tokenRequest, client).map((refreshToken1)->{
    if (refreshToken1.getSubject() != null) {
        tokenRequest1.setSubject(refreshToken1.getSubject());
    }
    final Set<String> originalScopes = (refreshToken1.getScope() != null ? new HashSet(Arrays.asList(refreshToken1.getScope().split("\\s+"))) : null);
    final Set<String> requestedScopes = tokenRequest1.getScopes();
    if (requestedScopes == null || requestedScopes.isEmpty()) {
        tokenRequest1.setScopes(originalScopes);
    } else if (originalScopes != null && !originalScopes.isEmpty()) {
        Set<String> filteredScopes = requestedScopes.stream().filter(originalScopes::contains).collect(Collectors.toSet());
        tokenRequest1.setScopes(filteredScopes);
    }
    tokenRequest1.setRefreshToken(refreshToken1.getAdditionalInformation());
    return tokenRequest1;
})
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userAuthenticationManager.loadPreAuthenticatedUser(subject, tokenRequest).onErrorResumeNext((ex)->{
    return Maybe.error(new InvalidGrantException());
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidGrantException());
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException())
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenRequest);
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((user)->handleRequest(tokenRequest, client, user.orElse(null)));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).map(Optional::of).defaultIfEmpty
1 | Single | flatMapMaybe | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).map
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenRequest);
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return resolveRequest(tokenRequest, client, endUser).flatMap((tokenRequest1)->createOAuth2Request(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->createAccessToken(oAuth2Request, client, endUser));
1 | Single | flatMap | METHOD_INVOCATION | resolveRequest(tokenRequest, client, endUser).flatMap((tokenRequest1)->createOAuth2Request(tokenRequest1, client, endUser)).flatMap
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.just(tokenRequest.createOAuth2Request()).map((oAuth2Request)->{
    if (endUser != null) {
        oAuth2Request.setSubject(endUser.getId());
    }
    oAuth2Request.setSupportRefreshToken(isSupportRefreshToken(client));
    return oAuth2Request;
});
1 | Single | just | METHOD_INVOCATION | Single.just(tokenRequest.createOAuth2Request()).map
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest.createOAuth2Request())
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    policyChainProcessorFactory.create(resolve(rules), executionContext).handler((executionContext1)->emitter.onComplete()).errorHandler((processorFailure)->emitter.onError(new PolicyChainException(processorFailure.message(), processorFailure.statusCode(), processorFailure.key(), processorFailure.parameters(), processorFailure.contentType()))).handle(executionContext);
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    policyChainProcessorFactory.create(resolve(rules), executionContext).handler((executionContext1)->emitter.onComplete()).errorHandler((processorFailure)->emitter.onError(new PolicyChainException(processorFailure.message(), processorFailure.statusCode(), processorFailure.key(), processorFailure.parameters(), processorFailure.contentType()))).handle(executionContext);
})
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | subscribe | METHOD_INVOCATION | this.clientSyncService.findTemplates().subscribe((templates)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationTemplate.from(templates))), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return authorizationCodeService.create(authorizationRequest, endUser).flatMap((code)->{
    HybridResponse hybridResponse = new HybridResponse();
    hybridResponse.setRedirectUri(authorizationRequest.getRedirectUri());
    hybridResponse.setState(authorizationRequest.getState());
    hybridResponse.setCode(code.getCode());
    OAuth2Request oAuth2Request = authorizationRequest.createOAuth2Request();
    oAuth2Request.setGrantType(GrantType.HYBRID);
    oAuth2Request.setSubject(endUser.getId());
    oAuth2Request.getContext().put(Claims.c_hash, code.getCode());
    oAuth2Request.getContext().put(Claims.s_hash, authorizationRequest.getState());
    switch (authorizationRequest.getResponseType()) {
    case ResponseType.CODE_ID_TOKEN: 
        return idTokenService.create(oAuth2Request, client, endUser).map((idToken)->{
            hybridResponse.setIdToken(idToken);
            return hybridResponse;
        });
    
    default: 
        return tokenService.create(oAuth2Request, client, endUser).map((accessToken)->{
            hybridResponse.setAccessToken(accessToken);
            return hybridResponse;
        });
    
    }
});
1 | Single | map | METHOD_INVOCATION | return idTokenService.create(oAuth2Request, client, endUser).map((idToken)->{
    hybridResponse.setIdToken(idToken);
    return hybridResponse;
});
1 | Single | map | METHOD_INVOCATION | return tokenService.create(oAuth2Request, client, endUser).map((accessToken)->{
    hybridResponse.setAccessToken(accessToken);
    return hybridResponse;
});
1 | Completable | subscribe | METHOD_INVOCATION | accessTokenRepository.bulkWrite(accessTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Access tokens indexation completed"), (error)->logger.error("Unexpected error while indexing access tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(accessTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Single | subscribe | METHOD_INVOCATION | authorizationRequestResolver.resolve(authorizationRequest, client, endUser).subscribe((__)->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return resolveAuthorizedScopes(authorizationRequest, client, endUser).flatMap((request)->resolveRedirectUri(request, client));
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(authorizationRequest);
1 | Single | METHOD_INVOCATION | Single.just(authorizationRequest)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return revokeRefreshToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return Completable.error(throwable);
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return revokeAccessToken(token, client);
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
        return Completable.complete();
    }
    return Completable.error(throwable);
});
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | revokeRefreshToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return Completable.error(throwable);
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return revokeAccessToken(token, client);
}).onErrorResumeNext
1 | Completable | error | METHOD_INVOCATION | return Completable.error(throwable);
1 | Completable | METHOD_INVOCATION | Completable.error(throwable)
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(throwable);
1 | Completable | METHOD_INVOCATION | Completable.error(throwable)
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return revokeAccessToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return Completable.error(throwable);
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return revokeRefreshToken(token, client);
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
        return Completable.complete();
    }
    return Completable.error(throwable);
});
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | revokeAccessToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return Completable.error(throwable);
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return revokeRefreshToken(token, client);
}).onErrorResumeNext
1 | Completable | error | METHOD_INVOCATION | return Completable.error(throwable);
1 | Completable | METHOD_INVOCATION | Completable.error(throwable)
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(throwable);
1 | Completable | METHOD_INVOCATION | Completable.error(throwable)
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return tokenService.getAccessToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown access token"))).flatMapCompletable((accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."));
    }
    return tokenService.deleteAccessToken(accessToken.getValue());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | tokenService.getAccessToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown access token"))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | tokenService.getAccessToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown access token")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidTokenException("Unknown access token"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."))
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return tokenService.getRefreshToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown refresh token"))).flatMapCompletable((refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."));
    }
    return tokenService.deleteRefreshToken(refreshToken.getValue());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | tokenService.getRefreshToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown refresh token"))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | tokenService.getRefreshToken(token, client).switchIfEmpty(Maybe.error(new InvalidTokenException("Unknown refresh token")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidTokenException("Unknown refresh token"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidGrantException("Cannot revoke tokens issued to other clients."))
1 | Single | subscribe | METHOD_INVOCATION | jwtService.encodeAuthorization(jwtException.build(), client).flatMap((authorization)->jweService.encryptAuthorization(authorization, client)).subscribe((jwt)->handler.handle(Future.succeededFuture(jwtException.buildRedirectUri(authorizationRequest.getRedirectUri(), authorizationRequest.getResponseType(), authorizationRequest.getResponseMode(), jwt))), (ex)->handler.handle(Future.failedFuture(ex)));
1 | Single | flatMap | METHOD_INVOCATION | jwtService.encodeAuthorization(jwtException.build(), client).flatMap((authorization)->jweService.encryptAuthorization(authorization, client)).subscribe
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource).map(AccessPolicy::getId).toList().subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(response.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(response)), context::fail);
1 | Flowable | toList | METHOD_INVOCATION | resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource).map(AccessPolicy::getId).toList().subscribe
1 | Flowable | map | METHOD_INVOCATION | resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource).map(AccessPolicy::getId).toList
1 | Single | subscribe | METHOD_INVOCATION | resourceService.createAccessPolicy(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource).subscribe((p)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation(basePath, p)).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(p)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(accessPolicyId))).subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response)), context::fail);
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(accessPolicyId))).subscribe
1 | Single | error | METHOD_INVOCATION | resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).switchIfEmpty(Single.error(new AccessPolicyNotFoundException(accessPolicyId)))
1 | Single | METHOD_INVOCATION | Single.error(new AccessPolicyNotFoundException(accessPolicyId))
1 | Single | subscribe | METHOD_INVOCATION | resourceService.updateAccessPolicy(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | resourceService.deleteAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicy).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | flatMap | METHOD_INVOCATION | consentInformation = userConsentService.checkConsent(client, user).flatMap((approvedConsent)->{
    if (approvedConsent.containsAll(requestedConsents)) {
        return Single.just(Collections.<Scope>emptyList());
    }
    Set<String> requiredConsent = requestedConsents.stream().filter((requestedScope)->!approvedConsent.contains(requestedScope)).collect(Collectors.toSet());
    return userConsentService.getConsentInformation(requiredConsent);
})
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.<Scope>emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.<Scope>emptyList())
1 | Single | subscribe | METHOD_INVOCATION | consentInformation.subscribe((scopes)->handler.handle(Future.succeededFuture(scopes)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | tokenGranter.grant(tokenRequest, client).subscribe((accessToken)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(accessToken)), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | singleOrError | METHOD_INVOCATION | return Observable.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType())).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->flow.run(authorizationRequest, client, endUser)).singleOrError();
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType())).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->flow.run(authorizationRequest, client, endUser)).singleOrError
1 | Observable | switchIfEmpty | METHOD_INVOCATION | Observable.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType())).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle
1 | Observable | filter | METHOD_INVOCATION | Observable.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType())).switchIfEmpty
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flows).filter
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(flows)
1 | Observable | error | METHOD_INVOCATION | Observable.fromIterable(flows).filter((flow)->flow.handle(authorizationRequest.getResponseType())).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType())))
1 | Observable | METHOD_INVOCATION | Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(unsupportedAssertionType);
1 | Maybe | METHOD_INVOCATION | Maybe.error(unsupportedAssertionType)
1 | Maybe | flatMap | METHOD_INVOCATION | return this.validateJWT(assertion, basePath).flatMap(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return validateSignatureWithHMAC(jwt);
        } else {
            return validateSignatureWithPublicKey(jwt);
        }
    }
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(unsupportedAssertionType);
1 | Maybe | METHOD_INVOCATION | Maybe.error(unsupportedAssertionType)
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(NOT_VALID);
1 | Maybe | METHOD_INVOCATION | Maybe.error(NOT_VALID)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("assertion has expired"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("assertion has expired"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new ServerErrorException("Unable to retrieve discovery token endpoint."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ServerErrorException("Unable to retrieve discovery token endpoint."))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(NOT_VALID);
1 | Maybe | METHOD_INVOCATION | Maybe.error(NOT_VALID)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("JWT Assertion must be signed with PS256"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("JWT Assertion must be signed with PS256"))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(jwt);
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwt)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(NOT_VALID);
1 | Maybe | METHOD_INVOCATION | Maybe.error(NOT_VALID)
1 | Maybe | RETURN_TYPE
1 | Maybe | flatMap | METHOD_INVOCATION | return this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client"))).flatMap((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap((jwkSet)->jwkService.getKey(jwkSet, signedJWT.getHeader().getKeyID())).switchIfEmpty(Maybe.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return Maybe.just(client);
            }
            return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
        });
    } else {
        return Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"));
    }
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client"))).flatMap
1 | Maybe | error | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Missing or invalid client"))
1 | Maybe | flatMap | METHOD_INVOCATION | return this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap((jwkSet)->jwkService.getKey(jwkSet, signedJWT.getHeader().getKeyID())).switchIfEmpty(Maybe.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return Maybe.just(client);
    }
    return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap((jwkSet)->jwkService.getKey(jwkSet, signedJWT.getHeader().getKeyID())).switchIfEmpty(Maybe.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap((jwkSet)->jwkService.getKey(jwkSet, signedJWT.getHeader().getKeyID())).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap
1 | Maybe | error | METHOD_INVOCATION | this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("No jwk keys available on client"))
1 | Maybe | error | METHOD_INVOCATION | this.getClientJwkSet(client).switchIfEmpty(Maybe.error(new InvalidClientException("No jwk keys available on client"))).flatMap((jwkSet)->jwkService.getKey(jwkSet, signedJWT.getHeader().getKeyID())).switchIfEmpty(Maybe.error(new InvalidClientException("Unable to validate client, no matching key.")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unable to validate client, no matching key."))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client);
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(NOT_VALID);
1 | Maybe | METHOD_INVOCATION | Maybe.error(NOT_VALID)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException(ex.getMessage()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException(ex.getMessage()))
1 | Maybe | RETURN_TYPE
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))
1 | Maybe | flatMap | METHOD_INVOCATION | return this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client"))).flatMap((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return Maybe.just(client);
            }
        } else {
            return Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"));
        }
    } catch (JOSEException josee) {
    }
    return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client"))).flatMap
1 | Maybe | error | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new InvalidClientException("Missing or invalid client")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Missing or invalid client"))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client);
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Invalid client: missing or unsupported authentication method"))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unable to validate client, assertion signature is not valid."))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(NOT_VALID);
1 | Maybe | METHOD_INVOCATION | Maybe.error(NOT_VALID)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException(ex.getMessage()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException(ex.getMessage()))
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client.getJwks());
1 | Maybe | METHOD_INVOCATION | Maybe.just(client.getJwks())
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE))));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | subscribe | METHOD_INVOCATION | requestObject.subscribe((jwt)->{
    try {
        checkOAuthParameters(context, jwt);
        context.next();
    } catch (Exception ex) {
        context.fail(ex);
    }
}, context::fail, context::next);
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile()).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).toMaybe();
1 | Single | flatMap | METHOD_INVOCATION | requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile()).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).toMaybe
1 | Single | map | METHOD_INVOCATION | requestObjectService.readRequestObject(request, context.get(CLIENT_CONTEXT_KEY), domain.useFapiBrazilProfile()).map((jwt)->preserveRequestObject(context, jwt)).flatMap
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(e);
1 | Single | METHOD_INVOCATION | Single.error(e)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException())
1 | Single | just | METHOD_INVOCATION | return Single.just(jwt);
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).map((jwt)->{
    final String uriIdentifier = requestUri.substring(PushedAuthorizationRequestService.PAR_URN_PREFIX.length());
    context.put(REQUEST_URI_ID_KEY, uriIdentifier);
    return jwt;
}).toMaybe();
1 | Single | map | METHOD_INVOCATION | parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).map((jwt)->{
    final String uriIdentifier = requestUri.substring(PushedAuthorizationRequestService.PAR_URN_PREFIX.length());
    context.put(REQUEST_URI_ID_KEY, uriIdentifier);
    return jwt;
}).toMaybe
1 | Single | flatMap | METHOD_INVOCATION | parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).map
1 | Single | map | METHOD_INVOCATION | parService.readFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY), context.get(PROVIDER_METADATA_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | return requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).toMaybe();
1 | Single | flatMap | METHOD_INVOCATION | requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap((jwt)->validateRequestObjectClaims(context, jwt)).toMaybe
1 | Single | map | METHOD_INVOCATION | requestObjectService.readRequestObjectFromURI(requestUri, context.get(CLIENT_CONTEXT_KEY)).map((jwt)->preserveRequestObject(context, jwt)).flatMap
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return tokenService.introspect(introspectionRequest.getToken()).flatMap((token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty(convert(accessToken, null)).toSingle();
    } else {
        return Single.just(convert(accessToken, null));
    }
}).onErrorResumeNext(Single.just(new IntrospectionResponse(false)));
1 | Single | flatMap | METHOD_INVOCATION | tokenService.introspect(introspectionRequest.getToken()).flatMap((token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty(convert(accessToken, null)).toSingle();
    } else {
        return Single.just(convert(accessToken, null));
    }
}).onErrorResumeNext
1 | Maybe | toSingle | METHOD_INVOCATION | return userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty(convert(accessToken, null)).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty(convert(accessToken, null)).toSingle
1 | Maybe | map | METHOD_INVOCATION | userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(convert(accessToken, null));
1 | Single | METHOD_INVOCATION | Single.just(convert(accessToken, null))
1 | Single | just | METHOD_INVOCATION | tokenService.introspect(introspectionRequest.getToken()).flatMap((token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return userService.findById(accessToken.getSubject()).map((user)->convert(accessToken, user)).defaultIfEmpty(convert(accessToken, null)).toSingle();
    } else {
        return Single.just(convert(accessToken, null));
    }
}).onErrorResumeNext(Single.just(new IntrospectionResponse(false)))
1 | Single | METHOD_INVOCATION | Single.just(new IntrospectionResponse(false))
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Single | map | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred).subscribe
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(context.getBodyAsJson().mapTo(DynamicClientRegistrationRequest.class));
1 | Single | METHOD_INVOCATION | Single.just(context.getBodyAsJson().mapTo(DynamicClientRegistrationRequest.class))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException(ex.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException(ex.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException(sanitizedMessage));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException(sanitizedMessage))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub()).map(Resource::getId).collect(JsonArray::new, JsonArray::add).subscribe((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(buffer.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(buffer)), context::fail);
1 | Flowable | collect | METHOD_INVOCATION | this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub()).map(Resource::getId).collect(JsonArray::new, JsonArray::add).subscribe
1 | Flowable | map | METHOD_INVOCATION | this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub()).map(Resource::getId).collect
1 | Single | subscribe | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->this.resourceService.create(request, domain.getId(), client.getId(), accessToken.getSub())).subscribe((resource)->{
    final String resourceLocation = resourceLocation(basePath, resource);
    context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(ResourceResponse.from(resource, resourceLocation)));
}, context::fail);
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->this.resourceService.create(request, domain.getId(), client.getId(), accessToken.getSub())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Single.error(new ResourceNotFoundException(resource_id))).subscribe((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource))), context::fail);
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Single.error(new ResourceNotFoundException(resource_id))).subscribe
1 | Single | error | METHOD_INVOCATION | this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id).switchIfEmpty(Single.error(new ResourceNotFoundException(resource_id)))
1 | Single | METHOD_INVOCATION | Single.error(new ResourceNotFoundException(resource_id))
1 | Single | subscribe | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->this.resourceService.update(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource))), context::fail);
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->this.resourceService.update(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | this.resourceService.delete(domain.getId(), client.getId(), accessToken.getSub(), resource_id).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Single.just(context.getBodyAsJson()).flatMap(this::bodyValidation).map((body)->body.mapTo(NewResource.class));
1 | Single | flatMap | METHOD_INVOCATION | Single.just(context.getBodyAsJson()).flatMap(this::bodyValidation).map
1 | Single | just | METHOD_INVOCATION | Single.just(context.getBodyAsJson()).flatMap
1 | Single | METHOD_INVOCATION | Single.just(context.getBodyAsJson())
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("missing resource_scopes"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("missing resource_scopes"))
1 | Single | just | METHOD_INVOCATION | return Single.just(body);
1 | Single | METHOD_INVOCATION | Single.just(body)
1 | Single | subscribe | METHOD_INVOCATION | introspectionService.introspect(createRequest(context)).doOnSuccess((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse))).subscribe();
1 | Single | doOnSuccess | METHOD_INVOCATION | introspectionService.introspect(createRequest(context)).doOnSuccess((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse))).subscribe
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return parRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestUriException())).flatMap((Function<PushedAuthorizationRequest, Single<JWT>>)(req)->{
    if (req.getParameters() != null && req.getExpireAt() != null && req.getExpireAt().after(new Date())) {
        final String request = req.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST);
        if (request != null) {
            return readRequestObject(client, request);
        } else if (this.domain.usePlainFapiProfile()) {
            return Single.error(new InvalidRequestException("request parameter is missing"));
        } else {
            final JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder().audience(oidcMetadata.getIssuer()).expirationTime(req.getExpireAt());
            req.getParameters().toSingleValueMap().forEach(builder::claim);
            return Single.just(new PlainJWT(builder.build()));
        }
    }
    return Single.error(new InvalidRequestUriException());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | parRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestUriException())).flatMap
1 | Single | error | METHOD_INVOCATION | parRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestUriException()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestUriException())
1 | Single | OTHER
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("request parameter is missing"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("request parameter is missing"))
1 | Single | just | METHOD_INVOCATION | return Single.just(new PlainJWT(builder.build()));
1 | Single | METHOD_INVOCATION | Single.just(new PlainJWT(builder.build()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestUriException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestUriException())
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("Invalid request_uri"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("Invalid request_uri"))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | fromAction | METHOD_INVOCATION | Completable registrationValidation = Completable.fromAction(()->{
    String clientId = jwtClientAssertion(par) ? getClientIdFromAssertion(par) : par.getParameters().getFirst(Parameters.CLIENT_ID);
    if (!client.getClientId().equals(clientId)) {
        throw new InvalidRequestException();
    }
    if (par.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST_URI) != null) {
        throw new InvalidRequestException("request_uri not authorized");
    }
})
1 | Completable | METHOD_INVOCATION | Completable.fromAction(()->{
    String clientId = jwtClientAssertion(par) ? getClientIdFromAssertion(par) : par.getParameters().getFirst(Parameters.CLIENT_ID);
    if (!client.getClientId().equals(clientId)) {
        throw new InvalidRequestException();
    }
    if (par.getParameters().getFirst(io.gravitee.am.common.oidc.Parameters.REQUEST_URI) != null) {
        throw new InvalidRequestException("request_uri not authorized");
    }
})
1 | Single | ignoreElement | METHOD_INVOCATION | registrationValidation = registrationValidation.andThen(Single.defer(()->readRequestObject(client, request).map((jwt)->checkRedirectUriParameter(jwt, client)))).ignoreElement()
1 | Completable | andThen | METHOD_INVOCATION | registrationValidation.andThen(Single.defer(()->readRequestObject(client, request).map((jwt)->checkRedirectUriParameter(jwt, client)))).ignoreElement
1 | Single | defer | METHOD_INVOCATION | registrationValidation.andThen(Single.defer(()->readRequestObject(client, request).map((jwt)->checkRedirectUriParameter(jwt, client))))
1 | Single | METHOD_INVOCATION | Single.defer(()->readRequestObject(client, request).map((jwt)->checkRedirectUriParameter(jwt, client)))
1 | Single | map | METHOD_INVOCATION | ()->readRequestObject(client, request).map((jwt)->checkRedirectUriParameter(jwt, client))
1 | Completable | andThen | METHOD_INVOCATION | registrationValidation.andThen(Completable.fromAction(()->checkRedirectUriParameter(par, client)));
1 | Completable | fromAction | METHOD_INVOCATION | registrationValidation.andThen(Completable.fromAction(()->checkRedirectUriParameter(par, client)))
1 | Completable | METHOD_INVOCATION | Completable.fromAction(()->checkRedirectUriParameter(par, client))
1 | Single | map | METHOD_INVOCATION | return registrationValidation.andThen(Single.defer(()->parRepository.create(par))).map((parPersisted)->{
    final PushedAuthorizationRequestResponse response = new PushedAuthorizationRequestResponse();
    response.setRequestUri(PAR_URN_PREFIX + parPersisted.getId());
    final long exp = (parPersisted.getExpireAt().getTime() - Instant.now().toEpochMilli()) / 1000;
    response.setExp(exp);
    return response;
});
1 | Completable | andThen | METHOD_INVOCATION | registrationValidation.andThen(Single.defer(()->parRepository.create(par))).map
1 | Single | defer | METHOD_INVOCATION | registrationValidation.andThen(Single.defer(()->parRepository.create(par)))
1 | Single | METHOD_INVOCATION | Single.defer(()->parRepository.create(par))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return Single.error(new InvalidRequestObjectException());
}).map(this::checkRequestObjectClaims).map(this::checkRequestObjectAlgorithm).flatMap((jwt)->validateSignature((SignedJWT)jwt, client));
1 | Single | map | METHOD_INVOCATION | jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return Single.error(new InvalidRequestObjectException());
}).map(this::checkRequestObjectClaims).map(this::checkRequestObjectAlgorithm).flatMap
1 | Single | map | METHOD_INVOCATION | jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return Single.error(new InvalidRequestObjectException());
}).map(this::checkRequestObjectClaims).map
1 | Single | onErrorResumeNext | METHOD_INVOCATION | jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return Single.error(ex);
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return Single.error(new InvalidRequestObjectException());
}).map
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException())
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID"))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return Single.just(jwt);
        } else {
            return Single.error(new InvalidRequestObjectException("Invalid signature"));
        }
    }
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID"))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidRequestObjectException())
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidRequestObjectException("Invalid key ID"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"))
1 | Single | just | METHOD_INVOCATION | return Single.just(jwt);
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Invalid signature"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Invalid signature"))
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(signedJwt);
1 | Single | METHOD_INVOCATION | Single.just(signedJwt)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return Single.error(throwable);
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return Single.error(new ServerErrorException("Unable to encrypt id_token"));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(throwable);
1 | Single | METHOD_INVOCATION | Single.error(throwable)
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServerErrorException("Unable to encrypt id_token"));
1 | Single | METHOD_INVOCATION | Single.error(new ServerErrorException("Unable to encrypt id_token"))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(signedJwt);
1 | Single | METHOD_INVOCATION | Single.just(signedJwt)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return Single.error(throwable);
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return Single.error(new ServerErrorException("Unable to encrypt userinfo"));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(throwable);
1 | Single | METHOD_INVOCATION | Single.error(throwable)
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServerErrorException("Unable to encrypt userinfo"));
1 | Single | METHOD_INVOCATION | Single.error(new ServerErrorException("Unable to encrypt userinfo"))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(JWTParser.parse(jwt) instanceof EncryptedJWT);
1 | Single | METHOD_INVOCATION | Single.just(JWTParser.parse(jwt) instanceof EncryptedJWT)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Request object must be encrypted using RSA-OAEP with A256GCM"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Request object must be encrypted using RSA-OAEP with A256GCM"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServerErrorException("Unable to perform Json Web Decryption, unsupported algorithm: " + algorithm.getName()));
1 | Single | METHOD_INVOCATION | Single.error(new ServerErrorException("Unable to perform Json Web Decryption, unsupported algorithm: " + algorithm.getName()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Request Object must be encrypted"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Request Object must be encrypted"))
1 | Single | just | METHOD_INVOCATION | return Single.just(parsedJwt);
1 | Single | METHOD_INVOCATION | Single.just(parsedJwt)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | toSingle | METHOD_INVOCATION | return jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
}).filter(Optional::isPresent).map(Optional::get).firstElement().toSingle();
1 | Flowable | firstElement | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
}).filter(Optional::isPresent).map(Optional::get).firstElement().toSingle
1 | Flowable | map | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
}).filter(Optional::isPresent).map(Optional::get).firstElement
1 | Flowable | filter | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
}).filter(Optional::isPresent).map
1 | Flowable | map | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map((decrypter)->{
    try {
        jwe.decrypt(decrypter);
        return Optional.<JWT>ofNullable(jwe.getPayload().toSignedJWT());
    } catch (Exception e) {
        return Optional.<JWT>empty();
    }
}).filter
1 | Flowable | map | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map(function::apply).map
1 | Flowable | filter | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter((jwk)->jwe.getHeader().getKeyID() == null || jwe.getHeader().getKeyID().equals(jwk.getKid())).map
1 | Flowable | filter | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter((jwk)->jwk.getUse() == null || jwk.getUse().equals(KeyUse.ENCRYPTION.getValue())).filter
1 | Flowable | filter | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter(filter::test).filter
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | jwks.flatMapPublisher((jwkset)->Flowable.fromIterable(jwkset.getKeys())).filter
1 | Flowable | fromIterable | METHOD_INVOCATION | (jwkset)->Flowable.fromIterable(jwkset.getKeys())
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(jwkset.getKeys())
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(signedJwt);
1 | Single | METHOD_INVOCATION | Single.just(signedJwt)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return Single.error(throwable);
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return Single.error(new ServerErrorException("Unable to encrypt authorization"));
});
1 | Single | error | METHOD_INVOCATION | return Single.error(throwable);
1 | Single | METHOD_INVOCATION | Single.error(throwable)
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServerErrorException("Unable to encrypt authorization"));
1 | Single | METHOD_INVOCATION | Single.error(new ServerErrorException("Unable to encrypt authorization"))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new ServerErrorException("Unable to perform Json Web Encryption, unsupported algorithm: " + algorithm.getName()));
1 | Single | METHOD_INVOCATION | Single.error(new ServerErrorException("Unable to perform Json Web Encryption, unsupported algorithm: " + algorithm.getName()))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return jwkService.getKeys(client).flatMap((jwkSet)->jwkService.filter(jwkSet, filter)).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("no matching key found to encrypt"))).flatMapSingle((jwk)->Single.just(function.apply(jwk))).map((encrypter)->{
    jwe.encrypt(encrypter);
    return jwe.serialize();
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | jwkService.getKeys(client).flatMap((jwkSet)->jwkService.filter(jwkSet, filter)).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("no matching key found to encrypt"))).flatMapSingle((jwk)->Single.just(function.apply(jwk))).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(client).flatMap((jwkSet)->jwkService.filter(jwkSet, filter)).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("no matching key found to encrypt"))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | jwkService.getKeys(client).flatMap((jwkSet)->jwkService.filter(jwkSet, filter)).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(client).flatMap((jwkSet)->jwkService.filter(jwkSet, filter)).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("no matching key found to encrypt")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientMetadataException("no matching key found to encrypt"))
1 | Single | just | METHOD_INVOCATION | (jwk)->Single.just(function.apply(jwk))
1 | Single | METHOD_INVOCATION | Single.just(function.apply(jwk))
1 | Completable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return Completable.complete();
}).andThen(flow.run(request, client, endUser)).subscribe((authorizationResponse)->{
    try {
        cleanSession(context);
        doRedirect(context, request, authorizationResponse);
    } catch (Exception e) {
        logger.error("Unable to redirect to client redirect_uri", e);
        context.fail(new ServerErrorException());
    }
}, context::fail);
1 | Completable | andThen | METHOD_INVOCATION | parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return Completable.complete();
}).andThen(flow.run(request, client, endUser)).subscribe
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return Completable.complete();
}).andThen
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return Observable.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).firstElement().switchIfEmpty(Maybe.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType()))).flatMapSingle((tokenGranter)->tokenGranter.grant(tokenRequest, client));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).firstElement().switchIfEmpty(Maybe.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType()))).flatMapSingle
1 | Observable | firstElement | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).firstElement().switchIfEmpty
1 | Observable | filter | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).firstElement
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values()).filter
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values())
1 | Maybe | error | METHOD_INVOCATION | Observable.fromIterable(tokenGranters.values()).filter((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client)).firstElement().switchIfEmpty(Maybe.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType()))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((user)->handleRequest(tokenRequest, client, user.orElse(null)));
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).map(Optional::of).defaultIfEmpty
1 | Single | flatMapMaybe | METHOD_INVOCATION | parseRequest(tokenRequest, client).flatMapMaybe((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).map
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidGrantException("Missing parameter: ticket"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException("Missing parameter: ticket"))
1 | Single | error | METHOD_INVOCATION | return Single.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Requesting party token"), new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build());
1 | Single | METHOD_INVOCATION | Single.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Requesting party token"), new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())
1 | Single | error | METHOD_INVOCATION | return Single.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build());
1 | Single | METHOD_INVOCATION | Single.error(UmaException.needInfoBuilder(ticket).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN_FORMAT).setFriendlyName("supported claims token format").setClaimTokenFormat(CLAIM_TOKEN_FORMAT_SUPPORTED))).build())
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client).flatMapMaybe((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).switchIfEmpty(Maybe.error(UserInvalidException::new)).onErrorResumeNext((ex)->{
    return Maybe.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client).flatMapMaybe((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).switchIfEmpty(Maybe.error(UserInvalidException::new)).onErrorResumeNext
1 | Single | flatMapMaybe | METHOD_INVOCATION | jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client).flatMapMaybe((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client).flatMapMaybe((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).switchIfEmpty(Maybe.error(UserInvalidException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(UserInvalidException::new)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build());
1 | Maybe | METHOD_INVOCATION | Maybe.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build())
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return resolveRequestedScopes(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies(oAuth2Request, client, endUser)).flatMap((oAuth2Request)->getTokenService().create(oAuth2Request, client, endUser)).map((token)->this.handleUpgradedToken(tokenRequest, token));
1 | Single | flatMap | METHOD_INVOCATION | resolveRequestedScopes(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies(oAuth2Request, client, endUser)).flatMap((oAuth2Request)->getTokenService().create(oAuth2Request, client, endUser)).map
1 | Single | flatMap | METHOD_INVOCATION | resolveRequestedScopes(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request(tokenRequest1, client, endUser)).flatMap((oAuth2Request)->this.executePolicies(oAuth2Request, client, endUser)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | resolveRequestedScopes(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions(tokenRequest1, client, endUser)).flatMap((tokenRequest1)->this.createOAuth2Request(tokenRequest1, client, endUser)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | resolveRequestedScopes(tokenRequest, client).flatMap((tokenRequest1)->this.resolvePermissions(tokenRequest1, client, endUser)).flatMap
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidScopeException("At least one of the scopes included in the request does not match client pre-registered scopes"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidScopeException("At least one of the scopes included in the request does not match client pre-registered scopes"))
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenRequest);
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.permissionTicketService.remove(tokenRequest.getTicket()).map(PermissionTicket::getPermissionRequest).flatMap((permissionRequests)->{
    List<String> resourceIds = permissionRequests.stream().map(PermissionRequest::getResourceId).collect(Collectors.toList());
    return resourceService.findByResources(resourceIds).toList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests)).map((extendedPermissionRequests)->{
        tokenRequest.setPermissions(extendedPermissionRequests);
        return tokenRequest;
    });
});
1 | Single | map | METHOD_INVOCATION | this.permissionTicketService.remove(tokenRequest.getTicket()).map(PermissionTicket::getPermissionRequest).flatMap
1 | Single | map | METHOD_INVOCATION | return resourceService.findByResources(resourceIds).toList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests)).map((extendedPermissionRequests)->{
    tokenRequest.setPermissions(extendedPermissionRequests);
    return tokenRequest;
});
1 | Single | flatMap | METHOD_INVOCATION | resourceService.findByResources(resourceIds).toList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap)).flatMap((resolvedPermissionRequests)->this.extendPermissionWithRPT(tokenRequest, client, endUser, resolvedPermissionRequests)).map
1 | Single | flatMap | METHOD_INVOCATION | resourceService.findByResources(resourceIds).toList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource(tokenRequest, resourceSet)).flatMap((resourceMap)->this.resolveScopeRequestAssessment(tokenRequest, permissionRequests, resourceMap)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | resourceService.findByResources(resourceIds).toList().flatMap((resourceSet)->this.checkRequestedScopesMatchResource(tokenRequest, resourceSet)).flatMap
1 | Flowable | toList | METHOD_INVOCATION | resourceService.findByResources(resourceIds).toList().flatMap
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidScopeException("At least one of the scopes included in the request does not match resource registered scopes"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidScopeException("At least one of the scopes included in the request does not match resource registered scopes"))
1 | Single | just | METHOD_INVOCATION | return Single.just(resourceSet.stream().collect(Collectors.toMap(Resource::getId, (resource)->resource)));
1 | Single | METHOD_INVOCATION | Single.just(resourceSet.stream().collect(Collectors.toMap(Resource::getId, (resource)->resource)))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(requestedPermissions);
1 | Single | METHOD_INVOCATION | Single.just(requestedPermissions)
1 | Single | just | METHOD_INVOCATION | return Single.just(requestedPermissions.stream().map((permissionRequest)->{
    Set<String> registeredScopes = new HashSet(fetchedResources.get(permissionRequest.getResourceId()).getResourceScopes());
    permissionRequest.getResourceScopes().addAll(tokenRequest.getScopes().stream().filter(registeredScopes::contains).collect(Collectors.toSet()));
    return permissionRequest;
}).collect(Collectors.toList()));
1 | Single | METHOD_INVOCATION | Single.just(requestedPermissions.stream().map((permissionRequest)->{
    Set<String> registeredScopes = new HashSet(fetchedResources.get(permissionRequest.getResourceId()).getResourceScopes());
    permissionRequest.getResourceScopes().addAll(tokenRequest.getScopes().stream().filter(registeredScopes::contains).collect(Collectors.toSet()));
    return permissionRequest;
}).collect(Collectors.toList()))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken(rpt, client, endUser)).map((rpt)->this.mergePermissions(rpt, requestedPermissions)).onErrorResumeNext((throwable)->Single.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")));
1 | Single | map | METHOD_INVOCATION | jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken(rpt, client, endUser)).map((rpt)->this.mergePermissions(rpt, requestedPermissions)).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client).flatMap((rpt)->this.checkRequestingPartyToken(rpt, client, endUser)).map
1 | Single | error | METHOD_INVOCATION | (throwable)->Single.error(new InvalidGrantException("Requesting Party Token (rpt) not valid"))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException("Requesting Party Token (rpt) not valid"))
1 | Single | just | METHOD_INVOCATION | return Single.just(requestedPermissions);
1 | Single | METHOD_INVOCATION | Single.just(requestedPermissions)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidTokenException::new);
1 | Single | METHOD_INVOCATION | Single.error(InvalidTokenException::new)
1 | Single | just | METHOD_INVOCATION | return Single.just(rpt);
1 | Single | METHOD_INVOCATION | Single.just(rpt)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(oAuth2Request);
1 | Single | METHOD_INVOCATION | Single.just(oAuth2Request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalException("Should not be used"));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException("Should not be used"))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(oAuth2Request);
1 | Single | METHOD_INVOCATION | Single.just(oAuth2Request)
1 | Single | flatMap | METHOD_INVOCATION | return resourceService.findAccessPoliciesByResources(resourceIds).map((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
}).toList().flatMap((rules)->{
    if (rules.isEmpty()) {
        return Single.just(oAuth2Request);
    }
    ExecutionContext simpleExecutionContext = new SimpleExecutionContext(oAuth2Request, oAuth2Request.getHttpResponse());
    ExecutionContext executionContext = executionContextFactory.create(simpleExecutionContext);
    executionContext.setAttribute("client", new ClientProperties(client));
    if (endUser != null) {
        executionContext.setAttribute("user", new UserProperties(endUser));
    }
    return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->Single.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")));
});
1 | Flowable | toList | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources(resourceIds).map((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
}).toList().flatMap
1 | Flowable | map | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources(resourceIds).map((accessPolicy)->{
    Rule rule = new DefaultRule(accessPolicy);
    Optional<PermissionRequest> permission = permissionRequests.stream().filter((permissionRequest)->permissionRequest.getResourceId().equals(accessPolicy.getResource())).findFirst();
    if (permission.isPresent()) {
        ((DefaultRule)rule).setMetadata(Collections.singletonMap("permissionRequest", permission.get()));
    }
    return rule;
}).toList
1 | Single | just | METHOD_INVOCATION | return Single.just(oAuth2Request);
1 | Single | METHOD_INVOCATION | Single.just(oAuth2Request)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->Single.error(new InvalidGrantException("Policy conditions are not met for actual request parameters")));
1 | Completable | toSingleDefault | METHOD_INVOCATION | rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | (ex)->Single.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return jweService.decrypt(request, encRequired).onErrorResumeNext((err)->{
    if (err instanceof InvalidRequestObjectException) {
        return Single.error(err);
    }
    return Single.error(new InvalidRequestObjectException("Malformed request object"));
}).flatMap((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client)));
});
1 | Single | onErrorResumeNext | METHOD_INVOCATION | jweService.decrypt(request, encRequired).onErrorResumeNext((err)->{
    if (err instanceof InvalidRequestObjectException) {
        return Single.error(err);
    }
    return Single.error(new InvalidRequestObjectException("Malformed request object"));
}).flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(err);
1 | Single | METHOD_INVOCATION | Single.error(err)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Malformed request object"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Malformed request object"))
1 | Completable | andThen | METHOD_INVOCATION | return checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client)));
1 | Single | defer | METHOD_INVOCATION | checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client)))
1 | Single | METHOD_INVOCATION | Single.defer(()->validateSignature((SignedJWT)jwt, client))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return requestObjectRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestObjectException())).flatMap((Function<RequestObject, Single<JWT>>)(req)->{
    if (req.getExpireAt().after(new Date())) {
        return readRequestObject(req.getPayload(), client, false);
    }
    return Single.error(new InvalidRequestObjectException());
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | requestObjectRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestObjectException())).flatMap
1 | Single | error | METHOD_INVOCATION | requestObjectRepository.findById(identifier).switchIfEmpty(Single.error(new InvalidRequestObjectException()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException())
1 | Single | OTHER
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException())
1 | Single | flatMap | METHOD_INVOCATION | return webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).flatMap((Function<String, Single<JWT>>)(s)->readRequestObject(s, client, false));
1 | Single | map | METHOD_INVOCATION | webClient.getAbs(UriBuilder.fromHttpUrl(requestUri).build().toString()).rxSend().map(HttpResponse::bodyAsString).flatMap
1 | Single | OTHER
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException(requestUri + " is not valid."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException(requestUri + " is not valid."))
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client))).flatMap(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return requestObjectRepository.create(requestObject);
    }
}).flatMap((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return Single.just(response);
});
1 | Single | flatMap | METHOD_INVOCATION | checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client))).flatMap(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return requestObjectRepository.create(requestObject);
    }
}).flatMap
1 | Completable | andThen | METHOD_INVOCATION | checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client))).flatMap
1 | Single | defer | METHOD_INVOCATION | checkRequestObjectAlgorithm(jwt).andThen(Single.defer(()->validateSignature((SignedJWT)jwt, client)))
1 | Single | METHOD_INVOCATION | Single.defer(()->validateSignature((SignedJWT)jwt, client))
1 | Single | just | METHOD_INVOCATION | return Single.just(response);
1 | Single | METHOD_INVOCATION | Single.just(response)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException())
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID"))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return Single.just(jwt);
        } else {
            return Single.error(new InvalidRequestObjectException("Invalid signature"));
        }
    }
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID"))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidRequestObjectException())
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(client).switchIfEmpty(Maybe.error(new InvalidRequestObjectException())).flatMap(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).switchIfEmpty(Maybe.error(new InvalidRequestObjectException("Invalid key ID")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidRequestObjectException("Invalid key ID"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Invalid request object signing algorithm"))
1 | Single | just | METHOD_INVOCATION | return Single.just(jwt);
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestObjectException("Invalid signature"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestObjectException("Invalid signature"))
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidRequestObjectException("Request object must be signed"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidRequestObjectException("Request object must be signed"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidRequestObjectException("Request object must be signed with PS256"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidRequestObjectException("Request object must be signed with PS256"))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return authorizationCodeService.create(authorizationRequest, endUser).map((code)->{
    AuthorizationCodeResponse response = new AuthorizationCodeResponse();
    response.setRedirectUri(authorizationRequest.getRedirectUri());
    response.setCode(code.getCode());
    response.setState(authorizationRequest.getState());
    return response;
});
1 | Single | subscribe | METHOD_INVOCATION | idTokenService.extractUser(idToken, client).subscribe((user)->handler.handle(Future.succeededFuture(user)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(accessToken);
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return idTokenService.create(oAuth2Request, client, user, executionContext).flatMap((idToken)->{
    Map<String, Object> additionalInformation = new HashMap<>(accessToken.getAdditionalInformation());
    additionalInformation.put(ResponseType.ID_TOKEN, idToken);
    accessToken.setAdditionalInformation(additionalInformation);
    return Single.just(accessToken);
});
1 | Single | just | METHOD_INVOCATION | return Single.just(accessToken);
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("Missing parameter: username"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("Missing parameter: username"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("Missing parameter: password"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("Missing parameter: password"))
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->Single.error(new InvalidGrantException(ex.getMessage()))).toMaybe();
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->Single.error(new InvalidGrantException(ex.getMessage()))).toMaybe
1 | Single | error | METHOD_INVOCATION | (ex)->Single.error(new InvalidGrantException(ex.getMessage()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException(ex.getMessage()))
1 | Single | subscribe | METHOD_INVOCATION | requestObjectService.registerRequestObject(request, client).subscribe(new Consumer<RequestObjectRegistrationResponse>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(RequestObjectRegistrationResponse response) throws Exception {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
    }
}, new Consumer<Throwable>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(Throwable throwable) throws Exception {
        context.fail(throwable);
    }
});
1 | Single | subscribe | METHOD_INVOCATION | scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE).subscribe((scopes)->{
    updateScopes(scopes);
    logger.info("Scopes loaded for domain {}", domain.getName());
}, (error)->logger.error("Unable to initialize scopes for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | scopeService.findById(scopeId).subscribe((scope)->{
    updateScopes(Collections.singleton(scope));
    logger.info("Scope {} {}d for domain {}", scopeId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} scope for domain {}", eventType, domain.getName(), error), ()->logger.error("No scope found with id {}", scopeId));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("Missing parameter: code"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("Missing parameter: code"))
1 | Single | flatMap | METHOD_INVOCATION | return super.parseRequest(tokenRequest, client).flatMap((tokenRequest1)->authorizationCodeService.remove(code, client).flatMap((authorizationCode)->authenticationFlowContextService.removeContext(authorizationCode.getTransactionId(), authorizationCode.getContextVersion()).onErrorResumeNext((error)->(exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())).map((ctx)->{
    checkRedirectUris(tokenRequest1, authorizationCode);
    checkPKCE(tokenRequest1, authorizationCode);
    tokenRequest1.setSubject(authorizationCode.getSubject());
    tokenRequest1.setScopes(authorizationCode.getScopes());
    if (authorizationCode.getRequestParameters() != null) {
        authorizationCode.getRequestParameters().forEach((key,value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", authorizationCode.getCode());
    decodedAuthorizationCode.put("transactionId", authorizationCode.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
})).toSingle());
1 | Maybe | toSingle | METHOD_INVOCATION | (tokenRequest1)->authorizationCodeService.remove(code, client).flatMap((authorizationCode)->authenticationFlowContextService.removeContext(authorizationCode.getTransactionId(), authorizationCode.getContextVersion()).onErrorResumeNext((error)->(exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())).map((ctx)->{
    checkRedirectUris(tokenRequest1, authorizationCode);
    checkPKCE(tokenRequest1, authorizationCode);
    tokenRequest1.setSubject(authorizationCode.getSubject());
    tokenRequest1.setScopes(authorizationCode.getScopes());
    if (authorizationCode.getRequestParameters() != null) {
        authorizationCode.getRequestParameters().forEach((key,value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", authorizationCode.getCode());
    decodedAuthorizationCode.put("transactionId", authorizationCode.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
})).toSingle()
1 | Maybe | flatMap | METHOD_INVOCATION | authorizationCodeService.remove(code, client).flatMap((authorizationCode)->authenticationFlowContextService.removeContext(authorizationCode.getTransactionId(), authorizationCode.getContextVersion()).onErrorResumeNext((error)->(exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())).map((ctx)->{
    checkRedirectUris(tokenRequest1, authorizationCode);
    checkPKCE(tokenRequest1, authorizationCode);
    tokenRequest1.setSubject(authorizationCode.getSubject());
    tokenRequest1.setScopes(authorizationCode.getScopes());
    if (authorizationCode.getRequestParameters() != null) {
        authorizationCode.getRequestParameters().forEach((key,value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", authorizationCode.getCode());
    decodedAuthorizationCode.put("transactionId", authorizationCode.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
})).toSingle
1 | Maybe | map | METHOD_INVOCATION | (authorizationCode)->authenticationFlowContextService.removeContext(authorizationCode.getTransactionId(), authorizationCode.getContextVersion()).onErrorResumeNext((error)->(exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())).map((ctx)->{
    checkRedirectUris(tokenRequest1, authorizationCode);
    checkPKCE(tokenRequest1, authorizationCode);
    tokenRequest1.setSubject(authorizationCode.getSubject());
    tokenRequest1.setScopes(authorizationCode.getScopes());
    if (authorizationCode.getRequestParameters() != null) {
        authorizationCode.getRequestParameters().forEach((key,value)->tokenRequest1.parameters().putIfAbsent(key, value));
    }
    Map<String, Object> decodedAuthorizationCode = new HashMap<>();
    decodedAuthorizationCode.put("code", authorizationCode.getCode());
    decodedAuthorizationCode.put("transactionId", authorizationCode.getTransactionId());
    tokenRequest1.setAuthorizationCode(decodedAuthorizationCode);
    tokenRequest1.getContext().put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    return tokenRequest1;
})
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | authenticationFlowContextService.removeContext(authorizationCode.getTransactionId(), authorizationCode.getContextVersion()).onErrorResumeNext((error)->(exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())).map
1 | Maybe | error | METHOD_INVOCATION | (exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())
1 | Maybe | METHOD_INVOCATION | Maybe.error(error)
1 | Maybe | just | METHOD_INVOCATION | (exitOnError) ? Maybe.error(error) : Maybe.just(new AuthenticationFlowContext())
1 | Maybe | METHOD_INVOCATION | Maybe.just(new AuthenticationFlowContext())
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userAuthenticationManager.loadPreAuthenticatedUser(tokenRequest.getSubject(), tokenRequest).onErrorResumeNext((ex)->{
    return Maybe.error(new InvalidGrantException());
});
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidGrantException());
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException())
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenRequest);
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Maybe | subscribe | METHOD_INVOCATION | jwkService.getKeys(client).subscribe((jwkSet)->{
    boolean match = jwkSet.getKeys().stream().anyMatch((jwk)->thumbprint256.equals(jwk.getX5tS256()) || thumbprint.equals(jwk.getX5t()));
    if (match) {
        handler.handle(Future.succeededFuture(client));
    } else {
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate")));
    }
}, (throwable)->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate"))), ()->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: missing or unsupported JWK Set"))));
1 | Single | subscribe | METHOD_INVOCATION | jwkService.getKeys().map(JWKConverter::convert).subscribe((keys)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, "application/jwk-set+json; charset=UTF-8").end(Json.encodePrettily(keys)), (error)->context.response().setStatusCode(500).end());
1 | Single | map | METHOD_INVOCATION | jwkService.getKeys().map(JWKConverter::convert).subscribe
1 | Flowable | subscribe | METHOD_INVOCATION | extensionGrantRepository.findByDomain(domain.getId()).subscribe((extensionGrant)->{
    minDate = minDate == null ? extensionGrant.getCreatedAt() : minDate.after(extensionGrant.getCreatedAt()) ? extensionGrant.getCreatedAt() : minDate;
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grants loaded for domain {}", domain.getName());
}, (error)->logger.error("Unable to initialize extension grants for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).subscribe((extensionGrant)->{
    if (extensionGrants.isEmpty()) {
        minDate = extensionGrant.getCreatedAt();
    }
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grant {} {}d for domain {}", extensionGrantId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} extension grant for domain {}", eventType, domain.getName(), error), ()->logger.error("No extension grant found with id {}", extensionGrantId));
1 | Maybe | blockingGet | METHOD_INVOCATION | authenticationProvider = identityProviderManager.get(extensionGrant.getIdentityProvider()).blockingGet()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(tokenRequest);
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantProvider.grant(convert(tokenRequest)).flatMap((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return userAuthenticationManager.connect(endUser, false).toMaybe();
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return Maybe.error(new InvalidGrantException("No identity_provider provided"));
            }
            return identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).map((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            }).switchIfEmpty(Maybe.error(new InvalidGrantException("Unknown user: " + endUser.getId())));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return Maybe.just(user);
        }
    }
}).onErrorResumeNext((ex)->{
    return Maybe.error(new InvalidGrantException(ex.getMessage()));
});
1 | Maybe | flatMap | METHOD_INVOCATION | extensionGrantProvider.grant(convert(tokenRequest)).flatMap((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return userAuthenticationManager.connect(endUser, false).toMaybe();
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return Maybe.error(new InvalidGrantException("No identity_provider provided"));
            }
            return identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).map((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            }).switchIfEmpty(Maybe.error(new InvalidGrantException("Unknown user: " + endUser.getId())));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return Maybe.just(user);
        }
    }
}).onErrorResumeNext
1 | Single | toMaybe | METHOD_INVOCATION | return userAuthenticationManager.connect(endUser, false).toMaybe();
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidGrantException("No identity_provider provided"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException("No identity_provider provided"))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).map((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
}).switchIfEmpty(Maybe.error(new InvalidGrantException("Unknown user: " + endUser.getId())));
1 | Maybe | map | METHOD_INVOCATION | identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).map((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
}).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).map
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.get(extensionGrant.getIdentityProvider()).flatMap((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).map((idpUser)->{
    User user = new User();
    user.setId(idpUser.getId());
    user.setUsername(endUser.getUsername());
    Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
    if (user.getLoggedAt() != null) {
        extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
    }
    extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
    user.setAdditionalInformation(extraInformation);
    user.setCreatedAt(idpUser.getCreatedAt());
    user.setUpdatedAt(idpUser.getUpdatedAt());
    user.setRoles(idpUser.getRoles());
    return user;
}).switchIfEmpty(Maybe.error(new InvalidGrantException("Unknown user: " + endUser.getId())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException("Unknown user: " + endUser.getId()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(user);
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidGrantException(ex.getMessage()));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidGrantException(ex.getMessage()))
1 | Completable | subscribe | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(refreshTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Refresh tokens indexation completed"), (error)->logger.error("Unexpected error while indexing refresh tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(refreshTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map(ScopeApproval::getScope).collect(HashSet::new, Set::add);
1 | Flowable | map | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map(ScopeApproval::getScope).collect
1 | Flowable | filter | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId()).filter((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
}).map
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return scopeService.getAll().map((scopes)->{
    List<Scope> requestedScopes = new ArrayList<>();
    for (String requestScope : consent) {
        Scope requestedScope = scopes.stream().filter((scope)->scope.getKey().equalsIgnoreCase(requestScope)).findAny().orElse(new Scope(requestScope));
        requestedScopes.add(requestedScope);
    }
    return requestedScopes;
});
1 | Single | subscribe | METHOD_INVOCATION | userConsentService.checkConsent(client, user).subscribe((result)->handler.handle(Future.succeededFuture(result)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | parService.registerParameters(request, client).subscribe((response)->{
    context.response().setStatusCode(HttpStatusCode.CREATED_201).putHeader(io.gravitee.common.http.HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(io.gravitee.common.http.HttpHeaders.CACHE_CONTROL, "no-store").putHeader(io.gravitee.common.http.HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
}, context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return Single.fromCallable(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user)).flatMap((executionContext1)->{
    IDToken idToken = createIDTokenJWT(oAuth2Request, client, user, executionContext);
    return certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->{
        if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
            oAuth2Request.getContext().forEach((claimName,claimValue)->{
                if (claimValue != null) {
                    CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                    String digestAlgorithm = defaultDigestAlgorithm;
                    if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                        digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                    }
                    idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
                }
            });
        }
        return jwtService.encode(idToken, certificateProvider);
    }).flatMap((signedIdToken)->{
        if (client.getIdTokenEncryptedResponseAlg() != null) {
            return jweService.encryptIdToken(signedIdToken, client);
        }
        return Single.just(signedIdToken);
    });
});
1 | Single | fromCallable | METHOD_INVOCATION | Single.fromCallable(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user)).flatMap
1 | Single | METHOD_INVOCATION | Single.fromCallable(()->executionContext != null ? executionContext : createExecution(oAuth2Request, client, user))
1 | Single | flatMap | METHOD_INVOCATION | return certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return jwtService.encode(idToken, certificateProvider);
}).flatMap((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return jweService.encryptIdToken(signedIdToken, client);
    }
    return Single.just(signedIdToken);
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return jwtService.encode(idToken, certificateProvider);
}).flatMap
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider()).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg()).switchIfEmpty(certificateManager.get(client.getCertificate())).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(signedIdToken);
1 | Single | METHOD_INVOCATION | Single.just(signedIdToken)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return jwtService.decodeAndVerify(idToken, client).flatMap((jwt)->{
    return userService.findById(jwt.getSub()).switchIfEmpty(Single.error(new UserNotFoundException(jwt.getSub()))).map((user)->{
        if (!user.getReferenceId().equals(domain.getId())) {
            throw new UserNotFoundException(jwt.getSub());
        }
        return user;
    });
});
1 | Single | map | METHOD_INVOCATION | return userService.findById(jwt.getSub()).switchIfEmpty(Single.error(new UserNotFoundException(jwt.getSub()))).map((user)->{
    if (!user.getReferenceId().equals(domain.getId())) {
        throw new UserNotFoundException(jwt.getSub());
    }
    return user;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(jwt.getSub()).switchIfEmpty(Single.error(new UserNotFoundException(jwt.getSub()))).map
1 | Single | error | METHOD_INVOCATION | userService.findById(jwt.getSub()).switchIfEmpty(Single.error(new UserNotFoundException(jwt.getSub())))
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(jwt.getSub()))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return applicationService.findById(id).map((application)->{
    Client client = application.toClient();
    if (client.getAuthorizedGrantTypes() == null) {
        client.setAuthorizedGrantTypes(Collections.emptyList());
    }
    return client;
});
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No domain set on client"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No domain set on client"))
1 | Single | map | METHOD_INVOCATION | return applicationService.create(convert(client)).map(Application::toClient);
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No domain set on client"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No domain set on client"))
1 | Single | map | METHOD_INVOCATION | return applicationService.update(convert(client)).map(Application::toClient);
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return applicationService.renewClientSecret(domain, id, principal).map(Application::toClient);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | this.getClient(context).map(DynamicClientRegistrationResponse::fromClient).map((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
}).subscribe((result)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(result)), context::fail);
1 | Maybe | map | METHOD_INVOCATION | this.getClient(context).map(DynamicClientRegistrationResponse::fromClient).map((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
}).subscribe
1 | Maybe | map | METHOD_INVOCATION | this.getClient(context).map(DynamicClientRegistrationResponse::fromClient).map
1 | Single | subscribe | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((client)->this.extractRequest(context).flatMap((request)->dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Single | flatMap | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((client)->this.extractRequest(context).flatMap((request)->dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | map | METHOD_INVOCATION | (client)->this.extractRequest(context).flatMap((request)->dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Single | subscribe | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((client)->this.extractRequest(context).flatMap((request)->dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Single | flatMap | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((client)->this.extractRequest(context).flatMap((request)->dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | map | METHOD_INVOCATION | (client)->this.extractRequest(context).flatMap((request)->dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred)
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap((request)->dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Single | subscribe | METHOD_INVOCATION | this.getClient(context).flatMapSingle(dcrService::delete).map(this.clientSyncService::removeDynamicClientRegistred).subscribe((client)->context.response().setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | map | METHOD_INVOCATION | this.getClient(context).flatMapSingle(dcrService::delete).map(this.clientSyncService::removeDynamicClientRegistred).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | this.getClient(context).flatMapSingle(dcrService::delete).map
1 | Single | subscribe | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((toRenew)->dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Single | map | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((toRenew)->dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map(clientSyncService::addDynamicClientRegistred).subscribe
1 | Single | flatMap | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap((toRenew)->dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context))).map
1 | Maybe | flatMapSingle | METHOD_INVOCATION | this.getClient(context).flatMapSingle(Single::just).flatMap
1 | Single | METHOD_REFERENCE | Single::just
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("client not found"))).map(Client::clone);
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("client not found"))).map
1 | Maybe | error | METHOD_INVOCATION | this.clientSyncService.findByClientId(clientId).switchIfEmpty(Maybe.error(new ResourceNotFoundException("client not found")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourceNotFoundException("client not found"))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | clientAssertionService.assertClient(clientAssertionType, clientAssertion, basePath).flatMap((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return Maybe.error(new InvalidClientException("client_id parameter does not match with assertion"));
    }
    return Maybe.just(client1);
}).subscribe((client1)->handler.handle(Future.succeededFuture(client1)), (throwable)->{
    if (throwable instanceof InvalidClientException) {
        logger.debug("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(throwable));
    } else {
        logger.error("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: Failed to authenticate client with assertion method", throwable)));
    }
}, ()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE))));
1 | Maybe | flatMap | METHOD_INVOCATION | clientAssertionService.assertClient(clientAssertionType, clientAssertion, basePath).flatMap((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return Maybe.error(new InvalidClientException("client_id parameter does not match with assertion"));
    }
    return Maybe.just(client1);
}).subscribe
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new InvalidClientException("client_id parameter does not match with assertion"));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("client_id parameter does not match with assertion"))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(client1);
1 | Maybe | METHOD_INVOCATION | Maybe.just(client1)
1 | Observable | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.validateClientPatchRequest(request).map((req)->req.patch(toPatch)).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::update);
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientPatchRequest(request).map((req)->req.patch(toPatch)).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap
1 | Single | map | METHOD_INVOCATION | this.validateClientPatchRequest(request).map((req)->req.patch(toPatch)).flatMap
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.validateClientRegistrationRequest(request).map((req)->req.patch(toUpdate)).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::update);
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(toUpdate)).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap
1 | Single | map | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(toUpdate)).flatMap
1 | Single | RETURN_TYPE
1 | Completable | toSingleDefault | METHOD_INVOCATION | return this.clientService.delete(toDelete.getId()).toSingleDefault(toDelete);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return clientService.renewClientSecret(domain.getId(), toRenew.getId()).flatMap((client)->applyRegistrationAccessToken(basePath, client)).flatMap(clientService::update);
1 | Single | flatMap | METHOD_INVOCATION | clientService.renewClientSecret(domain.getId(), toRenew.getId()).flatMap((client)->applyRegistrationAccessToken(basePath, client)).flatMap
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap(this::applyDefaultIdentityProvider).flatMap(this::applyDefaultCertificateProvider).flatMap(this::applyAccessTokenValidity).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::create);
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap(this::applyDefaultIdentityProvider).flatMap(this::applyDefaultCertificateProvider).flatMap(this::applyAccessTokenValidity).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap(this::applyDefaultIdentityProvider).flatMap(this::applyDefaultCertificateProvider).flatMap(this::applyAccessTokenValidity).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap(this::applyDefaultIdentityProvider).flatMap(this::applyDefaultCertificateProvider).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap(this::applyDefaultIdentityProvider).flatMap
1 | Single | map | METHOD_INVOCATION | this.validateClientRegistrationRequest(request).map((req)->req.patch(client)).flatMap
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(client);
1 | Single | METHOD_INVOCATION | Single.just(client)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map(request::patch).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::create).flatMap((client)->copyForms(request.getSoftwareId().get(), client)).flatMap((client)->copyEmails(request.getSoftwareId().get(), client));
1 | Single | flatMap | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map(request::patch).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::create).flatMap((client)->copyForms(request.getSoftwareId().get(), client)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map(request::patch).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap(clientService::create).flatMap
1 | Single | flatMap | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map(request::patch).flatMap((app)->this.applyRegistrationAccessToken(basePath, app)).flatMap
1 | Single | map | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map(request::patch).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle(this::sanitizeTemplate).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | clientService.findById(request.getSoftwareId().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get()))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Client behind software_id is not a template"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Client behind software_id is not a template"))
1 | Single | just | METHOD_INVOCATION | return Single.just(template);
1 | Single | METHOD_INVOCATION | Single.just(template)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return formService.copyFromClient(domain.getId(), sourceId, client.getId()).flatMap((irrelevant)->Single.just(client));
1 | Single | just | METHOD_INVOCATION | (irrelevant)->Single.just(client)
1 | Single | METHOD_INVOCATION | Single.just(client)
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return emailTemplateService.copyFromClient(domain.getId(), sourceId, client.getId()).toList().flatMap((irrelevant)->Single.just(client));
1 | Flowable | toList | METHOD_INVOCATION | emailTemplateService.copyFromClient(domain.getId(), sourceId, client.getId()).toList().flatMap
1 | Single | just | METHOD_INVOCATION | (irrelevant)->Single.just(client)
1 | Single | METHOD_INVOCATION | Single.just(client)
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return identityProviderService.findByDomain(client.getDomain()).toList().map((identityProviders)->{
    if (identityProviders != null && !identityProviders.isEmpty()) {
        client.setIdentities(Collections.singleton(identityProviders.get(0).getId()));
    }
    return client;
});
1 | Flowable | toList | METHOD_INVOCATION | identityProviderService.findByDomain(client.getDomain()).toList().map
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return certificateService.findByDomain(client.getDomain()).toList().map((certificates)->{
    if (certificates != null && !certificates.isEmpty()) {
        client.setCertificate(certificates.get(0).getId());
    }
    return client;
});
1 | Flowable | toList | METHOD_INVOCATION | certificateService.findByDomain(client.getDomain()).toList().map
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return jwtService.encode(jwt, client).map((token)->{
    client.setRegistrationAccessToken(token);
    client.setRegistrationClientUri(openIDProviderMetadata.getRegistrationEndpoint() + "/" + client.getClientId());
    return client;
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException())
1 | Single | flatMap | METHOD_INVOCATION | return this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap(this::validateAuthorizationSigningAlgorithm).flatMap(this::validateAuthorizationEncryptionAlgorithm).flatMap(this::validateRequestObjectSigningAlgorithm).flatMap(this::validateRequestObjectEncryptionAlgorithm).flatMap(this::enforceWithSoftwareStatement);
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap(this::validateAuthorizationSigningAlgorithm).flatMap(this::validateAuthorizationEncryptionAlgorithm).flatMap(this::validateRequestObjectSigningAlgorithm).flatMap(this::validateRequestObjectEncryptionAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap(this::validateAuthorizationSigningAlgorithm).flatMap(this::validateAuthorizationEncryptionAlgorithm).flatMap(this::validateRequestObjectSigningAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap(this::validateAuthorizationSigningAlgorithm).flatMap(this::validateAuthorizationEncryptionAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap(this::validateAuthorizationSigningAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap(this::validateSelfSignedClientAuth).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap(this::validateTlsClientAuth).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap(this::validateIdTokenEncryptionAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap(this::validateIdTokenSigningAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap(this::validateUserinfoEncryptionAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap(this::validateUserinfoSigningAlgorithm).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap(this::validateJKWs).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap(this::validateSectorIdentifierUri).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap(this::validateRequestUri).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap(this::validateSubjectType).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap(this::validateResponseType).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap(this::validateGrantType).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.validateRedirectUri(request, isPatch).flatMap(this::validateScopes).flatMap
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("software_statement is required"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("software_statement is required"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("No jwks_uri for OpenBanking Directory, unable to validate software_statement"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("No jwks_uri for OpenBanking Directory, unable to validate software_statement"))
1 | Single | map | METHOD_INVOCATION | return jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter((jwk)->jwsService.isValidSignature(signedJWT, jwk)).switchIfEmpty(Single.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map((__)->{
    LOGGER.debug("software_statement is valid, check claims regarding the registration request information");
    JSONObject softwareStatement = signedJWT.getPayload().toJSONObject();
    final Number iat = softwareStatement.getAsNumber("iat");
    if (iat == null || (Instant.now().getEpochSecond() - (iat.longValue())) > FIVE_MINUTES_IN_SEC) {
        throw new InvalidClientMetadataException("software_statement older than 5 minutes");
    }
    if (request.getJwks() != null && !request.getJwks().isEmpty()) {
        throw new InvalidClientMetadataException("jwks is forbidden, prefer jwks_uri");
    }
    if (request.getJwksUri() == null || request.getJwksUri().isEmpty()) {
        throw new InvalidClientMetadataException("jwks_uri is required");
    }
    if (!request.getJwksUri().get().equals(softwareStatement.getAsString("software_jwks_uri"))) {
        throw new InvalidClientMetadataException("jwks_uri doesn\'t match the software_jwks_uri");
    }
    final Object software_redirect_uris = softwareStatement.get("software_redirect_uris");
    if (software_redirect_uris != null) {
        if (request.getRedirectUris() == null || request.getRedirectUris().isEmpty()) {
            throw new InvalidClientMetadataException("redirect_uris are missing");
        }
        final List<String> redirectUris = request.getRedirectUris().get();
        if (software_redirect_uris instanceof JSONArray) {
            redirectUris.forEach((uri)->{
                if (!((JSONArray)software_redirect_uris).contains(uri)) {
                    throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
                }
            });
        } else if (software_redirect_uris instanceof String && (redirectUris.size() > 1 || !software_redirect_uris.equals(redirectUris.get(0)))) {
            throw new InvalidClientMetadataException("redirect_uris contains unknown uri from software_statement");
        }
    }
    if (request.getTokenEndpointAuthMethod() != null && !request.getTokenEndpointAuthMethod().isEmpty()) {
        if (!(ClientAuthenticationMethod.SELF_SIGNED_TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equals(request.getTokenEndpointAuthMethod().get()))) {
            throw new InvalidClientMetadataException("invalid token_endpoint_auth_method");
        }
        if (ClientAuthenticationMethod.TLS_CLIENT_AUTH.equals(request.getTokenEndpointAuthMethod().get()) && (request.getTlsClientAuthSubjectDn() == null || request.getTlsClientAuthSubjectDn().isEmpty())) {
            throw new InvalidClientMetadataException("tls_client_auth_subject_dn is required with tls_client_auth as client authentication method");
        }
    }
    return request;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter((jwk)->jwsService.isValidSignature(signedJWT, jwk)).switchIfEmpty(Single.error(new InvalidClientMetadataException("Invalid signature for software_statement"))).map
1 | Single | filter | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter((jwk)->jwsService.isValidSignature(signedJWT, jwk)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter
1 | Maybe | flatMap | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty
1 | Single | error | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))
1 | Single | error | METHOD_INVOCATION | jwkService.getKeys(directoryJwksUri).flatMap((jwk)->jwkService.getKey(jwk, signedJWT.getHeader().getKeyID())).switchIfEmpty(Single.error(new TechnicalManagementException("Invalid jwks_uri for OpenBanking Directory"))).filter((jwk)->jwsService.isValidSignature(signedJWT, jwk)).switchIfEmpty(Single.error(new InvalidClientMetadataException("Invalid signature for software_statement")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Invalid signature for software_statement"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("software_statement isn\'t signed or doesn\'t use PS256"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("software_statement isn\'t signed or doesn\'t use PS256"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("signature of software_statement is invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("signature of software_statement is invalid"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException());
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException())
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Invalid response type."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Invalid response type."))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Missing or invalid grant type."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Missing or invalid grant type."))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported subject type"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported subject type"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported userinfo signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported userinfo signing algorithm"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_alg value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_alg value"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_enc value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported userinfo_encrypted_response_enc value"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported request object signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported request object signing algorithm"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("request_object_signing_alg shall be PS256"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("request_object_signing_alg shall be PS256"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported request_object_encryption_alg value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported request_object_encryption_alg value"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported request_object_encryption_enc value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported request_object_encryption_enc value"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported id_token signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported id_token signing algorithm"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_alg value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_alg value"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_enc value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported id_token_encrypted_response_enc value"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("request_uris: " + err.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("request_uris: " + err.getMessage()))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("sector_identifier_uri: " + err.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("sector_identifier_uri: " + err.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Scheme must be https for sector_identifier_uri : " + request.getSectorIdentifierUri().get()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Scheme must be https for sector_identifier_uri : " + request.getSectorIdentifierUri().get()))
1 | Single | flatMap | METHOD_INVOCATION | return client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))).flatMapPublisher(Flowable::fromIterable).cast(String.class).collect(HashSet::new, HashSet::add).flatMap((allowedRedirectUris)->Observable.fromIterable(request.getRedirectUris().get()).filter((redirectUri)->!allowedRedirectUris.contains(redirectUri)).collect(ArrayList<String>::new, ArrayList::add).flatMap((missing)->{
    if (!missing.isEmpty()) {
        return Single.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing)));
    } else {
        return Single.just(request);
    }
}));
1 | Flowable | collect | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))).flatMapPublisher(Flowable::fromIterable).cast(String.class).collect(HashSet::new, HashSet::add).flatMap
1 | Flowable | cast | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))).flatMapPublisher(Flowable::fromIterable).cast(String.class).collect
1 | Single | flatMapPublisher | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))).flatMapPublisher(Flowable::fromIterable).cast
1 | Single | onErrorResumeNext | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))).flatMapPublisher
1 | Single | map | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map
1 | Single | error | METHOD_INVOCATION | client.getAbs(uri.toString()).rxSend().map(HttpResponse::bodyAsString).map(JsonArray::new).onErrorResumeNext(Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString())))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))
1 | Flowable | METHOD_REFERENCE | Flowable::fromIterable
1 | Single | flatMap | METHOD_INVOCATION | (allowedRedirectUris)->Observable.fromIterable(request.getRedirectUris().get()).filter((redirectUri)->!allowedRedirectUris.contains(redirectUri)).collect(ArrayList<String>::new, ArrayList::add).flatMap((missing)->{
    if (!missing.isEmpty()) {
        return Single.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing)));
    } else {
        return Single.just(request);
    }
})
1 | Observable | collect | METHOD_INVOCATION | Observable.fromIterable(request.getRedirectUris().get()).filter((redirectUri)->!allowedRedirectUris.contains(redirectUri)).collect(ArrayList<String>::new, ArrayList::add).flatMap
1 | Observable | filter | METHOD_INVOCATION | Observable.fromIterable(request.getRedirectUris().get()).filter((redirectUri)->!allowedRedirectUris.contains(redirectUri)).collect
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(request.getRedirectUris().get()).filter
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(request.getRedirectUris().get())
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing)));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing)))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The jwks_uri and jwks parameters MUST NOT be used together."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The jwks_uri and jwks parameters MUST NOT be used together."))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return jwkService.getKeys(request.getJwksUri().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No JWK found behind jws uri..."))).flatMapSingle((jwkSet)->{
    return Single.just(request);
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | jwkService.getKeys(request.getJwksUri().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No JWK found behind jws uri..."))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | jwkService.getKeys(request.getJwksUri().get()).switchIfEmpty(Maybe.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientMetadataException("No JWK found behind jws uri..."))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported authorization signing algorithm"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported authorization signing algorithm"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg MUST also be provided"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg MUST also be provided"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_alg value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_alg value"))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_enc value"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Unsupported authorization_encrypted_response_enc value"))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("Missing TLS parameter for tls_client_auth."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The tls_client_auth must use exactly one of the TLS parameters."))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidClientMetadataException("The self_signed_tls_client_auth requires at least a jwks or a valid jwks_uri."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidClientMetadataException("The self_signed_tls_client_auth requires at least a jwks or a valid jwks_uri."))
1 | Single | just | METHOD_INVOCATION | return Single.just(request);
1 | Single | METHOD_INVOCATION | Single.just(request)
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | this.extractRequest(context).flatMap(this::bodyValidation).map(this::toPermissionRequest).flatMap((permissionRequests)->permissionTicketService.create(permissionRequests, domain.getId(), client.getId())).map(PermissionTicketResponse::from).subscribe((permission)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(permission)), context::fail);
1 | Single | map | METHOD_INVOCATION | this.extractRequest(context).flatMap(this::bodyValidation).map(this::toPermissionRequest).flatMap((permissionRequests)->permissionTicketService.create(permissionRequests, domain.getId(), client.getId())).map(PermissionTicketResponse::from).subscribe
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap(this::bodyValidation).map(this::toPermissionRequest).flatMap((permissionRequests)->permissionTicketService.create(permissionRequests, domain.getId(), client.getId())).map
1 | Single | map | METHOD_INVOCATION | this.extractRequest(context).flatMap(this::bodyValidation).map(this::toPermissionRequest).flatMap
1 | Single | flatMap | METHOD_INVOCATION | this.extractRequest(context).flatMap(this::bodyValidation).map
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("Unable to parse body permission request"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("Unable to parse body permission request"))
1 | Single | just | METHOD_INVOCATION | return Single.just(result);
1 | Single | METHOD_INVOCATION | Single.just(result)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRequestException("resource_id and resource_scopes are mandatory."));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRequestException("resource_id and resource_scopes are mandatory."))
1 | Single | just | METHOD_INVOCATION | return Single.just(toValidate);
1 | Single | METHOD_INVOCATION | Single.just(toValidate)
1 | Single | subscribe | METHOD_INVOCATION | userConsentService.saveConsent(client, approvals, getAuthenticatedUser(request, endUser)).subscribe((approvals1)->handler.handle(Future.succeededFuture(approvals1)), (error)->handler.handle(Future.failedFuture(error)));
1 | Flowable | subscribe | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter((accessTokens)->accessTokens != null && !accessTokens.isEmpty()).subscribe(new AccessTokenBulkProcessor(accessTokenRepository));
1 | Flowable | filter | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter((accessTokens)->accessTokens != null && !accessTokens.isEmpty()).subscribe
1 | Flowable | buffer | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn
1 | Flowable | subscribe | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty()).subscribe(new RefreshTokenBulkProcessor(refreshTokenRepository));
1 | Flowable | filter | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty()).subscribe
1 | Flowable | buffer | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions).filter
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RQP_ID_TOKEN, client)).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RPT_OLD_TOKEN, client)).thenReturn(Single.just(rpt))
1 | Single | METHOD_INVOCATION | Single.just(rpt)
1 | Maybe | just | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(permissionTicketService.remove(TICKET_ID)).thenReturn(Single.just(new PermissionTicket().setId(TICKET_ID).setPermissionRequest(permissions)))
1 | Single | METHOD_INVOCATION | Single.just(new PermissionTicket().setId(TICKET_ID).setPermissionRequest(permissions))
1 | Flowable | just | METHOD_INVOCATION | when(resourceService.findByResources(Arrays.asList(RS_ONE, RS_TWO))).thenReturn(Flowable.just(new Resource().setId(RS_ONE).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeC")), new Resource().setId(RS_TWO).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeD"))))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId(RS_ONE).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeC")), new Resource().setId(RS_TWO).setResourceScopes(Arrays.asList("scopeA", "scopeB", "scopeD")))
1 | Single | just | METHOD_INVOCATION | when(tokenService.create(oauth2RequestCaptor.capture(), eq(client), any())).thenReturn(Single.just(new AccessToken("success")))
1 | Single | METHOD_INVOCATION | Single.just(new AccessToken("success"))
1 | Flowable | empty | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Maybe | error | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Maybe | empty | METHOD_INVOCATION | when(userAuthenticationManager.loadPreAuthenticatedUser(USER_ID, tokenRequest)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | error | METHOD_INVOCATION | when(permissionTicketService.remove(TICKET_ID)).thenReturn(Single.error(InvalidPermissionTicketException::new))
1 | Single | METHOD_INVOCATION | Single.error(InvalidPermissionTicketException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | error | METHOD_INVOCATION | when(jwtService.decodeAndVerify(RPT_OLD_TOKEN, client)).thenReturn(Single.error(InvalidTokenException::new))
1 | Single | METHOD_INVOCATION | Single.error(InvalidTokenException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Flowable | just | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(Flowable.just(policy))
1 | Flowable | METHOD_INVOCATION | Flowable.just(policy)
1 | Completable | error | METHOD_INVOCATION | when(rulesEngine.fire(any(), any())).thenReturn(Completable.error(new PolicyChainException("Policy requirements have failed")))
1 | Completable | METHOD_INVOCATION | Completable.error(new PolicyChainException("Policy requirements have failed"))
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Flowable | just | METHOD_INVOCATION | when(resourceService.findAccessPoliciesByResources(anyList())).thenReturn(Flowable.just(policy))
1 | Flowable | METHOD_INVOCATION | Flowable.just(policy)
1 | Completable | complete | METHOD_INVOCATION | when(rulesEngine.fire(any(), any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = umaTokenGranter.resolveRequest(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.getAll().test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(Maybe.just(accessToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessToken)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Maybe | empty | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(tokenService.getRefreshToken("token", client)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Maybe | just | METHOD_INVOCATION | when(tokenService.getAccessToken("token", client)).thenReturn(Maybe.just(accessToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(accessToken)
1 | Completable | complete | METHOD_INVOCATION | when(tokenService.deleteAccessToken("token")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Maybe | just | METHOD_INVOCATION | when(tokenService.getRefreshToken("token", client)).thenReturn(Maybe.just(refreshToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(refreshToken)
1 | Completable | complete | METHOD_INVOCATION | when(tokenService.deleteRefreshToken("token")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(authorizationCodeRepository.create(any())).thenReturn(Single.just(new AuthorizationCode()))
1 | Single | METHOD_INVOCATION | Single.just(new AuthorizationCode())
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.create(authorizationRequest, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(authorizationCode.getCode())).thenReturn(Maybe.just(authorizationCode))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authorizationCode)
1 | Maybe | just | METHOD_INVOCATION | when(authorizationCodeRepository.delete(authorizationCode.getId())).thenReturn(Maybe.just(authorizationCode))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authorizationCode)
1 | Observable | empty | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(authorizationCode.getCode())).thenReturn(Observable.empty())
1 | Observable | METHOD_INVOCATION | Observable.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Maybe | empty | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Observable | fromIterable | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(anyString())).thenReturn(Observable.fromIterable(tokens))
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(tokens)
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Maybe | empty | METHOD_INVOCATION | when(authorizationCodeRepository.findByCode(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Observable | fromIterable | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(anyString())).thenReturn(Observable.fromIterable(tokens))
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(tokens)
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | just | METHOD_INVOCATION | when(repository.create(any())).thenReturn(Single.just(par))
1 | Single | METHOD_INVOCATION | Single.just(par)
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | error | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(Single.error(new ParseException("parse error", 1)))
1 | Single | METHOD_INVOCATION | Single.error(new ParseException("parse error", 1))
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | just | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(Single.just(parse))
1 | Single | METHOD_INVOCATION | Single.just(parse)
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI("invalideuri", createClient(), new OpenIDProviderMetadata()).test()
1 | Maybe | empty | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(Maybe.just(par))
1 | Maybe | METHOD_INVOCATION | Maybe.just(par)
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(Maybe.just(par))
1 | Maybe | METHOD_INVOCATION | Maybe.just(par)
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(Maybe.just(par))
1 | Maybe | METHOD_INVOCATION | Maybe.just(par)
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Maybe | just | METHOD_INVOCATION | when(repository.findById(ID)).thenReturn(Maybe.just(par))
1 | Maybe | METHOD_INVOCATION | Maybe.just(par)
1 | Single | just | METHOD_INVOCATION | when(jweService.decrypt(any(), anyBoolean())).thenReturn(Single.just(signedJwt))
1 | Single | METHOD_INVOCATION | Single.just(signedJwt)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(any(Client.class))).thenReturn(Maybe.just(mock(JWKSet.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(JWKSet.class))
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(mock(JWK.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(JWK.class))
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, client, new OpenIDProviderMetadata()).test()
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient("", null, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient("unsupported", null, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, "", null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(jwkSet))
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwkSet)
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenEnhancer.enhance(accessToken, oAuth2Request, client, null, null).test()
1 | Single | just | METHOD_INVOCATION | when(idTokenService.create(oAuth2Request, client, null, null)).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenEnhancer.enhance(accessToken, oAuth2Request, client, null, null).test()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("my-test-client_id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId("unknown")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(dcrService.delete(any())).thenReturn(Single.just(new Client()))
1 | Single | METHOD_INVOCATION | Single.just(new Client())
1 | Single | just | METHOD_INVOCATION | when(dcrService.renewSecret(any(), any())).thenReturn(Single.just(new Client()))
1 | Single | METHOD_INVOCATION | Single.just(new Client())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | complete | METHOD_INVOCATION | when(parService.deleteRequestUri(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | empty | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(authorizationResponse))
1 | Single | METHOD_INVOCATION | Single.just(authorizationResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(jwtAuthorizationCodeResponse))
1 | Single | METHOD_INVOCATION | Single.just(jwtAuthorizationCodeResponse)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(flow.run(any(), any(), any())).thenReturn(Single.just(jwtAuthorizationCodeResponse))
1 | Single | METHOD_INVOCATION | Single.just(jwtAuthorizationCodeResponse)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encodeAuthorization(any(JWT.class), eq(client))).thenReturn(Single.just("my-jwt"))
1 | Single | METHOD_INVOCATION | Single.just("my-jwt")
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just((String)invocation.getArguments()[0]);
1 | Single | METHOD_INVOCATION | Single.just((String)invocation.getArguments()[0])
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId("client-id")).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = rulesEngine.fire(Collections.emptyList(), executionContext).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(userService.enhance(user)).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encodeUserinfo(any(), any())).thenReturn(Single.just("signedJwtBearer"))
1 | Single | METHOD_INVOCATION | Single.just("signedJwtBearer")
1 | Single | just | METHOD_INVOCATION | when(jweService.encryptUserinfo("signedJwtBearer", client)).thenReturn(Single.just("signedJwtBearer"))
1 | Single | METHOD_INVOCATION | Single.just("signedJwtBearer")
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | error | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(Maybe.error(new InvalidClientException("Unknown or unsupported assertion_type")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new InvalidClientException("Unknown or unsupported assertion_type"))
1 | Maybe | just | METHOD_INVOCATION | when(clientAssertionService.assertClient(any(), any(), any())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(certificateService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(JWT.class), any(Client.class))).thenReturn(Single.just("jwt"))
1 | Single | METHOD_INVOCATION | Single.just("jwt")
1 | Single | just | METHOD_INVOCATION | return Single.just(res);
1 | Single | METHOD_INVOCATION | Single.just(res)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Completable | complete | METHOD_INVOCATION | when(clientService.delete(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | return Single.just(toRenew);
1 | Single | METHOD_INVOCATION | Single.just(toRenew)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(null, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findByDomain(DOMAIN_ID)).thenReturn(Flowable.just(identityProvider))
1 | Flowable | METHOD_INVOCATION | Flowable.just(identityProvider)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Flowable | just | METHOD_INVOCATION | when(certificateService.findByDomain(any())).thenReturn(Flowable.just(certificate))
1 | Flowable | METHOD_INVOCATION | Flowable.just(certificate)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | just | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(Single.just(httpResponse))
1 | Single | METHOD_INVOCATION | Single.just(httpResponse)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | just | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(Single.just(httpResponse))
1 | Single | METHOD_INVOCATION | Single.just(httpResponse)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | just | METHOD_INVOCATION | when(httpRequest.rxSend()).thenReturn(Single.just(httpResponse))
1 | Single | METHOD_INVOCATION | Single.just(httpResponse)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | empty | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.patch(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.patch(new Client(), request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.update(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.update(new Client(), request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.delete(new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.renewSecret(toRenew, BASE_PATH).test()
1 | Maybe | empty | METHOD_INVOCATION | when(clientService.findById(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findById("123")).thenReturn(Maybe.just(template))
1 | Maybe | METHOD_INVOCATION | Maybe.just(template)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | just | METHOD_INVOCATION | when(formService.copyFromClient(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(Single.just(Collections.emptyList()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Flowable | empty | METHOD_INVOCATION | when(emailTemplateService.copyFromClient(DOMAIN_ID, ID_SOURCE, ID_TARGET)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(clientService.findById("123")).thenReturn(Maybe.just(template))
1 | Maybe | METHOD_INVOCATION | Maybe.just(template)
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(anyString())).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKey(any(), any())).thenReturn(Maybe.just(new io.gravitee.am.model.jose.RSAKey()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.jose.RSAKey())
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | when(dcrService.create(any(), any())).thenReturn(Single.error(new Exception()))
1 | Single | METHOD_INVOCATION | Single.error(new Exception())
1 | Single | just | METHOD_INVOCATION | when(dcrService.create(any(), any())).thenReturn(Single.just(new Client()))
1 | Single | METHOD_INVOCATION | Single.just(new Client())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(Maybe.just(new Application()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Application())
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientService.findById("my-client").test()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientService.findById("my-client").test()
1 | Maybe | error | METHOD_INVOCATION | when(applicationService.findById("my-client")).thenReturn(Maybe.error(TechnicalManagementException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalManagementException::new)
1 | Maybe | subscribe | METHOD_INVOCATION | clientService.findById("my-client").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(new Client()).test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.create(any())).thenReturn(Single.error(new InvalidRedirectUriException()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(toCreate).test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.create(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(toCreate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(new Client()).test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(Single.error(new InvalidRedirectUriException()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRedirectUriException())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.update(any(Application.class))).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Completable | complete | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | complete | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | error | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(Completable.error(TechnicalManagementException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalManagementException::new)
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | error | METHOD_INVOCATION | when(applicationService.delete("my-client", null)).thenReturn(Completable.error(new ClientNotFoundException("my-client")))
1 | Completable | METHOD_INVOCATION | Completable.error(new ClientNotFoundException("my-client"))
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Single | just | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(Single.error(new ClientNotFoundException("my-client")))
1 | Single | METHOD_INVOCATION | Single.error(new ClientNotFoundException("my-client"))
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | error | METHOD_INVOCATION | when(applicationService.renewClientSecret(DOMAIN, "my-client", null)).thenReturn(Single.error(TechnicalManagementException::new))
1 | Single | METHOD_INVOCATION | Single.error(TechnicalManagementException::new)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jwkService.getKeys()).thenReturn(Single.just(jwkSet))
1 | Single | METHOD_INVOCATION | Single.just(jwkSet)
1 | Single | error | METHOD_INVOCATION | when(jwkService.getKeys()).thenReturn(Single.error(new RuntimeException()))
1 | Single | METHOD_INVOCATION | Single.error(new RuntimeException())
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(permissionTicketService.create(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(Single.just(success))
1 | Single | METHOD_INVOCATION | Single.just(success)
1 | Single | just | METHOD_INVOCATION | when(permissionTicketService.create(anyList(), eq(DOMAIN_ID), eq(CLIENT_ID))).thenReturn(Single.just(success))
1 | Single | METHOD_INVOCATION | Single.just(success)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(tokenService.create(any(), any(), any())).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | just | METHOD_INVOCATION | when(tokenService.refresh(refreshToken, tokenRequest, client)).thenReturn(Single.just(new RefreshToken(refreshToken)))
1 | Single | METHOD_INVOCATION | Single.just(new RefreshToken(refreshToken))
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = granter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | granter.grant(tokenRequest, client).test().assertError
1 | Single | error | METHOD_INVOCATION | when(tokenService.refresh(refreshToken, tokenRequest, client)).thenReturn(Single.error(new InvalidGrantException()))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGrantException())
1 | Single | test | METHOD_INVOCATION | granter.grant(tokenRequest, client).test().assertError
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jweService.decrypt(request, false)).thenReturn(Single.just(plainJWT))
1 | Single | METHOD_INVOCATION | Single.just(plainJWT)
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = requestObjectService.readRequestObject(request, client, false).test()
1 | Single | just | METHOD_INVOCATION | when(jweService.decrypt(request, false)).thenReturn(Single.just(signedJWT))
1 | Single | METHOD_INVOCATION | Single.just(signedJWT)
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = requestObjectService.readRequestObject(request, client, false).test()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.just(idTokenCert))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idTokenCert)
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(clientCert))
1 | Maybe | METHOD_INVOCATION | Maybe.just(clientCert)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(clientCert))
1 | Maybe | METHOD_INVOCATION | Maybe.just(clientCert)
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null, executionContext).test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just(idTokenPayload))
1 | Single | METHOD_INVOCATION | Single.just(idTokenPayload)
1 | Single | just | METHOD_INVOCATION | when(jweService.encryptIdToken(anyString(), any())).thenReturn(Single.just("encryptedToken"))
1 | Single | METHOD_INVOCATION | Single.just("encryptedToken")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.findByAlgorithm(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(certificateManager.get(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Maybe | just | METHOD_INVOCATION | when(certificateManager.get(anyString())).thenReturn(Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.gateway.certificate.CertificateProvider(certificateProvider))
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(io.gravitee.am.gateway.certificate.CertificateProvider.class))).thenReturn(Single.just("test"))
1 | Single | METHOD_INVOCATION | Single.just("test")
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userConsentService.checkConsent(any(), any())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(userConsentService.checkConsent(any(), any())).thenReturn(Single.just(Collections.singleton(autoApproveScope)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(autoApproveScope))
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(io.gravitee.am.model.oidc.Client.class))).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | error | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(io.gravitee.am.model.oidc.Client.class))).thenReturn(Single.error(new Exception()))
1 | Single | METHOD_INVOCATION | Single.error(new Exception())
1 | Single | error | METHOD_INVOCATION | when(tokenGranter.grant(any(TokenRequest.class), any(io.gravitee.am.model.oidc.Client.class))).thenReturn(Single.error(UmaException.requestDeniedBuilder().build()))
1 | Single | METHOD_INVOCATION | Single.error(UmaException.requestDeniedBuilder().build())
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo(jwt, new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo(JWT, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken(jwt, new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken(JWT, client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | empty | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(jwk))
1 | Maybe | METHOD_INVOCATION | Maybe.just(jwk)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(any(), any(Client.class))).thenReturn(Single.just(""))
1 | Single | METHOD_INVOCATION | Single.just("")
1 | Single | just | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(Single.just(new AccessToken("token-id")))
1 | Single | METHOD_INVOCATION | Single.just(new AccessToken("token-id"))
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(Client.class))).thenReturn(Single.just(""))
1 | Single | METHOD_INVOCATION | Single.just("")
1 | Single | just | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(Single.just(new AccessToken("token-id")))
1 | Single | METHOD_INVOCATION | Single.just(new AccessToken("token-id"))
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.encode(jwtCaptor.capture(), any(Client.class))).thenReturn(Single.just(""))
1 | Single | METHOD_INVOCATION | Single.just("")
1 | Single | just | METHOD_INVOCATION | when(tokenEnhancer.enhance(any(), any(), any(), any(), any())).thenReturn(Single.just(new AccessToken("token-id")))
1 | Single | METHOD_INVOCATION | Single.just(new AccessToken("token-id"))
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(Maybe.just(refreshToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(refreshToken)
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(Maybe.just(refreshToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(refreshToken)
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(eq("encoded"), any(Client.class))).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | empty | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh("encoded", tokenRequest, client).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(eq(refreshToken.getToken()), any(Client.class))).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(Maybe.just(refreshToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(refreshToken)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | just | METHOD_INVOCATION | when(jwtService.decodeAndVerify(any(), any(Client.class))).thenReturn(Single.just(jwt))
1 | Single | METHOD_INVOCATION | Single.just(jwt)
1 | Maybe | just | METHOD_INVOCATION | when(refreshTokenRepository.findByToken(any())).thenReturn(Maybe.just(refreshToken))
1 | Maybe | METHOD_INVOCATION | Maybe.just(refreshToken)
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | error | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(anyString(), anyString(), anyString())).thenReturn(Flowable.error(new RuntimeException()))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new RuntimeException())
1 | Flowable | empty | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).thenReturn(Flowable.just(new Resource().setId(RESOURCE_ID)))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Resource().setId(RESOURCE_ID))
1 | Single | error | METHOD_INVOCATION | when(service.create(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(Single.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new ResourceNotFoundException(RESOURCE_ID))
1 | Single | just | METHOD_INVOCATION | when(service.create(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID))).thenReturn(Single.just(new Resource().setId(RESOURCE_ID)))
1 | Single | METHOD_INVOCATION | Single.just(new Resource().setId(RESOURCE_ID))
1 | Maybe | empty | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(service.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Maybe.just(new Resource().setId(RESOURCE_ID)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Resource().setId(RESOURCE_ID))
1 | Single | error | METHOD_INVOCATION | when(service.update(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(Single.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new ResourceNotFoundException(RESOURCE_ID))
1 | Single | just | METHOD_INVOCATION | when(service.update(any(), eq(DOMAIN_ID), eq(CLIENT_ID), eq(USER_ID), eq(RESOURCE_ID))).thenReturn(Single.just(new Resource()))
1 | Single | METHOD_INVOCATION | Single.just(new Resource())
1 | Completable | error | METHOD_INVOCATION | when(service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Completable.error(new ResourceNotFoundException(RESOURCE_ID)))
1 | Completable | METHOD_INVOCATION | Completable.error(new ResourceNotFoundException(RESOURCE_ID))
1 | Completable | complete | METHOD_INVOCATION | when(service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Completable | error | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(Completable.error(new InvalidGrantException()))
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidGrantException())
1 | Completable | complete | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | when(revocationTokenService.revoke(any(), any())).thenReturn(Completable.error(new RuntimeException()))
1 | Completable | METHOD_INVOCATION | Completable.error(new RuntimeException())
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientAssertionService.assertClient(eq("type"), eq("myToken"), anyString())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | just | METHOD_INVOCATION | when(clientSyncService.findByClientId(clientId)).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.getKeys(client)).thenReturn(Maybe.just(new JWKSet()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new JWKSet())
1 | Maybe | just | METHOD_INVOCATION | when(jwkService.filter(any(), any())).thenReturn(Maybe.just(key))
1 | Maybe | METHOD_INVOCATION | Maybe.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(tokenService.introspect("token")).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById("user")).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | just | METHOD_INVOCATION | when(tokenService.introspect("token")).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | just | METHOD_INVOCATION | when(tokenService.introspect(token)).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | just | METHOD_INVOCATION | when(tokenService.introspect(token)).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys("blabla").test()
1 | Single | just | METHOD_INVOCATION | when(request.rxSend()).thenReturn(Single.just(response))
1 | Single | METHOD_INVOCATION | Single.just(response)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Single | just | METHOD_INVOCATION | when(request.rxSend()).thenReturn(Single.just(response))
1 | Single | METHOD_INVOCATION | Single.just(response)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Single | just | METHOD_INVOCATION | when(request.rxSend()).thenReturn(Single.just(response))
1 | Single | METHOD_INVOCATION | Single.just(response)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, "expectedKid").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, "expectedKid").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(new Client()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(client).test()
1 | Single | just | METHOD_INVOCATION | when(request.rxSend()).thenReturn(Single.just(response))
1 | Single | METHOD_INVOCATION | Single.just(response)
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(client).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.RSA_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.parse("none"))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128CBC_HS256)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192CBC_HS384)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256CBC_HS512)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(rsaSet, JWKFilter.RSA_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Flowable | just | METHOD_INVOCATION | when(certificateProvider.keys()).thenReturn(Flowable.just(key))
1 | Flowable | METHOD_INVOCATION | Flowable.just(key)
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Flowable | just | METHOD_INVOCATION | when(certificateProvider.keys()).thenReturn(Flowable.just(key))
1 | Flowable | METHOD_INVOCATION | Flowable.just(key)
1 | Flowable | just | METHOD_INVOCATION | when(certificateProvider2.keys()).thenReturn(Flowable.just(key2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(key2)
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(tokenRequestResolver.resolve(any(), any(), any())).thenReturn(Single.just(tokenRequest))
1 | Single | METHOD_INVOCATION | Single.just(tokenRequest)
1 | Single | just | METHOD_INVOCATION | when(tokenService.create(any(), any(), any())).thenReturn(Single.just(accessToken))
1 | Single | METHOD_INVOCATION | Single.just(accessToken)
1 | Single | just | METHOD_INVOCATION | when(userAuthenticationManager.authenticate(any(Client.class), any(Authentication.class))).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = granter.grant(tokenRequest, client).test()
1 | Single | subscribe | METHOD_INVOCATION | groupService.list(page - 1, size, location(context.request())).subscribe((groups)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(groups)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(group, location(context.request())).subscribe((group1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findAll(ReferenceType.DOMAIN, domain.getId(), page, size).flatMap((groupPage)->{
    if (size <= 0) {
        return Single.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0));
    } else {
        return Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList().map((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()));
    }
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find groups by domain {}", domain, ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | groupRepository.findAll(ReferenceType.DOMAIN, domain.getId(), page, size).flatMap((groupPage)->{
    if (size <= 0) {
        return Single.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0));
    } else {
        return Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList().map((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()));
    }
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0));
1 | Single | METHOD_INVOCATION | Single.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0))
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList().map((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData())
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex))
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByMember(memberId).map((group)->convert(group, null, true)).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a groups using member ", memberId, ex);
    return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex));
});
1 | Flowable | map | METHOD_INVOCATION | groupRepository.findByMember(memberId).map((group)->convert(group, null, true)).onErrorResumeNext
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using member: %s", memberId), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findById(groupId).map((group)->convert(group, baseUrl, false)).flatMap((group)->setMembers(group, baseUrl).toMaybe()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID", groupId, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex));
});
1 | Maybe | flatMap | METHOD_INVOCATION | groupRepository.findById(groupId).map((group)->convert(group, baseUrl, false)).flatMap((group)->setMembers(group, baseUrl).toMaybe()).onErrorResumeNext
1 | Maybe | map | METHOD_INVOCATION | groupRepository.findById(groupId).map((group)->convert(group, baseUrl, false)).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (group)->setMembers(group, baseUrl).toMaybe()
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap((__)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).map((group1)->convert(group1, baseUrl, true)).flatMap((group1)->setMembers(group1, baseUrl)).onErrorResumeNext((ex)->{
    if (ex instanceof SCIMException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to router a group", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to router a group", ex));
    }
});
1 | Single | flatMap | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap((__)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).map((group1)->convert(group1, baseUrl, true)).flatMap((group1)->setMembers(group1, baseUrl)).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap((__)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).map((group1)->convert(group1, baseUrl, true)).flatMap
1 | Single | flatMap | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap((__)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).map
1 | Single | flatMap | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap((__)->setMembers(group, baseUrl)).flatMap
1 | Single | map | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
}).flatMap
1 | Maybe | isEmpty | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).isEmpty().map
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to router a group", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to router a group", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapSingle((existingGroup)->groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
})).map((group1)->convert(group1, baseUrl, false)).flatMap((group1)->setMembers(group1, baseUrl)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof SCIMException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to update a group", ex);
        return Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex));
    }
});
1 | Single | flatMap | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapSingle((existingGroup)->groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
})).map((group1)->convert(group1, baseUrl, false)).flatMap((group1)->setMembers(group1, baseUrl)).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapSingle((existingGroup)->groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
})).map((group1)->convert(group1, baseUrl, false)).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapSingle((existingGroup)->groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
})).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(groupId))
1 | Single | flatMap | METHOD_INVOCATION | (existingGroup)->groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
})
1 | Maybe | flatMapSingle | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle((irrelevant)->setMembers(group, baseUrl)).flatMap
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty(existingGroup).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName()).map((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
}).defaultIfEmpty
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a group", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return get(groupId, baseUrl).switchIfEmpty(Single.error(new GroupNotFoundException(groupId))).flatMap((group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return update(groupId, objectMapper.treeToValue(node, Group.class), baseUrl);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error has occurred when trying to delete group: {}", groupId, ex);
        return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex));
    }
});
1 | Single | flatMap | METHOD_INVOCATION | get(groupId, baseUrl).switchIfEmpty(Single.error(new GroupNotFoundException(groupId))).flatMap((group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return update(groupId, objectMapper.treeToValue(node, Group.class), baseUrl);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | get(groupId, baseUrl).switchIfEmpty(Single.error(new GroupNotFoundException(groupId))).flatMap
1 | Single | error | METHOD_INVOCATION | get(groupId, baseUrl).switchIfEmpty(Single.error(new GroupNotFoundException(groupId)))
1 | Single | METHOD_INVOCATION | Single.error(new GroupNotFoundException(groupId))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapCompletable((user)->groupRepository.delete(groupId)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
        return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex));
    }
});
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapCompletable((user)->groupRepository.delete(groupId)).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | groupRepository.findById(groupId).switchIfEmpty(Maybe.error(new GroupNotFoundException(groupId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(groupId))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return userRepository.findByIdIn(memberIds).map((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
}).toList().map((existingMembers)->{
    group.setMembers(existingMembers);
    return group;
});
1 | Flowable | toList | METHOD_INVOCATION | userRepository.findByIdIn(memberIds).map((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
}).toList().map
1 | Flowable | map | METHOD_INVOCATION | userRepository.findByIdIn(memberIds).map((user)->{
    String display = (user.getDisplayName() != null) ? user.getDisplayName() : (user.getFirstName() != null) ? user.getFirstName() + " " + (user.getLastName() != null ? user.getLastName() : "") : user.getUsername();
    String usersBaseUrl = baseUrl.substring(0, baseUrl.lastIndexOf("/Groups")).concat("/Users");
    Member member = new Member();
    member.setValue(user.getId());
    member.setDisplay(display);
    member.setRef(usersBaseUrl + "/" + user.getId());
    return member;
}).toList
1 | Single | just | METHOD_INVOCATION | return Single.just(group);
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Single | subscribe | METHOD_INVOCATION | userService.list(filter, page - 1, size, location(context.request())).subscribe((users)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(users)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | userService.create(user, location(context.request())).subscribe((user1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | groupService.get(groupId, location(context.request())).subscribe((group)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group)), context::fail, ()->context.fail(new GroupNotFoundException(groupId)));
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(groupId, group, location(context.request())).subscribe((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | groupService.patch(groupId, patchOp, location(context.request())).subscribe((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(groupId).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | userService.get(userId, location(context.request())).subscribe((user)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user)), context::fail, ()->context.fail(new UserNotFoundException(userId)));
1 | Single | subscribe | METHOD_INVOCATION | userService.update(userId, user, location(context.request())).subscribe((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | userService.patch(userId, patchOp, location(context.request())).subscribe((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete(userId).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return findUsers.flatMap((userPage)->{
    if (size <= 0) {
        return Single.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0));
    } else {
        return Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList().map((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()));
    }
}).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users for the security domain {}", domain.getName(), ex);
    return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex));
});
1 | Single | flatMap | METHOD_INVOCATION | findUsers.flatMap((userPage)->{
    if (size <= 0) {
        return Single.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0));
    } else {
        return Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList().map((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()));
    }
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0));
1 | Single | METHOD_INVOCATION | Single.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0))
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList().map((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(userPage.getData())
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findById(userId).map((user1)->convert(user1, baseUrl, false)).flatMap((scimUser)->setGroups(scimUser).toMaybe()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", userId, ex);
    return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex));
});
1 | Maybe | flatMap | METHOD_INVOCATION | userRepository.findById(userId).map((user1)->convert(user1, baseUrl, false)).flatMap((scimUser)->setGroups(scimUser).toMaybe()).onErrorResumeNext
1 | Maybe | map | METHOD_INVOCATION | userRepository.findById(userId).map((user1)->convert(user1, baseUrl, false)).flatMap
1 | Single | toMaybe | METHOD_INVOCATION | (scimUser)->setGroups(scimUser).toMaybe()
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidValueException("Field [password] is invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Field [password] is invalid"))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return userValidator.validate(userModel).andThen(userProvider.create(convert(userModel)).flatMap((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
        }
        return Single.error(ex);
    }));
}).map((user1)->convert(user1, baseUrl, true)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractNotFoundException) {
        return Single.error(new InvalidValueException(ex.getMessage()));
    }
    if (ex instanceof SCIMException || ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
});
1 | Single | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return userValidator.validate(userModel).andThen(userProvider.create(convert(userModel)).flatMap((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
        }
        return Single.error(ex);
    }));
}).map((user1)->convert(user1, baseUrl, true)).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return userValidator.validate(userModel).andThen(userProvider.create(convert(userModel)).flatMap((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
        }
        return Single.error(ex);
    }));
}).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source))).flatMapSingle
1 | Completable | andThen | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty
1 | Single | flatMapCompletable | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen
1 | Single | map | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable
1 | Maybe | isEmpty | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map
1 | Maybe | defer | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->identityProviderManager.getUserProvider(source))
1 | Maybe | error | METHOD_INVOCATION | userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source).isEmpty().map((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
}).flatMapCompletable((__)->checkRoles(user.getRoles())).andThen(Maybe.defer(()->identityProviderManager.getUserProvider(source))).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(source)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(source))
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(userModel).andThen(userProvider.create(convert(userModel)).flatMap((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
    }
    return Single.error(ex);
}));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(userModel).andThen(userProvider.create(convert(userModel)).flatMap((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
    }
    return Single.error(ex);
}))
1 | Single | flatMap | METHOD_INVOCATION | userProvider.create(convert(userModel)).flatMap((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).onErrorResumeNext
1 | Single | error | METHOD_INVOCATION | return Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"));
1 | Single | METHOD_INVOCATION | Single.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists"))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidValueException(ex.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException(ex.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to create a user", ex))
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidValueException("Field [password] is invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Field [password] is invalid"))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((existingUser)->{
    return checkRoles(user.getRoles()).andThen(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        }).flatMap((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return Single.error(ex);
        }));
    }));
}).map((user1)->convert(user1, baseUrl, false)).flatMap(this::setGroups).onErrorResumeNext((ex)->{
    if (ex instanceof SCIMException || ex instanceof UserNotFoundException) {
        return Single.error(ex);
    }
    if (ex instanceof AbstractNotFoundException) {
        return Single.error(new InvalidValueException(ex.getMessage()));
    }
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
});
1 | Single | flatMap | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((existingUser)->{
    return checkRoles(user.getRoles()).andThen(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        }).flatMap((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return Single.error(ex);
        }));
    }));
}).map((user1)->convert(user1, baseUrl, false)).flatMap(this::setGroups).onErrorResumeNext
1 | Single | map | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((existingUser)->{
    return checkRoles(user.getRoles()).andThen(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        }).flatMap((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return Single.error(ex);
        }));
    }));
}).map((user1)->convert(user1, baseUrl, false)).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((existingUser)->{
    return checkRoles(user.getRoles()).andThen(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        }).flatMap((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return Single.error(ex);
        }));
    }));
}).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Completable | andThen | METHOD_INVOCATION | return checkRoles(user.getRoles()).andThen(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    }).flatMap((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return Single.error(ex);
    }));
}));
1 | Single | defer | METHOD_INVOCATION | checkRoles(user.getRoles()).andThen(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    }).flatMap((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return Single.error(ex);
    }));
}))
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    }).flatMap((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return Single.error(ex);
    }));
})
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
}).flatMap((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return userRepository.update(userToUpdate);
    }
    return Single.error(ex);
}));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(userToUpdate).andThen(identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
}).flatMap((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return userRepository.update(userToUpdate);
    }
    return Single.error(ex);
}))
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
}).flatMap((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).onErrorResumeNext
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(userToUpdate.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(userToUpdate.getSource()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidValueException(ex.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException(ex.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to update a user", ex))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return get(userId, baseUrl).switchIfEmpty(Single.error(new UserNotFoundException(userId))).flatMap((user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return Single.error(new InvalidValueException("Field [password] is invalid"));
    }
    return update(userId, userToPatch, baseUrl);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Single.error(ex);
    } else {
        LOGGER.error("An error has occurred when trying to patch user: {}", userId, ex);
        return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex));
    }
});
1 | Single | flatMap | METHOD_INVOCATION | get(userId, baseUrl).switchIfEmpty(Single.error(new UserNotFoundException(userId))).flatMap((user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return Single.error(new InvalidValueException("Field [password] is invalid"));
    }
    return update(userId, userToPatch, baseUrl);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | get(userId, baseUrl).switchIfEmpty(Single.error(new UserNotFoundException(userId))).flatMap
1 | Single | error | METHOD_INVOCATION | get(userId, baseUrl).switchIfEmpty(Single.error(new UserNotFoundException(userId)))
1 | Single | METHOD_INVOCATION | Single.error(new UserNotFoundException(userId))
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidValueException("Field [password] is invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Field [password] is invalid"))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex))
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable((user)->identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable((userProvider)->userProvider.delete(user.getExternalId())).andThen(userRepository.delete(userId)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return Completable.error(ex);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex));
    }
}));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | userRepository.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | (user)->identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable((userProvider)->userProvider.delete(user.getExternalId())).andThen(userRepository.delete(userId)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return Completable.error(ex);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return Completable.error(ex);
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex));
    }
})
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable((userProvider)->userProvider.delete(user.getExternalId())).andThen(userRepository.delete(userId)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return Completable.error(ex);
}).onErrorResumeNext
1 | Completable | andThen | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable((userProvider)->userProvider.delete(user.getExternalId())).andThen(userRepository.delete(userId)).onErrorResumeNext
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable((userProvider)->userProvider.delete(user.getExternalId())).andThen
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex));
1 | Completable | METHOD_INVOCATION | Completable.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex))
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return groupService.findByMember(scimUser.getId()).map((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
}).toList().map((scimGroups)->{
    if (!scimGroups.isEmpty()) {
        scimUser.setGroups(scimGroups);
        return scimUser;
    } else {
        return scimUser;
    }
});
1 | Flowable | toList | METHOD_INVOCATION | groupService.findByMember(scimUser.getId()).map((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
}).toList().map
1 | Flowable | map | METHOD_INVOCATION | groupService.findByMember(scimUser.getId()).map((group)->{
    Member member = new Member();
    member.setValue(group.getId());
    member.setDisplay(group.getDisplayName());
    return member;
}).toList
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | ignoreElement | METHOD_INVOCATION | return roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).ignoreElement();
1 | Single | map | METHOD_INVOCATION | roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).ignoreElement
1 | Single | subscribe | METHOD_INVOCATION | serviceProviderConfigService.get().subscribe((config)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(config)), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(serviceProviderConfiguration);
1 | Single | METHOD_INVOCATION | Single.just(serviceProviderConfiguration)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(groupService.update(any(), any(), any())).thenReturn(Single.just(getGroup()))
1 | Single | METHOD_INVOCATION | Single.just(getGroup())
1 | Single | error | METHOD_INVOCATION | when(groupService.update(any(), any(), anyString())).thenReturn(Single.error(new InvalidGroupException("Invalid group infos")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGroupException("Invalid group infos"))
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | when(userService.update(eq(null), any(), any())).thenReturn(Single.error(new InvalidValueException("Field [password] is invalid")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Field [password] is invalid"))
1 | Single | just | METHOD_INVOCATION | when(userService.update(any(), any(), any())).thenReturn(Single.just(getUser()))
1 | Single | METHOD_INVOCATION | Single.just(getUser())
1 | Single | error | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(Single.error(new InvalidValueException("Role [role-1] can not be found.")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Role [role-1] can not be found."))
1 | Single | error | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(Single.error(new InvalidUserException("Invalid user infos")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidUserException("Invalid user infos"))
1 | Single | error | METHOD_INVOCATION | when(userService.update(any(), any(), anyString())).thenReturn(Single.error(new EmailFormatInvalidException("Invalid email")))
1 | Single | METHOD_INVOCATION | Single.error(new EmailFormatInvalidException("Invalid email"))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(newUser.getRoles())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Single | just | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | empty | METHOD_INVOCATION | when(userRepository.findByUsernameAndSource(eq(ReferenceType.DOMAIN), anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userRepository.create(any())).thenReturn(Single.just(createdUser))
1 | Single | METHOD_INVOCATION | Single.just(createdUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(newUser.getRoles())).thenReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Single | just | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(existingUser.getId())).thenReturn(Maybe.just(existingUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(existingUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(userRepository.update(any())).thenReturn(Single.just(existingUser))
1 | Single | METHOD_INVOCATION | Single.just(existingUser)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(existingUser.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(existingUser.getId(), scimUser, "/").test()
1 | Single | just | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(userId)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(userRepository.findById(userId)).thenReturn(Maybe.just(patchedUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(patchedUser)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | return Single.just(userToUpdate);
1 | Single | METHOD_INVOCATION | Single.just(userToUpdate)
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.patch(userId, patchOp, "/").test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(groupService.list(eq(0), eq(100), anyString())).thenReturn(Single.just(new ListResponse<>()))
1 | Single | METHOD_INVOCATION | Single.just(new ListResponse<>())
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(groupRepository.create(any())).thenReturn(Single.just(createdGroup))
1 | Single | METHOD_INVOCATION | Single.just(createdGroup)
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "/").test()
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Flowable | just | METHOD_INVOCATION | when(userRepository.findByIdIn(any())).thenReturn(Flowable.just(user))
1 | Flowable | METHOD_INVOCATION | Flowable.just(user)
1 | Single | just | METHOD_INVOCATION | when(groupRepository.create(any())).thenReturn(Single.just(createdGroup))
1 | Single | METHOD_INVOCATION | Single.just(createdGroup)
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "https://mydomain/scim/Groups").test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), newGroup.getDisplayName())).thenReturn(Maybe.just(new io.gravitee.am.model.Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.Group())
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "/").test()
1 | Maybe | just | METHOD_INVOCATION | when(groupRepository.findById(groupId)).thenReturn(Maybe.just(new io.gravitee.am.model.Group()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.Group())
1 | Maybe | empty | METHOD_INVOCATION | when(groupRepository.findByName(eq(ReferenceType.DOMAIN), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | return Single.just(groupToUpdate);
1 | Single | METHOD_INVOCATION | Single.just(groupToUpdate)
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.patch(groupId, patchOp, "/").test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.list(eq(null), eq(0), eq(100), anyString())).thenReturn(Single.just(new ListResponse<>()))
1 | Single | METHOD_INVOCATION | Single.just(new ListResponse<>())
1 | Single | just | METHOD_INVOCATION | when(userService.list(any(Filter.class), eq(0), eq(100), anyString())).thenReturn(Single.just(new ListResponse<>()))
1 | Single | METHOD_INVOCATION | Single.just(new ListResponse<>())
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(Single.just(getGroup()))
1 | Single | METHOD_INVOCATION | Single.just(getGroup())
1 | Single | error | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(Single.error(new UniquenessException("Display name already exists")))
1 | Single | METHOD_INVOCATION | Single.error(new UniquenessException("Display name already exists"))
1 | Single | error | METHOD_INVOCATION | when(groupService.create(any(), any())).thenReturn(Single.error(new InvalidGroupException("Invalid group infos")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidGroupException("Invalid group infos"))
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new InvalidValueException("Field [password] is invalid")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Field [password] is invalid"))
1 | Single | just | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.just(getUser()))
1 | Single | METHOD_INVOCATION | Single.just(getUser())
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new InvalidValueException("User provider [unknown-idp] can not be found.")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("User provider [unknown-idp] can not be found."))
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new InvalidValueException("Role [role-1] can not be found.")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidValueException("Role [role-1] can not be found."))
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new UniquenessException("Username already exists")))
1 | Single | METHOD_INVOCATION | Single.error(new UniquenessException("Username already exists"))
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new InvalidUserException("Invalid user infos")))
1 | Single | METHOD_INVOCATION | Single.error(new InvalidUserException("Invalid user infos"))
1 | Single | error | METHOD_INVOCATION | when(userService.create(any(), any())).thenReturn(Single.error(new EmailFormatInvalidException("Invalid email")))
1 | Single | METHOD_INVOCATION | Single.error(new EmailFormatInvalidException("Invalid email"))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(defaultPrincipal(context, token));
1 | Single | METHOD_INVOCATION | Single.just(defaultPrincipal(context, token))
1 | Maybe | toSingle | METHOD_INVOCATION | return userService.findById(token.getSub()).map((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty(defaultPrincipal(context, token)).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | userService.findById(token.getSub()).map((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty(defaultPrincipal(context, token)).toSingle
1 | Maybe | map | METHOD_INVOCATION | userService.findById(token.getSub()).map((user)->{
    User principal = new DefaultUser(user.getUsername());
    ((DefaultUser)principal).setId(user.getId());
    Map<String, Object> additionalInformation = user.getAdditionalInformation() != null ? new HashMap<>(user.getAdditionalInformation()) : new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty
1 | Maybe | toSingle | METHOD_INVOCATION | return clientSyncService.findByClientId(token.getAud()).map((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty(defaultPrincipal(context, token)).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | clientSyncService.findByClientId(token.getAud()).map((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty(defaultPrincipal(context, token)).toSingle
1 | Maybe | map | METHOD_INVOCATION | clientSyncService.findByClientId(token.getAud()).map((client)->{
    User principal = new DefaultUser(client.getClientId());
    ((DefaultUser)principal).setId(client.getId());
    Map<String, Object> additionalInformation = new HashMap<>();
    additionalInformation.put(Claims.ip_address, RequestUtils.remoteAddress(context.request()));
    additionalInformation.put(Claims.user_agent, RequestUtils.userAgent(context.request()));
    additionalInformation.put(Claims.domain, domain.getId());
    ((DefaultUser)principal).setAdditionalInformation(additionalInformation);
    return principal;
}).defaultIfEmpty
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return scopeApprovalService.findByDomainAndUser(domain.getId(), userId).collect(HashSet::new, Set::add);
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), userId, clientId).collect(HashSet::new, Set::add);
1 | Maybe | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return scopeApprovalService.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId)));
1 | Maybe | error | METHOD_INVOCATION | scopeApprovalService.findById(consentId).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consentId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeApprovalNotFoundException(consentId))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | subscribe | METHOD_INVOCATION | userService.consent(consentId).subscribe((scopeApproval)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApproval)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsent(userId, consentId, principal)).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Single | flatMapCompletable | METHOD_INVOCATION | getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsent(userId, consentId, principal)).subscribe
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMap((optClient)->{
    if (optClient.isPresent()) {
        return userService.consents(userId, optClient.get());
    }
    return userService.consents(userId);
}).subscribe((scopeApprovals)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApprovals)), context::fail);
1 | Single | flatMap | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMap((optClient)->{
    if (optClient.isPresent()) {
        return userService.consents(userId, optClient.get());
    }
    return userService.consents(userId);
}).subscribe
1 | Single | just | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMap
1 | Single | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId))
1 | Completable | subscribe | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMapCompletable((optClient)->{
    if (optClient.isPresent()) {
        return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, optClient.get(), principal));
    }
    return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, principal));
}).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Single | flatMapCompletable | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMapCompletable((optClient)->{
    if (optClient.isPresent()) {
        return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, optClient.get(), principal));
    }
    return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, principal));
}).subscribe
1 | Single | just | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId)).flatMapCompletable
1 | Single | METHOD_INVOCATION | Single.just(Optional.ofNullable(clientId))
1 | Single | flatMapCompletable | METHOD_INVOCATION | return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, optClient.get(), principal));
1 | Single | flatMapCompletable | METHOD_INVOCATION | return getPrincipal(context).flatMapCompletable((principal)->userService.revokeConsents(userId, principal));
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(scopeApprovalService.findByDomainAndUser(domainId, userId)).thenReturn(Flowable.just(scopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(scopeApproval)
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<ScopeApproval>> testObserver = userService.consents(userId).test()
1 | Maybe | just | METHOD_INVOCATION | when(scopeApprovalService.findById("consentId")).thenReturn(Maybe.just(scopeApproval))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scopeApproval)
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = userService.consent("consentId").test()
1 | Maybe | empty | METHOD_INVOCATION | when(scopeApprovalService.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = userService.consent("consentId").test()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalService.revokeByUser(domainId, userId, null)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.revokeConsents(userId).test()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalService.revokeByConsent(domainId, userId, consentId, null)).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.revokeConsent(userId, consentId).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | error | METHOD_INVOCATION | when(userService.consent(anyString())).thenReturn(Maybe.error(new ScopeApprovalNotFoundException("consentId")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeApprovalNotFoundException("consentId"))
1 | Maybe | just | METHOD_INVOCATION | when(userService.consent(anyString())).thenReturn(Maybe.just(new ScopeApproval()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new ScopeApproval())
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Completable | complete | METHOD_INVOCATION | when(userService.revokeConsent(anyString(), anyString(), any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.consents(anyString())).thenReturn(Single.just(Collections.singleton(new ScopeApproval())))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(new ScopeApproval()))
1 | Maybe | just | METHOD_INVOCATION | when(userService.findById(anyString())).thenReturn(Maybe.just(new io.gravitee.am.model.User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new io.gravitee.am.model.User())
1 | Completable | complete | METHOD_INVOCATION | when(userService.revokeConsents(anyString(), any(User.class))).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | subscribe | METHOD_INVOCATION | serviceProviderService.metadata(providerId, basePath).subscribe((result)->{
    HttpServerResponse response = routingContext.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache");
    if (result.getHeaders() != null) {
        result.getHeaders().forEach(response::putHeader);
    }
    response.setStatusCode(HttpStatusCode.OK_200).end(result.getBody());
}, (error)->routingContext.response().setStatusCode(error instanceof AbstractManagementException ? ((AbstractManagementException)error).getHttpStatusCode() : 500).end());
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return identityProviderManager.get(providerId).switchIfEmpty(Single.error(new IdentityProviderNotFoundException(providerId))).map((authenticationProvider)->{
    Metadata metadata = authenticationProvider.metadata(idpUrl);
    if (metadata == null) {
        logger.debug("No metadata found for identity provider : {}", providerId);
        throw new IdentityProviderMetadataNotFoundException(providerId);
    }
    return metadata;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.get(providerId).switchIfEmpty(Single.error(new IdentityProviderNotFoundException(providerId))).map
1 | Single | error | METHOD_INVOCATION | identityProviderManager.get(providerId).switchIfEmpty(Single.error(new IdentityProviderNotFoundException(providerId)))
1 | Single | METHOD_INVOCATION | Single.error(new IdentityProviderNotFoundException(providerId))
1 | Maybe | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(Maybe.just(authenticationProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authenticationProvider)
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.get("provider-id")).thenReturn(Maybe.just(authenticationProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(authenticationProvider)
1 | Single | test | METHOD_INVOCATION | TestObserver<Metadata> testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("unknown-provider"), anyString())).thenReturn(Single.error(new IdentityProviderNotFoundException("unknown-provider")))
1 | Single | METHOD_INVOCATION | Single.error(new IdentityProviderNotFoundException("unknown-provider"))
1 | Single | error | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("unknown-provider"), anyString())).thenReturn(Single.error(new IdentityProviderMetadataNotFoundException("unknown-provider")))
1 | Single | METHOD_INVOCATION | Single.error(new IdentityProviderMetadataNotFoundException("unknown-provider"))
1 | Single | just | METHOD_INVOCATION | when(serviceProviderService.metadata(eq("provider-id"), anyString())).thenReturn(Single.just(metadata))
1 | Single | METHOD_INVOCATION | Single.just(metadata)
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
}, (err)->{
    logger.error("Unable to start HTTP server", err.getCause());
    Runtime.getRuntime().exit(1);
});
1 | Single | subscribe | METHOD_INVOCATION | client.rxConnect(port, host).doFinally(client::close).subscribe((socket)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error.getCause())));
1 | Single | doFinally | METHOD_INVOCATION | client.rxConnect(port, host).doFinally(client::close).subscribe
1 | Single | blockingGet | METHOD_INVOCATION | List<Event> events = eventRepository.findByTimeFrame(lastRefreshAt - lastDelay, nextLastRefreshAt).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | eventRepository.findByTimeFrame(lastRefreshAt - lastDelay, nextLastRefreshAt).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | List<Domain> domains = domainRepository.findAll().filter(Domain::isEnabled).filter(this::canHandle).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | domainRepository.findAll().filter(Domain::isEnabled).filter(this::canHandle).toList().blockingGet
1 | Flowable | filter | METHOD_INVOCATION | domainRepository.findAll().filter(Domain::isEnabled).filter(this::canHandle).toList
1 | Flowable | filter | METHOD_INVOCATION | domainRepository.findAll().filter(Domain::isEnabled).filter
1 | Maybe | blockingGet | METHOD_INVOCATION | Domain domain = domainRepository.findById(domainId).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | final List<Organization> foundOrgs = organizationRepository.findByHrids(this.organizations.get()).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | organizationRepository.findByHrids(this.organizations.get()).toList().blockingGet
1 | Single | blockingGet | METHOD_INVOCATION | environmentRepository.findAll(org.getId()).filter((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
}).map(io.gravitee.am.model.Environment::getId).toList().blockingGet().stream
1 | Flowable | toList | METHOD_INVOCATION | environmentRepository.findAll(org.getId()).filter((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
}).map(io.gravitee.am.model.Environment::getId).toList().blockingGet
1 | Flowable | map | METHOD_INVOCATION | environmentRepository.findAll(org.getId()).filter((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
}).map(io.gravitee.am.model.Environment::getId).toList
1 | Flowable | filter | METHOD_INVOCATION | environmentRepository.findAll(org.getId()).filter((environment1)->{
    if (!environments.isPresent()) {
        return true;
    } else {
        return environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h));
    }
}).map
1 | Single | blockingGet | METHOD_INVOCATION | environmentIds = environmentRepository.findAll().filter((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h))).map(io.gravitee.am.model.Environment::getId).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | environmentRepository.findAll().filter((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h))).map(io.gravitee.am.model.Environment::getId).toList().blockingGet
1 | Flowable | map | METHOD_INVOCATION | environmentRepository.findAll().filter((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h))).map(io.gravitee.am.model.Environment::getId).toList
1 | Flowable | filter | METHOD_INVOCATION | environmentRepository.findAll().filter((environment1)->environment1.getHrids().stream().anyMatch((h)->environments.get().contains(h))).map
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2, domain3))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2, domain3)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(Flowable.just(event))
1 | Flowable | METHOD_INVOCATION | Flowable.just(event)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(Flowable.just(event))
1 | Flowable | METHOD_INVOCATION | Flowable.just(event)
1 | Maybe | just | METHOD_INVOCATION | when(domainRepository.findById(domainToUpdate.getId())).thenReturn(Maybe.just(domainToUpdate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domainToUpdate)
1 | Flowable | empty | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(eventRepository.findByTimeFrame(any(Long.class), any(Long.class))).thenReturn(Flowable.just(event))
1 | Flowable | METHOD_INVOCATION | Flowable.just(event)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(Flowable.just(env))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(Flowable.just(env))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll()).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2)
1 | Flowable | just | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(Flowable.just(organization))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organization)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2)
1 | Flowable | just | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(Flowable.just(organization, organization2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organization, organization2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(Flowable.just(env3, env4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env3, env4)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2, domain3, domain4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2, domain3, domain4)
1 | Flowable | just | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(Flowable.just(organization, organization2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organization, organization2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(Flowable.just(env3, env4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env3, env4)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2, domain3, domain4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2, domain3, domain4)
1 | Flowable | just | METHOD_INVOCATION | when(organizationRepository.findByHrids(anyList())).thenReturn(Flowable.just(organization, organization2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organization, organization2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization.getId())).thenReturn(Flowable.just(env, env2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env, env2)
1 | Flowable | just | METHOD_INVOCATION | when(environmentRepository.findAll(organization2.getId())).thenReturn(Flowable.just(env3, env4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(env3, env4)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain, domain2, domain3, domain4))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain, domain2, domain3, domain4)
1 | Flowable | just | METHOD_INVOCATION | when(domainRepository.findAll()).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new IllegalArgumentException("Unsupported verification channel \'" + target.getChannel() + "\'"));
1 | Completable | METHOD_INVOCATION | Completable.error(new IllegalArgumentException("Unsupported verification channel \'" + target.getChannel() + "\'"))
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        Verification verification = Verification.creator(configuration.getSid(), target.getTarget(), channel).create();
        LOGGER.debug("Twilio Verification code asked with ID \'{}\'", verification.getSid());
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    try {
        Verification verification = Verification.creator(configuration.getSid(), target.getTarget(), channel).create();
        LOGGER.debug("Twilio Verification code asked with ID \'{}\'", verification.getSid());
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
})
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        VerificationCheck verification = VerificationCheck.creator(configuration.getSid(), challenge.getCode()).setTo(challenge.getTarget()).create();
        LOGGER.debug("Twilio Verification code with ID \'{}\' verified with status \'{}\'", verification.getSid(), verification.getStatus());
        if (!APPROVED.equalsIgnoreCase(verification.getStatus())) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    try {
        VerificationCheck verification = VerificationCheck.creator(configuration.getSid(), challenge.getCode()).setTo(challenge.getTarget()).create();
        LOGGER.debug("Twilio Verification code with ID \'{}\' verified with status \'{}\'", verification.getSid(), verification.getStatus());
        if (!APPROVED.equalsIgnoreCase(verification.getStatus())) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
})
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        TfaStartAuthenticationResponse sendCodeResponse = this.tfaApi.sendTfaPinCodeOverSms(true, new TfaStartAuthenticationRequest().applicationId(applicationId).messageId(messageId).from("InfoSMS").to(this.to));
        boolean isSuccessful = sendCodeResponse.getSmsStatus().equals("MESSAGE_SENT");
        if (!isSuccessful) {
            emitter.onError(new SendChallengeException("Message not sent"));
        } else {
            this.pinId = sendCodeResponse.getPinId();
            LOGGER.debug("Infobip Verification code asked with ID \'{}\'", sendCodeResponse.getPinId());
            emitter.onComplete();
        }
    } catch (com.infobip.ApiException e) {
        this.LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    try {
        TfaStartAuthenticationResponse sendCodeResponse = this.tfaApi.sendTfaPinCodeOverSms(true, new TfaStartAuthenticationRequest().applicationId(applicationId).messageId(messageId).from("InfoSMS").to(this.to));
        boolean isSuccessful = sendCodeResponse.getSmsStatus().equals("MESSAGE_SENT");
        if (!isSuccessful) {
            emitter.onError(new SendChallengeException("Message not sent"));
        } else {
            this.pinId = sendCodeResponse.getPinId();
            LOGGER.debug("Infobip Verification code asked with ID \'{}\'", sendCodeResponse.getPinId());
            emitter.onComplete();
        }
    } catch (com.infobip.ApiException e) {
        this.LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
})
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    String pin = challenge.getCode();
    try {
        TfaVerifyPinResponse verifyResponse = this.tfaApi.verifyTfaPhoneNumber(pinId, new TfaVerifyPinRequest().pin(pin));
        boolean verified = verifyResponse.getVerified();
        LOGGER.debug("Infobip Verification code with ID \'{}\' verified with status \'{}\'", this.pinId, verified);
        if (!verified) {
            emitter.onError(new InvalidCodeException("Challenger not verified"));
        } else {
            emitter.onComplete();
        }
    } catch (com.infobip.ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Completable | METHOD_INVOCATION | Completable.create((emitter)->{
    String pin = challenge.getCode();
    try {
        TfaVerifyPinResponse verifyResponse = this.tfaApi.verifyTfaPhoneNumber(pinId, new TfaVerifyPinRequest().pin(pin));
        boolean verified = verifyResponse.getVerified();
        LOGGER.debug("Infobip Verification code with ID \'{}\' verified with status \'{}\'", this.pinId, verified);
        if (!verified) {
            emitter.onError(new InvalidCodeException("Challenger not verified"));
        } else {
            emitter.onComplete();
        }
    } catch (com.infobip.ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
})
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token)).map((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
}).onErrorResumeNext((throwable)->{
    LOGGER.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return Single.just(false);
});
1 | Single | map | METHOD_INVOCATION | client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token)).map((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", null, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        emitter.onSuccess(extensionGrantPluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all extension grant plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all extension grant plugins", ex));
    }
});
1 | Single | METHOD_INVOCATION | Single.create((emitter)->{
    try {
        emitter.onSuccess(extensionGrantPluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all extension grant plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all extension grant plugins", ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin extensionGrant = extensionGrantPluginManager.findById(extensionGrantPluginId);
        if (extensionGrant != null) {
            emitter.onSuccess(convert(extensionGrant));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get extension grant plugin : {}", extensionGrantPluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get extension grant plugin : " + extensionGrantPluginId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin extensionGrant = extensionGrantPluginManager.findById(extensionGrantPluginId);
        if (extensionGrant != null) {
            emitter.onSuccess(convert(extensionGrant));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get extension grant plugin : {}", extensionGrantPluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get extension grant plugin : " + extensionGrantPluginId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = extensionGrantPluginManager.getSchema(extensionGrantPluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for extension grant plugin {}", extensionGrantPluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for extension grant plugin " + extensionGrantPluginId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = extensionGrantPluginManager.getSchema(extensionGrantPluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for extension grant plugin {}", extensionGrantPluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for extension grant plugin " + extensionGrantPluginId, e));
    }
})
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | blockingGet | METHOD_INVOCATION | Environment environment = environmentService.createDefault().blockingGet()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | map | METHOD_INVOCATION | return client.getAbs(newsletterURI + taglinesPath).rxSend().map((res)->{
    if (res.statusCode() != 200) {
        LOGGER.error("An error has occurred when reading the newsletter taglines response: " + res.statusMessage());
        return Collections.emptyList();
    }
    return mapper.readValue(res.bodyAsString(), List.class);
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())).flatMap(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system.", count), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system", throwable));
1 | Flowable | count | METHOD_INVOCATION | domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())).flatMap(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())).flatMap(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count
1 | Flowable | flatMap | METHOD_INVOCATION | domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())).flatMap(this::prepareAETriggers).flatMapSingle
1 | Flowable | doOnNext | METHOD_INVOCATION | domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())).flatMap
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}].", count, payload.getReferenceId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}]", payload.getReferenceId(), throwable));
1 | Flowable | count | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapSingle((domain)->alertTriggerService.getById(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)).flatMap(this::registerAETrigger)).subscribe((aeTrigger)->LOGGER.info("Alert trigger [{}] synchronized with the alerting system.", aeTrigger.getId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert trigger [{}] with alerting system", payload.getId(), throwable));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapSingle((domain)->alertTriggerService.getById(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)).flatMap(this::registerAETrigger)).subscribe
1 | Single | flatMap | METHOD_INVOCATION | (domain)->alertTriggerService.getById(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)).flatMap(this::registerAETrigger)
1 | Single | flatMap | METHOD_INVOCATION | alertTriggerService.getById(payload.getId()).flatMap((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)).flatMap
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled()).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}] after the update of alert notifier [{}].", count, payload.getReferenceId(), payload.getId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}] after the alert notifier {} event [{}].", payload.getReferenceId(), event.type().name().toLowerCase(), payload.getId(), throwable));
1 | Flowable | count | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled()).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count().subscribe
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled()).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count
1 | Maybe | filter | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).filter((domain)->domain.isEnabled() && domain.isAlertEnabled()).flatMapPublisher
1 | Flowable | flatMapSingle | METHOD_INVOCATION | (domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle
1 | Single | RETURN_TYPE
1 | Single | defer | METHOD_INVOCATION | return Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return Single.just(trigger);
});
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return Single.just(trigger);
})
1 | Single | just | METHOD_INVOCATION | return Single.just(trigger);
1 | Single | METHOD_INVOCATION | Single.just(trigger)
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | return alertTriggerService.findByDomainAndCriteria(domain.getId(), new AlertTriggerCriteria()).flatMapSingle((alertTrigger)->this.prepareAETrigger(domain, alertTrigger));
1 | Single | RETURN_TYPE
1 | Single | doOnSuccess | METHOD_INVOCATION | return alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).toList().map((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment)).doOnSuccess((trigger)->trigger.setEnabled(domain.isEnabled() && domain.isAlertEnabled() && trigger.isEnabled()));
1 | Single | map | METHOD_INVOCATION | alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).toList().map((alertNotifiers)->AlertTriggerFactory.create(alertTrigger, alertNotifiers, environment)).doOnSuccess
1 | Flowable | toList | METHOD_INVOCATION | alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria).toList().map
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | resolveProperties((ResolvePropertyCommand)command).subscribe((result)->resultHandler.handle((T)result), (error)->resultHandler.handle(null));
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | doOnSuccess | METHOD_INVOCATION | obs.add(resolveDomainProperties(value).doOnSuccess((domainProperties)->values.put(key, domainProperties)))
1 | Single | doOnSuccess | METHOD_INVOCATION | obs.add(resolveApplicationProperties(value).doOnSuccess((appProperties)->values.put(key, appProperties)))
1 | Completable | andThen | METHOD_INVOCATION | return Single.merge(obs).ignoreElements().andThen(Single.just(values));
1 | Flowable | ignoreElements | METHOD_INVOCATION | Single.merge(obs).ignoreElements().andThen
1 | Single | merge | METHOD_INVOCATION | Single.merge(obs).ignoreElements
1 | Single | METHOD_INVOCATION | Single.merge(obs)
1 | Single | just | METHOD_INVOCATION | Single.merge(obs).ignoreElements().andThen(Single.just(values))
1 | Single | METHOD_INVOCATION | Single.just(values)
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return Single.just(properties);
}).onErrorResumeNext(Single.just(properties));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return Single.just(properties);
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(properties);
1 | Single | METHOD_INVOCATION | Single.just(properties)
1 | Single | just | METHOD_INVOCATION | domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return Single.just(properties);
}).onErrorResumeNext(Single.just(properties))
1 | Single | METHOD_INVOCATION | Single.just(properties)
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return Single.just(properties);
}).onErrorResumeNext(Single.just(properties));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return Single.just(properties);
}).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(properties);
1 | Single | METHOD_INVOCATION | Single.just(properties)
1 | Single | just | METHOD_INVOCATION | applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return Single.just(properties);
}).onErrorResumeNext(Single.just(properties))
1 | Single | METHOD_INVOCATION | Single.just(properties)
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(policyPluginManager.getAll()).map((policyPlugin)->convert(policyPlugin, expand)).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(policyPluginManager.getAll()).map((policyPlugin)->convert(policyPlugin, expand)).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(policyPluginManager.getAll()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(policyPluginManager.getAll())
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        PolicyPlugin policy = convert(policyPluginManager.get(policyId));
        if (policy != null) {
            emitter.onSuccess(policy);
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get policy plugin : {}", policyId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get policy plugin : " + policyId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        PolicyPlugin policy = convert(policyPluginManager.get(policyId));
        if (policy != null) {
            emitter.onSuccess(policy);
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get policy plugin : {}", policyId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get policy plugin : " + policyId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = policyPluginManager.getSchema(policyId);
        if (schema != null) {
            JsonNode schemaNode = objectMapper.readTree(schema);
            if (schemaNode.has("properties")) {
                ObjectNode properties = (ObjectNode)schemaNode.get("properties");
                properties.remove("scope");
                properties.remove("onResponseScript");
                properties.remove("onRequestContentScript");
                properties.remove("onResponseContentScript");
            }
            emitter.onSuccess(objectMapper.writeValueAsString(schemaNode));
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for policy plugin " + policyId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = policyPluginManager.getSchema(policyId);
        if (schema != null) {
            JsonNode schemaNode = objectMapper.readTree(schema);
            if (schemaNode.has("properties")) {
                ObjectNode properties = (ObjectNode)schemaNode.get("properties");
                properties.remove("scope");
                properties.remove("onResponseScript");
                properties.remove("onRequestContentScript");
                properties.remove("onResponseContentScript");
            }
            emitter.onSuccess(objectMapper.writeValueAsString(schemaNode));
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for policy plugin " + policyId, e));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = policyPluginManager.getIcon(policyId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for policy plugin " + policyId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String icon = policyPluginManager.getIcon(policyId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for policy plugin " + policyId, e));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String documentation = policyPluginManager.getDocumentation(policyId);
        if (documentation != null) {
            emitter.onSuccess(documentation);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get documentation for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get documentation for policy plugin " + policyId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String documentation = policyPluginManager.getDocumentation(policyId);
        if (documentation != null) {
            emitter.onSuccess(documentation);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get documentation for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get documentation for policy plugin " + policyId, e));
    }
})
1 | Maybe | subscribe | METHOD_INVOCATION | getSchema(plugin.getId()).subscribe(plugin::setSchema);
1 | Maybe | subscribe | METHOD_INVOCATION | getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | final Map<String, Role> organizationRoles = Flowable.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames)).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
}).blockingGet()
1 | Flowable | collect | METHOD_INVOCATION | Flowable.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames)).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
}).blockingGet
1 | Flowable | merge | METHOD_INVOCATION | Flowable.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames)).collect
1 | Flowable | METHOD_INVOCATION | Flowable.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderService.findAll().blockingForEach((identityProvider)->{
    logger.info("\tInitializing user provider: {} [{}]", identityProvider.getName(), identityProvider.getType());
    loadUserProvider(identityProvider);
});
1 | Maybe | RETURN_TYPE
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | (userProvider1 != null) ? Maybe.just(userProvider1) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider1)
1 | Maybe | empty | METHOD_INVOCATION | (userProvider1 != null) ? Maybe.just(userProvider1) : Maybe.empty()
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("Unable to create Default IdentityProvider with " + managementBackend + " backend"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("Unable to create Default IdentityProvider with " + managementBackend + " backend"))
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById(identityProviderId).subscribe(this::loadUserProvider, (error)->logger.error("Unable to deploy user provider  {}", identityProviderId, error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess((reply)->logger.info("Installation has been removed.")).doOnError((error)->logger.error("Error occurred when deleting installation.", error)).onErrorReturn((throwable)->new GoodbyeReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess((reply)->logger.info("Installation has been removed.")).doOnError((error)->logger.error("Error occurred when deleting installation.", error)).onErrorReturn
1 | Single | doOnSuccess | METHOD_INVOCATION | installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess((reply)->logger.info("Installation has been removed.")).doOnError
1 | Single | flatMap | METHOD_INVOCATION | installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS)).flatMap((installation)->Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess
1 | Single | just | METHOD_INVOCATION | (installation)->Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))
1 | Single | METHOD_INVOCATION | Single.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | reporterService.findAll().blockingForEach((reporter)->{
    logger.info("Initializing audit reporter : {} for domain {}", reporter.getName(), reporter.getDomain());
    try {
        AuditReporterLauncher launcher = new AuditReporterLauncher(reporter);
        domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
            if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
                return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
            } else {
                return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
            }
        }).subscribeOn(Schedulers.io()).subscribe(launcher);
    } catch (Exception ex) {
        logger.error("An error has occurred while loading audit reporter: {} [{}]", reporter.getName(), reporter.getType(), ex);
        removeReporter(reporter.getId());
    }
});
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn(Schedulers.io()).subscribe(launcher);
1 | Single | subscribeOn | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn
1 | Single | map | METHOD_INVOCATION | return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
1 | Single | error | METHOD_INVOCATION | return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
1 | Single | METHOD_INVOCATION | Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"))
1 | Single | blockingGet | METHOD_INVOCATION | List<io.gravitee.am.model.Reporter> reporters = reporterService.findByDomain(domain).toList().blockingGet()
1 | Flowable | toList | METHOD_INVOCATION | reporterService.findByDomain(domain).toList().blockingGet
1 | Maybe | subscribe | METHOD_INVOCATION | reporterService.findById(reporterId).subscribe(this::loadReporter, (error)->logger.error("Unable to deploy reporter {}", reporterId, error), ()->logger.error("No reporter found with id {}", reporterId));
1 | Maybe | subscribe | METHOD_INVOCATION | reporterService.findById(reporterId).subscribe((reporter)->{
    logger.debug("Reload reporter: {} after configuration update", reporter.getName());
    Optional<Reporter> optionalAuditReporter = auditReporters.entrySet().stream().filter((entry)->reporter.getId().equals(entry.getKey().getId())).map(Entry::getValue).findFirst();
    if (optionalAuditReporter.isPresent()) {
        try {
            Reporter auditReporter = optionalAuditReporter.get();
            if (reporter.isEnabled()) {
                auditReporter.stop();
                auditReporters.entrySet().removeIf((entry)->entry.getKey().getId().equals(reporter.getId()));
                loadReporter(reporter);
            } else {
                logger.info("Reporter: {} has been disabled", reporter.getName());
                ((EventBusReporterWrapper)auditReporter).unregister();
                if (!auditReporter.canSearch()) {
                    auditReporter.stop();
                }
            }
        } catch (Exception e) {
            logger.error("An error occurs while reloading reporter: {}", reporter.getName(), e);
        }
    } else {
        logger.info("There is no reporter to reload");
    }
}, (error)->logger.error("Unable to reload reporter {}", reporterId, error), ()->logger.error("No reporter found with id {}", reporterId));
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn(Schedulers.io()).subscribe(launcher);
1 | Single | subscribeOn | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT.equals(domain.getReferenceType())) {
        return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
    } else {
        return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
    }
}).subscribeOn
1 | Single | map | METHOD_INVOCATION | return environmentService.findById(domain.getReferenceId()).map((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()));
1 | Single | error | METHOD_INVOCATION | return Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"));
1 | Single | METHOD_INVOCATION | Single.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment"))
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
    if (!reporters.isEmpty()) {
        for (io.gravitee.reporter.api.Reporter reporter : reporters) {
            try {
                logger.info("Starting reporter: {}", reporter);
                reporter.start();
            } catch (Exception ex) {
                logger.error("Unexpected error while starting reporter", ex);
            }
        }
    } else {
        logger.info("\tThere is no reporter to start");
    }
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId())).map((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError((error)->logger.info("Error occurred when creating user [{}] for organization [{}].", userPayload.getUsername(), userPayload.getOrganizationId(), error)).onErrorReturn((throwable)->new UserReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId())).map((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError((error)->logger.info("Error occurred when creating user [{}] for organization [{}].", userPayload.getUsername(), userPayload.getOrganizationId(), error)).onErrorReturn
1 | Single | map | METHOD_INVOCATION | userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId())).map((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser).doOnSuccess((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId())).map
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE).flatMap((scopes)->{
    if (scopes.getData().isEmpty()) {
        logger.info("No scope found for domain id[{}] name[{}]. Upgrading...", domain.getId(), domain.getName());
        return createAppScopes(domain).flatMap((irrelevant)->createRoleScopes(domain));
    }
    logger.info("No scope to update, skip upgrade");
    return Single.just(new ArrayList<>(scopes.getData()));
});
1 | Single | flatMap | METHOD_INVOCATION | return createAppScopes(domain).flatMap((irrelevant)->createRoleScopes(domain));
1 | Single | just | METHOD_INVOCATION | return Single.just(new ArrayList<>(scopes.getData()));
1 | Single | METHOD_INVOCATION | Single.just(new ArrayList<>(scopes.getData()))
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable(Observable::fromIterable).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList();
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable(Observable::fromIterable).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList
1 | Observable | flatMap | METHOD_INVOCATION | applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable(Observable::fromIterable).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).flatMapSingle
1 | Observable | filter | METHOD_INVOCATION | applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable(Observable::fromIterable).filter((app)->app.getSettings() != null && app.getSettings().getOauth() != null).flatMap
1 | Maybe | flatMapObservable | METHOD_INVOCATION | applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable(Observable::fromIterable).filter
1 | Single | filter | METHOD_INVOCATION | applicationService.findByDomain(domain.getId()).filter((applications)->applications != null).flatMapObservable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | fromIterable | METHOD_INVOCATION | (app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(app.getSettings().getOauth().getScopes())
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable(Observable::fromIterable).filter((role)->role.getOauthScopes() != null).flatMap((role)->Observable.fromIterable(role.getOauthScopes())).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList();
1 | Observable | flatMapSingle | METHOD_INVOCATION | roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable(Observable::fromIterable).filter((role)->role.getOauthScopes() != null).flatMap((role)->Observable.fromIterable(role.getOauthScopes())).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList
1 | Observable | flatMap | METHOD_INVOCATION | roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable(Observable::fromIterable).filter((role)->role.getOauthScopes() != null).flatMap((role)->Observable.fromIterable(role.getOauthScopes())).flatMapSingle
1 | Observable | filter | METHOD_INVOCATION | roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable(Observable::fromIterable).filter((role)->role.getOauthScopes() != null).flatMap
1 | Maybe | flatMapObservable | METHOD_INVOCATION | roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable(Observable::fromIterable).filter
1 | Single | filter | METHOD_INVOCATION | roleService.findByDomain(domain.getId()).filter((roles)->roles != null).flatMapObservable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | fromIterable | METHOD_INVOCATION | (role)->Observable.fromIterable(role.getOauthScopes())
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(role.getOauthScopes())
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return scopeService.findByDomain(domain, 0, Integer.MAX_VALUE).flatMap((scopes)->{
    Optional<Scope> optScope = scopes.getData().stream().filter((scope)->scope.getKey().equalsIgnoreCase(scopeKey)).findFirst();
    if (!optScope.isPresent()) {
        logger.info("Create a new scope key[{}] for domain[{}]", scopeKey, domain);
        NewScope scope = new NewScope();
        scope.setKey(scopeKey);
        scope.setName(Character.toUpperCase(scopeKey.charAt(0)) + scopeKey.substring(1));
        scope.setDescription("Default description for scope " + scopeKey);
        return scopeService.create(domain, scope);
    }
    return Single.just(optScope.get());
});
1 | Single | just | METHOD_INVOCATION | return Single.just(optScope.get());
1 | Single | METHOD_INVOCATION | Single.just(optScope.get())
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId())).doOnError((error)->logger.error("Error occurred when handling environment [{}] with id [{}].", environmentPayload.getName(), environmentPayload.getId(), error)).onErrorReturn((throwable)->new EnvironmentReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId())).doOnError((error)->logger.error("Error occurred when handling environment [{}] with id [{}].", environmentPayload.getName(), environmentPayload.getId(), error)).onErrorReturn
1 | Single | doOnSuccess | METHOD_INVOCATION | environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId())).doOnError
1 | Single | map | METHOD_INVOCATION | environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null).map((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | doOnSuccess | METHOD_INVOCATION | return findAll(ReferenceType.DOMAIN, domain, page, size).doOnSuccess((userPage)->userPage.getData().forEach(this::setInternalStatus));
1 | Maybe | RETURN_TYPE
1 | Maybe | map | METHOD_INVOCATION | return userService.findById(id).map(this::setInternalStatus);
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserInvalidException("Field [password] is required"));
1 | Single | METHOD_INVOCATION | Single.error(new UserInvalidException("Field [password] is required"))
1 | Single | flatMap | METHOD_INVOCATION | return userService.findByDomainAndUsernameAndSource(domain.getId(), newUser.getUsername(), newUser.getSource()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
    } else {
        return identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle((userProvider)->{
            return checkClientFunction().apply(domain.getId(), newUser.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
                Application client = optClient.orElse(null);
                newUser.setDomain(domain.getId());
                newUser.setClient(client != null ? client.getId() : null);
                newUser.setInternal(true);
                if (newUser.isPreRegistration()) {
                    newUser.setPassword(null);
                    newUser.setRegistrationCompleted(false);
                    newUser.setEnabled(false);
                } else {
                    String password = newUser.getPassword();
                    if (password != null && isInvalidUserPassword(password, client, domain)) {
                        return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
                    }
                    newUser.setRegistrationCompleted(true);
                    newUser.setEnabled(true);
                    newUser.setDomain(domain.getId());
                }
                return userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    return newUser;
                }).onErrorResumeNext((ex)->{
                    if (ex instanceof UserAlreadyExistsException) {
                        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
                            if (!empty) {
                                throw new UserAlreadyExistsException(newUser.getUsername());
                            } else {
                                newUser.setPassword(null);
                                newUser.setExternalId(idpUser.getId());
                                newUser.setUsername(idpUser.getUsername());
                                return newUser;
                            }
                        }));
                    } else {
                        return Single.error(ex);
                    }
                }).flatMap((newUser1)->{
                    User user = transform(newUser1);
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                        user.setRegistrationAccessToken(getUserRegistrationToken(user));
                    }
                    return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
                }).flatMap((user)->{
                    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
                    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
                    } else {
                        return Single.just(user);
                    }
                }).map(this::setInternalStatus);
            });
        });
    }
});
1 | Maybe | isEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), newUser.getUsername(), newUser.getSource()).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException(newUser.getUsername()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle((userProvider)->{
    return checkClientFunction().apply(domain.getId(), newUser.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
        Application client = optClient.orElse(null);
        newUser.setDomain(domain.getId());
        newUser.setClient(client != null ? client.getId() : null);
        newUser.setInternal(true);
        if (newUser.isPreRegistration()) {
            newUser.setPassword(null);
            newUser.setRegistrationCompleted(false);
            newUser.setEnabled(false);
        } else {
            String password = newUser.getPassword();
            if (password != null && isInvalidUserPassword(password, client, domain)) {
                return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            newUser.setDomain(domain.getId());
        }
        return userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
            newUser.setPassword(null);
            newUser.setExternalId(idpUser.getId());
            return newUser;
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserAlreadyExistsException) {
                return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
                    if (!empty) {
                        throw new UserAlreadyExistsException(newUser.getUsername());
                    } else {
                        newUser.setPassword(null);
                        newUser.setExternalId(idpUser.getId());
                        newUser.setUsername(idpUser.getUsername());
                        return newUser;
                    }
                }));
            } else {
                return Single.error(ex);
            }
        }).flatMap((newUser1)->{
            User user = transform(newUser1);
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                user.setRegistrationAccessToken(getUserRegistrationToken(user));
            }
            return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
        }).flatMap((user)->{
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
            } else {
                return Single.just(user);
            }
        }).map(this::setInternalStatus);
    });
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(newUser.getSource()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return checkClientFunction().apply(domain.getId(), newUser.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
    Application client = optClient.orElse(null);
    newUser.setDomain(domain.getId());
    newUser.setClient(client != null ? client.getId() : null);
    newUser.setInternal(true);
    if (newUser.isPreRegistration()) {
        newUser.setPassword(null);
        newUser.setRegistrationCompleted(false);
        newUser.setEnabled(false);
    } else {
        String password = newUser.getPassword();
        if (password != null && isInvalidUserPassword(password, client, domain)) {
            return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
        }
        newUser.setRegistrationCompleted(true);
        newUser.setEnabled(true);
        newUser.setDomain(domain.getId());
    }
    return userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        return newUser;
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
                if (!empty) {
                    throw new UserAlreadyExistsException(newUser.getUsername());
                } else {
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    newUser.setUsername(idpUser.getUsername());
                    return newUser;
                }
            }));
        } else {
            return Single.error(ex);
        }
    }).flatMap((newUser1)->{
        User user = transform(newUser1);
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
            user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
            user.setRegistrationAccessToken(getUserRegistrationToken(user));
        }
        return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
    }).flatMap((user)->{
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
            return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
        } else {
            return Single.just(user);
        }
    }).map(this::setInternalStatus);
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkClientFunction().apply(domain.getId(), newUser.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | checkClientFunction().apply(domain.getId(), newUser.getClient()).map(Optional::of).defaultIfEmpty
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
1 | Single | METHOD_INVOCATION | Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"))
1 | Single | map | METHOD_INVOCATION | return userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }));
    } else {
        return Single.error(ex);
    }
}).flatMap((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).flatMap((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
    } else {
        return Single.just(user);
    }
}).map(this::setInternalStatus);
1 | Single | flatMap | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }));
    } else {
        return Single.error(ex);
    }
}).flatMap((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).flatMap((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
    } else {
        return Single.just(user);
    }
}).map
1 | Single | flatMap | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }));
    } else {
        return Single.error(ex);
    }
}).flatMap((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).flatMap
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }));
    } else {
        return Single.error(ex);
    }
}).flatMap
1 | Single | map | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}).onErrorResumeNext
1 | Completable | andThen | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser))).map
1 | Completable | doOnError | METHOD_INVOCATION | userValidator.validate(transform(newUser)).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
}));
1 | Single | map | METHOD_INVOCATION | (idpUser)->userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
})
1 | Maybe | isEmpty | METHOD_INVOCATION | userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource()).isEmpty().map
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | doOnError | METHOD_INVOCATION | return userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.create(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError
1 | Completable | toSingleDefault | METHOD_INVOCATION | return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
1 | Single | just | METHOD_INVOCATION | return Single.just(user);
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return userService.findById(ReferenceType.DOMAIN, domain.getId(), userId).flatMap((user)->{
    return checkClientFunction().apply(domain.getId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
        }
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
            return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return userProvider.update(idpUser.getId(), idpUser);
            }).onErrorResumeNext((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return userProvider.create(convert(user));
                }
                return Single.error(ex);
            });
        }).flatMap((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return userService.update(user);
        }).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)));
    });
}).flatMapCompletable((user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria);
});
1 | Single | flatMap | METHOD_INVOCATION | userService.findById(ReferenceType.DOMAIN, domain.getId(), userId).flatMap((user)->{
    return checkClientFunction().apply(domain.getId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
        }
        return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
            return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return userProvider.update(idpUser.getId(), idpUser);
            }).onErrorResumeNext((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return userProvider.create(convert(user));
                }
                return Single.error(ex);
            });
        }).flatMap((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return userService.update(user);
        }).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)));
    });
}).flatMapCompletable
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return checkClientFunction().apply(domain.getId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optClient)->{
    if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
        return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
    }
    return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
        return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
            ((DefaultUser)idpUser).setCredentials(password);
            return userProvider.update(idpUser.getId(), idpUser);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException) {
                user.setPassword(password);
                return userProvider.create(convert(user));
            }
            return Single.error(ex);
        });
    }).flatMap((idpUser)->{
        if (user.isPreRegistration()) {
            user.setRegistrationCompleted(true);
            user.setEnabled(true);
        }
        user.setPassword(null);
        user.setExternalId(idpUser.getId());
        user.setLastPasswordReset(new Date());
        user.setUpdatedAt(new Date());
        return userService.update(user);
    }).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)));
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkClientFunction().apply(domain.getId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | checkClientFunction().apply(domain.getId(), user.getClient()).map(Optional::of).defaultIfEmpty
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
1 | Single | METHOD_INVOCATION | Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"))
1 | Single | doOnError | METHOD_INVOCATION | return identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).doOnSuccess
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return Single.error(ex);
    });
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        user.setPassword(password);
        return userProvider.create(convert(user));
    }
    return Single.error(ex);
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user.getUsername()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Completable | OTHER
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain1)->findById(ReferenceType.DOMAIN, domainId, userId).flatMapCompletable((user)->{
    if (!user.isPreRegistration()) {
        return Completable.error(new UserInvalidException("Pre-registration is disabled for the user " + userId));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return Completable.error(new UserInvalidException("Registration is completed for the user " + userId));
    }
    return checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).ignoreElement();
}));
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Single | flatMapCompletable | METHOD_INVOCATION | (domain1)->findById(ReferenceType.DOMAIN, domainId, userId).flatMapCompletable((user)->{
    if (!user.isPreRegistration()) {
        return Completable.error(new UserInvalidException("Pre-registration is disabled for the user " + userId));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return Completable.error(new UserInvalidException("Registration is completed for the user " + userId));
    }
    return checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).ignoreElement();
})
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new UserInvalidException("Pre-registration is disabled for the user " + userId));
1 | Completable | METHOD_INVOCATION | Completable.error(new UserInvalidException("Pre-registration is disabled for the user " + userId))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new UserInvalidException("Registration is completed for the user " + userId));
1 | Completable | METHOD_INVOCATION | Completable.error(new UserInvalidException("Registration is completed for the user " + userId))
1 | Maybe | ignoreElement | METHOD_INVOCATION | return checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).ignoreElement();
1 | Maybe | doOnError | METHOD_INVOCATION | checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable))).ignoreElement
1 | Maybe | doOnSuccess | METHOD_INVOCATION | checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess((__)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user))).doOnError
1 | Maybe | doOnSuccess | METHOD_INVOCATION | checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess((optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start()).doOnSuccess
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty(Optional.empty()).doOnSuccess
1 | Maybe | map | METHOD_INVOCATION | checkClientFunction().apply(user.getReferenceId(), user.getClient()).map(Optional::of).defaultIfEmpty
1 | Completable | OTHER
1 | Single | ignoreElement | METHOD_INVOCATION | return findById(referenceType, referenceId, userId).flatMap((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(userService.update(user));
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).throwable(throwable))).ignoreElement();
1 | Single | doOnError | METHOD_INVOCATION | findById(referenceType, referenceId, userId).flatMap((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(userService.update(user));
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).throwable(throwable))).ignoreElement
1 | Single | doOnSuccess | METHOD_INVOCATION | findById(referenceType, referenceId, userId).flatMap((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(userService.update(user));
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UNLOCKED).user(user1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | findById(referenceType, referenceId, userId).flatMap((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria).andThen(userService.update(user));
}).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | return loginAttemptService.reset(criteria).andThen(userService.update(user));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((oldUser)->{
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(factors);
    return userService.update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Single | doOnError | METHOD_INVOCATION | return userService.update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.update(userToUpdate).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser))).doOnError
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return findById(referenceType, referenceId, userId).flatMap((oldUser)->{
    User userToUpdate = new User(oldUser);
    if (revoke) {
        if (userToUpdate.getRoles() != null) {
            userToUpdate.getRoles().removeAll(roles);
        }
    } else {
        userToUpdate.setRoles(roles);
    }
    return checkRoles(roles).andThen(Single.defer(()->userService.update(userToUpdate))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)));
});
1 | Single | doOnError | METHOD_INVOCATION | return checkRoles(roles).andThen(Single.defer(()->userService.update(userToUpdate))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->userService.update(userToUpdate))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_ROLES_ASSIGNED).oldValue(oldUser).user(user1))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->userService.update(userToUpdate))).doOnSuccess
1 | Single | defer | METHOD_INVOCATION | checkRoles(roles).andThen(Single.defer(()->userService.update(userToUpdate)))
1 | Single | METHOD_INVOCATION | Single.defer(()->userService.update(userToUpdate))
1 | Maybe | OTHER
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | map | METHOD_INVOCATION | return applicationService.findById(client).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client))).switchIfEmpty(Maybe.error(new ClientNotFoundException(client))).map((app1)->{
    if (!domain.equals(app1.getDomain())) {
        throw new ClientNotFoundException(client);
    }
    return app1;
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationService.findById(client).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client))).switchIfEmpty(Maybe.error(new ClientNotFoundException(client))).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationService.findById(client).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client))).switchIfEmpty
1 | Maybe | defer | METHOD_INVOCATION | applicationService.findById(client).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client))
1 | Maybe | error | METHOD_INVOCATION | applicationService.findById(client).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(domain, client))).switchIfEmpty(Maybe.error(new ClientNotFoundException(client)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ClientNotFoundException(client))
1 | Completable | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | return roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).toCompletable();
1 | Single | map | METHOD_INVOCATION | roleService.findByIdIn(roles).map((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}).toCompletable
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return getUserService().findById(referenceType, referenceId, id).map(this::setInternalStatus);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | OTHER
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(updateUser).andThen(getUserService().findById(referenceType, referenceId, id).flatMap((user)->identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
    }
    return Single.error(ex);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
1 | Single | flatMap | METHOD_INVOCATION | userValidator.validate(updateUser).andThen(getUserService().findById(referenceType, referenceId, id).flatMap((user)->identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
    }
    return Single.error(ex);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))))
1 | Single | doOnError | METHOD_INVOCATION | (user)->identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
    }
    return Single.error(ex);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))
1 | Single | doOnSuccess | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
    }
    return Single.error(ex);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).oldValue(user).user(user1))).doOnError
1 | Single | onErrorResumeNext | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
    }
    return Single.error(ex);
}).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap((idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
}).onErrorResumeNext
1 | Single | flatMap | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap((userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle((userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
            updateUser.setClient(client1.getId());
            return Single.just(userProvider);
        });
    }
    return Single.just(userProvider);
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(user.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(user.getSource()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return checkClient.apply(referenceId, client).flatMapSingle((client1)->{
    updateUser.setClient(client1.getId());
    return Single.just(userProvider);
});
1 | Single | just | METHOD_INVOCATION | return Single.just(userProvider);
1 | Single | METHOD_INVOCATION | Single.just(userProvider)
1 | Single | just | METHOD_INVOCATION | return Single.just(userProvider);
1 | Single | METHOD_INVOCATION | Single.just(userProvider)
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (userProvider)->userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userProvider.findByUsername(user.getUsername()).switchIfEmpty(Maybe.error(new UserNotFoundException(user.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user.getUsername()))
1 | Single | map | METHOD_INVOCATION | return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
1 | Single | map | METHOD_INVOCATION | return getUserService().update(referenceType, referenceId, id, updateUser).map(this::setInternalStatus);
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Single | doOnError | METHOD_INVOCATION | return getUserService().findById(referenceType, referenceId, id).flatMap((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | getUserService().findById(referenceType, referenceId, id).flatMap((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type((status ? EventType.USER_ENABLED : EventType.USER_DISABLED)).user(user1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | getUserService().findById(referenceType, referenceId, id).flatMap((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).doOnSuccess
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return getUserService().findById(referenceType, referenceId, userId).flatMapCompletable((user)->identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen(getUserService().delete(userId)).andThen((ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable))));
1 | Completable | doOnError | METHOD_INVOCATION | (user)->identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen(getUserService().delete(userId)).andThen((ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).throwable(throwable)))
1 | Completable | doOnComplete | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen(getUserService().delete(userId)).andThen((ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user))).doOnError
1 | Completable | andThen | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen(getUserService().delete(userId)).andThen((ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))).doOnComplete
1 | Completable | andThen | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen(getUserService().delete(userId)).andThen
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable((optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return Completable.complete();
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return Completable.complete();
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return Completable.complete();
        }
        return Completable.error(ex);
    });
}).andThen
1 | Maybe | map | METHOD_INVOCATION | identityProviderManager.getUserProvider(user.getSource()).map(Optional::ofNullable).flatMapCompletable
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return Completable.complete();
    }
    return Completable.error(ex);
});
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | return Completable.error(ex);
1 | Completable | METHOD_INVOCATION | Completable.error(ex)
1 | Completable | complete | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | (ReferenceType.ORGANIZATION != referenceType) ? Completable.complete() : membershipService.findByMember(userId, MemberType.USER).flatMapCompletable((membership)->membershipService.delete(membership.getId()))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Flowable | blockingIterable | METHOD_INVOCATION | certificateService.findAll().blockingIterable().forEach
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(certificateProvider);
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificateProvider)
1 | Maybe | blockingGet | METHOD_INVOCATION | Certificate certificate = certificateService.findById(certificateId).blockingGet()
1 | Maybe | empty | METHOD_INVOCATION | return Maybe.empty();
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | certificateProvider == null ? Maybe.empty() : Maybe.just(certificateProvider)
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | certificateProvider == null ? Maybe.empty() : Maybe.just(certificateProvider)
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificateProvider)
1 | Maybe | subscribe | METHOD_INVOCATION | certificateService.findById(certificateId).subscribe(this::loadCertificate, (error)->logger.error("Unable to deploy certificate {}", certificateId, error), ()->logger.error("No certificate found with id {}", certificateId));
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::createOrUpdateSystemScopes).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::createOrUpdateSystemScopes).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError().map((scope)->domain);
1 | Observable | lastOrError | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError().map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values())
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return scopeService.findByDomainAndKey(domain, systemScope.getKey()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle((optScope)->{
    if (!optScope.isPresent()) {
        logger.info("Create a new system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        NewSystemScope scope = new NewSystemScope();
        scope.setKey(systemScope.getKey());
        scope.setClaims(systemScope.getClaims());
        scope.setName(systemScope.getLabel());
        scope.setDescription(systemScope.getDescription());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.create(domain, scope);
    } else if (shouldUpdateSystemScope(optScope, systemScope)) {
        logger.info("Update a system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        final Scope existingScope = optScope.get();
        UpdateSystemScope scope = new UpdateSystemScope();
        scope.setName(existingScope.getName() != null ? existingScope.getName() : systemScope.getLabel());
        scope.setDescription(existingScope.getDescription() != null ? existingScope.getDescription() : systemScope.getDescription());
        scope.setClaims(systemScope.getClaims());
        scope.setExpiresIn(existingScope.getExpiresIn());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.update(domain, optScope.get().getId(), scope);
    }
    return Single.just(optScope.get());
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, systemScope.getKey()).map(Optional::of).defaultIfEmpty(Optional.empty()).flatMapSingle
1 | Maybe | map | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, systemScope.getKey()).map(Optional::of).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(optScope.get());
1 | Single | METHOD_INVOCATION | Single.just(optScope.get())
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | policyRepository.collectionExists().flatMapCompletable((collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return policyRepository.findAll().groupBy(Policy::getDomain).flatMapCompletable((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return policiesPerDomain.toList().flatMapCompletable((policies)->migrateToFlows(policies, domain));
        }).andThen(policyRepository.deleteCollection());
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return Completable.complete();
    }
}).subscribe(()->LOGGER.info("Policies to flows upgrade, done."), (error)->LOGGER.error("An error occurs while updating policies to flows", error));
1 | Single | flatMapCompletable | METHOD_INVOCATION | policyRepository.collectionExists().flatMapCompletable((collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return policyRepository.findAll().groupBy(Policy::getDomain).flatMapCompletable((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return policiesPerDomain.toList().flatMapCompletable((policies)->migrateToFlows(policies, domain));
        }).andThen(policyRepository.deleteCollection());
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return Completable.complete();
    }
}).subscribe
1 | Completable | andThen | METHOD_INVOCATION | return policyRepository.findAll().groupBy(Policy::getDomain).flatMapCompletable((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return policiesPerDomain.toList().flatMapCompletable((policies)->migrateToFlows(policies, domain));
}).andThen(policyRepository.deleteCollection());
1 | Flowable | flatMapCompletable | METHOD_INVOCATION | policyRepository.findAll().groupBy(Policy::getDomain).flatMapCompletable((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return policiesPerDomain.toList().flatMapCompletable((policies)->migrateToFlows(policies, domain));
}).andThen
1 | Flowable | groupBy | METHOD_INVOCATION | policyRepository.findAll().groupBy(Policy::getDomain).flatMapCompletable
1 | Single | flatMapCompletable | METHOD_INVOCATION | return policiesPerDomain.toList().flatMapCompletable((policies)->migrateToFlows(policies, domain));
1 | Flowable | toList | METHOD_INVOCATION | policiesPerDomain.toList().flatMapCompletable
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | OTHER
1 | Completable | doOnError | METHOD_INVOCATION | return Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).doOnError((error)->LOGGER.info("Error during policies migration for domain {}", domain, error));
1 | Completable | doOnComplete | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).doOnError
1 | Observable | flatMapCompletable | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(flows.values())
1 | Single | toCompletable | METHOD_INVOCATION | (flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()
1 | Maybe | blockingGet | METHOD_INVOCATION | final PolicyPlugin policyPlugin = policyPluginService.findById(policy.getType()).blockingGet()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | blockingGet | METHOD_INVOCATION | Organization organization = organizationService.createDefault().blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | Domain adminDomain = domainService.findById(ADMIN_DOMAIN).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | organizationService.update(organization.getId(), patchOrganization, null).blockingGet();
1 | Maybe | blockingGet | METHOD_INVOCATION | Role organizationOwnerRole = roleService.findDefaultRole(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | userPage = userService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT, page, PAGE_SIZE).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | domainService.delete(ADMIN_DOMAIN).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | organization = organizationService.findById(Organization.DEFAULT).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | IdentityProvider inlineIdp = identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId())).firstElement().blockingGet()
1 | Flowable | firstElement | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId())).firstElement().blockingGet
1 | Flowable | filter | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT).filter((identityProvider)->identityProvider.getType().equals("inline-am-idp") && !identityProvider.isExternal() && identities.contains(identityProvider.getId())).firstElement
1 | Maybe | blockingGet | METHOD_INVOCATION | User adminUser = userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, ADMIN_USERNAME, inlineIdp.getId()).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | IdentityProvider createdIdentityProvider = identityProviderService.create(ReferenceType.ORGANIZATION, Organization.DEFAULT, adminIdentityProvider, null).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | organizationService.update(Organization.DEFAULT, patchOrganization, null).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | return userService.create(newUser).blockingGet();
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | blockingGet | METHOD_INVOCATION | Role adminRole = roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | Role organizationPrimaryOwnerRole = roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION).blockingGet()
1 | Flowable | blockingFirst | METHOD_INVOCATION | Membership member = membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).filter((membership)->membership.getMemberType() == MemberType.USER).blockingFirst(null)
1 | Flowable | filter | METHOD_INVOCATION | membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).filter((membership)->membership.getMemberType() == MemberType.USER).blockingFirst
1 | Single | blockingGet | METHOD_INVOCATION | membershipService.setPlatformAdmin(member.getMemberId()).blockingGet();
1 | Single | blockingGet | METHOD_INVOCATION | Boolean alreadyHasMembership = membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).count().map((count)->count > 0).blockingGet()
1 | Single | map | METHOD_INVOCATION | membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).count().map((count)->count > 0).blockingGet
1 | Flowable | count | METHOD_INVOCATION | membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).count().map
1 | Single | blockingGet | METHOD_INVOCATION | membershipService.addOrUpdate(Organization.DEFAULT, membership).blockingGet();
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = roleService.createOrUpdateSystemRoles().blockingGet()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return installationService.getOrInitialize().map((installation)->{
    command.getPayload().getNode().setInstallationId(installation.getId());
    command.getPayload().getNode().setHostname(node.hostname());
    command.getPayload().getAdditionalInformation().putAll(installation.getAdditionalInformation());
    command.getPayload().getAdditionalInformation().put(API_URL, apiURL);
    command.getPayload().getAdditionalInformation().put(UI_URL, uiURL);
    command.getPayload().setDefaultOrganizationId(Organization.DEFAULT);
    command.getPayload().setDefaultEnvironmentId(Environment.DEFAULT);
    return command;
});
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return installationService.get().map(Installation::getAdditionalInformation).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId())).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus())).flatMap(installationService::setAdditionalInformation).map((installation)->reply);
1 | Single | flatMap | METHOD_INVOCATION | installationService.get().map(Installation::getAdditionalInformation).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId())).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus())).flatMap(installationService::setAdditionalInformation).map
1 | Single | doOnSuccess | METHOD_INVOCATION | installationService.get().map(Installation::getAdditionalInformation).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId())).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_STATUS, reply.getInstallationStatus())).flatMap
1 | Single | doOnSuccess | METHOD_INVOCATION | installationService.get().map(Installation::getAdditionalInformation).doOnSuccess((infos)->infos.put(Installation.COCKPIT_INSTALLATION_ID, reply.getInstallationId())).doOnSuccess
1 | Single | map | METHOD_INVOCATION | installationService.get().map(Installation::getAdditionalInformation).doOnSuccess
1 | Single | just | METHOD_INVOCATION | return Single.just(reply);
1 | Single | METHOD_INVOCATION | Single.just(reply)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Maybe | error | METHOD_INVOCATION | (x,y)->Maybe.error(new NotImplementedException())
1 | Maybe | METHOD_INVOCATION | Maybe.error(new NotImplementedException())
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((existingUser)->{
    updateInfos(existingUser, newUser);
    return userService.update(existingUser).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
}));
1 | Maybe | flatMap | METHOD_INVOCATION | userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((existingUser)->{
    updateInfos(existingUser, newUser);
    return userService.update(existingUser).toMaybe();
}).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap
1 | Maybe | defer | METHOD_INVOCATION | userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))
1 | Single | toMaybe | METHOD_INVOCATION | return userService.update(existingUser).toMaybe();
1 | Single | defer | METHOD_INVOCATION | userService.findByExternalIdAndSource(referenceType, referenceId, newUser.getExternalId(), newUser.getSource()).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource()))).flatMap((existingUser)->{
    updateInfos(existingUser, newUser);
    return userService.update(existingUser).toMaybe();
}).switchIfEmpty(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
}))
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
})
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserInvalidException("Invalid identity provider for [\'" + newUser.getUsername() + "\']"));
1 | Single | METHOD_INVOCATION | Single.error(new UserInvalidException("Invalid identity provider for [\'" + newUser.getUsername() + "\']"))
1 | Single | flatMap | METHOD_INVOCATION | return userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource()).isEmpty().flatMap((isEmpty)->{
    if (!isEmpty) {
        return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
    } else {
        return identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle((userProvider)->{
            newUser.setDomain(null);
            newUser.setClient(null);
            newUser.setInternal(true);
            String password = newUser.getPassword();
            if (password == null || !passwordValidator.isValid(password)) {
                return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
            userToPersist.setReferenceId(organization.getId());
            userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
            return userValidator.validate(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser)).map((idpUser)->{
                userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
                userToPersist.setId(RandomString.generate());
                userToPersist.setExternalId(userToPersist.getId());
                return userToPersist;
            }).flatMap((newOrgUser)->{
                return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
            }).map(this::setInternalStatus));
        });
    }
});
1 | Maybe | isEmpty | METHOD_INVOCATION | userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource()).isEmpty().flatMap
1 | Single | error | METHOD_INVOCATION | return Single.error(new UserAlreadyExistsException(newUser.getUsername()));
1 | Single | METHOD_INVOCATION | Single.error(new UserAlreadyExistsException(newUser.getUsername()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle((userProvider)->{
    newUser.setDomain(null);
    newUser.setClient(null);
    newUser.setInternal(true);
    String password = newUser.getPassword();
    if (password == null || !passwordValidator.isValid(password)) {
        return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
    }
    newUser.setRegistrationCompleted(true);
    newUser.setEnabled(true);
    final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
    userToPersist.setReferenceId(organization.getId());
    userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
    return userValidator.validate(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser)).map((idpUser)->{
        userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
        userToPersist.setId(RandomString.generate());
        userToPersist.setExternalId(userToPersist.getId());
        return userToPersist;
    }).flatMap((newOrgUser)->{
        return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
    }).map(this::setInternalStatus));
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource()))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | identityProviderManager.getUserProvider(newUser.getSource()).switchIfEmpty(Maybe.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserProviderNotFoundException(newUser.getSource()))
1 | Single | error | METHOD_INVOCATION | return Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
1 | Single | METHOD_INVOCATION | Single.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"))
1 | Completable | andThen | METHOD_INVOCATION | return userValidator.validate(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser)).map((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
}).flatMap((newOrgUser)->{
    return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).map(this::setInternalStatus));
1 | Completable | doOnError | METHOD_INVOCATION | userValidator.validate(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen
1 | Single | map | METHOD_INVOCATION | userValidator.validate(userToPersist).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable))).andThen(userProvider.create(convert(newUser)).map((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
}).flatMap((newOrgUser)->{
    return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).map(this::setInternalStatus))
1 | Single | flatMap | METHOD_INVOCATION | userProvider.create(convert(newUser)).map((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
}).flatMap((newOrgUser)->{
    return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
}).map
1 | Single | map | METHOD_INVOCATION | userProvider.create(convert(newUser)).map((idpUser)->{
    userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
    userToPersist.setId(RandomString.generate());
    userToPersist.setExternalId(userToPersist.getId());
    return userToPersist;
}).flatMap
1 | Single | doOnError | METHOD_INVOCATION | return userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)));
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1))).doOnError
1 | Single | flatMap | METHOD_INVOCATION | userService.create(newOrgUser).flatMap((newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))).doOnSuccess
1 | Completable | andThen | METHOD_INVOCATION | (newlyCreatedUser)->userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))
1 | Single | just | METHOD_INVOCATION | userService.setRoles(newlyCreatedUser).andThen(Single.just(newlyCreatedUser))
1 | Single | METHOD_INVOCATION | Single.just(newlyCreatedUser)
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"));
1 | Completable | METHOD_INVOCATION | Completable.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value"))
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidUserException("Unsupported source for this action"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidUserException("Unsupported source for this action"))
1 | Single | ignoreElement | METHOD_INVOCATION | return userService.update(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))).ignoreElement();
1 | Single | doOnError | METHOD_INVOCATION | userService.update(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable))).ignoreElement
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.update(user).doOnSuccess((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user))).doOnError
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return Flowable.fromIterable(notifierPluginManager.findAll()).flatMapSingle((plugin)->convert(plugin, expand)).onErrorResumeNext((throwable)->{
    return Flowable.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable));
});
1 | Flowable | flatMapSingle | METHOD_INVOCATION | Flowable.fromIterable(notifierPluginManager.findAll()).flatMapSingle((plugin)->convert(plugin, expand)).onErrorResumeNext
1 | Flowable | fromIterable | METHOD_INVOCATION | Flowable.fromIterable(notifierPluginManager.findAll()).flatMapSingle
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(notifierPluginManager.findAll())
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable));
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("An error occurs while trying to get notifier plugins", throwable))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return Maybe.fromCallable(()->notifierPluginManager.findById(notifierId)).flatMap((plugin)->convert(plugin).toMaybe()).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable));
}).switchIfEmpty(Single.defer(()->Single.error(new NotifierPluginNotFoundException(notifierId))));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.findById(notifierId)).flatMap((plugin)->convert(plugin).toMaybe()).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable));
}).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.findById(notifierId)).flatMap((plugin)->convert(plugin).toMaybe()).onErrorResumeNext
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.findById(notifierId)).flatMap
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.findById(notifierId))
1 | Single | toMaybe | METHOD_INVOCATION | (plugin)->convert(plugin).toMaybe()
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable))
1 | Single | defer | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.findById(notifierId)).flatMap((plugin)->convert(plugin).toMaybe()).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable));
}).switchIfEmpty(Single.defer(()->Single.error(new NotifierPluginNotFoundException(notifierId))))
1 | Single | METHOD_INVOCATION | Single.defer(()->Single.error(new NotifierPluginNotFoundException(notifierId)))
1 | Single | error | METHOD_INVOCATION | ()->Single.error(new NotifierPluginNotFoundException(notifierId))
1 | Single | METHOD_INVOCATION | Single.error(new NotifierPluginNotFoundException(notifierId))
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
}).map(JsonNode::toString).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable));
}).switchIfEmpty(Single.defer(()->Single.error(new NotifierPluginSchemaNotFoundException(notifierId))));
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
}).map(JsonNode::toString).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable));
}).switchIfEmpty
1 | Maybe | map | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
}).map(JsonNode::toString).onErrorResumeNext
1 | Maybe | doOnSuccess | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
}).map
1 | Maybe | map | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable))
1 | Single | defer | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getSchema(notifierId)).map(objectMapper::readTree).doOnSuccess((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
}).map(JsonNode::toString).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable));
}).switchIfEmpty(Single.defer(()->Single.error(new NotifierPluginSchemaNotFoundException(notifierId))))
1 | Single | METHOD_INVOCATION | Single.defer(()->Single.error(new NotifierPluginSchemaNotFoundException(notifierId)))
1 | Single | error | METHOD_INVOCATION | ()->Single.error(new NotifierPluginSchemaNotFoundException(notifierId))
1 | Single | METHOD_INVOCATION | Single.error(new NotifierPluginSchemaNotFoundException(notifierId))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return Maybe.fromCallable(()->notifierPluginManager.getIcon(notifierId)).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable));
});
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getIcon(notifierId)).onErrorResumeNext
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getIcon(notifierId))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return Maybe.fromCallable(()->notifierPluginManager.getDocumentation(notifierId)).onErrorResumeNext((throwable)->{
    return Maybe.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable));
});
1 | Maybe | fromCallable | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getDocumentation(notifierId)).onErrorResumeNext
1 | Maybe | METHOD_INVOCATION | Maybe.fromCallable(()->notifierPluginManager.getDocumentation(notifierId))
1 | Maybe | error | METHOD_INVOCATION | return Maybe.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable));
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable))
1 | Single | RETURN_TYPE
1 | Completable | andThen | METHOD_INVOCATION | return this.getIcon(notifierPlugin.getId()).doOnSuccess(notifierPlugin::setIcon).ignoreElement().andThen(Single.just(notifierPlugin));
1 | Maybe | ignoreElement | METHOD_INVOCATION | this.getIcon(notifierPlugin.getId()).doOnSuccess(notifierPlugin::setIcon).ignoreElement().andThen
1 | Maybe | doOnSuccess | METHOD_INVOCATION | this.getIcon(notifierPlugin.getId()).doOnSuccess(notifierPlugin::setIcon).ignoreElement
1 | Single | just | METHOD_INVOCATION | this.getIcon(notifierPlugin.getId()).doOnSuccess(notifierPlugin::setIcon).ignoreElement().andThen(Single.just(notifierPlugin))
1 | Single | METHOD_INVOCATION | Single.just(notifierPlugin)
1 | Single | just | METHOD_INVOCATION | return Single.just(notifierPlugin);
1 | Single | METHOD_INVOCATION | Single.just(notifierPlugin)
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new MembershipReply(command.getId(), CommandStatus.ERROR));
1 | Single | METHOD_INVOCATION | Single.just(new MembershipReply(command.getId(), CommandStatus.ERROR))
1 | Single | LOCAL_VARIABLE
1 | Maybe | toSingle | METHOD_INVOCATION | Single<String> userObs = userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE).map(User::getId).toSingle()
1 | Maybe | map | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), COCKPIT_SOURCE).map(User::getId).toSingle
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorReturn | METHOD_INVOCATION | return Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap((membership)->membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership)).doOnSuccess((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId())).map((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError((error)->logger.error("Error occurred when trying to assign role [{}] on {} [{}] for cockpit user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membershipPayload.getUserId(), membershipPayload.getOrganizationId(), error)).onErrorReturn((throwable)->new MembershipReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap((membership)->membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership)).doOnSuccess((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId())).map((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError((error)->logger.error("Error occurred when trying to assign role [{}] on {} [{}] for cockpit user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membershipPayload.getUserId(), membershipPayload.getOrganizationId(), error)).onErrorReturn
1 | Single | map | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap((membership)->membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership)).doOnSuccess((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId())).map((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED)).doOnError
1 | Single | doOnSuccess | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap((membership)->membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership)).doOnSuccess((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId())).map
1 | Single | flatMap | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap((membership)->membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership)).doOnSuccess
1 | Single | zip | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}).flatMap
1 | Single | METHOD_INVOCATION | Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return roleService.findSystemRole(systemRole, assignableType).toSingle();
1 | Maybe | toSingle | METHOD_INVOCATION | return roleService.findDefaultRole(organizationId, defaultRole, assignableType).toSingle();
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidRoleException(String.format("Unable to find role [%s] for organization [%s].", roleName, organizationId)));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidRoleException(String.format("Unable to find role [%s] for organization [%s].", roleName, organizationId)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Single | METHOD_INVOCATION | Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
})
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return userService.statistics(query).map(AnalyticsGroupByResponse::new);
1 | Single | just | METHOD_INVOCATION | return Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Single | METHOD_INVOCATION | Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
})
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return userService.countByApplication(query.getDomain(), query.getApplication()).map(AnalyticsCountResponse::new);
1 | Single | map | METHOD_INVOCATION | return auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType()).map((values)->new AnalyticsCountResponse((Long)values.values().iterator().next()));
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType()).map((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(pluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(pluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pluginManager.getAll()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pluginManager.getAll())
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin resource = pluginManager.findById(pluginId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get bot detection plugin : {}", pluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get bot detection plugin : " + pluginId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin resource = pluginManager.findById(pluginId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get bot detection plugin : {}", pluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get bot detection plugin : " + pluginId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = pluginManager.getSchema(pluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for bot detection plugin {}", pluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for bot detection plugin " + pluginId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = pluginManager.getSchema(pluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for bot detection plugin {}", pluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for bot detection plugin " + pluginId, e));
    }
})
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::updateDefaultIdp).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::updateDefaultIdp).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return identityProviderService.findById(DEFAULT_IDP_PREFIX + domain.getId()).isEmpty().flatMap((isEmpty)->{
    if (isEmpty) {
        logger.info("No default idp found for domain {}, update domain", domain.getName());
        return identityProviderManager.create(domain.getId());
    }
    return Single.just(new IdentityProvider());
});
1 | Maybe | isEmpty | METHOD_INVOCATION | identityProviderService.findById(DEFAULT_IDP_PREFIX + domain.getId()).isEmpty().flatMap
1 | Single | just | METHOD_INVOCATION | return Single.just(new IdentityProvider());
1 | Single | METHOD_INVOCATION | Single.just(new IdentityProvider())
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Flowable | blockingIterable | METHOD_INVOCATION | emailTemplateService.findAll().filter(Email::isEnabled).blockingIterable().forEach
1 | Flowable | filter | METHOD_INVOCATION | emailTemplateService.findAll().filter(Email::isEnabled).blockingIterable
1 | Maybe | subscribe | METHOD_INVOCATION | emailTemplateService.findById(emailId).subscribe(this::loadEmail, (error)->logger.error("Unable to deploy email {}", emailId, error), ()->logger.error("No email found with id {}", emailId));
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(factorPluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(factorPluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(factorPluginManager.getAll()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(factorPluginManager.getAll())
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin authenticator = factorPluginManager.findById(factorId);
        if (authenticator != null) {
            emitter.onSuccess(convert(authenticator));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get factor plugin : {}", factorId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get factor plugin : " + factorId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin authenticator = factorPluginManager.findById(factorId);
        if (authenticator != null) {
            emitter.onSuccess(convert(authenticator));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get factor plugin : {}", factorId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get factor plugin : " + factorId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = factorPluginManager.getSchema(factorId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for factor plugin {}", factorId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for factor plugin " + factorId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = factorPluginManager.getSchema(factorId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for factor plugin {}", factorId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for factor plugin " + factorId, e));
    }
})
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return findMembershipPermissions(user, Collections.singletonMap(referenceType, referenceId).entrySet().stream()).map(this::aclsPerPermission);
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return haveConsistentReferenceIds(permissions).flatMap((consistent)->{
    if (consistent) {
        return findMembershipPermissions(user, permissions.referenceStream()).map(permissions::match);
    }
    return Single.just(false);
});
1 | Single | map | METHOD_INVOCATION | return findMembershipPermissions(user, permissions.referenceStream()).map(permissions::match);
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | return Single.just(consistencyCache.get(key));
1 | Single | METHOD_INVOCATION | Single.just(consistencyCache.get(key))
1 | Single | OTHER
1 | Single | doOnSuccess | METHOD_INVOCATION | return Single.merge(obs).all((consistent)->consistent).onErrorResumeNext(Single.just(false)).doOnSuccess((consistent)->consistencyCache.put(key, consistent));
1 | Single | onErrorResumeNext | METHOD_INVOCATION | Single.merge(obs).all((consistent)->consistent).onErrorResumeNext(Single.just(false)).doOnSuccess
1 | Flowable | all | METHOD_INVOCATION | Single.merge(obs).all((consistent)->consistent).onErrorResumeNext
1 | Single | merge | METHOD_INVOCATION | Single.merge(obs).all
1 | Single | METHOD_INVOCATION | Single.merge(obs)
1 | Single | just | METHOD_INVOCATION | Single.merge(obs).all((consistent)->consistent).onErrorResumeNext(Single.just(false))
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return applicationService.findById(applicationId).flatMapSingle((application)->{
    if (domainId != null) {
        return Single.just(application.getDomain().equals(domainId));
    } else {
        return isDomainIdConsistent(application.getDomain(), environmentId, organizationId);
    }
});
1 | Single | just | METHOD_INVOCATION | return Single.just(application.getDomain().equals(domainId));
1 | Single | METHOD_INVOCATION | Single.just(application.getDomain().equals(domainId))
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return domainService.findById(domainId).flatMapSingle((domain)->{
    if (environmentId != null) {
        return Single.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT);
    } else {
        return isEnvironmentIdConsistent(domain.getReferenceId(), organizationId);
    }
});
1 | Single | just | METHOD_INVOCATION | return Single.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT);
1 | Single | METHOD_INVOCATION | Single.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT)
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return environmentService.findById(environmentId, organizationId).map((environment)->true).onErrorResumeNext(Single.just(false));
1 | Single | map | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map((environment)->true).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | environmentService.findById(environmentId, organizationId).map((environment)->true).onErrorResumeNext(Single.just(false))
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(new InvalidUserException("Specified user is invalid"));
1 | Single | METHOD_INVOCATION | Single.error(new InvalidUserException("Specified user is invalid"))
1 | Single | flatMap | METHOD_INVOCATION | return groupService.findByMember(user.getId()).map(Group::getId).toList().flatMap((userGroupIds)->{
    MembershipCriteria criteria = new MembershipCriteria();
    criteria.setUserId(user.getId());
    criteria.setGroupIds(userGroupIds.isEmpty() ? null : userGroupIds);
    criteria.setLogicalOR(true);
    return Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList())).toList().flatMap((allMemberships)->{
        if (allMemberships.isEmpty()) {
            return Single.just(Collections.emptyMap());
        }
        return roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map((allRoles)->permissionsPerMembership(allMemberships, allRoles));
    });
});
1 | Flowable | toList | METHOD_INVOCATION | groupService.findByMember(user.getId()).map(Group::getId).toList().flatMap
1 | Flowable | map | METHOD_INVOCATION | groupService.findByMember(user.getId()).map(Group::getId).toList
1 | Single | flatMap | METHOD_INVOCATION | return Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList())).toList().flatMap((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return Single.just(Collections.emptyMap());
    }
    return roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map((allRoles)->permissionsPerMembership(allMemberships, allRoles));
});
1 | Flowable | toList | METHOD_INVOCATION | Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList())).toList().flatMap
1 | Flowable | merge | METHOD_INVOCATION | Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList())).toList
1 | Flowable | METHOD_INVOCATION | Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList()))
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyMap());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyMap())
1 | Single | map | METHOD_INVOCATION | return roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList())).map((allRoles)->permissionsPerMembership(allMemberships, allRoles));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(!this.triggerProviderManager.findAll().isEmpty());
1 | Single | METHOD_INVOCATION | Single.just(!this.triggerProviderManager.findAll().isEmpty())
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) ? entry.getKey().external() : !entry.getKey().external()).map((entry)->convert(entry.getValue(), expand)).toList().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to list all identity provider plugins", ex);
    return Single.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex));
});
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) ? entry.getKey().external() : !entry.getKey().external()).map((entry)->convert(entry.getValue(), expand)).toList().onErrorResumeNext
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) ? entry.getKey().external() : !entry.getKey().external()).map((entry)->convert(entry.getValue(), expand)).toList
1 | Observable | filter | METHOD_INVOCATION | Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter((entry)->(external != null && external) ? entry.getKey().external() : !entry.getKey().external()).map
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()).filter
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(identityProviderPluginManager.getAll().entrySet())
1 | Single | error | METHOD_INVOCATION | return Single.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex));
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex))
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin identityProvider = identityProviderPluginManager.findById(identityProviderId);
        if (identityProvider != null) {
            emitter.onSuccess(convert(identityProvider));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get identity provider plugin : {}", identityProviderId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get identity provider plugin : " + identityProviderId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin identityProvider = identityProviderPluginManager.findById(identityProviderId);
        if (identityProvider != null) {
            emitter.onSuccess(convert(identityProvider));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get identity provider plugin : {}", identityProviderId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get identity provider plugin : " + identityProviderId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = identityProviderPluginManager.getSchema(identityProviderId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for identity provider plugin " + identityProviderId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = identityProviderPluginManager.getSchema(identityProviderId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for identity provider plugin " + identityProviderId, e));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = identityProviderPluginManager.getIcon(identityProviderId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for identity provider plugin " + identityProviderId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String icon = identityProviderPluginManager.getIcon(identityProviderId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for identity provider plugin " + identityProviderId, e));
    }
})
1 | Maybe | subscribe | METHOD_INVOCATION | this.getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | final Installation installation = installationService.getOrInitialize().blockingGet()
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
});
1 | Single | METHOD_INVOCATION | Single.just(new AnalyticsResponse(){
    
    () {
        super();
    }
})
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType()).map((values)->{
    Timestamp timestamp = new Timestamp(query.getFrom(), query.getTo(), query.getInterval());
    List<Bucket> buckets = values.entrySet().stream().map((entry)->{
        Bucket bucket = new Bucket();
        bucket.setName((String)entry.getKey());
        bucket.setField(query.getField());
        bucket.setData((List<Long>)entry.getValue());
        return bucket;
    }).collect(Collectors.toList());
    AnalyticsHistogramResponse analyticsHistogramResponse = new AnalyticsHistogramResponse();
    analyticsHistogramResponse.setTimestamp(timestamp);
    analyticsHistogramResponse.setValues(buckets);
    return analyticsHistogramResponse;
});
1 | Single | RETURN_TYPE
1 | Single | flatMap | METHOD_INVOCATION | return executeGroupBy(query.getDomain(), queryBuilder.build(), query.getType()).flatMap((analyticsResponse)->fetchMetadata((AnalyticsGroupByResponse)analyticsResponse));
1 | Single | map | METHOD_INVOCATION | return userService.statistics(query).map((value)->new AnalyticsGroupByResponse(value));
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(analyticsGroupByResponse);
1 | Single | METHOD_INVOCATION | Single.just(analyticsGroupByResponse)
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->applicationService.findById((String)appId).map((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
}).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true)))).toList().map((result)->{
    Map<String, Map<String, Object>> metadata = result.stream().flatMap((m)->m.entrySet().stream()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    analyticsGroupByResponse.setMetadata(metadata);
    return analyticsGroupByResponse;
});
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->applicationService.findById((String)appId).map((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
}).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true)))).toList().map
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->applicationService.findById((String)appId).map((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
}).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true)))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(values.keySet()).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(values.keySet())
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | (appId)->applicationService.findById((String)appId).map((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
}).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true)))
1 | Maybe | map | METHOD_INVOCATION | applicationService.findById((String)appId).map((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
}).defaultIfEmpty
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return applicationService.countByDomain(query.getDomain()).map((value)->new AnalyticsCountResponse(value));
1 | Single | map | METHOD_INVOCATION | return userService.countByDomain(query.getDomain()).map((value)->new AnalyticsCountResponse(value));
1 | Single | map | METHOD_INVOCATION | return auditService.aggregate(query.getDomain(), queryBuilder.build(), query.getType()).map((values)->values.values().isEmpty() ? new AnalyticsCountResponse(0L) : new AnalyticsCountResponse((Long)values.values().iterator().next()));
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return auditService.aggregate(domain, criteria, type).map((values)->new AnalyticsGroupByResponse(values));
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList().subscribe();
1 | Observable | toList | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList().subscribe
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | just | METHOD_INVOCATION | return Single.just(domain);
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | RETURN_TYPE
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | return getReporter(referenceType, referenceId).findById(referenceType, referenceId, auditId).switchIfEmpty(Single.error(new AuditNotFoundException(auditId)));
1 | Single | error | METHOD_INVOCATION | getReporter(referenceType, referenceId).findById(referenceType, referenceId, auditId).switchIfEmpty(Single.error(new AuditNotFoundException(auditId)))
1 | Single | METHOD_INVOCATION | Single.error(new AuditNotFoundException(auditId))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Maybe | RETURN_TYPE
1 | Single | toMaybe | METHOD_INVOCATION | return findById(ReferenceType.DOMAIN, domain, auditId).toMaybe();
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | boolean upgraded = systemTaskRepository.findById(TASK_ID).switchIfEmpty(Single.defer(()->createSystemTask(instanceOperationId))).flatMap((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return Single.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry"));
    
    default: 
        return Single.just(true);
    
    }
}).retryWhen(new RetryWithDelay(3, 5000)).blockingGet()
1 | Single | retryWhen | METHOD_INVOCATION | systemTaskRepository.findById(TASK_ID).switchIfEmpty(Single.defer(()->createSystemTask(instanceOperationId))).flatMap((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return Single.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry"));
    
    default: 
        return Single.just(true);
    
    }
}).retryWhen(new RetryWithDelay(3, 5000)).blockingGet
1 | Single | flatMap | METHOD_INVOCATION | systemTaskRepository.findById(TASK_ID).switchIfEmpty(Single.defer(()->createSystemTask(instanceOperationId))).flatMap((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return Single.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry"));
    
    default: 
        return Single.just(true);
    
    }
}).retryWhen
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | systemTaskRepository.findById(TASK_ID).switchIfEmpty(Single.defer(()->createSystemTask(instanceOperationId))).flatMap
1 | Single | defer | METHOD_INVOCATION | systemTaskRepository.findById(TASK_ID).switchIfEmpty(Single.defer(()->createSystemTask(instanceOperationId)))
1 | Single | METHOD_INVOCATION | Single.defer(()->createSystemTask(instanceOperationId))
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry"))
1 | Single | just | METHOD_INVOCATION | return Single.just(true);
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | RETURN_TYPE
1 | Single | map | METHOD_INVOCATION | return updateSystemTask(task, (SystemTaskStatus.ONGOING), conditionalOperationId).flatMap((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return Single.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry"));
    }
}).map((__)->true);
1 | Single | flatMap | METHOD_INVOCATION | updateSystemTask(task, (SystemTaskStatus.ONGOING), conditionalOperationId).flatMap((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return Single.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry"));
    }
}).map
1 | Single | error | METHOD_INVOCATION | return Single.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry"));
1 | Single | METHOD_INVOCATION | Single.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry"))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return systemTaskRepository.create(systemTask).onErrorResumeNext((err)->{
    logger.warn("SystemTask {} can\'t be created due to \'{}\'", TASK_ID, err.getMessage());
    return systemTaskRepository.findById(systemTask.getId()).toSingle();
});
1 | Maybe | toSingle | METHOD_INVOCATION | return systemTaskRepository.findById(systemTask.getId()).toSingle();
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements().doOnError((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()).andThen(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map((__)->true).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return Single.just(false);
})).onErrorResumeNext((err)->{
    logger.error("Unable to migrate scope options for applications: {}", err.getMessage());
    return Single.just(false);
});
1 | Completable | andThen | METHOD_INVOCATION | applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements().doOnError((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()).andThen(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map((__)->true).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return Single.just(false);
})).onErrorResumeNext
1 | Completable | doOnError | METHOD_INVOCATION | applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements().doOnError((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()).andThen
1 | Flowable | ignoreElements | METHOD_INVOCATION | applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements().doOnError
1 | Flowable | flatMapSingle | METHOD_INVOCATION | applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements
1 | Single | just | METHOD_INVOCATION | return Single.just(app);
1 | Single | METHOD_INVOCATION | Single.just(app)
1 | Single | subscribe | METHOD_INVOCATION | (err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()
1 | Single | onErrorResumeNext | METHOD_INVOCATION | applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return Single.just(app);
}).ignoreElements().doOnError((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()).andThen(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map((__)->true).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return Single.just(false);
}))
1 | Single | map | METHOD_INVOCATION | updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId()).map((__)->true).onErrorResumeNext
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | just | METHOD_INVOCATION | return Single.just(false);
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | flatMap | METHOD_INVOCATION | return attempts.flatMap((throwable)->{
    if (++retryCount < maxRetries) {
        return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
    }
    return Flowable.error(throwable);
});
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Flowable | METHOD_INVOCATION | Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS)
1 | Flowable | error | METHOD_INVOCATION | return Flowable.error(throwable);
1 | Flowable | METHOD_INVOCATION | Flowable.error(throwable)
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(reporterPluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(reporterPluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(reporterPluginManager.getAll()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(reporterPluginManager.getAll())
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin reporter = reporterPluginManager.findById(reporterId);
        if (reporter != null) {
            emitter.onSuccess(convert(reporter));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get reporter plugin : {}", reporterId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get reporter plugin : " + reporterId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin reporter = reporterPluginManager.findById(reporterId);
        if (reporter != null) {
            emitter.onSuccess(convert(reporter));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get reporter plugin : {}", reporterId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get reporter plugin : " + reporterId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = reporterPluginManager.getSchema(reporterId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for reporter plugin {}", reporterId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for reporter plugin " + reporterId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = reporterPluginManager.getSchema(reporterId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for reporter plugin {}", reporterId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for reporter plugin " + reporterId, e));
    }
})
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(resourcePluginManager.getAll()).map((plugin)->convert(plugin, expand)).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(resourcePluginManager.getAll()).map((plugin)->convert(plugin, expand)).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(resourcePluginManager.getAll()).map
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(resourcePluginManager.getAll())
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin resource = resourcePluginManager.findById(resourceId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get resource plugin : {}", resourceId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get resource plugin : " + resourceId, ex));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        Plugin resource = resourcePluginManager.findById(resourceId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get resource plugin : {}", resourceId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get resource plugin : " + resourceId, ex));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = resourcePluginManager.getSchema(resourceId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for resource plugin " + resourceId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String schema = resourcePluginManager.getSchema(resourceId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for resource plugin " + resourceId, e));
    }
})
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = resourcePluginManager.getIcon(resourceId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error has occurred when trying to get icon for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error has occurred when trying to get icon for resource plugin " + resourceId, e));
    }
});
1 | Maybe | METHOD_INVOCATION | Maybe.create((emitter)->{
    try {
        String icon = resourcePluginManager.getIcon(resourceId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error has occurred when trying to get icon for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error has occurred when trying to get icon for resource plugin " + resourceId, e));
    }
})
1 | Maybe | subscribe | METHOD_INVOCATION | this.getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap(installationService::setAdditionalInformation).map((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus())).doOnError((error)->logger.info("Error occurred when updating installation status.", error)).onErrorReturn((throwable)->new InstallationReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap(installationService::setAdditionalInformation).map((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus())).doOnError((error)->logger.info("Error occurred when updating installation status.", error)).onErrorReturn
1 | Single | doOnSuccess | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap(installationService::setAdditionalInformation).map((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus())).doOnError
1 | Single | map | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap(installationService::setAdditionalInformation).map((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess
1 | Single | flatMap | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap(installationService::setAdditionalInformation).map
1 | Single | doOnSuccess | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus())).flatMap
1 | Single | map | METHOD_INVOCATION | installationService.getOrInitialize().map(Installation::getAdditionalInformation).doOnSuccess
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable(this::updateDefaultReporter).subscribe();
1 | Observable | flatMapCompletable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable(this::updateDefaultReporter).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return reporterService.findByDomain(domain.getId()).toList().flatMapCompletable((reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return reporterService.createDefault(domain.getId()).ignoreElement();
    }
    return Completable.complete();
});
1 | Flowable | toList | METHOD_INVOCATION | reporterService.findByDomain(domain.getId()).toList().flatMapCompletable
1 | Single | ignoreElement | METHOD_INVOCATION | return reporterService.createDefault(domain.getId()).ignoreElement();
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null).map((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId())).doOnError((error)->logger.error("Error occurred when handling organization [{}] with id [{}].", organizationPayload.getName(), organizationPayload.getId(), error)).onErrorReturn((throwable)->new OrganizationReply(command.getId(), CommandStatus.ERROR));
1 | Single | doOnError | METHOD_INVOCATION | organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null).map((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId())).doOnError((error)->logger.error("Error occurred when handling organization [{}] with id [{}].", organizationPayload.getName(), organizationPayload.getId(), error)).onErrorReturn
1 | Single | doOnSuccess | METHOD_INVOCATION | organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null).map((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId())).doOnError
1 | Single | map | METHOD_INVOCATION | organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null).map((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED)).doOnSuccess
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(userService.createOrUpdate(eq(ReferenceType.ORGANIZATION), eq("orga#1"), argThat((newUser)->newUser.getExternalId().equals(userPayload.getId()) && newUser.getSource().equals("cockpit") && newUser.getFirstName().equals(userPayload.getFirstName()) && newUser.getLastName().equals(userPayload.getLastName()) && newUser.getEmail().equals(userPayload.getEmail()) && newUser.getAdditionalInformation().get("info1").equals(additionalInformation.get("info1")) && newUser.getAdditionalInformation().get("info2").equals(additionalInformation.get("info2")) && newUser.getAdditionalInformation().get(StandardClaims.PICTURE).equals(userPayload.getPicture())))).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | error | METHOD_INVOCATION | when(userService.createOrUpdate(eq(ReferenceType.ORGANIZATION), eq("orga#1"), any(NewUser.class))).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(installationService.addAdditionalInformation(any(Map.class))).thenReturn(Single.just(installation))
1 | Single | METHOD_INVOCATION | Single.just(installation)
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | error | METHOD_INVOCATION | when(installationService.addAdditionalInformation(any(Map.class))).thenReturn(Single.error(new RuntimeException("Unexpected error")))
1 | Single | METHOD_INVOCATION | Single.error(new RuntimeException("Unexpected error"))
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(Single.just(Collections.singletonList(domain)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(domain))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, 0)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptySet(), 0, 0))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, 0))).thenReturn(Single.just(new Page<>(Collections.singleton(domainScope), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(domainScope), 0, 1))
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.singleton(app)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(app))
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Single | just | METHOD_INVOCATION | when(scopeService.create(any(String.class), any(NewScope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(Single.just(Collections.singletonList(domain)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(domain))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.singleton(domainScope), 0, 1)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(domainScope), 0, 1))
1 | Single | just | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(Single.just(Collections.singletonList(domain)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(domain))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, 0)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptySet(), 0, 0))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, 0))).thenReturn(Single.just(new Page<>(Collections.singleton(domainScope), 0, 0)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(domainScope), 0, 0))
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | just | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(Single.just(Collections.singletonList(domain)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(domain))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE))
1 | Single | just | METHOD_INVOCATION | when(scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE)).thenReturn(Single.just(new Page<>(Collections.emptySet(), 0, Integer.MAX_VALUE))).thenReturn(Single.just(new Page<>(Collections.singleton(domainScope), 0, Integer.MAX_VALUE)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Collections.singleton(domainScope), 0, Integer.MAX_VALUE))
1 | Single | just | METHOD_INVOCATION | when(applicationService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.singleton(app)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(app))
1 | Single | just | METHOD_INVOCATION | when(roleService.findByDomain(domain.getId())).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Flowable | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(roleService.findRolesByName(any(), any(), any(), any())).thenReturn(Flowable.just(role))
1 | Flowable | METHOD_INVOCATION | Flowable.just(role)
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | when(domainService.findAllByCriteria(new DomainCriteria())).thenReturn(Flowable.just(domain))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flowable.just(alertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertTrigger)
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, new AlertTriggerCriteria())).thenReturn(Flowable.just(alertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertTrigger)
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(alertTriggerService.getById(ALERT_TRIGGER_ID)).thenReturn(Single.just(alertTrigger))
1 | Single | METHOD_INVOCATION | Single.just(alertTrigger)
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Flowable | just | METHOD_INVOCATION | when(alertTriggerService.findByDomainAndCriteria(DOMAIN_ID, alertTriggerCriteria)).thenReturn(Flowable.just(alertTrigger))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertTrigger)
1 | Flowable | just | METHOD_INVOCATION | when(alertNotifierService.findByReferenceAndCriteria(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertNotifierCriteria)).thenReturn(Flowable.just(alertNotifier))
1 | Flowable | METHOD_INVOCATION | Flowable.just(alertNotifier)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domain.getId())).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(domainService.findAll()).thenReturn(Single.just(Arrays.asList(domain)))
1 | Single | METHOD_INVOCATION | Single.just(Arrays.asList(domain))
1 | Maybe | empty | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(eq(DOMAIN_ID), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Maybe | empty | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(eq(DOMAIN_ID), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "openid")).thenReturn(Maybe.just(openId))
1 | Maybe | METHOD_INVOCATION | Maybe.just(openId)
1 | Maybe | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "phone")).thenReturn(Maybe.just(phone))
1 | Maybe | METHOD_INVOCATION | Maybe.just(phone)
1 | Maybe | just | METHOD_INVOCATION | when(scopeService.findByDomainAndKey(DOMAIN_ID, "email")).thenReturn(Maybe.just(email))
1 | Maybe | METHOD_INVOCATION | Maybe.just(email)
1 | Single | just | METHOD_INVOCATION | when(scopeService.create(anyString(), any(NewSystemScope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | just | METHOD_INVOCATION | when(scopeService.update(anyString(), anyString(), any(UpdateSystemScope.class))).thenReturn(Single.just(new Scope()))
1 | Single | METHOD_INVOCATION | Single.just(new Scope())
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(Single.just(installation))
1 | Single | METHOD_INVOCATION | Single.just(installation)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(installation)
1 | Single | METHOD_INVOCATION | Single.just(installation)
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Single | just | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(Single.just(installation))
1 | Single | METHOD_INVOCATION | Single.just(installation)
1 | Single | error | METHOD_INVOCATION | when(installationService.setAdditionalInformation(anyMap())).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(any(), any(), any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | complete | METHOD_INVOCATION | when(commonUserService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByMember(any(), any())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Completable | test | METHOD_INVOCATION | organizationUserService.delete(ReferenceType.ORGANIZATION, organization, userId).test().assertComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(any(), any(), any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Completable | complete | METHOD_INVOCATION | when(commonUserService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByMember(any(), any())).thenReturn(Flowable.just(m1, m2, m3))
1 | Flowable | METHOD_INVOCATION | Flowable.just(m1, m2, m3)
1 | Completable | complete | METHOD_INVOCATION | when(membershipService.delete(anyString())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | organizationUserService.delete(ReferenceType.ORGANIZATION, organization, userId).test().assertComplete
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(any(), any(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(Maybe.just(provider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(provider)
1 | Single | just | METHOD_INVOCATION | when(provider.create(any())).thenReturn(Single.just(mock(io.gravitee.am.identityprovider.api.User.class)))
1 | Single | METHOD_INVOCATION | Single.just(mock(io.gravitee.am.identityprovider.api.User.class))
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(Single.just(mock(User.class)))
1 | Single | METHOD_INVOCATION | Single.just(mock(User.class))
1 | Completable | complete | METHOD_INVOCATION | when(commonUserService.setRoles(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(organization, newUser, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organization.getId(), newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(organization, newUser, null).test()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(any(), any(), any(), any())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(any())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Maybe | just | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getExternalId(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByUsernameAndSource(ReferenceType.ORGANIZATION, "orga#1", newUser.getUsername(), newUser.getSource())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(0))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(0))
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", new User(), null, null).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", new User(), "simple", null).test()
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", user, "Test123!", null).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", user, "Test123!", null).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId(domainId, newUser.getClient())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Maybe | just | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.just(new User()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new User())
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new DefaultUser(newUser.getUsername())))
1 | Single | METHOD_INVOCATION | Single.just(new DefaultUser(newUser.getUsername()))
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(domainId)).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(Single.just(preRegisteredUser))
1 | Single | METHOD_INVOCATION | Single.just(preRegisteredUser)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(any(), anyString(), anyString())).thenReturn(Single.just(preRegisteredUser))
1 | Single | METHOD_INVOCATION | Single.just(preRegisteredUser)
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new DefaultUser(newUser.getUsername())))
1 | Single | METHOD_INVOCATION | Single.just(new DefaultUser(newUser.getUsername()))
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new DefaultUser(newUser.getUsername())))
1 | Single | METHOD_INVOCATION | Single.just(new DefaultUser(newUser.getUsername()))
1 | Maybe | empty | METHOD_INVOCATION | when(commonUserService.findByDomainAndUsernameAndSource(anyString(), anyString(), anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(newUser.getClient())).thenReturn(Maybe.just(client))
1 | Maybe | METHOD_INVOCATION | Maybe.just(client)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.create(any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Maybe | empty | METHOD_INVOCATION | when(applicationService.findById(updateUser.getClient())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(applicationService.findByDomainAndClientId(domain, updateUser.getClient())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | test | METHOD_INVOCATION | userService.update(domain, id, updateUser).test().assertNotComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain), eq(id))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(updateUser.getClient())).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Single | test | METHOD_INVOCATION | userService.update(domain, id, updateUser).test().assertNotComplete
1 | Maybe | just | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.just(idpUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(userProvider.update(anyString(), any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertComplete
1 | Maybe | empty | METHOD_INVOCATION | when(userProvider.findByUsername(user.getUsername())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userProvider.create(any())).thenReturn(Single.just(idpUser))
1 | Single | METHOD_INVOCATION | Single.just(idpUser)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(user.getSource())).thenReturn(Maybe.just(userProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(userProvider)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptService.reset(any())).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | userService.assignRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | test | METHOD_INVOCATION | userService.assignRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertNotComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | just | METHOD_INVOCATION | when(commonUserService.update(any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Single | test | METHOD_INVOCATION | userService.revokeRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(rolesIds)).thenReturn(Single.just(Collections.emptySet()))
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptySet())
1 | Single | test | METHOD_INVOCATION | userService.revokeRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertNotComplete
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(identityProviderManager.getUserProvider(anyString())).thenReturn(Maybe.just(mock(UserProvider.class)))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mock(UserProvider.class))
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | just | METHOD_INVOCATION | when(commonUserService.findById(eq(ReferenceType.DOMAIN), eq(domain.getId()), eq("user-id"))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertNotComplete
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(Single.just(installation))
1 | Single | METHOD_INVOCATION | Single.just(installation)
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(command).test()
1 | Single | error | METHOD_INVOCATION | when(installationService.getOrInitialize()).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(new HelloCommand()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ENVIRONMENT_PRIMARY_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(1))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(1))
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findDefaultRole(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | just | METHOD_INVOCATION | (i)->Single.just(i.getArgument(1))
1 | Single | METHOD_INVOCATION | Single.just(i.getArgument(1))
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Maybe | just | METHOD_INVOCATION | lenient().when(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, membershipPayload.getOrganizationId(), membershipPayload.getUserId(), "cockpit")).thenReturn(Maybe.just(user))
1 | Maybe | METHOD_INVOCATION | Maybe.just(user)
1 | Maybe | just | METHOD_INVOCATION | lenient().when(roleService.findDefaultRole(membershipPayload.getOrganizationId(), DefaultRole.ENVIRONMENT_OWNER, ReferenceType.ENVIRONMENT)).thenReturn(Maybe.just(role))
1 | Maybe | METHOD_INVOCATION | Maybe.just(role)
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(environmentService.createOrUpdate(eq("orga#1"), eq("env#1"), argThat((newEnvironment)->newEnvironment.getHrids().equals(environmentPayload.getHrids()) && newEnvironment.getDescription().equals(environmentPayload.getDescription()) && newEnvironment.getName().equals(environmentPayload.getName()) && newEnvironment.getDomainRestrictions().equals(environmentPayload.getDomainRestrictions())), isNull())).thenReturn(Single.just(new Environment()))
1 | Single | METHOD_INVOCATION | Single.just(new Environment())
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Single | error | METHOD_INVOCATION | when(environmentService.createOrUpdate(eq("orga#1"), eq("env#1"), any(NewEnvironment.class), isNull())).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && !criteria.getGroupIds().isPresent() && criteria.isLogicalOR()))).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Flowable | just | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.just(group))
1 | Flowable | METHOD_INVOCATION | Flowable.just(group)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), argThat((criteria)->criteria.getUserId().get().equals(user.getId()) && criteria.getGroupIds().get().equals(Arrays.asList(group.getId())) && criteria.isLogicalOR()))).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(Single.just(Collections.singleton(role)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton(role))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(organizationMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organizationMembership)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ENVIRONMENT), eq(ENVIRONMENT_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(environmentMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(environmentMembership)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(domainMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainMembership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), environmentMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(organizationRole, environmentRole, domainRole))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(organizationRole, environmentRole, domainRole)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(organizationMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organizationMembership)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(domainMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainMembership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(organizationRole, domainRole))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(organizationRole, domainRole)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(organizationMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organizationMembership)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(domainMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(domainMembership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), domainMembership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(organizationRole, domainRole))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(organizationRole, domainRole)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.DOMAIN), eq(DOMAIN_ID), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(role))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(role)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, CREATE))).test()
1 | Flowable | empty | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.APPLICATION), eq(APPLICATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(membership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(role))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(role)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)).test()
1 | Flowable | just | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.just(group))
1 | Flowable | METHOD_INVOCATION | Flowable.just(group)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(organizationMembership, groupMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organizationMembership, groupMembership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(organizationRole, groupRole))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(organizationRole, groupRole)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ, CREATE)).test()
1 | Flowable | just | METHOD_INVOCATION | when(groupService.findByMember(user.getId())).thenReturn(Flowable.just(group))
1 | Flowable | METHOD_INVOCATION | Flowable.just(group)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(ORGANIZATION_ID), any(MembershipCriteria.class))).thenReturn(Flowable.just(organizationMembership, groupMembership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(organizationMembership, groupMembership)
1 | Single | just | METHOD_INVOCATION | when(roleService.findByIdIn(Arrays.asList(organizationMembership.getRoleId(), groupMembership.getRoleId()))).thenReturn(Single.just(new HashSet<>(Arrays.asList(organizationRole, groupRole))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(organizationRole, groupRole)))
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Permission, Set<Acl>>> obs = cut.findAllPermissions(user, ReferenceType.ORGANIZATION, ORGANIZATION_ID).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | error | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.error(new EnvironmentNotFoundException(ENVIRONMENT_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new EnvironmentNotFoundException(ENVIRONMENT_ID))
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)).test()
1 | Maybe | just | METHOD_INVOCATION | when(applicationService.findById(eq(APPLICATION_ID))).thenReturn(Maybe.just(application))
1 | Maybe | METHOD_INVOCATION | Maybe.just(application)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById(eq(DOMAIN_ID))).thenReturn(Maybe.just(domain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(domain)
1 | Single | just | METHOD_INVOCATION | when(environmentService.findById(eq(ENVIRONMENT_ID), eq(ORGANIZATION_ID))).thenReturn(Single.just(environment))
1 | Single | METHOD_INVOCATION | Single.just(environment)
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Completable | IMPORT
1 | Completable | complete | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | when(roleService.createOrUpdateSystemRoles()).thenReturn(Completable.error(TechnicalException::new))
1 | Completable | METHOD_INVOCATION | Completable.error(TechnicalException::new)
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(Maybe.just(task))
1 | Maybe | METHOD_INVOCATION | Maybe.just(task)
1 | Maybe | empty | METHOD_INVOCATION | when(systemTaskRepository.findById(anyString())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(systemTaskRepository.create(any())).thenReturn(Single.just(task))
1 | Single | METHOD_INVOCATION | Single.just(task)
1 | Flowable | fromArray | METHOD_INVOCATION | when(applicationRepository.findAll()).thenReturn(Flowable.fromArray(appNoSettings, appNoOauthSetings, appNoScopes, appScopes, appScopesWithOptions))
1 | Flowable | METHOD_INVOCATION | Flowable.fromArray(appNoSettings, appNoOauthSetings, appNoScopes, appScopes, appScopesWithOptions)
1 | Single | just | METHOD_INVOCATION | when(applicationRepository.update(any())).thenReturn(Single.just(new Application()))
1 | Single | METHOD_INVOCATION | Single.just(new Application())
1 | Single | just | METHOD_INVOCATION | return Single.just(sysTask);
1 | Single | METHOD_INVOCATION | Single.just(sysTask)
1 | Maybe | empty | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(Maybe.empty(), Maybe.just(ongoingTask), Maybe.just(finalizedTask))
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(Maybe.empty(), Maybe.just(ongoingTask), Maybe.just(finalizedTask))
1 | Maybe | METHOD_INVOCATION | Maybe.just(ongoingTask)
1 | Maybe | just | METHOD_INVOCATION | when(systemTaskRepository.findById(any())).thenReturn(Maybe.empty(), Maybe.just(ongoingTask), Maybe.just(finalizedTask))
1 | Maybe | METHOD_INVOCATION | Maybe.just(finalizedTask)
1 | Single | error | METHOD_INVOCATION | when(systemTaskRepository.create(any())).thenReturn(Single.error(new Exception()))
1 | Single | METHOD_INVOCATION | Single.error(new Exception())
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(organizationService.createOrUpdate(eq("orga#1"), argThat((newOrganization)->newOrganization.getHrids().equals(organizationPayload.getHrids()) && newOrganization.getDescription().equals(organizationPayload.getDescription()) && newOrganization.getName().equals(organizationPayload.getName()) && newOrganization.getDomainRestrictions().equals(organizationPayload.getDomainRestrictions())), isNull())).thenReturn(Single.just(new Organization()))
1 | Single | METHOD_INVOCATION | Single.just(new Organization())
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Single | error | METHOD_INVOCATION | when(organizationService.createOrUpdate(eq("orga#1"), any(NewOrganization.class), isNull())).thenReturn(Single.error(new TechnicalException()))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalException())
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.just(organization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(organization)
1 | Single | just | METHOD_INVOCATION | when(identityProviderService.create(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(NewIdentityProvider.class), isNull())).thenReturn(Single.just(idp))
1 | Single | METHOD_INVOCATION | Single.just(idp)
1 | Single | just | METHOD_INVOCATION | when(organizationService.update(eq(Organization.DEFAULT), any(PatchOrganization.class), isNull())).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | when(userService.create(argThat((user)->!user.isInternal() && user.getUsername().equals("admin") && user.getSource().equals(idp.getId()) && user.getReferenceType() == ReferenceType.ORGANIZATION && user.getReferenceId().equals(Organization.DEFAULT)))).thenReturn(Single.just(adminUser))
1 | Single | METHOD_INVOCATION | Single.just(adminUser)
1 | Maybe | empty | METHOD_INVOCATION | when(domainService.findById("admin")).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Flowable | empty | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.just(idp))
1 | Flowable | METHOD_INVOCATION | Flowable.just(idp)
1 | Maybe | empty | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.just(idp))
1 | Flowable | METHOD_INVOCATION | Flowable.just(idp)
1 | Maybe | empty | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.just(idp))
1 | Flowable | METHOD_INVOCATION | Flowable.just(idp)
1 | Maybe | empty | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.just(idp))
1 | Flowable | METHOD_INVOCATION | Flowable.just(idp)
1 | Maybe | empty | METHOD_INVOCATION | when(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userService.create(any(User.class))).thenReturn(Single.just(adminUser))
1 | Single | METHOD_INVOCATION | Single.just(adminUser)
1 | Maybe | empty | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Flowable | just | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.just(idp))
1 | Flowable | METHOD_INVOCATION | Flowable.just(idp)
1 | Maybe | just | METHOD_INVOCATION | when(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, Organization.DEFAULT, "admin", idp.getId())).thenReturn(Maybe.just(adminUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(adminUser)
1 | Maybe | empty | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.error(TechnicalException::new))
1 | Maybe | METHOD_INVOCATION | Maybe.error(TechnicalException::new)
1 | Maybe | just | METHOD_INVOCATION | when(organizationService.createDefault()).thenReturn(Maybe.just(organization))
1 | Maybe | METHOD_INVOCATION | Maybe.just(organization)
1 | Single | just | METHOD_INVOCATION | when(organizationService.update(any(), any(), any())).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Maybe | just | METHOD_INVOCATION | when(domainService.findById("admin")).thenReturn(Maybe.just(new Domain()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new Domain())
1 | Completable | complete | METHOD_INVOCATION | when(domainService.delete("admin")).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findDefaultRole(Organization.DEFAULT, DefaultRole.ORGANIZATION_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Maybe.just(adminRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(adminRole)
1 | Single | just | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(0), anyInt())).thenReturn(Single.just(new Page<>(users, 0, totalUsers)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(users, 0, totalUsers))
1 | Single | just | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(1), anyInt())).thenReturn(Single.just(new Page<>(users, 1, totalUsers)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(users, 1, totalUsers))
1 | Single | just | METHOD_INVOCATION | when(userService.findAll(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), eq(2), anyInt())).thenReturn(Single.just(new Page<>(Arrays.asList(user, user), 2, totalUsers)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(Arrays.asList(user, user), 2, totalUsers))
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Flowable | empty | METHOD_INVOCATION | when(identityProviderService.findAll(ReferenceType.ORGANIZATION, Organization.DEFAULT)).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Maybe.just(primaryOwnerRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(primaryOwnerRole)
1 | Single | just | METHOD_INVOCATION | when(membershipService.addOrUpdate(eq(Organization.DEFAULT), any(Membership.class))).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flowable.just(new Membership()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Membership())
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Maybe.just(adminRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(adminRole)
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Maybe.just(organizationPrimaryOwner))
1 | Maybe | METHOD_INVOCATION | Maybe.just(organizationPrimaryOwner)
1 | Flowable | just | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flowable.just(membership))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membership)
1 | Single | just | METHOD_INVOCATION | when(membershipService.setPlatformAdmin(userId)).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Maybe | just | METHOD_INVOCATION | when(roleService.findSystemRole(SystemRole.ORGANIZATION_PRIMARY_OWNER, ReferenceType.ORGANIZATION)).thenReturn(Maybe.just(organizationPrimaryOwner))
1 | Maybe | METHOD_INVOCATION | Maybe.just(organizationPrimaryOwner)
1 | Flowable | empty | METHOD_INVOCATION | when(membershipService.findByCriteria(eq(ReferenceType.ORGANIZATION), eq(Organization.DEFAULT), any(MembershipCriteria.class))).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = cut.isAlertingAvailable().test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = cut.isAlertingAvailable().test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(just(true))
1 | Completable | complete | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | empty | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(Flowable.empty())
1 | Flowable | METHOD_INVOCATION | Flowable.empty()
1 | Single | just | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(just(true))
1 | Completable | complete | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(Flowable.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent))
1 | Flowable | METHOD_INVOCATION | Flowable.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent)
1 | Single | just | METHOD_INVOCATION | when(flowService.create(any(), anyString(), any())).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Maybe | just | METHOD_INVOCATION | when(policyPluginService.findById(null)).thenReturn(Maybe.just(new PolicyPlugin()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new PolicyPlugin())
1 | Single | just | METHOD_INVOCATION | when(policyRepository.collectionExists()).thenReturn(just(true))
1 | Completable | complete | METHOD_INVOCATION | when(policyRepository.deleteCollection()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Flowable | just | METHOD_INVOCATION | when(policyRepository.findAll()).thenReturn(Flowable.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent))
1 | Flowable | METHOD_INVOCATION | Flowable.just(rootPolicy2, rootPolicy1, preConsent, postConsent2, postConsent)
1 | Single | just | METHOD_INVOCATION | when(flowService.create(any(), anyString(), any())).thenReturn(Single.just(new Flow()))
1 | Single | METHOD_INVOCATION | Single.just(new Flow())
1 | Maybe | just | METHOD_INVOCATION | when(policyPluginService.findById(null)).thenReturn(Maybe.just(new PolicyPlugin()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new PolicyPlugin())
1 | Single | blockingGet | METHOD_INVOCATION | List<Event> events = eventService.findByTimeFrame(lastRefreshAt - lastDelay, nextLastRefreshAt).blockingGet()
1 | Completable | subscribe | METHOD_INVOCATION | accessTokenRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | authorizationCodeRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | refreshTokenRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | requestObjectRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | scopeApprovalRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | loginAttemptRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | permissionTicketRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextRepository.purgeExpiredData().subscribe();
1 | Completable | IMPORT
1 | Completable | complete | METHOD_INVOCATION | when(accessTokenRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(loginAttemptRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(permissionTicketRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(authorizationCodeRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(scopeApprovalRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(refreshTokenRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(requestObjectRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | complete | METHOD_INVOCATION | when(authenticationFlowContextRepository.purgeExpiredData()).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | flatMapCompletable | METHOD_INVOCATION | return hasPermission(authenticatedUser, permissionAcls).flatMapCompletable(this::checkPermission);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | just | METHOD_INVOCATION | applicationId != null ? permissionService.findAllPermissions(user, ReferenceType.APPLICATION, applicationId) : Single.just(emptyMap())
1 | Single | METHOD_INVOCATION | Single.just(emptyMap())
1 | Single | just | METHOD_INVOCATION | domainId != null ? permissionService.findAllPermissions(user, ReferenceType.DOMAIN, domainId) : Single.just(emptyMap())
1 | Single | METHOD_INVOCATION | Single.just(emptyMap())
1 | Single | just | METHOD_INVOCATION | environmentId != null ? permissionService.findAllPermissions(user, ReferenceType.ENVIRONMENT, environmentId) : Single.just(emptyMap())
1 | Single | METHOD_INVOCATION | Single.just(emptyMap())
1 | Single | just | METHOD_INVOCATION | organizationId != null ? permissionService.findAllPermissions(user, ReferenceType.ORGANIZATION, organizationId) : Single.just(emptyMap())
1 | Single | METHOD_INVOCATION | Single.just(emptyMap())
1 | Single | zip | METHOD_INVOCATION | return Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
});
1 | Single | METHOD_INVOCATION | Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
})
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new ForbiddenException("Permission denied"));
1 | Completable | METHOD_INVOCATION | Completable.error(new ForbiddenException("Permission denied"))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe((environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)).map(this::filterEnvironmentInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe((environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)).map(this::filterEnvironmentInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe((environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)).map(this::filterEnvironmentInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe((environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)).map(this::filterEnvironmentInfos).sorted
1 | Flowable | flatMapMaybe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe((environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)).map
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST).andThen(environmentService.findAll(organizationId)).flatMapMaybe
1 | Maybe | map | METHOD_INVOCATION | (environment)->hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map((permit)->environment)
1 | Single | filter | METHOD_INVOCATION | hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ))).filter(Boolean::booleanValue).map
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).andThen(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).andThen(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST).andThen(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))
1 | Single | map | METHOD_INVOCATION | (auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))))
1 | Single | flatMap | METHOD_INVOCATION | organizationService.findById(organizationId).flatMap((organization)->membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION).toList()).flatMap
1 | Flowable | toList | METHOD_INVOCATION | (organization)->membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION).toList()
1 | Single | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).map((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).map((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).map((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Single | flatMap | METHOD_INVOCATION | organizationService.findById(organizationId).flatMap((organization)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).map
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).andThen(tagService.findAll(organizationId)).map(this::filterTagInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).andThen(tagService.findAll(organizationId)).map(this::filterTagInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).andThen(tagService.findAll(organizationId)).map(this::filterTagInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).andThen(tagService.findAll(organizationId)).map(this::filterTagInfos).sorted
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST).andThen(tagService.findAll(organizationId)).map
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE).andThen(tagService.create(newTag, organizationId, authenticatedUser)).subscribe((tag)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/tags/" + tag.getId())).entity(tag).build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE).andThen(tagService.create(newTag, organizationId, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).andThen(entrypointService.findAll(organizationId)).map(this::filterEntrypointInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).andThen(entrypointService.findAll(organizationId)).map(this::filterEntrypointInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).andThen(entrypointService.findAll(organizationId)).map(this::filterEntrypointInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).andThen(entrypointService.findAll(organizationId)).map(this::filterEntrypointInfos).sorted
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST).andThen(entrypointService.findAll(organizationId)).map
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE).andThen(entrypointService.create(organizationId, newEntrypoint, authenticatedUser)).subscribe((entrypoint)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/entrypoints/" + entrypoint.getId())).entity(entrypoint).build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE).andThen(entrypointService.create(organizationId, newEntrypoint, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).andThen(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type).map(this::filterRoleInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).andThen(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type).map(this::filterRoleInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST).andThen(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type).map(this::filterRoleInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList())
1 | Flowable | sorted | METHOD_INVOCATION | roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type).map(this::filterRoleInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type).map(this::filterRoleInfos).sorted
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).andThen(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).andThen(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE).andThen(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build()))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).andThen(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).andThen(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST).andThen(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).andThen(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).andThen(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE).andThen(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build()))
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).andThen(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).andThen(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST).andThen(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList())
1 | Flowable | sorted | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted
1 | Flowable | filter | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).andThen(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).andThen(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE).andThen(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).flatMap((organizationPermissions)->checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).andThen(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))).subscribe(response::resume, response::resume);
1 | Single | flatMap | METHOD_INVOCATION | permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).flatMap((organizationPermissions)->checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).andThen(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))).subscribe
1 | Completable | andThen | METHOD_INVOCATION | (organizationPermissions)->checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).andThen(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST).andThen(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size).flatMap((pagedUsers)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))
1 | Single | map | METHOD_INVOCATION | (pagedUsers)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))
1 | Observable | toSortedList | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)).map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(organizationPermissions, user)).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData())
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE).andThen(organizationService.findById(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build()))
1 | Single | flatMap | METHOD_INVOCATION | organizationService.findById(organizationId).flatMap((organization)->organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser)).map
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty(filteredUser).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty(filteredUser).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(filteredUser);
1 | Single | METHOD_INVOCATION | Single.just(filteredUser)
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
}).onErrorResumeNext((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return Single.error(new BadRequestException(ex.getMessage()));
    }
    return Single.error(ex);
});
1 | Single | defer | METHOD_INVOCATION | Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
}).onErrorResumeNext
1 | Single | METHOD_INVOCATION | Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
})
1 | Single | error | METHOD_INVOCATION | return Single.error(new BadRequestException(ex.getMessage()));
1 | Single | METHOD_INVOCATION | Single.error(new BadRequestException(ex.getMessage()))
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ).andThen(organizationService.findById(organizationId)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ).andThen(organizationService.findById(organizationId)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE).andThen(organizationService.update(organizationId, patchOrganization, authenticatedUser)).subscribe((organization)->response.resume(Response.ok(organization).build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE).andThen(organizationService.update(organizationId, patchOrganization, authenticatedUser)).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).andThen(formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map((page)->Response.ok(page).build()).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).andThen(formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map((page)->Response.ok(page).build()).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).andThen(formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map((page)->Response.ok(page).build()).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()))
1 | Maybe | map | METHOD_INVOCATION | formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template()).map((page)->Response.ok(page).build()).defaultIfEmpty
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).andThen(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).andThen(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE).andThen(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build()))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE).andThen(formService.update(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE).andThen(formService.update(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE).andThen(formService.delete(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE).andThen(formService.delete(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).map(UserEntity::new).flatMap(this::enhanceIdentityProvider)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).map(UserEntity::new).flatMap(this::enhanceIdentityProvider)).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).map(UserEntity::new).flatMap(this::enhanceIdentityProvider))
1 | Single | map | METHOD_INVOCATION | organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).map(UserEntity::new).flatMap
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.update(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.update(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.updateStatus(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.updateStatus(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE).andThen(organizationUserService.delete(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE).andThen(organizationUserService.delete(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Maybe.error(new UserInvalidException("Unable to reset password"))).flatMapCompletable((existingUser)->organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Maybe.error(new UserInvalidException("Unable to reset password"))).flatMapCompletable((existingUser)->organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE).andThen(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Maybe.error(new UserInvalidException("Unable to reset password"))).flatMapCompletable((existingUser)->organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Maybe.error(new UserInvalidException("Unable to reset password"))).flatMapCompletable
1 | Single | filter | METHOD_INVOCATION | organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user).filter((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource())).switchIfEmpty(Maybe.error(new UserInvalidException("Unable to reset password")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserInvalidException("Unable to reset password"))
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return identityProviderService.findById(userEntity.getSource()).map((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
}).defaultIfEmpty(userEntity).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(userEntity.getSource()).map((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
}).defaultIfEmpty(userEntity).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(userEntity.getSource()).map((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
}).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(userEntity);
1 | Single | METHOD_INVOCATION | Single.just(userEntity)
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ).andThen(identityProviderService.findById(ReferenceType.ORGANIZATION, organizationId, identityProvider)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ).andThen(identityProviderService.findById(ReferenceType.ORGANIZATION, organizationId, identityProvider)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE).andThen(identityProviderService.update(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE).andThen(identityProviderService.update(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE).andThen(identityProviderService.delete(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE).andThen(identityProviderService.delete(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE).andThen(groupService.delete(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE).andThen(groupService.delete(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)).subscribe
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).andThen(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).andThen(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
})).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ).andThen(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
}))
1 | Single | just | METHOD_INVOCATION | return Single.just(pagedMembers);
1 | Single | METHOD_INVOCATION | Single.just(pagedMembers)
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
1 | Observable | toSortedList | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList(Comparator.comparing(User::getUsername)).map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData())
1 | Maybe | toSingle | METHOD_INVOCATION | return identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty(member).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty(member).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(member);
1 | Single | METHOD_INVOCATION | Single.just(member)
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
})))
1 | Single | flatMap | METHOD_INVOCATION | (group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
})
1 | Single | error | METHOD_INVOCATION | return Single.error(new MemberAlreadyExistsException(userId));
1 | Single | METHOD_INVOCATION | Single.error(new MemberAlreadyExistsException(userId))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE).andThen(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group).flatMap((group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
})))
1 | Single | flatMap | METHOD_INVOCATION | (group1)->userService.findById(ReferenceType.ORGANIZATION, organizationId, userId).flatMap((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
})
1 | Single | error | METHOD_INVOCATION | return Single.error(new MemberNotFoundException(userId));
1 | Single | METHOD_INVOCATION | Single.error(new MemberNotFoundException(userId))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).andThen(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role).map(this::convert)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).andThen(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role).map(this::convert)).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ).andThen(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role).map(this::convert))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).andThen(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(this::convert)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).andThen(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(this::convert)).subscribe
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE).andThen(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser).map(this::convert))
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE).andThen(roleService.delete(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE).andThen(roleService.delete(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ).andThen(entrypointService.findById(entrypointId, organizationId)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ).andThen(entrypointService.findById(entrypointId, organizationId)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE).andThen(entrypointService.update(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE).andThen(entrypointService.update(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE).andThen(entrypointService.delete(entrypointId, organizationId, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE).andThen(entrypointService.delete(entrypointId, organizationId, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).andThen(tagService.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).andThen(tagService.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId)))).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).andThen(tagService.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId))))
1 | Maybe | error | METHOD_INVOCATION | tagService.findById(tagId, organizationId).switchIfEmpty(Maybe.error(new TagNotFoundException(tagId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TagNotFoundException(tagId))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE).andThen(tagService.update(tagId, organizationId, tagToUpdate, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE).andThen(tagService.update(tagId, organizationId, tagToUpdate, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE).andThen(tagService.delete(tag, organizationId, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE).andThen(tagService.delete(tag, organizationId, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).andThen(organizationService.findById(organizationId).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).andThen(organizationService.findById(organizationId).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser))).subscribe
1 | Single | flatMapCompletable | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE).andThen(organizationService.findById(organizationId).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).andThen(auditService.findById(ReferenceType.ORGANIZATION, organizationId, audit)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).andThen(auditService.findById(ReferenceType.ORGANIZATION, organizationId, audit)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(Permission::flatten)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(Permission::flatten)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId).map(Permission::flatten))
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map(this::filterDomainInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map(this::filterDomainInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size())).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map(this::filterDomainInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map
1 | Flowable | sorted | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map(this::filterDomainInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map(this::filterDomainInfos).sorted
1 | Flowable | flatMapMaybe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe((domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)).map
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST).andThen(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMapMaybe
1 | Maybe | map | METHOD_INVOCATION | (domain)->hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map((permit)->domain)
1 | Single | filter | METHOD_INVOCATION | hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ))).filter(Boolean::booleanValue).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).andThen(domainService.create(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create(domain.getId()).map((__)->domain)).flatMap((domain)->reporterService.createDefault(domain.getId()).map((__)->domain))).subscribe((domain)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain.getId())).entity(domain).build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).andThen(domainService.create(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create(domain.getId()).map((__)->domain)).flatMap((domain)->reporterService.createDefault(domain.getId()).map((__)->domain))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE).andThen(domainService.create(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create(domain.getId()).map((__)->domain)).flatMap((domain)->reporterService.createDefault(domain.getId()).map((__)->domain)))
1 | Single | flatMap | METHOD_INVOCATION | domainService.create(organizationId, environmentId, newDomain, authenticatedUser).flatMap((domain)->identityProviderManager.create(domain.getId()).map((__)->domain)).flatMap
1 | Single | map | METHOD_INVOCATION | (domain)->identityProviderManager.create(domain.getId()).map((__)->domain)
1 | Single | map | METHOD_INVOCATION | (domain)->reporterService.createDefault(domain.getId()).map((__)->domain)
1 | Single | subscribe | METHOD_INVOCATION | domainService.findByHrid(environmentId, hrid).flatMap((domain)->checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).andThen(Single.defer(()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions))))).subscribe(response::resume, response::resume);
1 | Single | flatMap | METHOD_INVOCATION | domainService.findByHrid(environmentId, hrid).flatMap((domain)->checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).andThen(Single.defer(()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions))))).subscribe
1 | Completable | andThen | METHOD_INVOCATION | (domain)->checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).andThen(Single.defer(()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | Single | defer | METHOD_INVOCATION | checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ).andThen(Single.defer(()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | Single | METHOD_INVOCATION | Single.defer(()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions)))
1 | Single | map | METHOD_INVOCATION | ()->findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId()).map((userPermissions)->filterDomainInfos(domain, userPermissions))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions)))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Single | map | METHOD_INVOCATION | (domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE).andThen(domainService.delete(domain, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE).andThen(domainService.delete(domain, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->entrypointService.findAll(organizationId).toList().map((entrypoints)->filterEntrypoints(entrypoints, domain)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->entrypointService.findAll(organizationId).toList().map((entrypoints)->filterEntrypoints(entrypoints, domain)))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->entrypointService.findAll(organizationId).toList().map((entrypoints)->filterEntrypoints(entrypoints, domain))))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Single | map | METHOD_INVOCATION | (domain)->entrypointService.findAll(organizationId).toList().map((entrypoints)->filterEntrypoints(entrypoints, domain))
1 | Flowable | toList | METHOD_INVOCATION | entrypointService.findAll(organizationId).toList().map
1 | Single | subscribe | METHOD_INVOCATION | Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.patch(domainId, patchDomain, authenticatedUser).flatMap((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.patch(domainId, patchDomain, authenticatedUser).flatMap((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions)))).subscribe
1 | Completable | merge | METHOD_INVOCATION | Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen
1 | Completable | METHOD_INVOCATION | Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList()))
1 | Single | flatMap | METHOD_INVOCATION | Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.patch(domainId, patchDomain, authenticatedUser).flatMap((domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions))))
1 | Single | map | METHOD_INVOCATION | (domain)->findAllPermissions(authenticatedUser, organizationId, environmentId, domainId).map((userPermissions)->filterDomainInfos(domain, userPermissions))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
}).flatMap((pagedApplications)->Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList().map((applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
}).flatMap((pagedApplications)->Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList().map((applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
}).flatMap((pagedApplications)->Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList().map((applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size()))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (pagedApplications)->Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList().map((applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size()))
1 | Flowable | toList | METHOD_INVOCATION | Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList().map
1 | Flowable | sorted | METHOD_INVOCATION | Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted((a1,a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).toList
1 | Maybe | concat | METHOD_INVOCATION | Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList())).sorted
1 | Maybe | METHOD_INVOCATION | Maybe.concat(pagedApplications.getData().stream().map((application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))).collect(Collectors.toList()))
1 | Maybe | map | METHOD_INVOCATION | (application)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map((__)->filterApplicationInfos(application))
1 | Single | filter | METHOD_INVOCATION | hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ).filter(Boolean::booleanValue).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.create(domain, newApplication, authenticatedUser).map((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.create(domain, newApplication, authenticatedUser).map((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.create(domain, newApplication, authenticatedUser).map((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (__)->applicationService.create(domain, newApplication, authenticatedUser).map((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList())
1 | Flowable | sorted | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map(this::filterIdentityProviderInfos).sorted
1 | Flowable | filter | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
}).map
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)).filter
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser)).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser)).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser)).map((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map((sortedCertificates)->Response.ok(sortedCertificates).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map((sortedCertificates)->Response.ok(sortedCertificates).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map((sortedCertificates)->Response.ok(sortedCertificates).build()))
1 | Flowable | toList | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList().map
1 | Flowable | sorted | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map(this::filterCertificateInfos).sorted
1 | Flowable | filter | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
}).map
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->certificateService.findByDomain(domain)).filter
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser)).map((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser)).map((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
})).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser)).map((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchRoles(domain, query, page, size)).map((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
}).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchRoles(domain, query, page, size)).map((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
}).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchRoles(domain, query, page, size)).map
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.create(domain, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.create(domain, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.create(domain, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (irrelevant)->roleService.create(domain, newRole, authenticatedUser).map((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size)).flatMap((pagedUsers)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size)).flatMap((pagedUsers)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size)).flatMap((pagedUsers)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size)).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | flatMap | METHOD_INVOCATION | (pagedUsers)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).flatMap((hasPermission)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount())))
1 | Single | map | METHOD_INVOCATION | (hasPermission)->Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map((users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))
1 | Observable | toSortedList | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)).map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((user)->filterUserInfos(hasPermission, user)).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData())
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser)).map((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty(filteredUser).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty(filteredUser).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(user.getSource()).map((idP)->{
    filteredUser.setSource(idP.getName());
    return filteredUser;
}).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(filteredUser);
1 | Single | METHOD_INVOCATION | Single.just(filteredUser)
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).map((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).map((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).map((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Flowable | toList | METHOD_INVOCATION | (irrelevant)->extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList()
1 | Flowable | sorted | METHOD_INVOCATION | extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).toList
1 | Flowable | map | METHOD_INVOCATION | extensionGrantService.findByDomain(domain).map(this::filterExtensionGrantInfos).sorted
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.create(domain, newExtensionGrant, authenticatedUser).map((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.create(domain, newExtensionGrant, authenticatedUser).map((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.create(domain, newExtensionGrant, authenticatedUser).map((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (irrelevant)->extensionGrantService.create(domain, newExtensionGrant, authenticatedUser).map((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).andThen(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))).map((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).andThen(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))).map((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount())).subscribe
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST).andThen(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.create(domain, newScope, authenticatedUser).map((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.create(domain, newScope, authenticatedUser).map((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.create(domain, newScope, authenticatedUser).map((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (irrelevant)->scopeService.create(domain, newScope, authenticatedUser).map((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).andThen(formService.findByDomainAndTemplate(domain, formTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()).subscribe(response::resume, response::resume);
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).andThen(formService.findByDomainAndTemplate(domain, formTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build()).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).andThen(formService.findByDomainAndTemplate(domain, formTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ).andThen(formService.findByDomainAndTemplate(domain, formTemplate.template())).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.create(domain, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.create(domain, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.create(domain, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | map | METHOD_INVOCATION | (irrelevant)->formService.create(domain, newForm, authenticatedUser).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser)).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser)).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser)).map((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template())).map((email)->Response.ok(email).build()).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()).subscribe(response::resume, response::resume);
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template())).map((email)->Response.ok(email).build()).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template())).map((email)->Response.ok(email).build()).defaultIfEmpty
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template())).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).andThen(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).andThen(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST).andThen(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize()).flatMap((auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})))
1 | Single | map | METHOD_INVOCATION | (auditPage)->hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
})
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.findByDomain(domain).toList())).flatMap((reporters)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
})).subscribe(response::resume, response::resume);
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.findByDomain(domain).toList())).flatMap((reporters)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
})).subscribe
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.findByDomain(domain).toList())).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.findByDomain(domain).toList()))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Flowable | toList | METHOD_INVOCATION | (irrelevant)->reporterService.findByDomain(domain).toList()
1 | Single | map | METHOD_INVOCATION | (reporters)->hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).map((hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
})
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser))).subscribe((reporter)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/reporters/" + reporter.getId())).entity(reporter).build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN).toList()).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Flowable | toList | METHOD_INVOCATION | (domain1)->membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN).toList()
1 | Single | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | andThen | METHOD_INVOCATION | (membership1)->membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Single | just | METHOD_INVOCATION | membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Single | METHOD_INVOCATION | Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build())
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain).map(Permission::flatten)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain).map(Permission::flatten)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain).map(Permission::flatten))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ).andThen(analyticsService.execute(query)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ).andThen(analyticsService.execute(query)).subscribe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->factorService.findByDomain(domain)).map(this::filterFactorInfos).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->factorService.findByDomain(domain)).map(this::filterFactorInfos).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->factorService.findByDomain(domain)).map(this::filterFactorInfos).toList())
1 | Flowable | map | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->factorService.findByDomain(domain)).map(this::filterFactorInfos).toList
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->factorService.findByDomain(domain)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser)).map((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser)).map((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser)).map((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->resourceService.findByDomain(domain)).map(this::filterFactorInfos).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->resourceService.findByDomain(domain)).map(this::filterFactorInfos).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->resourceService.findByDomain(domain)).map(this::filterFactorInfos).toList())
1 | Flowable | map | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->resourceService.findByDomain(domain)).map(this::filterFactorInfos).toList
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((___)->resourceService.findByDomain(domain)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser)).map((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser)).map((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser)).map((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findAll(ReferenceType.DOMAIN, domain, true).map((flow)->filterFlowInfos(hasPermission, flow))).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findAll(ReferenceType.DOMAIN, domain, true).map((flow)->filterFlowInfos(hasPermission, flow))).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findAll(ReferenceType.DOMAIN, domain, true).map((flow)->filterFlowInfos(hasPermission, flow))).toList())
1 | Single | flatMapPublisher | METHOD_INVOCATION | hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findAll(ReferenceType.DOMAIN, domain, true).map((flow)->filterFlowInfos(hasPermission, flow))).toList
1 | Flowable | map | METHOD_INVOCATION | (hasPermission)->flowService.findAll(ReferenceType.DOMAIN, domain, true).map((flow)->filterFlowInfos(hasPermission, flow))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((___)->botDetectionService.findByDomain(domain).map(this::filterBotDetectionInfos).toList())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((___)->botDetectionService.findByDomain(domain).map(this::filterBotDetectionInfos).toList())).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((___)->botDetectionService.findByDomain(domain).map(this::filterBotDetectionInfos).toList()))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Flowable | toList | METHOD_INVOCATION | (___)->botDetectionService.findByDomain(domain).map(this::filterBotDetectionInfos).toList()
1 | Flowable | map | METHOD_INVOCATION | botDetectionService.findByDomain(domain).map(this::filterBotDetectionInfos).toList
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser)).map((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser)).map((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser)).map((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).map((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && !botDetection.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).map((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && !botDetection.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).map((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && !botDetection.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->botDetectionService.findById(botDetectionId)).switchIfEmpty(Maybe.error(new BotDetectionNotFoundException(botDetectionId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionNotFoundException(botDetectionId))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE).andThen(botDetectionService.delete(domain, botDetectionId, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE).andThen(botDetectionService.delete(domain, botDetectionId, authenticatedUser)).subscribe
1 | Flowable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sorted(Comparator.comparingInt((o)->o.getType().getOrder())).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sorted(Comparator.comparingInt((o)->o.getType().getOrder())).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sorted(Comparator.comparingInt((o)->o.getType().getOrder())).toList
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST).andThen(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sorted
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(Flowable.fromIterable(patchAlertTriggers)).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(Flowable.fromIterable(patchAlertTriggers)).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).toList().subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(Flowable.fromIterable(patchAlertTriggers)).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).toList
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(Flowable.fromIterable(patchAlertTriggers)).flatMapSingle
1 | Flowable | fromIterable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(Flowable.fromIterable(patchAlertTriggers))
1 | Flowable | METHOD_INVOCATION | Flowable.fromIterable(patchAlertTriggers)
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sorted(Comparator.comparing(AlertNotifier::getCreatedAt)).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sorted(Comparator.comparing(AlertNotifier::getCreatedAt)).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sorted(Comparator.comparing(AlertNotifier::getCreatedAt)).toList
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sorted
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE).andThen(alertNotifierService.create(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE).andThen(alertNotifierService.create(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.getById(ReferenceType.DOMAIN, domainId, notifierId)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.getById(ReferenceType.DOMAIN, domainId, notifierId)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE).andThen(alertNotifierService.update(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE).andThen(alertNotifierService.update(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.delete(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST).andThen(alertNotifierService.delete(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new)).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map
1 | Maybe | error | METHOD_INVOCATION | flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FlowNotFoundException(flow))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty(Maybe.error(new FactorNotFoundException(resource))).map((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && !res1.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty(Maybe.error(new FactorNotFoundException(resource))).map((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && !res1.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty(Maybe.error(new FactorNotFoundException(resource))).map((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && !res1.getReferenceType().equals(ReferenceType.DOMAIN)) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty(Maybe.error(new FactorNotFoundException(resource))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->resourceService.findById(resource)).switchIfEmpty(Maybe.error(new FactorNotFoundException(resource)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FactorNotFoundException(resource))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE).andThen(resourceService.delete(domain, resource, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE).andThen(resourceService.delete(domain, resource, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty(Maybe.error(new FactorNotFoundException(factor))).map((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty(Maybe.error(new FactorNotFoundException(factor))).map((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty(Maybe.error(new FactorNotFoundException(factor))).map((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty(Maybe.error(new FactorNotFoundException(factor))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->factorService.findById(factor)).switchIfEmpty(Maybe.error(new FactorNotFoundException(factor)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FactorNotFoundException(factor))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE).andThen(factorService.delete(domain, factor, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE).andThen(factorService.delete(domain, factor, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->membershipService.delete(membershipId, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporter))).map((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporter))).map((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporter))).map((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporter))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).switchIfEmpty(Maybe.error(new ReporterNotFoundException(reporter)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterNotFoundException(reporter))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMapCompletable((reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return Completable.complete();
})).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMapCompletable((reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return Completable.complete();
})).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMapCompletable((reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return Completable.complete();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty())).flatMapCompletable
1 | Maybe | map | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | just | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->reporterService.findById(reporter)).map(Optional::ofNullable).switchIfEmpty(Maybe.just(Optional.empty()))
1 | Maybe | METHOD_INVOCATION | Maybe.just(Optional.empty())
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).andThen(auditService.findById(domain, audit)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).andThen(auditService.findById(domain, audit)).subscribe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE).andThen(emailTemplateService.delete(email, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE).andThen(emailTemplateService.delete(email, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMap((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return Maybe.just(group1);
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMap((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return Maybe.just(group1);
})).subscribe
1 | Maybe | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMap((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return Maybe.just(group1);
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(group))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(group1);
1 | Maybe | METHOD_INVOCATION | Maybe.just(group1)
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
})).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return Single.just(pagedMembers);
    }
    return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return identityProviderService.findById(member.getSource()).map((idP)->{
                member.setSource(idP.getName());
                return member;
            }).defaultIfEmpty(member).toSingle();
        }
        return Single.just(member);
    }).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | just | METHOD_INVOCATION | return Single.just(pagedMembers);
1 | Single | METHOD_INVOCATION | Single.just(pagedMembers)
1 | Single | map | METHOD_INVOCATION | return Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList(Comparator.comparing(User::getUsername)).map((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()));
1 | Observable | toSortedList | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList(Comparator.comparing(User::getUsername)).map
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return identityProviderService.findById(member.getSource()).map((idP)->{
            member.setSource(idP.getName());
            return member;
        }).defaultIfEmpty(member).toSingle();
    }
    return Single.just(member);
}).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData())
1 | Maybe | toSingle | METHOD_INVOCATION | return identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty(member).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty(member).toSingle
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(member.getSource()).map((idP)->{
    member.setSource(idP.getName());
    return member;
}).defaultIfEmpty
1 | Single | just | METHOD_INVOCATION | return Single.just(member);
1 | Single | METHOD_INVOCATION | Single.just(member)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(group1.getRoles());
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(group1.getRoles());
})).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(group1.getRoles());
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(group))
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(group))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return Single.error(new MemberAlreadyExistsException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Single | error | METHOD_INVOCATION | return Single.error(new MemberAlreadyExistsException(userId));
1 | Single | METHOD_INVOCATION | Single.error(new MemberAlreadyExistsException(userId))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle((group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->groupService.findById(group)).switchIfEmpty(Maybe.error(new GroupNotFoundException(group)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new GroupNotFoundException(group))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return Single.error(new MemberNotFoundException(userId));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | userService.findById(userId).switchIfEmpty(Maybe.error(new UserNotFoundException(userId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(userId))
1 | Single | error | METHOD_INVOCATION | return Single.error(new MemberNotFoundException(userId));
1 | Single | METHOD_INVOCATION | Single.error(new MemberNotFoundException(userId))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE).andThen(formService.delete(domain, form, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE).andThen(formService.delete(domain, form, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).map((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).map((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).map((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->scopeService.findById(scopeId)).switchIfEmpty(Maybe.error(new ScopeNotFoundException(scopeId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeNotFoundException(scopeId))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE).andThen(scopeService.delete(scope, false, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE).andThen(scopeService.delete(scope, false, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrant))).map((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrant))).map((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrant))).map((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrant))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->extensionGrantService.findById(extensionGrant)).switchIfEmpty(Maybe.error(new ExtensionGrantNotFoundException(extensionGrant)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantNotFoundException(extensionGrant))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE).andThen(extensionGrantService.delete(domain, extensionGrant, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE).andThen(extensionGrantService.delete(domain, extensionGrant, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return Maybe.just(new UserEntity(user1));
}).flatMap(this::enhanceIdentityProvider).flatMap(this::enhanceClient)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return Maybe.just(new UserEntity(user1));
}).flatMap(this::enhanceIdentityProvider).flatMap(this::enhanceClient)).subscribe
1 | Maybe | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return Maybe.just(new UserEntity(user1));
}).flatMap(this::enhanceIdentityProvider).flatMap(this::enhanceClient))
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return Maybe.just(new UserEntity(user1));
}).flatMap(this::enhanceIdentityProvider).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return Maybe.just(new UserEntity(user1));
}).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(new UserEntity(user1));
1 | Maybe | METHOD_INVOCATION | Maybe.just(new UserEntity(user1))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain)->userService.resetPassword(domain, user, password.getPassword(), authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain)->userService.resetPassword(domain, user, password.getPassword(), authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable((domain)->userService.resetPassword(domain, user, password.getPassword(), authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domainId).switchIfEmpty(Maybe.error(new DomainNotFoundException(domainId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domainId))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(userService.sendRegistrationConfirmation(domain, user, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(userService.sendRegistrationConfirmation(domain, user, authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((irrelevant)->userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | RETURN_TYPE
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | return identityProviderService.findById(userEntity.getSource()).map((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
}).defaultIfEmpty(userEntity);
1 | Maybe | map | METHOD_INVOCATION | identityProviderService.findById(userEntity.getSource()).map((idP)->{
    userEntity.setSource(idP.getName());
    return userEntity;
}).defaultIfEmpty
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(userEntity);
1 | Maybe | METHOD_INVOCATION | Maybe.just(userEntity)
1 | Maybe | RETURN_TYPE
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | return applicationService.findById(userEntity.getClient()).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient()))).map((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
}).defaultIfEmpty(userEntity);
1 | Maybe | map | METHOD_INVOCATION | applicationService.findById(userEntity.getClient()).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient()))).map((application)->{
    userEntity.setApplicationEntity(new ApplicationEntity(application));
    return userEntity;
}).defaultIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | applicationService.findById(userEntity.getClient()).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient()))).map
1 | Maybe | defer | METHOD_INVOCATION | applicationService.findById(userEntity.getClient()).switchIfEmpty(Maybe.defer(()->applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient())))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->applicationService.findByDomainAndClientId(userEntity.getReferenceId(), userEntity.getClient()))
1 | Maybe | just | METHOD_INVOCATION | return Maybe.just(userEntity);
1 | Maybe | METHOD_INVOCATION | Maybe.just(userEntity)
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope(scopeApproval.getDomain(), scopeApproval.getScope()), ((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope(scopeApproval.getDomain(), scopeApproval.getScope()), ((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope(scopeApproval.getDomain(), scopeApproval.getScope()), ((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))).toList())
1 | Flowable | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope(scopeApproval.getDomain(), scopeApproval.getScope()), ((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))).toList
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | zipWith | METHOD_INVOCATION | (scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).zipWith(getScope(scopeApproval.getDomain(), scopeApproval.getScope()), ((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
})).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
})).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | RETURN_TYPE
1 | Single | cache | METHOD_INVOCATION | return applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).toSingle().cache();
1 | Maybe | toSingle | METHOD_INVOCATION | applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).toSingle().cache
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).toSingle
1 | Maybe | map | METHOD_INVOCATION | applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty
1 | Single | RETURN_TYPE
1 | Single | cache | METHOD_INVOCATION | return scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})).map(ScopeEntity::new).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).toSingle().cache();
1 | Maybe | toSingle | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})).map(ScopeEntity::new).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).toSingle().cache
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})).map(ScopeEntity::new).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).toSingle
1 | Maybe | map | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})).map(ScopeEntity::new).defaultIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
})).map
1 | Maybe | map | METHOD_INVOCATION | scopeService.findByDomainAndKey(domain, scopeKey).switchIfEmpty(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey)).map((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(endUser.getRoles());
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(endUser.getRoles());
})).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return Single.just(Collections.emptyList());
    }
    return roleService.findByIdIn(endUser.getRoles());
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return Single.just(Collections.emptyList());
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    }).defaultIfEmpty(unknown(enrolledFactor))).toList();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return Single.just(Collections.emptyList());
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    }).defaultIfEmpty(unknown(enrolledFactor))).toList();
})).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return Single.just(Collections.emptyList());
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    }).defaultIfEmpty(unknown(enrolledFactor))).toList();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Single | just | METHOD_INVOCATION | return Single.just(Collections.emptyList());
1 | Single | METHOD_INVOCATION | Single.just(Collections.emptyList())
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
}).defaultIfEmpty(unknown(enrolledFactor))).toList();
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
}).defaultIfEmpty(unknown(enrolledFactor))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(user1.getFactors()).flatMapMaybe
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(user1.getFactors())
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | (enrolledFactor)->factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
}).defaultIfEmpty(unknown(enrolledFactor))
1 | Maybe | map | METHOD_INVOCATION | factorService.findById(enrolledFactor.getFactorId()).map((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
}).defaultIfEmpty
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user))).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user))).toList().subscribe
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user))).toList
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapPublisher
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.findById(credential)).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.findById(credential)).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential)))).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.findById(credential)).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential))))
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.findById(credential)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->credentialService.findById(credential)).switchIfEmpty(Maybe.error(new CredentialNotFoundException(credential)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CredentialNotFoundException(credential))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->credentialService.delete(credential))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->credentialService.delete(credential))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->credentialService.delete(credential)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return Single.just(user1);
})).subscribe((__)->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return Single.just(user1);
})).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return Single.just(user1);
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->userService.findById(user)).switchIfEmpty(Maybe.error(new UserNotFoundException(user)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(user))
1 | Single | just | METHOD_INVOCATION | return Single.just(user1);
1 | Single | METHOD_INVOCATION | Single.just(user1)
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consent))).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).map((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
}))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consent))).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).map((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
}))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consent))).flatMapSingle((scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).map((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consent))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->scopeApprovalService.findById(consent)).switchIfEmpty(Maybe.error(new ScopeApprovalNotFoundException(consent)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ScopeApprovalNotFoundException(consent))
1 | Single | map | METHOD_INVOCATION | (scopeApproval)->getClient(scopeApproval.getDomain(), scopeApproval.getClientId()).map((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable((__)->scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapCompletable
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | RETURN_TYPE
1 | Maybe | toSingle | METHOD_INVOCATION | return applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).toSingle();
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).toSingle
1 | Maybe | map | METHOD_INVOCATION | applicationService.findByDomainAndClientId(domain, clientId).map(ApplicationEntity::new).defaultIfEmpty
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty(Maybe.error(new RoleNotFoundException(role))).map((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty(Maybe.error(new RoleNotFoundException(role))).map((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty(Maybe.error(new RoleNotFoundException(role))).map((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty(Maybe.error(new RoleNotFoundException(role))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->roleService.findById(role)).switchIfEmpty(Maybe.error(new RoleNotFoundException(role)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new RoleNotFoundException(role))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)).map(this::convert)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)).map(this::convert)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)).map(this::convert))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE).andThen(roleService.delete(ReferenceType.DOMAIN, domain, role, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE).andThen(roleService.delete(ReferenceType.DOMAIN, domain, role, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificate))).map((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificate))).map((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificate))).map((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificate))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->certificateService.findById(certificate)).switchIfEmpty(Maybe.error(new CertificateNotFoundException(certificate)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificateNotFoundException(certificate))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKey)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKey)).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKey))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKeys)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKeys)).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ).andThen(certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle(CertificateProvider::publicKeys))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | certificateManager.getCertificateProvider(certificate).switchIfEmpty(Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadRequestException("No certificate provider found for the certificate " + certificate))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser)).map((certificate1)->Response.ok(certificate1).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser)).map((certificate1)->Response.ok(certificate1).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser)).map((certificate1)->Response.ok(certificate1).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE).andThen(certificateService.delete(certificate, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE).andThen(certificateService.delete(certificate, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProvider))).map((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProvider))).map((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
})).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProvider))).map((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProvider))).map
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->identityProviderService.findById(identityProvider)).switchIfEmpty(Maybe.error(new IdentityProviderNotFoundException(identityProvider)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderNotFoundException(identityProvider))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE).andThen(identityProviderService.delete(domain, identity, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE).andThen(identityProviderService.delete(domain, identity, authenticatedUser)).subscribe
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((app)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(app, userPermissions)))).map((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
}).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((app)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(app, userPermissions)))).map((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
}).subscribe
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((app)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(app, userPermissions)))).map
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((app)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(app, userPermissions))))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Single | map | METHOD_INVOCATION | (app)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(app, userPermissions))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE).andThen(applicationService.updateType(domain, application, patchApplicationType.getType(), authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE).andThen(applicationService.updateType(domain, application, patchApplicationType.getType(), authenticatedUser)).subscribe
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE).andThen(applicationService.delete(application, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE).andThen(applicationService.delete(application, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | subscribe | METHOD_INVOCATION | Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((patch)->applicationService.patch(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((patch)->applicationService.patch(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))).subscribe
1 | Completable | merge | METHOD_INVOCATION | Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen
1 | Completable | METHOD_INVOCATION | Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList())).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((patch)->applicationService.patch(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | flatMap | METHOD_INVOCATION | (patch)->applicationService.patch(domain, application, patchApplication, authenticatedUser).flatMap((updatedApplication)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))
1 | Single | map | METHOD_INVOCATION | (updatedApplication)->findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application).map((userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()).map((email)->Response.ok(email).build()).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()).map((email)->Response.ok(email).build()).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).andThen(emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()).map((email)->Response.ok(email).build()).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build()))
1 | Maybe | map | METHOD_INVOCATION | emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()).map((email)->Response.ok(email).build()).defaultIfEmpty
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser)).map((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).andThen(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build()).subscribe(response::resume, response::resume);
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).andThen(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build()).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).andThen(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map((form)->Response.ok(form).build()).defaultIfEmpty
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ).andThen(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser)).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser)).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build())).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser)).map((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build()))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata)))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION).toList()).flatMap((memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION).toList()).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Flowable | toList | METHOD_INVOCATION | (application1)->membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION).toList()
1 | Single | map | METHOD_INVOCATION | (memberships)->membershipService.getMetadata(memberships).map((metadata)->new MembershipListItem(memberships, metadata))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap((membership1)->membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Completable | andThen | METHOD_INVOCATION | (membership1)->membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Single | just | METHOD_INVOCATION | membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser).andThen(Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))
1 | Single | METHOD_INVOCATION | Single.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build())
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application).map(Permission::flatten)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application).map(Permission::flatten)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ).andThen(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application).map(Permission::flatten))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))).flatMap((pagedResources)->{
    return Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })).toList().zipWith(resourceService.getMetadata((List<Resource>)pagedResources.getData()), (v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    });
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))).flatMap((pagedResources)->{
    return Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })).toList().zipWith(resourceService.getMetadata((List<Resource>)pagedResources.getData()), (v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    });
})).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))).flatMap((pagedResources)->{
    return Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })).toList().zipWith(resourceService.getMetadata((List<Resource>)pagedResources.getData()), (v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    });
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))).flatMap
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Single | zipWith | METHOD_INVOCATION | return Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})).toList().zipWith(resourceService.getMetadata((List<Resource>)pagedResources.getData()), (v1,v2)->{
    return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
});
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})).toList().zipWith
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData()).flatMapSingle
1 | Observable | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData())
1 | Single | map | METHOD_INVOCATION | (r)->resourceService.countAccessPolicyByResource(r.getId()).map((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ).andThen(applicationAnalyticsService.execute(query)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ).andThen(applicationAnalyticsService.execute(query)).subscribe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findByApplication(ReferenceType.DOMAIN, domain, application).map((flow)->filterFlowInfos(hasPermission, flow))).toList()).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findByApplication(ReferenceType.DOMAIN, domain, application).map((flow)->filterFlowInfos(hasPermission, flow))).toList()).subscribe
1 | Flowable | toList | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST).andThen(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findByApplication(ReferenceType.DOMAIN, domain, application).map((flow)->filterFlowInfos(hasPermission, flow))).toList())
1 | Single | flatMapPublisher | METHOD_INVOCATION | hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).flatMapPublisher((hasPermission)->flowService.findByApplication(ReferenceType.DOMAIN, domain, application).map((flow)->filterFlowInfos(hasPermission, flow))).toList
1 | Flowable | map | METHOD_INVOCATION | (hasPermission)->flowService.findByApplication(ReferenceType.DOMAIN, domain, application).map((flow)->filterFlowInfos(hasPermission, flow))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)).map((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMapSingle
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new)).subscribe
1 | Maybe | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).andThen(flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map(FlowEntity::new))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow))).map
1 | Maybe | error | METHOD_INVOCATION | flowService.findById(ReferenceType.DOMAIN, domain, flow).switchIfEmpty(Maybe.error(new FlowNotFoundException(flow)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new FlowNotFoundException(flow))
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new)).subscribe
1 | Single | map | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE).andThen(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser).map(FlowEntity::new))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->{
    return resourceService.findByDomainAndClientResource(domain, application1.getId(), resource).flatMap((r)->{
        return userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        });
    });
})).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->{
    return resourceService.findByDomainAndClientResource(domain, application1.getId(), resource).flatMap((r)->{
        return userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        });
    });
})).subscribe
1 | Maybe | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->{
    return resourceService.findByDomainAndClientResource(domain, application1.getId(), resource).flatMap((r)->{
        return userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        });
    });
}))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Maybe | flatMap | METHOD_INVOCATION | return resourceService.findByDomainAndClientResource(domain, application1.getId(), resource).flatMap((r)->{
    return userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    });
});
1 | Maybe | map | METHOD_INVOCATION | return userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map((optUser)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
    return resourceEntity;
});
1 | Maybe | defaultIfEmpty | METHOD_INVOCATION | userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty(Optional.empty()).map
1 | Maybe | map | METHOD_INVOCATION | userService.findById(r.getUserId()).map(Optional::ofNullable).defaultIfEmpty
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Single.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources(Collections.singletonList(resource)).map(AccessPolicyListItem::new).toList())).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Single.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources(Collections.singletonList(resource)).map(AccessPolicyListItem::new).toList())).subscribe
1 | Single | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Single.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPoliciesByResources(Collections.singletonList(resource)).map(AccessPolicyListItem::new).toList()))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Single.error(new ApplicationNotFoundException(application))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Single | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Single.error(new ApplicationNotFoundException(application)))
1 | Single | METHOD_INVOCATION | Single.error(new ApplicationNotFoundException(application))
1 | Flowable | toList | METHOD_INVOCATION | (application1)->resourceService.findAccessPoliciesByResources(Collections.singletonList(resource)).map(AccessPolicyListItem::new).toList()
1 | Flowable | map | METHOD_INVOCATION | resourceService.findAccessPoliciesByResources(Collections.singletonList(resource)).map(AccessPolicyListItem::new).toList
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPolicy(policy))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPolicy(policy))).subscribe
1 | Maybe | flatMap | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap((application1)->resourceService.findAccessPolicy(policy)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMap
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapCompletable((__)->membershipService.delete(membershipId, authenticatedUser))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapCompletable((__)->membershipService.delete(membershipId, authenticatedUser))).subscribe
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapCompletable((__)->membershipService.delete(membershipId, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapCompletable
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((__)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE).andThen(formService.delete(domain, form, authenticatedUser)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE).andThen(formService.delete(domain, form, authenticatedUser)).subscribe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail))).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail))).subscribe
1 | Maybe | flatMapSingle | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE).andThen(domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail)))
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application))).flatMapSingle
1 | Maybe | flatMap | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new DomainNotFoundException(domain))
1 | Maybe | error | METHOD_INVOCATION | domainService.findById(domain).switchIfEmpty(Maybe.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->applicationService.findById(application)).switchIfEmpty(Maybe.error(new ApplicationNotFoundException(application)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ApplicationNotFoundException(application))
1 | Completable | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE).andThen(emailTemplateService.delete(email)).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE).andThen(emailTemplateService.delete(email)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | certificatePluginService.findAll().map((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | certificatePluginService.findAll().map((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList())).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | certificatePluginService.findById(certificateId).map((extensionGrantPlugin)->Response.ok(certificateId).build()).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).subscribe(response::resume, response::resume);
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById(certificateId).map((extensionGrantPlugin)->Response.ok(certificateId).build()).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).subscribe
1 | Maybe | map | METHOD_INVOCATION | certificatePluginService.findById(certificateId).map((extensionGrantPlugin)->Response.ok(certificateId).build()).switchIfEmpty
1 | Maybe | error | METHOD_INVOCATION | certificatePluginService.findById(certificateId).map((extensionGrantPlugin)->Response.ok(certificateId).build()).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificatePluginNotFoundException(certificateId))
1 | Maybe | subscribe | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap((irrelevant)->certificatePluginService.getSchema(certificateId)).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificateId))).map((certificatePluginSchema)->Response.ok(certificatePluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap((irrelevant)->certificatePluginService.getSchema(certificateId)).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificateId))).map((certificatePluginSchema)->Response.ok(certificatePluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap((irrelevant)->certificatePluginService.getSchema(certificateId)).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificateId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap((irrelevant)->certificatePluginService.getSchema(certificateId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificatePluginNotFoundException(certificateId))
1 | Maybe | error | METHOD_INVOCATION | certificatePluginService.findById(certificateId).switchIfEmpty(Maybe.error(new CertificatePluginNotFoundException(certificateId))).flatMap((irrelevant)->certificatePluginService.getSchema(certificateId)).switchIfEmpty(Maybe.error(new CertificatePluginSchemaNotFoundException(certificateId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new CertificatePluginSchemaNotFoundException(certificateId))
1 | Single | subscribe | METHOD_INVOCATION | notifierPluginService.findById(notifierId).map((notifierPlugin)->Response.ok(notifierPlugin).build()).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | notifierPluginService.findById(notifierId).map((notifierPlugin)->Response.ok(notifierPlugin).build()).subscribe
1 | Single | subscribe | METHOD_INVOCATION | notifierPluginService.findById(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema(notifierPlugin.getId())).map((notifierPluginSchema)->Response.ok(notifierPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | notifierPluginService.findById(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema(notifierPlugin.getId())).map((notifierPluginSchema)->Response.ok(notifierPluginSchema).build()).subscribe
1 | Single | flatMap | METHOD_INVOCATION | notifierPluginService.findById(notifierId).flatMap((notifierPlugin)->notifierPluginService.getSchema(notifierPlugin.getId())).map
1 | Single | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).subscribe(response::resume, response::resume);
1 | Completable | andThen | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE).andThen(alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)).subscribe
1 | Single | subscribe | METHOD_INVOCATION | policyPluginService.findAll(expand).map((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | policyPluginService.findAll(expand).map((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).map
1 | Maybe | error | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new PolicyPluginNotFoundException(policyId))
1 | Maybe | subscribe | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getSchema(policyId)).switchIfEmpty(Maybe.error(new PolicyPluginSchemaNotFoundException(policyId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getSchema(policyId)).switchIfEmpty(Maybe.error(new PolicyPluginSchemaNotFoundException(policyId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getSchema(policyId)).switchIfEmpty(Maybe.error(new PolicyPluginSchemaNotFoundException(policyId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getSchema(policyId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new PolicyPluginNotFoundException(policyId))
1 | Maybe | error | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getSchema(policyId)).switchIfEmpty(Maybe.error(new PolicyPluginSchemaNotFoundException(policyId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new PolicyPluginSchemaNotFoundException(policyId))
1 | Maybe | subscribe | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getDocumentation(policyId)).map((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getDocumentation(policyId)).map((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build()).subscribe
1 | Maybe | flatMap | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap((irrelevant)->policyPluginService.getDocumentation(policyId)).map
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | policyPluginService.findById(policyId).switchIfEmpty(Maybe.error(new PolicyPluginNotFoundException(policyId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new PolicyPluginNotFoundException(policyId))
1 | Maybe | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | organizationService.findById(organizationId).map((org)->Optional.ofNullable(org.getIdentities()).orElse(emptyList())).blockingGet().stream
1 | Single | map | METHOD_INVOCATION | organizationService.findById(organizationId).map((org)->Optional.ofNullable(org.getIdentities()).orElse(emptyList())).blockingGet
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | blockingGet | METHOD_INVOCATION | maybe.blockingGet().getUri
1 | Flowable | subscribe | METHOD_INVOCATION | formService.findAll(ReferenceType.ORGANIZATION).subscribe((form)->{
    updateForm(form);
    logger.info("Forms loaded");
}, (error)->logger.error("Unable to initialize forms", error));
1 | Maybe | subscribe | METHOD_INVOCATION | formService.findById(formId).subscribe((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d", formId, eventType);
}, (error)->logger.error("Unable to {} form {}", eventType, formId, error), ()->logger.error("No form found with id {}", formId));
1 | Single | subscribe | METHOD_INVOCATION | flowService.getSchema().subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | alertService.isAlertingAvailable().map(AlertServiceStatusEntity::new).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | alertService.isAlertingAvailable().map(AlertServiceStatusEntity::new).subscribe
1 | Single | subscribe | METHOD_INVOCATION | spelService.getGrammar().subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | authenticatorPluginService.findAll().map((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | authenticatorPluginService.findAll().map((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | authenticatorPluginService.findById(authenticatorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | authenticatorPluginService.findById(authenticatorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById(authenticatorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map
1 | Maybe | error | METHOD_INVOCATION | authenticatorPluginService.findById(authenticatorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(authenticatorId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new AuthenticatorPluginNotFoundException(authenticatorId))
1 | Maybe | subscribe | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((irrelevant)->authenticatorPluginService.getSchema(factorId)).switchIfEmpty(Maybe.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((irrelevant)->authenticatorPluginService.getSchema(factorId)).switchIfEmpty(Maybe.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((irrelevant)->authenticatorPluginService.getSchema(factorId)).switchIfEmpty(Maybe.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((irrelevant)->authenticatorPluginService.getSchema(factorId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new AuthenticatorPluginNotFoundException(factorId))
1 | Maybe | error | METHOD_INVOCATION | authenticatorPluginService.findById(factorId).switchIfEmpty(Maybe.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((irrelevant)->authenticatorPluginService.getSchema(factorId)).switchIfEmpty(Maybe.error(new AuthenticatorPluginSchemaNotFoundException(factorId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new AuthenticatorPluginSchemaNotFoundException(factorId))
1 | Single | subscribe | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).doOnSuccess((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
}).subscribe(response::resume, response::resume);
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).doOnSuccess((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
}).subscribe
1 | Single | flatMap | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId()).flatMap((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).doOnSuccess
1 | Single | subscribe | METHOD_INVOCATION | newsletterService.getTaglines().subscribe(response::resume, (error)->{
    LOGGER.error("An error has occurred when reading the newsletter taglines response", error);
    response.resume(Collections.emptyList());
});
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION).blockingForEach(this::updateAuthenticationProvider);
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById(identityProviderId).subscribe((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for organization {}", identityProviderId, eventType, organizationId);
}, (error)->logger.error("Unable to {} identity provider for organization {}", eventType, organizationId, error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Single | subscribe | METHOD_INVOCATION | roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, role).map(this::convert).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, role).map(this::convert).subscribe
1 | Single | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).andThen(installationService.get().map(InstallationEntity::new)).doOnSuccess((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL))).subscribe(response::resume, response::resume);
1 | Single | doOnSuccess | METHOD_INVOCATION | checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).andThen(installationService.get().map(InstallationEntity::new)).doOnSuccess((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL))).subscribe
1 | Completable | andThen | METHOD_INVOCATION | checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).andThen(installationService.get().map(InstallationEntity::new)).doOnSuccess
1 | Single | map | METHOD_INVOCATION | checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ).andThen(installationService.get().map(InstallationEntity::new))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | identityProviderPluginService.findAll(external, expand).map((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | identityProviderPluginService.findAll(external, expand).map((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findAll().map((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | extensionGrantPluginService.findAll().map((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | reporterPluginService.findAll().map((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | reporterPluginService.findAll().map((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | resourcePluginService.findAll(expand).map((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | resourcePluginService.findAll(expand).map((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList())).subscribe
1 | Single | subscribe | METHOD_INVOCATION | notifierPluginService.findAll(expand.toArray(new String[0])).sorted(Comparator.comparing(AbstractPlugin::getName)).toList().subscribe(response::resume, response::resume);
1 | Flowable | toList | METHOD_INVOCATION | notifierPluginService.findAll(expand.toArray(new String[0])).sorted(Comparator.comparing(AbstractPlugin::getName)).toList().subscribe
1 | Flowable | sorted | METHOD_INVOCATION | notifierPluginService.findAll(expand.toArray(new String[0])).sorted(Comparator.comparing(AbstractPlugin::getName)).toList
1 | Single | subscribe | METHOD_INVOCATION | pluginService.findAll().map((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList())).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | pluginService.findAll().map((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList())).subscribe
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | pluginService.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetectionId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | pluginService.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetectionId))).map((policyPlugin)->Response.ok(policyPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | pluginService.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetectionId))).map
1 | Maybe | error | METHOD_INVOCATION | pluginService.findById(botDetectionId).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetectionId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionPluginNotFoundException(botDetectionId))
1 | Maybe | subscribe | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((irrelevant)->pluginService.getSchema(botDetection)).switchIfEmpty(Maybe.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((irrelevant)->pluginService.getSchema(botDetection)).switchIfEmpty(Maybe.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((irrelevant)->pluginService.getSchema(botDetection)).switchIfEmpty(Maybe.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map
1 | Maybe | flatMap | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((irrelevant)->pluginService.getSchema(botDetection)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap
1 | Maybe | error | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionPluginNotFoundException(botDetection))
1 | Maybe | error | METHOD_INVOCATION | pluginService.findById(botDetection).switchIfEmpty(Maybe.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((irrelevant)->pluginService.getSchema(botDetection)).switchIfEmpty(Maybe.error(new BotDetectionPluginSchemaNotFoundException(botDetection)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BotDetectionPluginSchemaNotFoundException(botDetection))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map((resourcePlugin)->Response.ok(resourcePlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map((resourcePlugin)->Response.ok(resourcePlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map
1 | Maybe | error | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourcePluginNotFoundException(resourceId))
1 | Maybe | subscribe | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap((irrelevant)->resourcePluginService.getSchema(resourceId)).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap((irrelevant)->resourcePluginService.getSchema(resourceId)).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map((policyPluginSchema)->Response.ok(policyPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap((irrelevant)->resourcePluginService.getSchema(resourceId)).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap((irrelevant)->resourcePluginService.getSchema(resourceId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourcePluginNotFoundException(resourceId))
1 | Maybe | error | METHOD_INVOCATION | resourcePluginService.findById(resourceId).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId))).flatMap((irrelevant)->resourcePluginService.getSchema(resourceId)).switchIfEmpty(Maybe.error(new ResourcePluginNotFoundException(resourceId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ResourcePluginNotFoundException(resourceId))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).map((reporterPlugin)->Response.ok(reporterPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).map((reporterPlugin)->Response.ok(reporterPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).map
1 | Maybe | error | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterPluginNotFoundException(reporterId))
1 | Maybe | subscribe | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap((irrelevant)->reporterPluginService.getSchema(reporterId)).switchIfEmpty(Maybe.error(new ReporterPluginSchemaNotFoundException(reporterId))).map((reporterPluginSchema)->Response.ok(reporterPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap((irrelevant)->reporterPluginService.getSchema(reporterId)).switchIfEmpty(Maybe.error(new ReporterPluginSchemaNotFoundException(reporterId))).map((reporterPluginSchema)->Response.ok(reporterPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap((irrelevant)->reporterPluginService.getSchema(reporterId)).switchIfEmpty(Maybe.error(new ReporterPluginSchemaNotFoundException(reporterId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap((irrelevant)->reporterPluginService.getSchema(reporterId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterPluginNotFoundException(reporterId))
1 | Maybe | error | METHOD_INVOCATION | reporterPluginService.findById(reporterId).switchIfEmpty(Maybe.error(new ReporterPluginNotFoundException(reporterId))).flatMap((irrelevant)->reporterPluginService.getSchema(reporterId)).switchIfEmpty(Maybe.error(new ReporterPluginSchemaNotFoundException(reporterId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ReporterPluginSchemaNotFoundException(reporterId))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map
1 | Maybe | error | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((irrelevant)->extensionGrantPluginService.getSchema(extensionGrantId)).switchIfEmpty(Maybe.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((irrelevant)->extensionGrantPluginService.getSchema(extensionGrantId)).switchIfEmpty(Maybe.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((irrelevant)->extensionGrantPluginService.getSchema(extensionGrantId)).switchIfEmpty(Maybe.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((irrelevant)->extensionGrantPluginService.getSchema(extensionGrantId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))
1 | Maybe | error | METHOD_INVOCATION | extensionGrantPluginService.findById(extensionGrantId).switchIfEmpty(Maybe.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((irrelevant)->extensionGrantPluginService.getSchema(extensionGrantId)).switchIfEmpty(Maybe.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map((identityProviderPlugin)->Response.ok(identityProviderPlugin).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map((identityProviderPlugin)->Response.ok(identityProviderPlugin).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map
1 | Maybe | error | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((irrelevant)->identityProviderPluginService.getSchema(identityProviderId)).switchIfEmpty(Maybe.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build()).subscribe(response::resume, response::resume);
1 | Maybe | map | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((irrelevant)->identityProviderPluginService.getSchema(identityProviderId)).switchIfEmpty(Maybe.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build()).subscribe
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((irrelevant)->identityProviderPluginService.getSchema(identityProviderId)).switchIfEmpty(Maybe.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map
1 | Maybe | flatMap | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((irrelevant)->identityProviderPluginService.getSchema(identityProviderId)).switchIfEmpty
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap
1 | Maybe | error | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))
1 | Maybe | error | METHOD_INVOCATION | identityProviderPluginService.findById(identityProviderId).switchIfEmpty(Maybe.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((irrelevant)->identityProviderPluginService.getSchema(identityProviderId)).switchIfEmpty(Maybe.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId)))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))
1 | Single | blockingGet | METHOD_INVOCATION | final Environment environment = environmentService.findById((String)jwt.get(Claims.environment), (String)jwt.get(Claims.organization)).blockingGet()
1 | Single | blockingGet | METHOD_INVOCATION | Organization organization = organizationService.findById(organizationId).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | user = authenticationProvider.loadUserByUsername(provAuthentication).blockingGet()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | blockingGet | METHOD_INVOCATION | io.gravitee.am.model.User endUser = userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return userService.create(newUser).flatMap((user)->userService.setRoles(principal, user).andThen(Single.just(user)));
    }
    return Single.error(ex);
}).flatMap(userService::enhance).doOnSuccess((user)->auditService.report(AuditBuilder.builder(AuthenticationAuditBuilder.class).principal(authentication).referenceType(ReferenceType.ORGANIZATION).referenceId(organizationId).user(user))).blockingGet()
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return userService.create(newUser).flatMap((user)->userService.setRoles(principal, user).andThen(Single.just(user)));
    }
    return Single.error(ex);
}).flatMap(userService::enhance).doOnSuccess((user)->auditService.report(AuditBuilder.builder(AuthenticationAuditBuilder.class).principal(authentication).referenceType(ReferenceType.ORGANIZATION).referenceId(organizationId).user(user))).blockingGet
1 | Single | flatMap | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return userService.create(newUser).flatMap((user)->userService.setRoles(principal, user).andThen(Single.just(user)));
    }
    return Single.error(ex);
}).flatMap(userService::enhance).doOnSuccess
1 | Single | onErrorResumeNext | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return userService.create(newUser).flatMap((user)->userService.setRoles(principal, user).andThen(Single.just(user)));
    }
    return Single.error(ex);
}).flatMap
1 | Maybe | flatMapSingle | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
}).onErrorResumeNext
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername()))).flatMapSingle
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty
1 | Maybe | defer | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))
1 | Maybe | METHOD_INVOCATION | Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))
1 | Maybe | error | METHOD_INVOCATION | userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source).switchIfEmpty(Maybe.defer(()->userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source))).switchIfEmpty(Maybe.error(new UserNotFoundException(principal.getUsername())))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new UserNotFoundException(principal.getUsername()))
1 | Single | flatMap | METHOD_INVOCATION | return userService.update(existingUser).flatMap((user)->updateRoles(principal, existingUser).andThen(Single.just(user)));
1 | Completable | andThen | METHOD_INVOCATION | (user)->updateRoles(principal, existingUser).andThen(Single.just(user))
1 | Single | just | METHOD_INVOCATION | updateRoles(principal, existingUser).andThen(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | flatMap | METHOD_INVOCATION | return userService.create(newUser).flatMap((user)->userService.setRoles(principal, user).andThen(Single.just(user)));
1 | Completable | andThen | METHOD_INVOCATION | (user)->userService.setRoles(principal, user).andThen(Single.just(user))
1 | Single | just | METHOD_INVOCATION | userService.setRoles(principal, user).andThen(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Single | error | METHOD_INVOCATION | return Single.error(ex);
1 | Single | METHOD_INVOCATION | Single.error(ex)
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | flatMapCompletable | METHOD_INVOCATION | return membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement().map((membership)->!membership.getRoleId().equals(roleId)).switchIfEmpty(Maybe.just(false)).flatMapCompletable((mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return Completable.complete();
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate(existingUser.getReferenceId(), membership)).ignoreElement();
});
1 | Maybe | switchIfEmpty | METHOD_INVOCATION | membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement().map((membership)->!membership.getRoleId().equals(roleId)).switchIfEmpty(Maybe.just(false)).flatMapCompletable
1 | Maybe | map | METHOD_INVOCATION | membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement().map((membership)->!membership.getRoleId().equals(roleId)).switchIfEmpty
1 | Flowable | firstElement | METHOD_INVOCATION | membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement().map
1 | Flowable | filter | METHOD_INVOCATION | membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement
1 | Maybe | just | METHOD_INVOCATION | membershipService.findByMember(existingUser.getId(), MemberType.USER).filter((membership)->ReferenceType.ORGANIZATION == membership.getReferenceType()).firstElement().map((membership)->!membership.getRoleId().equals(roleId)).switchIfEmpty(Maybe.just(false))
1 | Maybe | METHOD_INVOCATION | Maybe.just(false)
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | ignoreElement | METHOD_INVOCATION | return roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate(existingUser.getReferenceId(), membership)).ignoreElement();
1 | Single | flatMap | METHOD_INVOCATION | roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId).flatMap((__)->membershipService.addOrUpdate(existingUser.getReferenceId(), membership)).ignoreElement
1 | Single | subscribe | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()))).doOnError((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
}).subscribe();
1 | Single | doOnError | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()))).doOnError((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
}).subscribe
1 | Single | doOnSuccess | METHOD_INVOCATION | userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub()).doOnSuccess((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()))).doOnError
1 | Single | blockingGet | METHOD_INVOCATION | !reCaptchaService.isValid(reCaptchaToken).blockingGet()
1 | Maybe | blockingGet | METHOD_INVOCATION | User user = authenticationProvider.loadUserByUsername(provAuthentication).blockingGet()
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | map | METHOD_INVOCATION | final Single<List<String>> organizationPermissions = permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId).map(Permission::flatten)
1 | Single | LOCAL_VARIABLE
1 | Single | map | METHOD_INVOCATION | final Single<List<String>> platformPermissions = permissionService.findAllPermissions(authenticatedUser, ReferenceType.PLATFORM, Platform.DEFAULT).map(Permission::flatten)
1 | Single | subscribe | METHOD_INVOCATION | Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
}).map((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
}).subscribe(response::resume, response::resume);
1 | Single | map | METHOD_INVOCATION | Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
}).map((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
}).subscribe
1 | Single | zip | METHOD_INVOCATION | Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
}).map
1 | Single | METHOD_INVOCATION | Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockEntrypoint))
1 | Single | METHOD_INVOCATION | Single.just(mockEntrypoint)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new EntrypointNotFoundException(ENTRYPOINT_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new EntrypointNotFoundException(ENTRYPOINT_ID))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockEntrypoint))
1 | Single | METHOD_INVOCATION | Single.just(mockEntrypoint)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new EntrypointNotFoundException(ENTRYPOINT_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new EntrypointNotFoundException(ENTRYPOINT_ID))
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(permissionService.hasPermission(any(User.class), any(PermissionAcls.class))).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Collections.singletonList(botDetectionPlugin)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(botDetectionPlugin))
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(new Flow(), new Flow()))
1 | Flowable | METHOD_INVOCATION | Flowable.just(new Flow(), new Flow())
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockIdentityProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockIdentityProvider)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockIdentityProvider))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockIdentityProvider)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockCredential))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockCredential)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(pagedUsers))
1 | Single | METHOD_INVOCATION | Single.just(pagedUsers)
1 | Single | just | METHOD_INVOCATION | when(permissionService.findAllPermissions(any(), eq(ReferenceType.ORGANIZATION), eq(organizationId))).thenReturn(Single.just(permissions))
1 | Single | METHOD_INVOCATION | Single.just(permissions)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(pagedUsers))
1 | Single | METHOD_INVOCATION | Single.just(pagedUsers)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new UserProviderNotFoundException(newUser.getSource())))
1 | Single | METHOD_INVOCATION | Single.error(new UserProviderNotFoundException(newUser.getSource()))
1 | Single | just | METHOD_INVOCATION | when(permissionService.hasPermission(any(), any())).thenReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(ORGANIZATION_DEFAULT)).thenReturn(Single.just(new Organization()))
1 | Single | METHOD_INVOCATION | Single.just(new Organization())
1 | Single | just | METHOD_INVOCATION | when(organizationUserService.createGraviteeUser(any(), any(), any())).thenReturn(Single.just(new User()))
1 | Single | METHOD_INVOCATION | Single.just(new User())
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockIdentityProvider, mockIdentityProvider2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockIdentityProvider, mockIdentityProvider2)
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(identityProvider))
1 | Single | METHOD_INVOCATION | Single.just(identityProvider)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(plugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(plugin)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException())
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(plugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(plugin)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just("{}"))
1 | Maybe | METHOD_INVOCATION | Maybe.just("{}")
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(plugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(plugin)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(plugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(plugin)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException())
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockExtensionGrant, mockExtensionGrant2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockExtensionGrant, mockExtensionGrant2)
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(extensionGrant))
1 | Single | METHOD_INVOCATION | Single.just(extensionGrant)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockApplication))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockApplication)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.of(Permission.APPLICATION, Acl.READ))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockApplication))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockApplication)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockClient)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockApplication))
1 | Single | METHOD_INVOCATION | Single.just(mockApplication)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.of(Permission.APPLICATION, Acl.READ))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockApplication))
1 | Single | METHOD_INVOCATION | Single.just(mockApplication)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.of(Permission.APPLICATION, Acl.READ)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.of(Permission.APPLICATION, Acl.READ))
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(false))
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.APPLICATION))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockClient))
1 | Single | METHOD_INVOCATION | Single.just(mockClient)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new ApplicationNotFoundException(clientId)))
1 | Single | METHOD_INVOCATION | Single.error(new ApplicationNotFoundException(clientId))
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Collections.singletonList(resourcePlugin)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(resourcePlugin))
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Collections.singletonList(identityProviderPlugin)))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singletonList(identityProviderPlugin))
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("Error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockRole))
1 | Single | METHOD_INVOCATION | Single.just(mockRole)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new RoleNotFoundException(roleId)))
1 | Single | METHOD_INVOCATION | Single.error(new RoleNotFoundException(roleId))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Email()))
1 | Single | METHOD_INVOCATION | Single.just(new Email())
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Completable | error | METHOD_INVOCATION | doReturn(Completable.error(new EmailNotFoundException(emailId)))
1 | Completable | METHOD_INVOCATION | Completable.error(new EmailNotFoundException(emailId))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Collections.singleton("role-1")))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton("role-1"))
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockGroup))
1 | Single | METHOD_INVOCATION | Single.just(mockGroup)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | when(organizationService.findById(Organization.DEFAULT)).thenReturn(Single.just(defaultOrganization))
1 | Single | METHOD_INVOCATION | Single.just(defaultOrganization)
1 | Maybe | just | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.error(new BadCredentialsException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException())
1 | Maybe | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | error | METHOD_INVOCATION | when(authenticationProvider.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.error(new BadCredentialsException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException())
1 | Maybe | error | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.error(new BadCredentialsException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new BadCredentialsException())
1 | Maybe | just | METHOD_INVOCATION | when(authenticationProvider2.loadUserByUsername(any(io.gravitee.am.identityprovider.api.Authentication.class))).thenReturn(Maybe.just(new DefaultUser("username")))
1 | Maybe | METHOD_INVOCATION | Maybe.just(new DefaultUser("username"))
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(extensionGrantPlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(extensionGrantPlugin)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(extensionGrantPlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(extensionGrantPlugin)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(schema))
1 | Maybe | METHOD_INVOCATION | Maybe.just(schema)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockScope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockScope)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockScope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockScope)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockExtensionGrant))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockExtensionGrant)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockExtensionGrant))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockExtensionGrant)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockFlow))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockFlow)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(updatedFlow))
1 | Single | METHOD_INVOCATION | Single.just(updatedFlow)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new FlowNotFoundException(FLOW_ID)))
1 | Single | METHOD_INVOCATION | Single.error(new FlowNotFoundException(FLOW_ID))
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockCertificate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockCertificate)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockCertificate))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockCertificate)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Collections.singleton("role-1")))
1 | Single | METHOD_INVOCATION | Single.just(Collections.singleton("role-1"))
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockUser))
1 | Single | METHOD_INVOCATION | Single.just(mockUser)
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockCertificate, mockCertificate2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockCertificate, mockCertificate2)
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just("certificate-schema"))
1 | Maybe | METHOD_INVOCATION | Maybe.just("certificate-schema")
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(certificate))
1 | Single | METHOD_INVOCATION | Single.just(certificate)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockRole)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockRole))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockRole)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new HashSet<>(Arrays.asList(certificatePlugin))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(certificatePlugin)))
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("Error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Page<>(scopes, 0, 2)))
1 | Single | METHOD_INVOCATION | Single.just(new Page<>(scopes, 0, 2))
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(scope))
1 | Single | METHOD_INVOCATION | Single.just(scope)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockGroup))
1 | Single | METHOD_INVOCATION | Single.just(mockGroup)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockGroup))
1 | Single | METHOD_INVOCATION | Single.just(mockGroup)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockGroup))
1 | Single | METHOD_INVOCATION | Single.just(mockGroup)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockGroup))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockGroup)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.of(Permission.DOMAIN, Acl.READ)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.of(Permission.DOMAIN, Acl.READ))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(false))
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockDomain))
1 | Single | METHOD_INVOCATION | Single.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.allPermissionAcls(ReferenceType.DOMAIN))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockDomain))
1 | Single | METHOD_INVOCATION | Single.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(true))
1 | Single | METHOD_INVOCATION | Single.just(true)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(Permission.of(Permission.DOMAIN, Acl.READ)))
1 | Single | METHOD_INVOCATION | Single.just(Permission.of(Permission.DOMAIN, Acl.READ))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockDomain))
1 | Single | METHOD_INVOCATION | Single.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(false))
1 | Single | METHOD_INVOCATION | Single.just(false)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Domain()))
1 | Single | METHOD_INVOCATION | Single.just(new Domain())
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Flowable | METHOD_INVOCATION | Flowable.just(entrypoint, entrypoint2, defaultEntrypoint)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Flowable | METHOD_INVOCATION | Flowable.just(entrypoint, entrypoint2, defaultEntrypoint)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(entrypoint, entrypoint2, defaultEntrypoint))
1 | Flowable | METHOD_INVOCATION | Flowable.just(entrypoint, entrypoint2, defaultEntrypoint)
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(entrypoint, entrypoint2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(entrypoint, entrypoint2)
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(entrypoint))
1 | Single | METHOD_INVOCATION | Single.just(entrypoint)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(pagedUsers))
1 | Single | METHOD_INVOCATION | Single.just(pagedUsers)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(group))
1 | Single | METHOD_INVOCATION | Single.just(group)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(resourcePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(resourcePlugin)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException())
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(resourcePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(resourcePlugin)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just("{}"))
1 | Maybe | METHOD_INVOCATION | Maybe.just("{}")
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(resourcePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(resourcePlugin)
1 | Maybe | empty | METHOD_INVOCATION | doReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(resourcePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(resourcePlugin)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException()))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException())
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockCredential))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockCredential)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockDomain, mockDomain2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockDomain, mockDomain2)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("error occurs"))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(domain))
1 | Single | METHOD_INVOCATION | Single.just(domain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new IdentityProvider()))
1 | Single | METHOD_INVOCATION | Single.just(new IdentityProvider())
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Reporter()))
1 | Single | METHOD_INVOCATION | Single.just(new Reporter())
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockEmail))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockEmail)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Email()))
1 | Single | METHOD_INVOCATION | Single.just(new Email())
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(pagedRoles))
1 | Single | METHOD_INVOCATION | Single.just(pagedRoles)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(roles))
1 | Single | METHOD_INVOCATION | Single.just(roles)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(pagedRoles))
1 | Single | METHOD_INVOCATION | Single.just(pagedRoles)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(role))
1 | Single | METHOD_INVOCATION | Single.just(role)
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new OrganizationNotFoundException(organizationId)))
1 | Single | METHOD_INVOCATION | Single.error(new OrganizationNotFoundException(organizationId))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockUser))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockUser)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockFactor))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockFactor)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(certificatePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificatePlugin)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(certificatePlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(certificatePlugin)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(schema))
1 | Maybe | METHOD_INVOCATION | Maybe.just(schema)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockClient)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockScope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockScope)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(scopeApproval))
1 | Maybe | METHOD_INVOCATION | Maybe.just(scopeApproval)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockForm))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockForm)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Form()))
1 | Single | METHOD_INVOCATION | Single.just(new Form())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new Form()))
1 | Single | METHOD_INVOCATION | Single.just(new Form())
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | error | METHOD_INVOCATION | doReturn(Completable.error(new FormNotFoundException(formId)))
1 | Completable | METHOD_INVOCATION | Completable.error(new FormNotFoundException(formId))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(applicationPage))
1 | Single | METHOD_INVOCATION | Single.just(applicationPage)
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(application))
1 | Single | METHOD_INVOCATION | Single.just(application)
1 | Single | IMPORT
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new HashSet<>(Arrays.asList(extensionGrantPlugin))))
1 | Single | METHOD_INVOCATION | Single.just(new HashSet<>(Arrays.asList(extensionGrantPlugin)))
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new TechnicalManagementException("Error occurs")))
1 | Single | METHOD_INVOCATION | Single.error(new TechnicalManagementException("Error occurs"))
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new OrganizationNotFoundException(organizationId)))
1 | Single | METHOD_INVOCATION | Single.error(new OrganizationNotFoundException(organizationId))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(membership))
1 | Single | METHOD_INVOCATION | Single.just(membership)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(membership))
1 | Single | METHOD_INVOCATION | Single.just(membership)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(organization))
1 | Single | METHOD_INVOCATION | Single.just(organization)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(Arrays.asList(membership)))
1 | Flowable | METHOD_INVOCATION | Flowable.just(Arrays.asList(membership))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(new HashMap<>()))
1 | Single | METHOD_INVOCATION | Single.just(new HashMap<>())
1 | Single | error | METHOD_INVOCATION | doReturn(Single.error(new OrganizationNotFoundException(organization.getId())))
1 | Single | METHOD_INVOCATION | Single.error(new OrganizationNotFoundException(organization.getId()))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | empty | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Maybe | empty | METHOD_INVOCATION | when(userServiceMock.findByUsernameAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Maybe.empty())
1 | Maybe | METHOD_INVOCATION | Maybe.empty()
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.create(any(io.gravitee.am.model.User.class))).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Completable | complete | METHOD_INVOCATION | when(userServiceMock.setRoles(any(), any(io.gravitee.am.model.User.class))).thenReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(Single.just(user))
1 | Single | METHOD_INVOCATION | Single.just(user)
1 | Maybe | just | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Maybe.just(repositoryUserMock))
1 | Maybe | METHOD_INVOCATION | Maybe.just(repositoryUserMock)
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.update(any(io.gravitee.am.model.User.class))).thenReturn(Single.just(new io.gravitee.am.model.User()))
1 | Single | METHOD_INVOCATION | Single.just(new io.gravitee.am.model.User())
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(Single.just(new io.gravitee.am.model.User()))
1 | Single | METHOD_INVOCATION | Single.just(new io.gravitee.am.model.User())
1 | Maybe | just | METHOD_INVOCATION | when(userServiceMock.findByExternalIdAndSource(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userDetailsMock.getUsername(), null)).thenReturn(Maybe.just(repositoryUserMock))
1 | Maybe | METHOD_INVOCATION | Maybe.just(repositoryUserMock)
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.update(any(io.gravitee.am.model.User.class))).thenReturn(Single.just(new io.gravitee.am.model.User()))
1 | Single | METHOD_INVOCATION | Single.just(new io.gravitee.am.model.User())
1 | Single | just | METHOD_INVOCATION | when(userServiceMock.enhance(any())).thenReturn(Single.just(new io.gravitee.am.model.User()))
1 | Single | METHOD_INVOCATION | Single.just(new io.gravitee.am.model.User())
1 | Single | just | METHOD_INVOCATION | when(roleServiceMock.findById(ReferenceType.ORGANIZATION, "organization-id", "organization-owner-role-id")).thenReturn(Single.just(new Role()))
1 | Single | METHOD_INVOCATION | Single.just(new Role())
1 | Flowable | just | METHOD_INVOCATION | when(membershipServiceMock.findByMember("user-id", MemberType.USER)).thenReturn(Flowable.just(membershipMock))
1 | Flowable | METHOD_INVOCATION | Flowable.just(membershipMock)
1 | Single | just | METHOD_INVOCATION | when(membershipServiceMock.addOrUpdate(anyString(), any(Membership.class))).thenReturn(Single.just(new Membership()))
1 | Single | METHOD_INVOCATION | Single.just(new Membership())
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(mockRole, mockRole2))
1 | Flowable | METHOD_INVOCATION | Flowable.just(mockRole, mockRole2)
1 | Flowable | error | METHOD_INVOCATION | doReturn(Flowable.error(new TechnicalManagementException("error occurs")))
1 | Flowable | METHOD_INVOCATION | Flowable.error(new TechnicalManagementException("error occurs"))
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(tag))
1 | Single | METHOD_INVOCATION | Single.just(tag)
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockClient))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockClient)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockScope))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockScope)
1 | Flowable | just | METHOD_INVOCATION | doReturn(Flowable.just(scopeApproval))
1 | Flowable | METHOD_INVOCATION | Flowable.just(scopeApproval)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Completable | complete | METHOD_INVOCATION | doReturn(Completable.complete())
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(mockDomain))
1 | Maybe | METHOD_INVOCATION | Maybe.just(mockDomain)
1 | Single | just | METHOD_INVOCATION | doReturn(Single.just(mockUser))
1 | Single | METHOD_INVOCATION | Single.just(mockUser)
1 | Maybe | IMPORT
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(identityProviderPlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(identityProviderPlugin)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(identityProviderPlugin))
1 | Maybe | METHOD_INVOCATION | Maybe.just(identityProviderPlugin)
1 | Maybe | just | METHOD_INVOCATION | doReturn(Maybe.just(schema))
1 | Maybe | METHOD_INVOCATION | Maybe.just(schema)
1 | Maybe | error | METHOD_INVOCATION | doReturn(Maybe.error(new TechnicalManagementException("Error occurs")))
1 | Maybe | METHOD_INVOCATION | Maybe.error(new TechnicalManagementException("Error occurs"))
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
1 | Completable | OTHER
1 | Completable | error | METHOD_INVOCATION | return Completable.error(new InvalidCodeException("Invalid 2FA code"));
1 | Completable | METHOD_INVOCATION | Completable.error(new InvalidCodeException("Invalid 2FA code"))
1 | Completable | complete | METHOD_INVOCATION | return Completable.complete();
1 | Completable | METHOD_INVOCATION | Completable.complete()
