1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | accessTokenRepository.findByToken(TOKEN).subscribe((domain)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error)), ()->future.complete(Result.healthy()));
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | RETURN_TYPE
1 | Observable | RETURN_TYPE
1 | Observable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | domainRepository.findById(DOMAIN).subscribe((domain)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error)), ()->future.complete(Result.healthy()));
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.create(group).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getReferenceType(), createdGroup.getReferenceId(), createdGroup.getId()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Group> testUpdate = repository.update(toUpdate).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(toUpdate.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findById(createdGroup.getId()).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testDelete = repository.delete(createdGroup.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByMember(member1)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByMember(member2)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByIdIn(ids)).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findByName(group.getReferenceType(), group.getReferenceId(), group.getName()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Group> testObserver = repository.findByName(group.getReferenceType(), group.getReferenceId(), "unknown").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = repository.findById(apCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = repository.update(toUpdate).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(apCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = repository.findByDomain(DOMAIN_SINGLE, 0, 20).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<AccessPolicy>> testObserver = repository.findByDomain(DOMAIN10, 0, totalCount + 1).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN10, 0, totalCount / 2).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN10, 1, totalCount / 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomainAndResource(DOMAIN_ID, RESOURCE_ID)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByResources(Arrays.asList(RESOURCE_ID, RESOURCE_ID + "2"))).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Email> testObserver = repository.findById("unknownId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getReferenceType(), createdEmail.getReferenceId(), createdEmail.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Email> updatedEmail = repository.update(updatableEmail).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testObserver = repository.findById(createdEmail.getId()).test()
1 | Completable | blockingGet | METHOD_INVOCATION | repository.delete(createdEmail.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdEmail.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<String> testIdSubscriber = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).map(RxJavaReactorMigrationUtil.toJdkFunction(Email::getId))).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = repository.findByTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = repository.findAll().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Email> testMaybe = repository.findByClientAndTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.findById(alertNotifierCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertNotifierRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.create(alertNotifier).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertNotifier> testObserver = alertNotifierRepository.update(updatedAlertNotifier).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = alertNotifierRepository.delete(alertNotifierCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertNotifierRepository.findById(alertNotifierCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertNotifier> testObserver1 = alertNotifierRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertNotifierRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = repository.findByReference(ReferenceType.DOMAIN, "testDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.findById(bdetectionCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | repository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.create(bDetection).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.update(bDetection).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<BotDetection> testObserver = repository.findById(botDetectionCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = repository.delete(botDetectionCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | repository.findById(botDetectionCreated.getId()).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Form> testObserver = repository.findById("unknownId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getReferenceType(), createdForm.getReferenceId(), createdForm.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Form> updatedForm = repository.update(updatableForm).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testObserver = repository.findById(createdForm.getId()).test()
1 | Completable | blockingGet | METHOD_INVOCATION | repository.delete(createdForm.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdForm.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findAll(ReferenceType.DOMAIN, FIXED_REF_ID)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByClient(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID)).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = repository.findByTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, "MyTemplateId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Form> testMaybe = repository.findByClientAndTemplate(ReferenceType.DOMAIN, FIXED_REF_ID, FIXED_CLI_ID, "MyTemplateId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.findById(alertTriggerCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertTriggerRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.create(alertTrigger).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AlertTrigger> testObserver = alertTriggerRepository.update(updatedAlertTrigger).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = alertTriggerRepository.delete(alertTriggerCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | alertTriggerRepository.findById(alertTriggerCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AlertTrigger> testObserver1 = alertTriggerRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = alertTriggerRepository.findByCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.findByDomain("testDomain", 0, Integer.MAX_VALUE).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationRepository.findByDomainAndExtensionGrant("testDomain", "test-grant").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findByDomainAndClientId("testDomain", "clientId1").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.findByDomain("testDomainPagination", 1, 1).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findById(appCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationRepository.findByIdentityProvider(appCreated.getIdentities().iterator().next()).test()
1 | Maybe | test | METHOD_INVOCATION | applicationRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.create(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.update(updatedApp).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationRepository.findById(appCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = applicationRepository.delete(appCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | applicationRepository.findById(appCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.search(domain, "clientId", 0, Integer.MAX_VALUE).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationRepository.search(domain, "clientId*", 0, Integer.MAX_VALUE).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver1 = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.findAllByReferenceId("environment#1").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = domainRepository.findByIdIn(Collections.singleton(domainCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.findById(domainCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | domainRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.create(domain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.update(updatedDomain).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Domain> testObserver = domainRepository.findById(domainCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = domainRepository.delete(domainCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | domainRepository.findById(domainCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.findAllByCriteria(criteria).test()
1 | Flowable | test | METHOD_INVOCATION | testObserver1 = domainRepository.findAllByCriteria(criteria).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testObserver1 = domainRepository.search("environment#1", "testName").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.create(alertNotifier).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Monitoring> testObserver = nodeMonitoringRepository.update(updatedMonitoring).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Monitoring> obs = nodeMonitoringRepository.findByNodeIdAndType(NODE_ID, MONITORING_TYPE).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Monitoring> obs = nodeMonitoringRepository.findByTypeAndTimeFrame(MONITORING_TYPE, from, to).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = credentialRepository.findByUserId(credential.getReferenceType(), credential.getReferenceId(), credential.getUserId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUsername(credential.getReferenceType(), credential.getReferenceId(), credential.getUsername()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByCredentialId(credential.getReferenceType(), credential.getReferenceId(), credential.getCredentialId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.findById(credentialCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | credentialRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.create(credential).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.update(updateCredential).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Credential> testObserver = credentialRepository.findById(credentialCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.delete(credentialCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | credentialRepository.findById(credentialCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByUserId(ReferenceType.DOMAIN, "domain-id", "wrong-user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = credentialRepository.deleteByAaguid(ReferenceType.DOMAIN, "domain-id", "aaguid").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber2 = credentialRepository.findByUserId(ReferenceType.DOMAIN, "domain-id", "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testDomain = serviceResourceRepository.findByReference(ReferenceType.DOMAIN, "testDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.findById(resourceCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | serviceResourceRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.create(resource).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.update(updateResource).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = serviceResourceRepository.findById(resourceCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = serviceResourceRepository.delete(resourceCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | serviceResourceRepository.findById(resourceCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> testObserver1 = entrypointRepository.findAll(ORGANIZATION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | entrypointRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.create(entrypoint).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.update(updatedEntrypoint).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Entrypoint> testObserver = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = entrypointRepository.delete(entrypointCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | final TestObserver<Entrypoint> testFind = entrypointRepository.findById(entrypointCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.findById(installationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | installationRepository.findById("UNKNOWN").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.create(installation).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Installation> testObserver = installationRepository.update(updatedInstallation).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver1 = installationRepository.delete(installationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | installationRepository.findById(installationCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = organizationUserRepository.findAll(ReferenceType.ORGANIZATION, "testOrga").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByUsernameAndSource(ReferenceType.ORGANIZATION, "testOrga", user.getUsername(), user.getSource()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.findAll(ReferenceType.ORGANIZATION, user.getReferenceId(), 0, 10).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(userCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = organizationUserRepository.findByIdIn(Arrays.asList(userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | organizationUserRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.update(updatedUser).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserRepository.findById(userCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = organizationUserRepository.delete(userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | organizationUserRepository.findById(userCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, "testUsername*", 0, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, "testUsername*", 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 1, 1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, query, 0, 10).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = organizationUserRepository.search(ReferenceType.ORGANIZATION, organization, query, 0, 10).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.findById(organizationCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> testObserver = organizationRepository.findById("unknown").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.create(organization).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = organizationRepository.update(organizationUpdated).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = organizationRepository.delete(organizationCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Organization>> obs = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(organizationRepository.findByHrids(Collections.singletonList("Hrid1"))).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findAll(ReferenceType.DOMAIN, "DOMAIN1")).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Flow>> obs = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findByApplication(ReferenceType.DOMAIN, "DOMAIN1", "APP1")).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(ReferenceType.DOMAIN, "DOMAIN1", flowCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.findById(flowCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | flowRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.create(flow).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.update(flowUpdated).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Flow> obs = flowRepository.update(flowUpdated).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = flowRepository.delete(flowCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testSubscriber = factorRepository.findByDomain("testDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.findById(factorCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | factorRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.create(factor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.update(updateFactor).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Factor> testObserver = factorRepository.findById(factorCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = factorRepository.delete(factorCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | factorRepository.findById(factorCreated.getId()).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.findById(systemTaskCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | taskRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.update(buildSystemTask()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.updateIf(updatedSystemTask, systemTaskCreated.getOperationId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.updateIf(updatedSystemTask, "unknownId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<SystemTask> testObserver = taskRepository.findById(systemTaskCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = taskRepository.delete(systemTaskCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | taskRepository.findById(systemTaskCreated.getId()).test().assertEmpty
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = membershipRepository.findById(createdMembership.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipRepository.findByReference(ORGANIZATION_ID, ReferenceType.ORGANIZATION)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Membership>> obs = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipRepository.findByMember("user#1", MemberType.USER)).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Membership> obs = membershipRepository.findByReferenceAndMember(ReferenceType.ORGANIZATION, ORGANIZATION_ID, membership.getMemberType(), membership.getMemberId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Membership> obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | obs = membershipRepository.findByCriteria(ReferenceType.ORGANIZATION, ORGANIZATION_ID, criteria).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.create(reporter).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdReporter.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Reporter> testObserver = repository.findById(createdReporter.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(createdReporter.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdReporter.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findAll()).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Reporter>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomain(domain)).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = certificateRepository.findByDomain("DomainTestFindByDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.findById(certificateCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | certificateRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.create(certificate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.update(updatedCertificate).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Certificate> testObserver = certificateRepository.findById(certificateCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = certificateRepository.delete(certificateCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | certificateRepository.findById(certificateCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findAll(ReferenceType.DOMAIN, "testDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, "testDomain", user.getUsername(), user.getSource()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.findAll(ReferenceType.DOMAIN, user.getReferenceId(), 0, 10).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(userCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testObserver = userRepository.findByIdIn(Arrays.asList(userCreated.getId())).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId(), userCreated.getSource()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findByExternalIdAndSource(userCreated.getReferenceType(), userCreated.getReferenceId(), userCreated.getExternalId() + "unknown", userCreated.getSource()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | userRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.update(updatedUser).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userRepository.findById(userCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = userRepository.delete(userCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | userRepository.findById(userCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, "testUsername*", 0, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, "testUsername*", 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 2).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP1 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 1, 1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserverP0 = userRepository.search(ReferenceType.DOMAIN, domain, criteria, 0, 4).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findByDomainAndEmail(domain, "test@test.com", true).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userRepository.findByDomainAndEmail(domain, "test@test.com", false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.search(ReferenceType.DOMAIN, domain, query, 0, 10).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userRepository.search(ReferenceType.DOMAIN, domain, query, 0, 10).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = userRepository.statistics(query).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver = userRepository.statistics(query).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver1 = userRepository.statistics(query1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> testObserver2 = userRepository.statistics(query2).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.findById(envCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | environmentRepository.findById("unknown").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.create(env).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = environmentRepository.update(envUpdated).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = environmentRepository.delete(envCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(environmentRepository.findAll(FIXED_REF_ID)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Environment>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> observer = authenticationFlowContextRepository.findByTransactionId("unknown-sessions").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = authenticationFlowContextRepository.findLastByTransactionId("unknown-sessions").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> observer = authenticationFlowContextRepository.create(entity).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = authenticationFlowContextRepository.delete(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = authenticationFlowContextRepository.delete(TRANSACTION_ID, 1).test()
1 | Flowable | test | METHOD_INVOCATION | testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = authenticationFlowContextRepository.findLastByTransactionId(TRANSACTION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(null).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AuthenticationFlowContext> testList = authenticationFlowContextRepository.findByTransactionId(TRANSACTION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = authenticationFlowContextRepository.findLastByTransactionId(TRANSACTION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(roleRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Role>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(roleRepository.findByNamesAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, Arrays.asList(NAME_1, NAME_2), ReferenceType.ORGANIZATION)).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(roleCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(ReferenceType.DOMAIN, DOMAIN_ID, roleCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Role> testObserver = roleRepository.findAll(ReferenceType.DOMAIN, DOMAIN_ID).test()
1 | Maybe | test | METHOD_INVOCATION | roleRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.create(role).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.update(updatedRole).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Role> testObserver = roleRepository.findById(roleCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = roleRepository.delete(roleCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | roleRepository.findById(roleCreated.getId()).test().assertEmpty
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.findByToken("unknown-token").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(token.getToken()))).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().as
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testDelete = accessTokenRepository.delete(token.getToken()).test()
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode(token.getAuthorizationCode())).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode(token.getAuthorizationCode())).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode("unknown")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByAuthorizationCode("unknown")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientIdAndSubject("my-client-id", "my-subject")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientIdAndSubject("my-client-id", "my-subject")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Observable | test | METHOD_INVOCATION | TestObserver<AccessToken> observer = accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientId("my-client-id-2")).test()
1 | Completable | andThen | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen(accessTokenRepository.findByClientId("my-client-id-2")).test
1 | Single | toCompletable | METHOD_INVOCATION | accessTokenRepository.create(token).toCompletable().andThen
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> observer = RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(accessTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.singleToMono(accessTokenRepository.countByClientId("my-client-id-count")))).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.create(token).toCompletable())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObserver = RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id"))).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessToken> testObservable = RxJava2Adapter.completableToMono(accessTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id"))).then(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Event> testSubscriber = eventRepository.findByTimeFrame(from, to).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.findById(eventCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | eventRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.create(event).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Event> testObserver = eventRepository.findById(eventCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = eventRepository.delete(eventCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | eventRepository.findById(eventCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<List<IdentityProvider>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(identityProviderRepository.findAll(ReferenceType.DOMAIN, "testDomain")).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(identityProviderCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(ReferenceType.ORGANIZATION, ORGANIZATION_ID, identityProviderCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | identityProviderRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.create(identityProvider).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.update(updatedIdentityProvider).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<IdentityProvider> testObserver = identityProviderRepository.findById(identityProviderCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = identityProviderRepository.delete(identityProviderCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | identityProviderRepository.findById(identityProviderCreated.getId()).test().assertEmpty
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Tag> testObserver1 = tagRepository.findAll(ORGANIZATION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.findById(tagCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | tagRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.create(tag).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.update(updatedTag).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Tag> testObserver = tagRepository.findById(tagCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = tagRepository.delete(tagCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | tagRepository.findById(tagCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.create(attempt).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findByCriteria(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findByCriteria(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain("unknown").username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdUnexpectedAttempt.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(new LoginAttemptCriteria.Builder().client(attempt.getClient()).domain(attempt.getDomain()).username(attempt.getUsername()).identityProvider(attempt.getIdentityProvider()).build()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdUnexpectedAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> deleteObserver = repository.delete(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(createdAttempt.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.findById(createdAttempt.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> updateObserver = repository.update(updatableAttempt).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeRepository.findByDomain("testDomain", 0, Integer.MAX_VALUE).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findByDomainAndKey("testDomain", "one").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys("testDomain", Arrays.asList("one", "two", "three"))).collectList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findById(scopeCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | scopeRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.create(scope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.update(updatedScope).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeRepository.findById(scopeCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = scopeRepository.delete(scopeCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | scopeRepository.findById(scopeCreated.getId()).test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeRepository.search(scopeCreated.getDomain(), "*" + scopeName + "*", 0, Integer.MAX_VALUE).test()
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.findByCode(code).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> test = authorizationCodeRepository.findByCode(code).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.create(authorizationCode).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(authorizationCodeRepository.delete(code))).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | authorizationCodeRepository.create(authorizationCode).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.findById(rsCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.update(toUpdate).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(rsCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = repository.findByDomainAndClientAndUserAndResource(DOMAIN_ID, CLIENT_ID, USER_ID, rsCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Resource>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(repository.findByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID)).collectList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = repository.findByDomain(DOMAIN_ID, 0, Integer.MAX_VALUE).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Resource>> testObserver = repository.findByDomain(DOMAIN_ID, 0, 1).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.findByDomain(DOMAIN_ID, 1, 1).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = repository.findByResources(Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), "notMatching")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = repository.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Arrays.asList(rsCreated1.getId(), rsCreated2.getId(), rsCreated3.getId(), rsCreated4.getId(), rsCreated5.getId(), "unknown")).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.findById("unknown-id").test()
1 | Single | test | METHOD_INVOCATION | repository.create(par).test().awaitTerminalEvent
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = repository.findById(id).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PushedAuthorizationRequest> observer = RxJava2Adapter.singleToMono(repository.create(par)).then(RxJava2Adapter.maybeToMono(repository.findById(id))).then().then(RxJava2Adapter.completableToMono(repository.delete(id))).then(RxJava2Adapter.maybeToMono(repository.findById(id))).as(RxJava2Adapter::monoToMaybe).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = refreshTokenRepository.findByToken("unknown-token").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> observer = refreshTokenRepository.create(token).toCompletable().as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | refreshTokenRepository.create(token).toCompletable().as
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = RxJava2Adapter.completableToMono(refreshTokenRepository.create(token).toCompletable()).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete("my-token"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(refreshTokenRepository.create(token).toCompletable())
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdClientIdAndUserId("domain-id", "client-id", "user-id"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<RefreshToken> testObserver = RxJava2Adapter.completableToMono(refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2))).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByDomainIdAndUserId("domain-id", "user-id"))).then(RxJava2Adapter.maybeToMono(refreshTokenRepository.findByToken("my-token"))).as(RxJava2Adapter::monoToMaybe).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.findById(ptCreated.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.update(toUpdate).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = repository.delete(ptCreated.getId()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = extensionGrantRepository.findByDomain("testDomain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.findById(extensionGrantCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | extensionGrantRepository.findById("test").test().assertEmpty
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.create(extensionGrant).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.update(updatedExtension).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ExtensionGrant> testObserver = extensionGrantRepository.findById(extensionGrantCreated.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver1 = extensionGrantRepository.delete(extensionGrantCreated.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantCreated.getId()).test().assertEmpty
1 | Single | IMPORT
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.createIndex(document, indexOptions)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(systemTaskCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.insertOne(task)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(systemTaskCollection.replaceOne(and(eq(FIELD_ID, task.getId()), eq(FIELD_OPERATION_ID, operationId)), task)))
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<AccessPolicy>> accessPoliciesOperation = Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, accessPoliciesOperation, (count,accessPolicies)->new Page<>(accessPolicies, page, count));
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessPoliciesCollection.countDocuments(eq(FIELD_RESOURCE, resource))).first
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessPoliciesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.insertOne(accessPolicy)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessPoliciesCollection.replaceOne(eq(FIELD_ID, accessPolicy.getId()), accessPolicy)))
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(eq(FIELD_ID, identityProviderId)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(identitiesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, identityProviderId))).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.insertOne(identityProvider)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(identitiesCollection.replaceOne(eq(FIELD_ID, identityProvider.getId()), identityProvider)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments()).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments()).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find().sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(applicationsCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Application>> applicationsOperation = Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(MongoApplicationRepository::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(applicationsCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, applicationsOperation, (count,applications)->new Page<>(applications, page, count));
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(applicationsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, clientId))).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.insertOne(application)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(applicationsCollection.replaceOne(eq(FIELD_ID, application.getId()), application)))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.countDocuments());
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(applicationsCollection.countDocuments(eq(FIELD_DOMAIN, domain)));
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(entrypoint)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, entrypoint.getId()), entrypoint)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(parCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(parCollection.insertOne(convert(par))))
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_USERNAME, username))).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | return Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application)))).first(0L);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, domain), eq(FIELD_CLIENT, application)))).first
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first(Collections.emptyMap()))
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map((doc)->{
    Long nonActiveUsers = ((Number)doc.get("disabled")).longValue() + ((Number)doc.get("locked")).longValue() + ((Number)doc.get("inactive")).longValue();
    Long activeUsers = ((Number)doc.get("total")).longValue() - nonActiveUsers;
    Map<Object, Object> users = new HashMap<>();
    users.put("active", activeUsers);
    users.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey()) && !"total".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return users;
}).first
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(filters)), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("disabled", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$enabled", false)), 1, 0))), Accumulators.sum("locked", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$and", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$accountNonLocked", false)), new BasicDBObject("$gte", Arrays.asList("$accountLockedUntil", new Date())))), 1, 0))), Accumulators.sum("inactive", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$lte", Arrays.asList("$loggedAt", new Date(Instant.now().minus(90, ChronoUnit.DAYS).toEpochMilli()))), 1, 0))))), Document.class)).map
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first(Collections.emptyMap()))
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map((doc)->{
    Map<Object, Object> registrations = new HashMap<>();
    registrations.putAll(doc.entrySet().stream().filter((e)->!"_id".equals(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
    return registrations;
}).first
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.aggregate(Arrays.asList(Aggregates.match(and(eq(FIELD_REFERENCE_TYPE, DOMAIN.name()), eq(FIELD_REFERENCE_ID, query.getDomain()), eq(FIELD_PRE_REGISTRATION, true))), Aggregates.group(new BasicDBObject("_id", query.getField()), Accumulators.sum("total", 1), Accumulators.sum("completed", new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$registrationCompleted", true)), 1, 0))))), Document.class)).map
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_USERNAME, 1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, page, count));
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count));
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<User>> usersOperation = Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect(LinkedHashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, usersOperation, (count,users)->new Page<>(users, 0, count));
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_USERNAME, username), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_EXTERNAL_ID, externalId), eq(FIELD_SOURCE, source))).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, userId))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne((T)user)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, user.getId()), (T)user)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | isEmpty | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((collectionName)->collectionName.equalsIgnoreCase(COLLECTION_NAME)))).isEmpty())
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoOperations.listCollectionNames()), BackpressureStrategy.BUFFER)
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.insertOne(scope)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopesCollection.replaceOne(eq(FIELD_ID, scope.getId()), scope)))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, scopesOperation, (count,scope)->new Page<Scope>(scope, page, count));
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Scope>> scopesOperation = Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(scopesCollection.find(mongoQuery).sort(new BasicDBObject(FIELD_KEY, 1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, scopesOperation, (count,scopes)->new Page<>(scopes, page, count));
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopesCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_KEY, key))).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Observable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, page, count));
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(rolesCollection.countDocuments(mongoQuery)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.countDocuments(mongoQuery)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Role>> rolesOperation = Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(rolesCollection.find(mongoQuery).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, rolesOperation, (count,roles)->new Page<>(roles, 0, count));
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, role))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(eq(FIELD_ID, role)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.insertOne(role)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(rolesCollection.replaceOne(eq(FIELD_ID, role.getId()), role)))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(rolesCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, name), eq(FIELD_ASSIGNABLE_TYPE, assignableType.name()))).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportersCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.insertOne(reporter)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(reportersCollection.replaceOne(eq(FIELD_ID, reporter.getId()), reporter)))
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_NODE_ID, nodeId), eq(FIELD_TYPE, type))).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(monitoring))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, monitoring.getId()), convert(monitoring))))
1 | Flowable | RETURN_TYPE
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_MEMBER_TYPE, memberType.name()), eq(FIELD_MEMBER_ID, memberId))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(membershipsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.insertOne(membership)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(membershipsCollection.replaceOne(eq(FIELD_ID, membership.getId()), membership)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find().first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(installation))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, installation.getId()), convert(installation))))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.insertOne(scopeApprovalMongo)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.replaceOne(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope())), scopeApprovalMongo)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER).next().map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return create(scopeApproval);
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return update(scopeApproval);
    }
});
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(scopeApprovalsCollection.find(and(eq(FIELD_DOMAIN, scopeApproval.getDomain()), eq(FIELD_CLIENT_ID, scopeApproval.getClientId()), eq(FIELD_USER_ID, scopeApproval.getUserId()), eq(FIELD_SCOPE, scopeApproval.getScope()))).first()), BackpressureStrategy.BUFFER)
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(scopeApprovalsCollection.find(eq(FIELD_ID, id)).first()))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(authorizationCodeCollection.insertOne(convert(authorizationCode))))
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.findOneAndDelete(eq(FIELD_ID, code))), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authorizationCodeCollection.find(eq(FIELD_CODE, code)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(emailsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.insertOne(email)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(emailsCollection.replaceOne(eq(FIELD_ID, email.getId()), email)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(botDetectionMongoCollection.find(eq(FIELD_ID, botDetectionId)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.insertOne(entity)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(botDetectionMongoCollection.replaceOne(eq(FIELD_ID, entity.getId()), entity)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(flowsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.insertOne(flow)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(flowsCollection.replaceOne(eq(FIELD_ID, flow.getId()), flow)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map(this::convert), BackpressureStrategy.BUFFER)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(eventsCollection.find(eq(FIELD_ID, id)).first()).map
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.insertOne(event)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(eventsCollection.replaceOne(eq(FIELD_ID, event.getId()), event)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(environment))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, environment.getId()), convert(environment))))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(collection.countDocuments());
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(loginAttemptsCollection.find(query(criteria)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.insertOne(loginAttempt)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(loginAttemptsCollection.replaceOne(eq(FIELD_ID, loginAttempt.getId()), loginAttempt)))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(certificatesCollection.find(eq(FIELD_ID, certificateId)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.insertOne(certificate)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(certificatesCollection.replaceOne(eq(FIELD_ID, certificate.getId()), certificate)))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(authContextCollection.find(and(eq(FIELD_TRANSACTION_ID, transactionId), gt(FIELD_RESET_TIME, new Date()))).sort(new BasicDBObject(FIELD_VERSION, -1)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(authContextCollection.insertOne(contextMongo)))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertTrigger))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertTriggerMongo.getId()), alertTriggerMongo)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(requestObjectCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(requestObjectCollection.insertOne(convert(requestObject))))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_TEMPLATE, template), exists(FIELD_CLIENT, false))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_CLIENT, client), eq(FIELD_TEMPLATE, template))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(formsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.insertOne(page)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(formsCollection.replaceOne(eq(FIELD_ID, page.getId()), page)))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(alertNotifier))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, alertNotifierMongo.getId()), alertNotifierMongo)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(res)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(permissionTicketCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.insertOne(permissionTicket)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(permissionTicketCollection.replaceOne(eq(FIELD_ID, permissionTicket.getId()), permissionTicket)))
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(and(eq(FIELD_ID, id), eq(FIELD_ORGANIZATION_ID, organizationId))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(tagsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.insertOne(tag)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(tagsCollection.replaceOne(eq(FIELD_ID, tag.getId()), tag)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(factorsCollection.find(eq(FIELD_ID, factorId)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.insertOne(authenticator)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(factorsCollection.replaceOne(eq(FIELD_ID, authenticator.getId()), authenticator)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(credentialsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.insertOne(credential)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(credentialsCollection.replaceOne(eq(FIELD_ID, credential.getId()), credential)))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_NAME, name))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(extensionGrantsCollection.find(eq(FIELD_ID, tokenGranterId)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.insertOne(extensionGrant)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(extensionGrantsCollection.replaceOne(eq(FIELD_ID, extensionGrant.getId()), extensionGrant)))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client)))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | toList | METHOD_INVOCATION | Single<List<Resource>> resourcesOperation = Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList()
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).toList
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client))).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, resourcesOperation, (count,resourceSets)->new Page<>(resourceSets, page, count));
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.insertOne(resource)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(resourceCollection.replaceOne(eq(FIELD_ID, resourceMongo.getId()), resourceMongo)))
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.countDocuments(eq(FIELD_DOMAIN, domain))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<Set<Resource>> resourceSetOperation = Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).collect(HashSet::new, Set::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(resourceCollection.find(eq(FIELD_DOMAIN, domain)).sort(new BasicDBObject(FIELD_UPDATED_AT, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, resourceSetOperation, (count,resourceSet)->new Page<>(resourceSet, page, count));
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(resourceCollection.find(and(eq(FIELD_DOMAIN, domain), eq(FIELD_CLIENT_ID, client), eq(FIELD_USER_ID, user), eq(FIELD_ID, resource))).first()), BackpressureStrategy.BUFFER)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(refreshTokenCollection.find(eq(FIELD_TOKEN, token)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(refreshTokenCollection.insertOne(convert(refreshToken))))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(collection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.insertOne(convert(organization))))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(collection.replaceOne(eq(FIELD_ID, organization.getId()), convert(organization))))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(collection.countDocuments());
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_ID, id)).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_TOKEN, token)).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(accessTokenCollection.insertOne(convert(accessToken))))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject)))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(and(eq(FIELD_CLIENT, clientId), eq(FIELD_SUBJECT, subject)))).map
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_CLIENT, clientId))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_CLIENT, clientId))).map
1 | Observable | RETURN_TYPE
1 | Observable | map | METHOD_INVOCATION | return Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode))).map(this::convert);
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(accessTokenCollection.find(eq(FIELD_AUTHORIZATION_CODE, authorizationCode))).map
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | return Single.fromPublisher(accessTokenCollection.countDocuments(eq(FIELD_CLIENT, clientId)));
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.countDocuments(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId)))).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Group>> groupsOperation = Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId))).sort(new BasicDBObject(FIELD_NAME, 1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | return Single.zip(countOperation, groupsOperation, (count,groups)->new Page<>(groups, page, count));
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_NAME, groupName))).limit(1).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, group))).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(groupsCollection.find(eq(FIELD_ID, group)).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.insertOne(group)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(groupsCollection.replaceOne(eq(FIELD_ID, group.getId()), group)))
1 | Completable | OTHER
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(eq(FIELD_ID, id)).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(domainsCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_HRID, hrid)))), BackpressureStrategy.BUFFER)
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.insertOne(domain)))
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(domainsCollection.replaceOne(eq(FIELD_ID, domain.getId()), domain)))
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Observable | blockingSubscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoDatabase.listCollectionNames()), BackpressureStrategy.BUFFER).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).apply(z)), BackpressureStrategy.BUFFER))).blockingSubscribe();
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(mongoDatabase.listCollectionNames()), BackpressureStrategy.BUFFER)
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<String, ObservableSource<DeleteResult>>toJdkFunction((collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))).apply(z)), BackpressureStrategy.BUFFER)
1 | Observable | fromPublisher | METHOD_INVOCATION | (collectionName)->Observable.fromPublisher(mongoDatabase.getCollection(collectionName).deleteMany(new Document()))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP))
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP))
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP);
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(entrypointRepository.findAllByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((entrypoint)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeTags(entrypoint)).flux())))).doOnError((error)->LOGGER.error("Unable to list all entrypoints with organization {}", organizationId, error));
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcResource.class).matching(whereClause).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcResource.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((res)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(res)), res.getId())).flux()), MAX_CONCURRENCY))
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeApprovalRepository.findByDomainAndUserAndClientAndScope(scopeApproval.getDomain(), scopeApproval.getUserId(), scopeApproval.getClientId(), scopeApproval.getScope())).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalApproval)->{
    if (!optionalApproval.isPresent()) {
        scopeApproval.setCreatedAt(new Date());
        scopeApproval.setUpdatedAt(scopeApproval.getCreatedAt());
        return create(scopeApproval);
    } else {
        scopeApproval.setId(optionalApproval.get().getId());
        scopeApproval.setUpdatedAt(new Date());
        return update(scopeApproval);
    }
});
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP);
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP);
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(databaseDialectHelper.toSql(quoted("groups"))).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcGroup.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP))
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMap | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flow).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((group)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.maybeToMono(completeWithMembersAndRole(RxJava2Adapter.monoToMaybe(Mono.just(group)), group.getId())).flux()), CONCURRENT_FLATMAP);
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Maybe | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcOrganizationUser.class).matching(from(where("reference_id").is(referenceId).and(where("reference_type").is(referenceType.name())))).orderBy(Sort.Order.asc("id")).page(PageRequest.of(page, size)).as(JdbcOrganizationUser.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP))
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.execute(search).bind("value", wildcardSearch ? wildcardValue : query).bind("refId", referenceId).bind("refType", referenceType.name()).as(JdbcOrganizationUser.class).fetch().all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(app)).flux()), CONCURRENT_FLATMAP))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(userRepository.findByIdIn(ids)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((user)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeUser(user)).flux()), CONCURRENT_FLATMAP))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcAlertNotifier.class).matching(from(whereClause)).as(JdbcAlertNotifier.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).doOnError((error)->LOGGER.error("Unable to retrieve AlertNotifier with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error));
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, SingleSource<Flow>>)this::completeFlow).apply(e)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | final Flowable<Environment> result = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle(this::retrieveHrids)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle
1 | Flowable | doOnError | METHOD_INVOCATION | return result.doOnError((error)->LOGGER.error("unable to retrieve all environments", error));
1 | Flowable | RETURN_TYPE
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | final Flowable<Environment> result = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle(this::retrieveHrids)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(environmentRepository.findByOrganization(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEnvironment))).flatMapSingle(this::retrieveDomainRestrictions).flatMapSingle
1 | Flowable | doOnError | METHOD_INVOCATION | return result.doOnError((error)->LOGGER.error("unable to retrieve Environments with organizationId {}", organizationId, error));
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY))
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMap | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(dbClient.select().from(JdbcApplication.class).matching(from(where("domain").is(domain))).page(PageRequest.of(page, size, Sort.by("id"))).as(JdbcApplication.class).all().map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).flatMap((app)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(completeApplication(app)).flux()), MAX_CONCURRENCY))
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(execute.as(String.class).fetch().all().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction(this::findById).apply(e))))).doOnError((error)->LOGGER.error("Unable to retrieve AlertTrigger with referenceId {}, referenceType {} and criteria {}", referenceId, referenceType, criteria, error));
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<AlertTrigger>>toJdkFunction(this::findById).apply(e)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | fromMaybe | METHOD_INVOCATION | return Completable.fromMaybe(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByToken(token)).flatMap((z)->dbClient.delete().from(JdbcAccessToken.class).matching(from(where("token").is(token))).fetch().rowsUpdated().map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Integer i)->z))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.error("Unable to delete AccessToken", error)))));
1 | Completable | OTHER
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {} and subject {}", clientId, subject, error));
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientIdAndSubject(clientId, subject, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with client {}", clientId, error));
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByClientId(clientId, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Observable | RETURN_TYPE
1 | Observable | doOnError | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError((error)->LOGGER.error("Unable to retrieve access tokens with authorization code {}", authorizationCode, error));
1 | Flowable | toObservable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(accessTokenRepository.findByAuthorizationCode(authorizationCode, LocalDateTime.now(UTC))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toEntity))).toObservable().doOnError
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->completeWithScopes(RxJava2Adapter.monoToMaybe(Mono.just(role)), role.getId())).apply(e)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | PARAM
1 | Maybe | PARAM
1 | Maybe | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<LoginAttempt> testObserver = repository.create(attemptExpired).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.create(attemptExpired2).test()
1 | Single | test | METHOD_INVOCATION | testObserver = repository.create(attemptNotExpired).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = repository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | parRepository.create(object1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | parRepository.create(object2).test().awaitTerminalEvent
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = parRepository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | requestObjectRepository.create(object1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | requestObjectRepository.create(object2).test().awaitTerminalEvent
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = requestObjectRepository.purgeExpiredData().test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = accessTokenRepository.bulkWrite(Arrays.asList(token1, token2)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = accessTokenRepository.purgeExpiredData().test()
1 | Flowable | IMPORT
1 | Flowable | blockingSubscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn(Schedulers.single()).blockingSubscribe();
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement("delete from " + table).execute())).subscribeOn(Schedulers.single()).blockingSubscribe
1 | Single | test | METHOD_INVOCATION | scopeApprovalRepository.create(scope1).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | scopeApprovalRepository.create(scope2).test().awaitTerminalEvent
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = scopeApprovalRepository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | testObserver = scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalRepository.findByDomainAndUser("domain", "user").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = refreshTokenRepository.bulkWrite(Arrays.asList(token1, token2)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = refreshTokenRepository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeRepository.create(authorizationCode).test()
1 | Single | test | METHOD_INVOCATION | testObserver = authorizationCodeRepository.create(authorizationCodeExpired).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = authorizationCodeRepository.purgeExpiredData().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> test = repository.create(permissionTicketExpired).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = repository.findById(ptValid.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid2.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testPurge = repository.purgeExpiredData().test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid.getId()).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = repository.findById(ptValid2.getId()).test()
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | enrichProfile(context).subscribe((user)->{
    LOGGER.debug("User profile updated", user.getId());
    policyChain.doNext(request, response);
}, (error)->{
    if (configuration.isExitOnError()) {
        LOGGER.warn("Update of user profile failed!", error.getMessage());
        policyChain.failWith(PolicyResult.failure(errorMessage));
    } else {
        LOGGER.info("Update of user profile failed!", error.getMessage());
        policyChain.doNext(request, response);
    }
});
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeApprovalRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope approval by id: {}", id);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope approval by id %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((__)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).approvals(approvals)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).domain(domain).client(client).principal(principal).type(EventType.USER_CONSENT_CONSENTED).throwable(throwable))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to save consent for domain: {}, client: {} and user: {} ", domain, client.getId(), approvals.get(0).getUserId());
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to save consent for domain: %s, client: %s and user: %s", domain, client.getId(), approvals.get(0).getUserId()), ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle(scopeApprovalRepository::upsert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(approvals).flatMapSingle
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((user)->RxJava2Adapter.maybeToMono(scopeApprovalRepository.findById(consentId)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consentId))).flatMap((scopeApproval)->RxJava2Adapter.completableToMono(scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval))))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).throwable(throwable)))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()))))).then()).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke approval for scope: {}", consentId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke approval for scope: %s", consentId), ex)));
});
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.delete(consentId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user).approvals(Collections.singleton(scopeApproval)))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId()), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(scopeApproval.getDomain(), scopeApproval.getClientId(), scopeApproval.getUserId())))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {} and user : {}", domain, user);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s and user: %s", domain, user), ex)));
});
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUser(domain, user).collect(HashSet<ScopeApproval>::new, Set::add))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUser(domain, user).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdAndUserId(domain, user), refreshTokenRepository.deleteByDomainIdAndUserId(domain, user)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(userService.findById(user)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((user1)->RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add)).flatMap((v)->RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).throwable(throwable))))).then(RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to revoke scope approvals for domain: {}, user: {} and client: {}", domain, user, clientId);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to revoke scope approvals for domain: %s, user: %s and client: %s", domain, user, clientId), ex)));
});
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(scopeApprovalRepository.findByDomainAndUserAndClient(domain, user, clientId).collect(HashSet<ScopeApproval>::new, Set::add))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndUserAndClient(domain, user, clientId).doOnComplete(()->auditService.report(AuditBuilder.builder(UserConsentAuditBuilder.class).type(EventType.USER_CONSENT_REVOKED).domain(domain).principal(principal).user(user1).approvals(v))))
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(accessTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user), refreshTokenRepository.deleteByDomainIdClientIdAndUserId(domain, clientId, user)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | roleObs = RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(user.getReferenceType(), user.getReferenceId(), roleId))).onErrorResumeNext((throwable)->{
    if (throwable instanceof RoleNotFoundException) {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId)).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext(defaultRoleObs);
    } else {
        return defaultRoleObs;
    }
})
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, roleId)).switchIfEmpty(RxJava2Adapter.maybeToMono(defaultRoleObs))).onErrorResumeNext(defaultRoleObs);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, CompletableSource>)(role)->{
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(user.getReferenceId(), membership)).then());
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(getUserRepository().findByUsernameAndSource(ReferenceType.ORGANIZATION, user.getReferenceId(), user.getUsername(), user.getSource()).flatMapSingle((oldUser)->{
    user.setId(oldUser.getId());
    user.setReferenceType(oldUser.getReferenceType());
    user.setReferenceId(oldUser.getReferenceId());
    user.setUsername(oldUser.getUsername());
    if (user.getFirstName() != null) {
        user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
    }
    user.setSource(oldUser.getSource());
    user.setInternal(oldUser.isInternal());
    user.setUpdatedAt(new Date());
    if (user.getLoginsCount() < oldUser.getLoginsCount()) {
        user.setLoggedAt(oldUser.getLoggedAt());
        user.setLoginsCount(oldUser.getLoginsCount());
    }
    return getUserRepository().update(user);
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findAll(referenceType, referenceId, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().search(referenceType, referenceId, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to search users for {} {} and query {}", referenceType, referenceId, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and query %s", referenceType, referenceId, query), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().search(referenceType, referenceId, filterCriteria, page, size).onErrorResumeNext((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException(ex.getMessage())));
    }
    LOGGER.error("An error occurs while trying to search users for {} {} and filter {}", referenceType, referenceId, filterCriteria, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users for %s %s and filter %s", referenceType, referenceId, filterCriteria), ex)));
});
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByUsernameAndSource(referenceType, referenceId, username, source).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its username: {} for the {} {}  and source {}", username, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its username: %s for the %s %s and source %s", username, referenceType, referenceId, source), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return getUserRepository().findByExternalIdAndSource(referenceType, referenceId, externalId, source).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its externalId: {} for the {} {} and source {}", externalId, referenceType, referenceId, source, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its externalId: %s for the %s %s and source %s", externalId, referenceType, referenceId, source), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(getUserRepository().findByUsernameAndSource(referenceType, referenceId, newUser.getUsername(), newUser.getSource())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, Single<User>>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(newUser.getUsername())));
    } else {
        String userId = RandomString.generate();
        User user = new User();
        user.setId(userId);
        user.setExternalId(newUser.getExternalId());
        user.setReferenceType(referenceType);
        user.setReferenceId(referenceId);
        user.setClient(newUser.getClient());
        user.setUsername(newUser.getUsername());
        user.setFirstName(newUser.getFirstName());
        user.setLastName(newUser.getLastName());
        if (user.getFirstName() != null) {
            user.setDisplayName(user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""));
        }
        user.setEmail(newUser.getEmail());
        user.setSource(newUser.getSource());
        user.setInternal(true);
        user.setPreRegistration(newUser.isPreRegistration());
        user.setRegistrationCompleted(newUser.isRegistrationCompleted());
        user.setAdditionalInformation(newUser.getAdditionalInformation());
        user.setCreatedAt(new Date());
        user.setUpdatedAt(user.getCreatedAt());
        return create(user);
    }
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a user", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
    }
});
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(user)).then(RxJava2Adapter.singleToMono(getUserRepository().create(user))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
});
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new UserNotFoundException(id)))).flatMapSingle((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return update(oldUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getUserRepository().findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new UserNotFoundException(id)))).flatMapSingle((oldUser)->{
    User tmpUser = new User();
    tmpUser.setEmail(updateUser.getEmail());
    tmpUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    UserFactorUpdater.updateFactors(oldUser.getFactors(), oldUser, tmpUser);
    oldUser.setClient(updateUser.getClient());
    oldUser.setExternalId(updateUser.getExternalId());
    oldUser.setFirstName(updateUser.getFirstName());
    oldUser.setLastName(updateUser.getLastName());
    oldUser.setDisplayName(updateUser.getDisplayName());
    oldUser.setEmail(updateUser.getEmail());
    oldUser.setEnabled(updateUser.isEnabled());
    oldUser.setLoggedAt(updateUser.getLoggedAt());
    oldUser.setLoginsCount(updateUser.getLoginsCount());
    oldUser.setUpdatedAt(new Date());
    oldUser.setAdditionalInformation(updateUser.getAdditionalInformation());
    return update(oldUser);
}).onErrorResumeNext
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(getUserRepository().findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId))).then(RxJava2Adapter.singleToMono(eventService.create(event)).then()));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    Event event = new Event(Type.USER, new Payload(user.getId(), user.getReferenceType(), user.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByUserId(user.getReferenceType(), user.getReferenceId(), user.getId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))).then().then(RxJava2Adapter.completableToMono(getUserRepository().delete(userId))).then(RxJava2Adapter.singleToMono(eventService.create(event)).then()));
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Credential, CompletableSource>toJdkFunction((credential)->credentialService.delete(credential.getId())).apply(z)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByMember(user.getId())).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Group>, Single<User>>)(groups)->{
    Set<String> roles = new HashSet<>();
    if (groups != null && !groups.isEmpty()) {
        user.setGroups(groups.stream().map(Group::getName).collect(Collectors.toList()));
        roles.addAll(groups.stream().filter((group)->group.getRoles() != null && !group.getRoles().isEmpty()).flatMap((group)->group.getRoles().stream()).collect(Collectors.toSet()));
    }
    if (user.getRoles() != null && !user.getRoles().isEmpty()) {
        roles.addAll(user.getRoles());
    }
    if (!roles.isEmpty()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(new ArrayList<>(roles))).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
            user.setRolesPermissions(roles1);
            return user;
        })));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to enhance user {}", user.getId(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to enhance user %s", user.getId()), ex)));
});
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Organization, MaybeSource<Organization>>toJdkFunction((organization)->{
    Organization toUpdate = new Organization(organization);
    toUpdate.setName(newOrganization.getName());
    toUpdate.setDescription(newOrganization.getDescription());
    toUpdate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    toUpdate.setHrids(newOrganization.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, organization)));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    Organization toCreate = new Organization();
    toCreate.setId(organizationId);
    toCreate.setHrids(newOrganization.getHrids());
    toCreate.setName(newOrganization.getName());
    toCreate.setDescription(newOrganization.getDescription());
    toCreate.setDomainRestrictions(newOrganization.getDomainRestrictions());
    return createInternal(toCreate, byUser);
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | mergeArrayDelayError | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.mergeArrayDelayError(RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(entrypointService.createDefaults(createdOrganization)).ignoreElements().then()), roleService.createDefaultRoles(createdOrganization.getId())))
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return membershipRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find membership by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find membership by ID %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(membershipRepository.findByReferenceAndMember(membership.getReferenceType(), membership.getReferenceId(), membership.getMemberType(), membership.getMemberId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optMembership)->{
    if (!optMembership.isPresent()) {
        Membership newMembership = new Membership();
        newMembership.setId(RandomString.generate());
        newMembership.setDomain(membership.getDomain());
        newMembership.setMemberId(membership.getMemberId());
        newMembership.setMemberType(membership.getMemberType());
        newMembership.setReferenceId(membership.getReferenceId());
        newMembership.setReferenceType(membership.getReferenceType());
        newMembership.setRoleId(membership.getRoleId());
        newMembership.setCreatedAt(new Date());
        newMembership.setUpdatedAt(newMembership.getCreatedAt());
        return createInternal(newMembership, principal);
    } else {
        Membership oldMembership = optMembership.get();
        Membership updateMembership = new Membership(oldMembership);
        updateMembership.setRoleId(membership.getRoleId());
        updateMembership.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
            Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership1)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).oldValue(oldMembership).membership(membership1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_UPDATED).throwable(throwable)))));
    }
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.update(updateMembership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update membership {}", oldMembership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to update membership %s", oldMembership), ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    final Date now = new Date();
    Membership membership = new Membership();
    membership.setRoleId(role.getId());
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(ReferenceType.PLATFORM);
    membership.setReferenceId(Platform.DEFAULT);
    membership.setCreatedAt(now);
    membership.setUpdatedAt(now);
    return createInternal(membership, null);
}))
1 | Single | RETURN_TYPE
1 | Single | zip | METHOD_INVOCATION | return Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
});
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(orgUserService.findByIdIn(userIds).toMap(io.gravitee.am.model.User::getId, this::convert), groupService.findByIdIn(groupIds).toMap(Group::getId, this::convert), roleService.findByIdIn(roleIds), (users,groups,roles)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("groups", (Map)groups);
    metadata.put("roles", roles.stream().collect(Collectors.toMap(Role::getId, this::filter)));
    return metadata;
})
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(membershipRepository.findById(membershipId)).switchIfEmpty(Mono.error(new MembershipNotFoundException(membershipId))).flatMap((membership)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).throwable(throwable))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete membership: {}", membershipId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete membership: %s", membershipId), ex)));
});
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(membershipRepository.delete(membershipId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(MembershipAuditBuilder.class).principal(principal).type(EventType.MEMBERSHIP_DELETED).membership(membership))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.MEMBERSHIP, new Payload(membership.getId(), membership.getReferenceType(), membership.getReferenceId(), Action.DELETE)))))
1 | Completable | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.DOMAIN_USER, ReferenceType.DOMAIN).flatMapSingle((role)->{
    final Membership domainMembership = new Membership();
    domainMembership.setMemberId(newMembership.getMemberId());
    domainMembership.setMemberType(newMembership.getMemberType());
    domainMembership.setRoleId(role.getId());
    domainMembership.setReferenceId(domainId);
    domainMembership.setReferenceType(ReferenceType.DOMAIN);
    return this.createInternal(domainMembership, principal);
}))
1 | Completable | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleService.findDefaultRole(organizationId, DefaultRole.ENVIRONMENT_USER, ReferenceType.ENVIRONMENT).flatMapSingle((role)->{
    final Membership environmentMembership = new Membership();
    environmentMembership.setMemberId(newMembership.getMemberId());
    environmentMembership.setMemberType(newMembership.getMemberType());
    environmentMembership.setRoleId(role.getId());
    environmentMembership.setReferenceId(environmentId);
    environmentMembership.setReferenceType(ReferenceType.ENVIRONMENT);
    return this.createInternal(environmentMembership, principal);
}))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipRepository.create(membership)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create membership {}", membership, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to create membership %s", membership), ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Membership, SingleSource<Membership>>toJdkFunction((membership1)->{
    Event event = new Event(Type.MEMBERSHIP, new Payload(membership1.getId(), membership1.getReferenceType(), membership1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(membership1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Role, MaybeSource<Role>>toJdkFunction((role)->{
    if (role.isSystem() && role.getName().endsWith("_PRIMARY_OWNER")) {
        if (membership.getMemberType() == MemberType.GROUP) {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidRoleException("This role cannot be assigned to a group")));
        }
        MembershipCriteria criteria = new MembershipCriteria();
        criteria.setRoleId(membership.getRoleId());
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count()).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(role));
}).apply(v)))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipRepository.findByCriteria(membership.getReferenceType(), membership.getReferenceId(), criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingMembership)->!existingMembership.isMember(membership.getMemberType(), membership.getMemberId())))).count())
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Long, MaybeSource<Role>>toJdkFunction((count)->count >= 1 ? RxJava2Adapter.monoToMaybe(Mono.error(new SinglePrimaryOwnerException(membership.getReferenceType()))) : RxJava2Adapter.monoToMaybe(Mono.just(role))).apply(e)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return factorRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an factor using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an factor using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factor)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a factor", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::create).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(id)).switchIfEmpty(Mono.error(new FactorNotFoundException(id)))).flatMapSingle((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a factor", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a factor", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(id)).switchIfEmpty(Mono.error(new FactorNotFoundException(id)))).flatMapSingle((oldFactor)->{
    Factor factorToUpdate = new Factor(oldFactor);
    factorToUpdate.setName(updateFactor.getName());
    factorToUpdate.setConfiguration(updateFactor.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFactorConfiguration(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
        Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).oldValue(oldFactor).factor(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction(factorRepository::update).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Factor, SingleSource<Factor>>toJdkFunction((factor1)->{
    Event event = new Event(Type.FACTOR, new Payload(factor1.getId(), ReferenceType.DOMAIN, factor1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(factor1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))).flatMapSingle((factor)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete factor: {}", factorId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete factor: %s", factorId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorRepository.findById(factorId)).switchIfEmpty(Mono.error(new FactorNotFoundException(factorId)))).flatMapSingle((factor)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v)))))))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByFactor(factorId).count())
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Factor>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new FactorWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(factor));
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Factor, CompletableSource>)(factor)->{
    Event event = new Event(Type.FACTOR, new Payload(factorId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FactorAuditBuilder.class).principal(principal).type(EventType.FACTOR_DELETED).factor(factor))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(factorRepository.delete(factorId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findByTemplate(referenceType, referenceId, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s and template %s", referenceType, referenceId, template), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findByClientAndTemplate(referenceType, referenceId, client, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return emailRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a email using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a email using its id %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | return findByClient(ReferenceType.DOMAIN, domain, clientSource).flatMapSingle((source)->{
    NewEmail email = new NewEmail();
    email.setEnabled(source.isEnabled());
    email.setTemplate(Template.parse(source.getTemplate()));
    email.setFrom(source.getFrom());
    email.setFromName(source.getFromName());
    email.setSubject(source.getSubject());
    email.setContent(source.getContent());
    email.setExpiresAfter(source.getExpiresAfter());
    return this.create(domain, clientTarget, email);
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(emailRepository.findById(emailId)).switchIfEmpty(Mono.error(new EmailNotFoundException(emailId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete email: {}", emailId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete email: %s", emailId), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Email, CompletableSource>)(email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_DELETED).email(email))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(emailRepository.delete(emailId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkEmailUniqueness(referenceType, referenceId, client, newEmail.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a email", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Email>>toJdkFunction((irrelevant)->{
    Email email = new Email();
    email.setId(emailId);
    email.setReferenceType(referenceType);
    email.setReferenceId(referenceId);
    email.setClient(client);
    email.setEnabled(newEmail.isEnabled());
    email.setTemplate(newEmail.getTemplate().template());
    email.setFrom(newEmail.getFrom());
    email.setFromName(newEmail.getFromName());
    email.setSubject(newEmail.getSubject());
    email.setContent(newEmail.getContent());
    email.setExpiresAfter(newEmail.getExpiresAfter());
    email.setCreatedAt(new Date());
    email.setUpdatedAt(email.getCreatedAt());
    return emailRepository.create(email);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new EmailNotFoundException(id)))).flatMapSingle((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(emailRepository.update(emailToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a email", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a email", ex)));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(emailRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new EmailNotFoundException(id)))).flatMapSingle((oldEmail)->{
    Email emailToUpdate = new Email(oldEmail);
    emailToUpdate.setEnabled(updateEmail.isEnabled());
    emailToUpdate.setFrom(updateEmail.getFrom());
    emailToUpdate.setFromName(updateEmail.getFromName());
    emailToUpdate.setSubject(updateEmail.getSubject());
    emailToUpdate.setContent(updateEmail.getContent());
    emailToUpdate.setExpiresAfter(updateEmail.getExpiresAfter());
    emailToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(emailRepository.update(emailToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
        Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((email)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).oldValue(oldEmail).email(email)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(EmailTemplateAuditBuilder.class).principal(principal).type(EventType.EMAIL_TEMPLATE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Email, SingleSource<Email>>toJdkFunction((email)->{
    Event event = new Event(Type.EMAIL, new Payload(email.getId(), email.getReferenceType(), email.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(email)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        JSONParser parser = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
        InputStream resourceAsStream = this.getClass().getResourceAsStream(GRAMMAR_PATH);
        JSONObject parse = (JSONObject)parser.parse(resourceAsStream);
        Map<String, Object> types = buildTypes();
        parse.appendField("_types", types);
        emitter.onSuccess(parse);
    } catch (ParseException | UnsupportedEncodingException e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load Spel grammar", e));
    }
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return eventRepository.create(event).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an event", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an event", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(eventRepository.findByTimeFrame(from, to)).collectList()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find events by time frame", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find events by time frame", ex)));
});
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return tagRepository.findById(id, organizationId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a tag using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a tag using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(tagRepository.findById(id, organizationId)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a tag", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Tag>>toJdkFunction((empty)->{
    if (!empty) {
        throw new TagAlreadyExistsException(newTag.getName());
    } else {
        Tag tag = new Tag();
        tag.setId(id);
        tag.setOrganizationId(organizationId);
        tag.setName(newTag.getName());
        tag.setDescription(newTag.getDescription());
        tag.setCreatedAt(new Date());
        tag.setUpdatedAt(tag.getCreatedAt());
        return tagRepository.create(tag);
    }
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, organizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).flatMapSingle((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tagRepository.update(tag)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a tag", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a tag", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, organizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).flatMapSingle((oldTag)->{
    Tag tag = new Tag();
    tag.setId(tagId);
    tag.setName(updateTag.getName());
    tag.setDescription(updateTag.getDescription());
    tag.setCreatedAt(oldTag.getCreatedAt());
    tag.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tagRepository.update(tag)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((tag1)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).tag(tag1).oldValue(oldTag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(tagRepository.findById(tagId, orgaizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId))).flatMap((tag)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).throwable(throwable))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete tag {}", tagId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete tag " + tagId, ex)));
});
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(tagRepository.delete(tagId)).then(RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})))).doOnComplete(()->auditService.report(AuditBuilder.builder(TagAuditBuilder.class).principal(principal).type(EventType.TAG_DELETED).tag(tag))))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable((io.gravitee.am.model.Domain domain)->{
    if (domain.getTags() != null) {
        domain.getTags().remove(tagId);
        return domainService.update(domain.getId(), domain).toCompletable();
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}))
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | toCompletable | METHOD_INVOCATION | return domainService.update(domain.getId(), domain).toCompletable();
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return reporterRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find reporters by id: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find reporters by id: %s", id), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporter)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.create(reporter))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create a reporter", ex);
    String message = "An error occurs while trying to create a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((reporter1)->{
    Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).switchIfEmpty(Mono.error(new ReporterNotFoundException(id)))).flatMapSingle((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporterToUpdate)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.update(reporterToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a reporter", ex);
    String message = "An error occurs while trying to update a reporter. ";
    if (ex instanceof ReporterConfigurationException) {
        message += ex.getMessage();
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(message, ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterRepository.findById(id)).switchIfEmpty(Mono.error(new ReporterNotFoundException(id)))).flatMapSingle((oldReporter)->{
    Reporter reporterToUpdate = new Reporter(oldReporter);
    reporterToUpdate.setEnabled(updateReporter.isEnabled());
    reporterToUpdate.setName(updateReporter.getName());
    reporterToUpdate.setConfiguration(updateReporter.getConfiguration());
    reporterToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkReporterConfiguration(reporterToUpdate)).flatMap((ignore)->RxJava2Adapter.singleToMono(reporterRepository.update(reporterToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
        if (!ADMIN_DOMAIN.equals(domain)) {
            Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
        }
    }).apply(v))))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reporter1)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).oldValue(oldReporter).reporter(reporter1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Reporter, SingleSource<Reporter>>toJdkFunction((io.gravitee.am.model.Reporter reporter1)->{
    if (!ADMIN_DOMAIN.equals(domain)) {
        Event event = new Event(Type.REPORTER, new Payload(reporter1.getId(), ReferenceType.DOMAIN, reporter1.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(reporter1)));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(reporter1));
    }
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(reporterRepository.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporterId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete reporter: {}", reporterId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete reporter: %s", reporterId), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Reporter, CompletableSource>)(reporter)->{
    Event event = new Event(Type.REPORTER, new Payload(reporterId, ReferenceType.DOMAIN, reporter.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ReporterAuditBuilder.class).principal(principal).type(EventType.REPORTER_DELETED).reporter(reporter))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(reporterRepository.delete(reporterId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(reporter.getDomain())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->r.getType().equalsIgnoreCase(REPORTER_AM_FILE))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((r)->reporterId == null || !r.getId().equals(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((r)->(JsonObject)Json.decodeValue(r.getConfiguration()))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((cfg)->cfg.containsKey(REPORTER_CONFIG_FILENAME) && cfg.getString(REPORTER_CONFIG_FILENAME).equals(configuration.getString(REPORTER_CONFIG_FILENAME))))).count())
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(serviceUrl).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", secretKey).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    Map res = objectMapper.readValue(buffer.bodyAsString(), Map.class);
    Boolean success = (Boolean)res.getOrDefault("success", false);
    Double score = (Double)res.getOrDefault("score", 0.0);
    logger.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= minScore);
}))).onErrorResumeNext((throwable)->{
    logger.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a credential using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a credential using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.create(credential).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a credential", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(credentialRepository.findById(credential.getId())).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId())))).flatMapSingle((__)->credentialRepository.update(credential)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a credential", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a credential", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(credentialRepository.findById(credential.getId())).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential.getId())))).flatMapSingle((__)->credentialRepository.update(credential)).onErrorResumeNext
1 | Completable | OTHER
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(credentialRepository.findByCredentialId(referenceType, referenceId, credentialId).flatMapSingle((credentialToUpdate)->{
    credentialToUpdate.setUserId(credential.getUserId());
    credentialToUpdate.setIpAddress(credential.getIpAddress());
    credentialToUpdate.setUserAgent(credential.getUserAgent());
    credentialToUpdate.setUpdatedAt(new Date());
    credentialToUpdate.setAccessedAt(credentialToUpdate.getUpdatedAt());
    return credentialRepository.update(credentialToUpdate);
}))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(credentialRepository.findById(id)).switchIfEmpty(Mono.error(new CredentialNotFoundException(id))).flatMap((email)->RxJava2Adapter.completableToMono(credentialRepository.delete(id))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete credential: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete credential: %s", id), ex)));
});
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.deleteByUserId(referenceType, referenceId, userId).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and user id: {}", referenceType, referenceId, userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and user id: %s", referenceType, referenceId, userId), ex)));
});
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return credentialRepository.deleteByAaguid(referenceType, referenceId, aaguid).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete credentials using {} {} and aaguid: {}", referenceType, referenceId, aaguid, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete credentials using: %s %s and aaguid: %s", referenceType, referenceId, aaguid), ex)));
});
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, MaybeSource<AlertTrigger>>toJdkFunction((alertTrigger)->{
    AlertTrigger toUpdate = patchAlertTrigger.patch(alertTrigger);
    if (toUpdate.equals(alertTrigger)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(alertTrigger));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(toUpdate, byUser, alertTrigger)));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    AlertTrigger alertTrigger = new AlertTrigger();
    alertTrigger.setId(RandomString.generate());
    alertTrigger.setReferenceType(referenceType);
    alertTrigger.setReferenceId(referenceId);
    alertTrigger.setType(patchAlertTrigger.getType());
    alertTrigger = patchAlertTrigger.patch(alertTrigger);
    return createInternal(alertTrigger, byUser);
}))
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertTriggerRepository.delete(alertTrigger.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_TRIGGER, new Payload(alertTrigger.getId(), alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), Action.DELETE)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertTriggerAuditBuilder.class).type(EventType.ALERT_TRIGGER_DELETED).alertTrigger(alertTrigger).principal(deletedBy))).as
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | OTHER
1 | Single | mergeDelayError | METHOD_INVOCATION | return Single.mergeDelayError(toCreateObsList);
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(entrypointRepository.delete(id).doOnComplete(()->auditService.report(AuditBuilder.builder(EntrypointAuditBuilder.class).principal(principal).type(EventType.ENTRYPOINT_DELETED).entrypoint(entrypoint))))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Organization, CompletableSource>)(organization)->{
    String hostWithoutPort = url.getHost().split(":")[0];
    if (!VirtualHostValidator.isValidDomainOrSubDomain(hostWithoutPort, organization.getDomainRestrictions())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidEntrypointException("Host [" + hostWithoutPort + "] must be a subdomain of " + organization.getDomainRestrictions())));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->{
    environment.setName(newEnvironment.getName());
    environment.setDescription(newEnvironment.getDescription());
    environment.setDomainRestrictions(newEnvironment.getDomainRestrictions());
    environment.setHrids(newEnvironment.getHrids());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(updateInternal(environment, byUser)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by domain: %s", domain), ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findByDomain(domain).flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(countByClientId(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens);
    return totalToken;
}))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by application: %s", application), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList()).flatMap((v)->RxJava2Adapter.singleToMono((Single<TotalToken>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Long>, Single<TotalToken>>)(totalAccessTokens)->{
    TotalToken totalToken = new TotalToken();
    totalToken.setTotalAccessTokens(totalAccessTokens.stream().mapToLong(Long::longValue).sum());
    return RxJava2Adapter.monoToSingle(Mono.just(totalToken));
}).apply(v)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find total tokens", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find total tokens", ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::countByClientId).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(accessTokenRepository.deleteByUserId(userId)).then(RxJava2Adapter.completableToMono(refreshTokenRepository.deleteByUserId(userId)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete tokens by user {}", userId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find total tokens by user: %s", userId), ex)));
});
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | LOCAL_VARIABLE
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(chain))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        emitter.onSuccess(certificatePluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all certificate plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all certificate plugins", ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin certificate = certificatePluginManager.findById(certificatePluginId);
        if (certificate != null) {
            emitter.onSuccess(convert(certificate));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get certificate plugin : {}", certificatePluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get certificate plugin : " + certificatePluginId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = certificatePluginManager.getSchema(certificatePluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for certificate plugin {}", certificatePluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for certificate plugin " + certificatePluginId, e));
    }
});
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return botDetectionRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a bot detection using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a bot detection using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.create(botDetection)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a detection", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(id)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id)))).flatMapSingle((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.update(botDetectionToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update bot detection", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update bot detection", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(id)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(id)))).flatMapSingle((oldBotDetection)->{
    BotDetection botDetectionToUpdate = new BotDetection(oldBotDetection);
    botDetectionToUpdate.setName(updateBotDetection.getName());
    botDetectionToUpdate.setConfiguration(updateBotDetection.getConfiguration());
    botDetectionToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(botDetectionRepository.update(botDetectionToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
        Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((detection)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).oldValue(oldBotDetection).botDetection(detection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<BotDetection>>toJdkFunction((detection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(detection.getId(), detection.getReferenceType(), detection.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(detection)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete bot detection: {}", botDetectionId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete bot detection: %s", botDetectionId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(botDetectionRepository.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId)))).flatMapSingle(checkBotDetectionReleasedByDomain(domainId, botDetectionId)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<BotDetection, SingleSource<? extends BotDetection>>toJdkFunction(checkBotDetectionReleasedByApp(domainId, botDetectionId)).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<BotDetection, CompletableSource>)(botDetection)->{
    Event event = new Event(Type.BOT_DETECTION, new Payload(botDetectionId, ReferenceType.DOMAIN, domainId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(BotDetectionAuditBuilder.class).principal(principal).type(EventType.BOT_DETECTION_DELETED).botDetection(botDetection))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(botDetectionRepository.delete(botDetectionId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (botDetection)->domainService.findById(domainId).flatMapSingle((domain)->{
    if (domain.getAccountSettings() != null && botDetectionId.equals(domain.getAccountSettings().getBotDetectionPlugin())) {
        throw new BotDetectionUsedException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(botDetection));
})
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a scope using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a scope using its ID: %s", id), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.search(domain, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain and query : {} {}", domain, query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain and query: %s %s", domain, query), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setIconUri(newScope.getIconUri());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(newScope.isParameterized());
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scope;
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a scope", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(this::validateIconUri).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::create).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeRepository.findByDomainAndKey(domain, scopeKey)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a system scope", ex)));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Scope>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ScopeAlreadyExistsException(scopeKey, domain);
    }
    Scope scope = new Scope();
    scope.setId(RandomString.generate());
    scope.setDomain(domain);
    scope.setKey(scopeKey);
    scope.setSystem(true);
    scope.setClaims(newScope.getClaims());
    scope.setName(newScope.getName());
    scope.setDescription(newScope.getDescription());
    scope.setExpiresIn(newScope.getExpiresIn());
    scope.setDiscovery(newScope.isDiscovery());
    scope.setParameterized(false);
    scope.setCreatedAt(new Date());
    scope.setUpdatedAt(new Date());
    return scopeRepository.create(scope);
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a scope", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = patchScope.patch(oldScope);
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a scope", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((oldScope)->{
    Scope scopeToUpdate = new Scope(oldScope);
    scopeToUpdate.setName(updateScope.getName());
    scopeToUpdate.setDescription(updateScope.getDescription());
    scopeToUpdate.setExpiresIn(updateScope.getExpiresIn());
    if (!oldScope.isSystem() && updateScope.getDiscovery() != null) {
        scopeToUpdate.setDiscovery(updateScope.isDiscovery());
    }
    if (!oldScope.isSystem() && updateScope.getParameterized() != null) {
        scopeToUpdate.setParameterized(updateScope.isParameterized());
    }
    scopeToUpdate.setIconUri(updateScope.getIconUri());
    return update(domain, scopeToUpdate, oldScope, principal);
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction(scopeRepository::update).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Scope, SingleSource<Scope>>toJdkFunction((scope1)->{
    Event event = new Event(Type.SCOPE, new Payload(scope1.getId(), ReferenceType.DOMAIN, scope1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Scope>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Scope, Single<Scope>>)(scope)->{
    Event event = new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(scope)));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system scope", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a system scope", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(id)).switchIfEmpty(Mono.error(new ScopeNotFoundException(id)))).flatMapSingle((scope)->{
    scope.setName(updateScope.getName());
    scope.setDescription(updateScope.getDescription());
    scope.setUpdatedAt(new Date());
    scope.setSystem(true);
    scope.setClaims(updateScope.getClaims());
    scope.setExpiresIn(updateScope.getExpiresIn());
    scope.setDiscovery(updateScope.isDiscovery());
    return scopeRepository.update(scope);
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
})).flatMap((scope)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).throwable(throwable))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete scope: {}", scopeId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete scope: %s", scopeId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeRepository.findById(scopeId)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId)))).flatMapSingle((scope)->{
    if (scope.isSystem() && !force) {
        throw new SystemScopeDeleteException(scopeId);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(scope));
}))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable()).then(RxJava2Adapter.completableToMono(scopeApprovalRepository.deleteByDomainAndScopeKey(scope.getDomain(), scope.getKey()))).then(RxJava2Adapter.completableToMono(scopeRepository.delete(scopeId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(ScopeAuditBuilder.class).principal(principal).type(EventType.SCOPE_DELETED).scope(scope))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())).then(RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList()))).toCompletable())
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList()))
1 | Observable | toList | METHOD_INVOCATION | Completable.fromSingle(roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Role role)->{
    role.getOauthScopes().remove(scope.getKey());
    UpdateRole updatedRole = new UpdateRole();
    updatedRole.setName(role.getName());
    updatedRole.setDescription(role.getDescription());
    updatedRole.setPermissions(role.getOauthScopes());
    return roleService.update(scope.getDomain(), role.getId(), updatedRole);
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | roleService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (java.util.Set<io.gravitee.am.model.Role> roles)->Observable.fromIterable(roles.stream().filter((io.gravitee.am.model.Role role)->role.getOauthScopes() != null && role.getOauthScopes().contains(scope.getKey())).collect(Collectors.toList()))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle((io.gravitee.am.model.Application application)->{
    final List<ApplicationScopeSettings> cleanScopes = application.getSettings().getOauth().getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->!s.getScope().equals(scope.getKey())).collect(Collectors.toList());
    application.getSettings().getOauth().setScopeSettings(cleanScopes);
    return applicationService.update(application);
}).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationService.findByDomain(scope.getDomain()).flatMapObservable((java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (java.util.Set<io.gravitee.am.model.Application> applications)->Observable.fromIterable(applications.stream().filter((io.gravitee.am.model.Application application)->{
    if (application.getSettings() == null) {
        return false;
    }
    if (application.getSettings().getOauth() == null) {
        return false;
    }
    ApplicationOAuthSettings oAuthSettings = application.getSettings().getOauth();
    return oAuthSettings.getScopeSettings() != null && !oAuthSettings.getScopeSettings().stream().filter((io.gravitee.am.model.application.ApplicationScopeSettings s)->s.getScope().equals(scope.getKey())).findFirst().isEmpty();
}).collect(Collectors.toList()))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.SCOPE, new Payload(scope.getId(), ReferenceType.DOMAIN, scope.getDomain(), Action.DELETE)))))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s", domain), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return scopeRepository.findByDomainAndKey(domain, scopeKey).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope key: {}", domain, scopeKey, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope key: %s", domain, scopeKey), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(scopeRepository.findByDomainAndKeys(domain, scopeKeys)).collectList()).onErrorResumeNext((ex)->{
    String keys = scopeKeys != null ? String.join(",", scopeKeys) : null;
    LOGGER.error("An error occurs while trying to find scopes by domain: {} and scope keys: {}", domain, keys, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find scopes by domain: %s and scope keys: %s", domain, keys), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return identityProviderRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an identity provider using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an identity provider using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.create(identityProvider)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to create an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an identity provider", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)))).flatMapSingle((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.update(identityToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an identity provider", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an identity provider", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(id)))).flatMapSingle((oldIdentity)->{
    IdentityProvider identityToUpdate = new IdentityProvider(oldIdentity);
    identityToUpdate.setName(updateIdentityProvider.getName());
    identityToUpdate.setConfiguration(updateIdentityProvider.getConfiguration());
    identityToUpdate.setMappers(updateIdentityProvider.getMappers());
    identityToUpdate.setRoleMapper(updateIdentityProvider.getRoleMapper());
    identityToUpdate.setDomainWhitelist(updateIdentityProvider.getDomainWhitelist());
    identityToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderRepository.update(identityToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
        Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((identityProvider1)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).oldValue(oldIdentity).identityProvider(identityProvider1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, SingleSource<IdentityProvider>>toJdkFunction((identityProvider1)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProvider1.getId(), identityProvider1.getReferenceType(), identityProvider1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(identityProvider1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))).flatMapSingle((identityProvider)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete identity provider: {}", identityProviderId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete identity provider: %s", identityProviderId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderRepository.findById(referenceType, referenceId, identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProviderId)))).flatMapSingle((identityProvider)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v)))))))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByIdentityProvider(identityProviderId).count())
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<IdentityProvider>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new IdentityProviderWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(identityProvider));
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<IdentityProvider, CompletableSource>)(identityProvider)->{
    Event event = new Event(Type.IDENTITY_PROVIDER, new Payload(identityProviderId, referenceType, referenceId, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(IdentityProviderAuditBuilder.class).principal(principal).type(EventType.IDENTITY_PROVIDER_DELETED).identityProvider(identityProvider))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(identityProviderRepository.delete(identityProviderId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return serviceResourceRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a resource using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a resource using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.create(resource)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a resource", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id)))).flatMapSingle((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.update(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a resource", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a resource", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(id)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(id)))).flatMapSingle((oldServiceResource)->{
    ServiceResource factorToUpdate = new ServiceResource(oldServiceResource);
    factorToUpdate.setName(updateResource.getName());
    factorToUpdate.setConfiguration(updateResource.getConfiguration());
    factorToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(serviceResourceRepository.update(factorToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
        Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((factor1)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).oldValue(oldServiceResource).resource(factor1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ServiceResource, SingleSource<ServiceResource>>toJdkFunction((resource1)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource1.getId(), resource1.getReferenceType(), resource1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(resource1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))).flatMapSingle((resource)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete resource: {}", resourceId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete resource: %s", resourceId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(serviceResourceRepository.findById(resourceId)).switchIfEmpty(Mono.error(new ServiceResourceNotFoundException(resourceId)))).flatMapSingle((resource)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domain)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((factor)->factor.getConfiguration() != null && factor.getConfiguration().contains("\"" + resourceId + "\""))).collectList().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Factor>, SingleSource<ServiceResource>>toJdkFunction((factors)->{
    if (factors.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(resource));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new ServiceResourceCurrentlyUsedException(resourceId, factors.get(0).getName(), "MultiFactor Authentication")));
    }
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ServiceResource, CompletableSource>)(resource)->{
    Event event = new Event(Type.RESOURCE, new Payload(resource.getId(), resource.getReferenceType(), resource.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(serviceResourceRepository.delete(resourceId)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(ServiceResourceAuditBuilder.class).principal(principal).type(EventType.RESOURCE_DELETED).resource(resource))))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findAll(page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find applications by domain %s", domain), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.search(domain, query, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to search applications with query {} for domain {}", query, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to search applications with query %s by domain %s", query, domain), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomainAndExtensionGrant(domain, extensionGrant).collect(()->(Set<Application>)new HashSet(), Set::add).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find applications by extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find applications by extension grant", ex)));
});
1 | Flowable | collect | METHOD_INVOCATION | applicationRepository.findByDomainAndExtensionGrant(domain, extensionGrant).collect(()->(Set<Application>)new HashSet(), Set::add).onErrorResumeNext
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its ID: %s", id), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.findByDomainAndClientId(domain, clientId).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an application using its domain: {} and client_id : {}", domain, clientId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an application using its domain: %s, and client_id", domain, clientId), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return create0(domain, application, principal).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return create0(application.getDomain(), application, null).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create an application", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(application.getId())).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId())))).flatMapSingle((application1)->update0(application1.getDomain(), application1, application, null)).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update an application", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(application.getId())).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application.getId())))).flatMapSingle((application1)->update0(application1.getDomain(), application1, application, null)).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((existingApplication)->{
    Application toPatch = new Application(existingApplication);
    toPatch.setType(type);
    applicationTemplateManager.changeType(toPatch);
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch an application", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch an application", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((existingApplication)->{
    Application toPatch = patchApplication.patch(existingApplication);
    applicationTemplateManager.apply(toPatch);
    final AccountSettings accountSettings = toPatch.getSettings().getAccount();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    return update0(domain, existingApplication, toPatch, principal);
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((updatedApplication)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).application(updatedApplication)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_CLIENT_SECRET_RENEWED).throwable(throwable))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to renew client secret for application {} and domain {}", id, domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to renew client secret for application %s and domain %s", id, domain), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id)))).flatMapSingle((application)->{
    if (application.getSettings() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application settings is undefined")));
    }
    if (application.getSettings().getOauth() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Application OAuth 2.0 settings is undefined")));
    }
    application.getSettings().getOauth().setClientSecret(SecureRandomString.generate());
    application.setUpdatedAt(new Date());
    return applicationRepository.update(application);
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(applicationRepository.findById(id)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete application: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete application: %s", id), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Application, CompletableSource>)(application)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(applicationRepository.delete(id)).then(RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findByClient(ReferenceType.DOMAIN, application.getDomain(), application.getId())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomainAndClient(application.getDomain(), application.getId())).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application.getId(), ReferenceType.APPLICATION)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(ApplicationAuditBuilder.class).principal(principal).type(EventType.APPLICATION_DELETED).application(application))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(eventService.create(event).toCompletable())
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((email)->emailTemplateService.delete(email.getId())).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((form)->formService.delete(application.getDomain(), form.getId())).apply(t)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(z)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.count().onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications"), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return applicationRepository.countByDomain(domainId).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count applications for domain {}", domainId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to count applications for domain %s", domainId), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find top applications", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find top applications", ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationRepository.findAll(0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (pagedApplications)->Observable.fromIterable(pagedApplications.getData())
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((topApplications)->topApplications.stream().filter((topClient)->topClient.getAccessTokens() > 0).collect(Collectors.toSet())))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find top applications for domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find top applications for domain %s", domain), ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle((application)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.findTotalTokensByApplication(application)).map(RxJavaReactorMigrationUtil.toJdkFunction((totalToken)->{
    TopApplication topApplication = new TopApplication();
    topApplication.setApplication(application);
    topApplication.setAccessTokens(totalToken.getTotalAccessTokens());
    return topApplication;
})))).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | applicationRepository.findByDomain(domain, 0, Integer.MAX_VALUE).flatMapObservable((pagedApplications)->Observable.fromIterable(pagedApplications.getData())).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | (pagedApplications)->Observable.fromIterable(pagedApplications.getData())
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::setDefaultCertificate).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::create).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Object>>toJdkFunction((application1)->{
    if (principal == null || principal.getAdditionalInformation() == null || StringUtils.isEmpty(principal.getAdditionalInformation().get(Claims.organization))) {
        return RxJava2Adapter.monoToSingle(Mono.just(application1));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.APPLICATION_PRIMARY_OWNER, ReferenceType.APPLICATION)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the application, owner role does not exist"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(application1.getDomain());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(application1.getId());
        membership.setReferenceType(ReferenceType.APPLICATION);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(a)))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Object>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(application1.getDomain());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(application1.getId());
    membership.setReferenceType(ReferenceType.APPLICATION);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate((String)principal.getAdditionalInformation().get(Claims.organization), membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(a)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Object, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application.getId(), ReferenceType.DOMAIN, application.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateApplicationIdentityProviders).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(applicationRepository::update).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction((application1)->{
    Event event = new Event(Type.APPLICATION, new Payload(application1.getId(), ReferenceType.DOMAIN, application1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((domain1)->Mono.just(application1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new ApplicationAlreadyExistsException(clientId, domain)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities()).flatMapSingle((identity)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(identity)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single())).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(application.getIdentities()).flatMapSingle
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateRedirectUris).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateScopes).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Application, SingleSource<Application>>toJdkFunction(this::validateTokenEndpointAuthMethod).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(application.getDomain())).switchIfEmpty(Mono.error(new DomainNotFoundException(application.getDomain())))).flatMapSingle((domain)->{
    if (GrantTypeUtils.isRedirectUriRequired(oAuthSettings.getGrantTypes()) && CollectionUtils.isEmpty(oAuthSettings.getRedirectUris())) {
        if (AM_V2_VERSION.equals(oAuthSettings.getSoftwareVersion())) {
            oAuthSettings.setSoftwareVersion(null);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException()));
        }
    }
    if (oAuthSettings.getRedirectUris() != null) {
        for (String redirectUri : oAuthSettings.getRedirectUris()) {
            try {
                URI uri = UriBuilder.fromURIString(redirectUri).build();
                if (uri.getScheme() == null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
                }
                if (!domain.isRedirectUriLocalhostAllowed() && UriBuilder.isHttp(uri.getScheme()) && UriBuilder.isLocalhost(uri.getHost())) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("localhost is forbidden")));
                }
                if (!domain.isRedirectUriUnsecuredHttpSchemeAllowed() && uri.getScheme().equalsIgnoreCase("http")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Unsecured http scheme is forbidden")));
                }
                if (!domain.isRedirectUriWildcardAllowed() && uri.getPath().contains("*")) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("Wildcard are forbidden")));
                }
                if (uri.getFragment() != null) {
                    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri with fragment is forbidden")));
                }
            } catch (IllegalArgumentException | URISyntaxException ex) {
                return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect_uri : " + redirectUri + " is malformed")));
            }
        }
    }
    return RxJava2Adapter.monoToSingle(Mono.just(application));
}))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return certificateRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a certificate using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a certificate using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | Single<Certificate> certificateSingle = RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(newCertificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(newCertificate.getType()))).map(RxJavaReactorMigrationUtil.toJdkFunction((schema)->objectMapper.readValue(schema, CertificateSchema.class)))).flatMapSingle(new Function<CertificateSchema, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(CertificateSchema certificateSchema) throws Exception {
        return Single.create((emitter)->{
            String certificateId = RandomString.generate();
            Certificate certificate = new Certificate();
            certificate.setId(certificateId);
            certificate.setDomain(domain);
            certificate.setName(newCertificate.getName());
            certificate.setType(newCertificate.getType());
            try {
                JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
                certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
                    try {
                        JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                        byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                        certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                        ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                        newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                    } catch (IOException ex) {
                        LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                        emitter.onError(ex);
                    }
                });
                certificate.setConfiguration(newCertificate.getConfiguration());
                certificate.setCreatedAt(new Date());
                certificate.setUpdatedAt(certificate.getCreatedAt());
            } catch (Exception ex) {
                LOGGER.error("An error occurs while trying to create certificate configuration", ex);
                emitter.onError(ex);
            }
            emitter.onSuccess(certificate);
        });
    }
})
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    String certificateId = RandomString.generate();
    Certificate certificate = new Certificate();
    certificate.setId(certificateId);
    certificate.setDomain(domain);
    certificate.setName(newCertificate.getName());
    certificate.setType(newCertificate.getType());
    try {
        JsonNode certificateConfiguration = objectMapper.readTree(newCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                certificate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                newCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to create certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificate.setConfiguration(newCertificate.getConfiguration());
        certificate.setCreatedAt(new Date());
        certificate.setUpdatedAt(certificate.getCreatedAt());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to create certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificate);
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::create).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(id)).switchIfEmpty(Mono.error(new CertificateNotFoundException(id)))).flatMapSingle(new Function<Certificate, SingleSource<CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<CertificateWithSchema> apply(Certificate certificate) throws Exception {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
            
            () {
                super();
            }
            
            @Override()
            public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
                return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
            }
        });
    }
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificate.getType())))).flatMapSingle(new Function<String, SingleSource<? extends CertificateWithSchema>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<? extends CertificateWithSchema> apply(String schema) throws Exception {
        return RxJava2Adapter.monoToSingle(Mono.just(new CertificateWithSchema(certificate, objectMapper.readValue(schema, CertificateSchema.class))));
    }
});
1 | Single | OTHER
1 | Single | OTHER
1 | Single | LOCAL_VARIABLE
1 | Single | create | METHOD_INVOCATION | Single<Certificate> certificateSingle = Single.create((emitter)->{
    Certificate certificateToUpdate = new Certificate(oldCertificate.getCertificate());
    certificateToUpdate.setName(updateCertificate.getName());
    try {
        CertificateSchema certificateSchema = oldCertificate.getSchema();
        JsonNode oldCertificateConfiguration = objectMapper.readTree(oldCertificate.getCertificate().getConfiguration());
        JsonNode certificateConfiguration = objectMapper.readTree(updateCertificate.getConfiguration());
        certificateSchema.getProperties().entrySet().stream().filter((map)->map.getValue().getWidget() != null && "file".equals(map.getValue().getWidget())).map(Entry::getKey).forEach((key)->{
            try {
                String oldFileInformation = oldCertificateConfiguration.get(key).asText();
                String fileInformation = certificateConfiguration.get(key).asText();
                if (!oldFileInformation.equals(fileInformation)) {
                    JsonNode file = objectMapper.readTree(certificateConfiguration.get(key).asText());
                    byte[] data = Base64.getDecoder().decode(file.get("content").asText());
                    certificateToUpdate.setMetadata(Collections.singletonMap(CertificateMetadata.FILE, data));
                    ((ObjectNode)certificateConfiguration).put(key, file.get("name").asText());
                    updateCertificate.setConfiguration(objectMapper.writeValueAsString(certificateConfiguration));
                }
            } catch (IOException ex) {
                LOGGER.error("An error occurs while trying to update certificate binaries", ex);
                emitter.onError(ex);
            }
        });
        certificateToUpdate.setConfiguration(updateCertificate.getConfiguration());
        certificateToUpdate.setUpdatedAt(new Date());
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to update certificate configuration", ex);
        emitter.onError(ex);
    }
    emitter.onSuccess(certificateToUpdate);
})
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificateSingle).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))).flatMap((o)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to update a certificate", ex);
    throw new TechnicalManagementException("An error occurs while trying to update a certificate", ex);
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction(certificateRepository::update).apply(t)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(o)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Certificate, SingleSource<Certificate>>toJdkFunction((certificate1)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate1.getId(), ReferenceType.DOMAIN, certificate1.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(certificate1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))).flatMapSingle((certificate)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to delete certificate: {}", certificateId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete certificate: %s", certificateId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateRepository.findById(certificateId)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificateId)))).flatMapSingle((certificate)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count()).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v)))))))
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findByCertificate(certificateId).count())
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Long, SingleSource<Certificate>>toJdkFunction((applications)->{
    if (applications > 0) {
        throw new CertificateWithApplicationsException();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(certificate));
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Certificate, CompletableSource>)(certificate)->{
    Event event = new Event(Type.CERTIFICATE, new Payload(certificate.getId(), ReferenceType.DOMAIN, certificate.getDomain(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(CertificateAuditBuilder.class).principal(principal).type(EventType.CERTIFICATE_DELETED).certificate(certificate))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(certificateRepository.delete(certificateId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.getSchema(certificate.getType())).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<String, CertificateSchema>(){
    
    () {
        super();
    }
    
    @Override()
    public CertificateSchema apply(String schema) throws Exception {
        return objectMapper.readValue(schema, CertificateSchema.class);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(new Function<CertificateSchema, String>(){
    
    () {
        super();
    }
    
    @Override()
    public String apply(CertificateSchema certificateSchema) throws Exception {
        final int keySize = environment.getProperty("domains.certificates.default.keysize", int.class, 2048);
        final int validity = environment.getProperty("domains.certificates.default.validity", int.class, 365);
        final String name = environment.getProperty("domains.certificates.default.name", String.class, "cn=Gravitee.io");
        final String sigAlgName = environment.getProperty("domains.certificates.default.algorithm", String.class, "SHA256withRSA");
        final String alias = environment.getProperty("domains.certificates.default.alias", String.class, "default");
        final String keyPass = environment.getProperty("domains.certificates.default.keypass", String.class, "gravitee");
        final String storePass = environment.getProperty("domains.certificates.default.storepass", String.class, "gravitee");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(keySize);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        java.security.cert.Certificate[] chain = {generateCertificate(name, keyPair, validity, sigAlgName)};
        KeyStore ks = KeyStore.getInstance("pkcs12");
        ks.load(null, null);
        ks.setKeyEntry(alias, keyPair.getPrivate(), keyPass.toCharArray(), chain);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ks.store(outputStream, storePass.toCharArray());
        ObjectNode certificateNode = objectMapper.createObjectNode();
        ObjectNode contentNode = objectMapper.createObjectNode();
        contentNode.put("content", new String(Base64.getEncoder().encode(outputStream.toByteArray())));
        contentNode.put("name", domain + ".p12");
        certificateNode.put("content", objectMapper.writeValueAsString(contentNode));
        certificateNode.put("alias", alias);
        certificateNode.put("storepass", storePass);
        certificateNode.put("keypass", keyPass);
        return objectMapper.writeValueAsString(certificateNode);
    }
}))).flatMapSingle(new Function<String, SingleSource<Certificate>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<Certificate> apply(String configuration) throws Exception {
        certificate.setConfiguration(configuration);
        return create(domain, certificate);
    }
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return repository.findByDomain(domain, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s", domain), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return repository.findByDomainAndClient(domain, client, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find resources by domain {} and client {}", domain, client, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find resources by domain %s and client %s", domain, client), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | zip | METHOD_INVOCATION | return Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
});
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Flowable | toMap | METHOD_INVOCATION | Single.zip(userService.findByIdIn(userIds).toMap(User::getId, this::filter), applicationService.findByIdIn(appIds).toMap(Application::getId, this::filter), (users,apps)->{
    Map<String, Map<String, Object>> metadata = new HashMap<>();
    metadata.put("users", (Map)users);
    metadata.put("applications", (Map)apps);
    return metadata;
})
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(repository::create).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, userId, resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resourceId)))).flatMapSingle(Single::just))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateScopes).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Resource, SingleSource<Resource>>toJdkFunction(this::validateIconUri).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return accessPolicyRepository.countByResource(resourceId).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to count access policies by resource id {}", resourceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to count access policies by resource id %s", resourceId), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById(accessPolicy).as(RxJava2Adapter::maybeToMono))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to find access policies by domain {}, client {}, resource owner {} and resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policies by domain %s, client %s, resource owner %s resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return accessPolicyRepository.findById(accessPolicy).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find access policy by id {}", accessPolicy, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find access policy by id %s", accessPolicy), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Resource, Single<AccessPolicy>>)(r)->{
    accessPolicy.setDomain(domain);
    accessPolicy.setResource(r.getId());
    accessPolicy.setCreatedAt(new Date());
    accessPolicy.setUpdatedAt(accessPolicy.getCreatedAt());
    return accessPolicyRepository.create(accessPolicy);
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to create an access policy for domain {}, client {}, resource owner {} and resource id {}", domain, client, user, resource, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to create an access policy for domain %s, client %s, resource owner %s and resource id %s", domain, client, user, resource), ex)));
});
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((z)->accessPolicyRepository.findById(accessPolicyId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(resource))).flatMap((v)->RxJava2Adapter.singleToMono((Single<AccessPolicy>)RxJavaReactorMigrationUtil.toJdkFunction((Function<AccessPolicy, Single<AccessPolicy>>)(oldPolicy)->{
    AccessPolicy policyToUpdate = new AccessPolicy();
    policyToUpdate.setId(oldPolicy.getId());
    policyToUpdate.setEnabled(accessPolicy.isEnabled());
    policyToUpdate.setName(accessPolicy.getName());
    policyToUpdate.setDescription(accessPolicy.getDescription());
    policyToUpdate.setType(accessPolicy.getType());
    policyToUpdate.setOrder(accessPolicy.getOrder());
    policyToUpdate.setCondition(accessPolicy.getCondition());
    policyToUpdate.setDomain(oldPolicy.getDomain());
    policyToUpdate.setResource(oldPolicy.getResource());
    policyToUpdate.setCreatedAt(oldPolicy.getCreatedAt());
    policyToUpdate.setUpdatedAt(new Date());
    return accessPolicyRepository.update(policyToUpdate);
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicyId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to update access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicyId), ex)));
});
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(findByDomainAndClientAndUserAndResource(domain, client, user, resource)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource))).flatMap((__)->RxJava2Adapter.completableToMono(accessPolicyRepository.delete(accessPolicy))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete access policy for domain {}, client {}, resource owner {}, resource id {} and policy id {}", domain, client, user, resource, accessPolicy, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete access policy for domain %s, client %s, resource owner %s, resource id %s and policy id %s", domain, client, user, resource, accessPolicy), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findByCriteria(criteria)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return loginAttemptRepository.update(loginAttempt);
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return loginAttemptRepository.create(loginAttempt);
    }
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to add a login attempt", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to add a login attempt", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findByCriteria(criteria)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optionalLoginAttempt)->{
    if (optionalLoginAttempt.isPresent()) {
        LoginAttempt loginAttempt = optionalLoginAttempt.get();
        loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        }
        loginAttempt.setUpdatedAt(new Date());
        return loginAttemptRepository.update(loginAttempt);
    } else {
        LoginAttempt loginAttempt = new LoginAttempt();
        loginAttempt.setId(RandomString.generate());
        loginAttempt.setDomain(criteria.domain());
        loginAttempt.setClient(criteria.client());
        loginAttempt.setIdentityProvider(criteria.identityProvider());
        loginAttempt.setUsername(criteria.username());
        loginAttempt.setAttempts(1);
        if (loginAttempt.getAttempts() >= accountSettings.getMaxLoginAttempts()) {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getAccountBlockedDuration() * 1000)));
        } else {
            loginAttempt.setExpireAt(new Date(System.currentTimeMillis() + (accountSettings.getLoginAttemptsResetTime() * 1000)));
        }
        loginAttempt.setCreatedAt(new Date());
        loginAttempt.setUpdatedAt(loginAttempt.getCreatedAt());
        return loginAttemptRepository.create(loginAttempt);
    }
}).onErrorResumeNext
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return loginAttemptRepository.delete(criteria).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete login attempt for", criteria, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete login attempt: %s", criteria), ex)));
});
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(loginAttemptRepository.findById(id)).switchIfEmpty(Mono.error(new LoginAttemptNotFoundException(id)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to find login attempt by id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to fin login attempt by id: %s", id), ex)));
});
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Maybe | retryWhen | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authContextRepository.findLastByTransactionId(transactionId)).switchIfEmpty(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->{
    AuthenticationFlowContext context = new AuthenticationFlowContext();
    context.setTransactionId(transactionId);
    context.setVersion(0);
    context.setCreatedAt(new Date());
    return context;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction((context)->{
    if (context.getVersion() > 0 && context.getVersion() < expectedVersion) {
        LOGGER.debug("Authentication Flow Context read with version \'{}\' but \'{}\' was expected", context.getVersion(), expectedVersion);
        throw new AuthenticationFlowConsistencyException();
    }
    return context;
}))).retryWhen(new RetryWithDelay(consistencyRetries, retryDelay));
1 | Maybe | RETURN_TYPE
1 | Maybe | doFinally | METHOD_INVOCATION | return this.loadContext(transactionId, expectedVersion).doFinally(()->{
    clearContext(transactionId).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
});
1 | Completable | subscribe | METHOD_INVOCATION | clearContext(transactionId).subscribe(()->LOGGER.info("Deletion of Authentication Flow context \'{}\' succeeded after loading it", transactionId), (error)->LOGGER.warn("Deletion of Authentication Flow context \'{}\' failed after loading it", transactionId, error));
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", id), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return userRepository.findByUsernameAndDomain(domain, username).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID: {} for the domain {}", username, domain, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s for the domain %s", username, domain), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserRepository().update(user)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    Event event = new Event(Type.USER, new Payload(user1.getId(), user1.getReferenceType(), user1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(user1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.countByReference(ReferenceType.DOMAIN, domain).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by domain: {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", domain), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.countByApplication(domain, application).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to count users by application: {}", application, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users to delete user: %s", application), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return userRepository.statistics(query).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to get users analytics : {}", query, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while count users analytics : %s", query), ex)));
});
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((oldUser)->{
    User user = new User(oldUser);
    List<EnrolledFactor> enrolledFactors = user.getFactors();
    if (enrolledFactors == null || enrolledFactors.isEmpty()) {
        enrolledFactors = Collections.singletonList(enrolledFactor);
    } else {
        if (Boolean.TRUE.equals(enrolledFactor.isPrimary())) {
            enrolledFactors.forEach((e)->e.setPrimary(false));
        }
        Optional<EnrolledFactor> optFactor = enrolledFactors.stream().filter((existingFactor)->existingFactor.getFactorId().equals(enrolledFactor.getFactorId())).findFirst();
        if (optFactor.isPresent()) {
            EnrolledFactor factorToUpdate = new EnrolledFactor(optFactor.get());
            factorToUpdate.setStatus(enrolledFactor.getStatus());
            factorToUpdate.setChannel(enrolledFactor.getChannel());
            factorToUpdate.setSecurity(enrolledFactor.getSecurity());
            factorToUpdate.setPrimary(enrolledFactor.isPrimary());
            enrolledFactors.removeIf((ef)->factorToUpdate.getFactorId().equals(ef.getFactorId()));
            enrolledFactors.add(factorToUpdate);
        } else {
            enrolledFactors.add(enrolledFactor);
        }
    }
    user.setFactors(enrolledFactors);
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.SMS == enrolledFactor.getChannel().getType()) {
        List<Attribute> phoneNumbers = user.getPhoneNumbers();
        if (phoneNumbers == null) {
            phoneNumbers = new ArrayList<>();
            user.setPhoneNumbers(phoneNumbers);
        }
        String enrolledPhoneNumber = enrolledFactor.getChannel().getTarget();
        if (!phoneNumbers.stream().filter((p)->p.getValue().equals(enrolledPhoneNumber)).findFirst().isPresent()) {
            Attribute newPhoneNumber = new Attribute();
            newPhoneNumber.setType("mobile");
            newPhoneNumber.setPrimary(phoneNumbers.isEmpty());
            newPhoneNumber.setValue(enrolledPhoneNumber);
            phoneNumbers.add(newPhoneNumber);
        }
    }
    if (enrolledFactor.getChannel() != null && EnrolledFactorChannel.Type.EMAIL == enrolledFactor.getChannel().getType()) {
        String email = user.getEmail();
        String enrolledEmail = enrolledFactor.getChannel().getTarget();
        if (email == null) {
            user.setEmail(enrolledEmail);
        } else if (!email.equals(enrolledEmail)) {
            List<Attribute> emails = user.getEmails();
            if (emails == null) {
                emails = new ArrayList<>();
                user.setEmails(emails);
            }
            if (!emails.stream().filter((p)->p.getValue().equals(enrolledEmail)).findFirst().isPresent()) {
                Attribute additionalEmail = new Attribute();
                additionalEmail.setPrimary(false);
                additionalEmail.setValue(enrolledEmail);
                emails.add(additionalEmail);
            }
        }
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(update(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->{
        if (needToAuditUserFactorsOperation(user1, oldUser)) {
            removeSensitiveFactorsData(user1.getFactors());
            removeSensitiveFactorsData(oldUser.getFactors());
            auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser));
        }
    })).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
});
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(oldUser)->{
    if (oldUser.getFactors() == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    List<EnrolledFactor> enrolledFactors = oldUser.getFactors().stream().filter((enrolledFactor)->!factorId.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(enrolledFactors);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))).then());
}).apply(y)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its id %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findByTemplate(referenceType, referenceId, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} and template {}", referenceType, referenceId, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its domain %s %s and template %s", referenceType, referenceId, template), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return formRepository.findByClientAndTemplate(referenceType, referenceId, client, template).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a form using its {} {} its client {} and template {}", referenceType, referenceId, client, template, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a form using its %s %s its client %s and template %s", referenceType, referenceId, client, template), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(findByDomainAndClient(domain, clientSource).flatMapSingle((source)->{
    NewForm form = new NewForm();
    form.setEnabled(source.isEnabled());
    form.setTemplate(Template.parse(source.getTemplate()));
    form.setContent(source.getContent());
    form.setAssets(source.getAssets());
    return this.create(domain, clientTarget, form);
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FormNotFoundException(id)))).flatMapSingle((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formRepository.update(formToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a form", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FormNotFoundException(id)))).flatMapSingle((oldForm)->{
    Form formToUpdate = new Form(oldForm);
    formToUpdate.setEnabled(updateForm.isEnabled());
    formToUpdate.setContent(updateForm.getContent());
    formToUpdate.setAssets(updateForm.getAssets());
    formToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formRepository.update(formToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
        Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((form)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).oldValue(oldForm).form(form)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkFormUniqueness(referenceType, referenceId, client, newForm.getTemplate().template())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a form", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a form", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Form>>toJdkFunction((irrelevant)->{
    Form form = new Form();
    form.setId(formId);
    form.setReferenceType(referenceType);
    form.setReferenceId(referenceId);
    form.setClient(client);
    form.setEnabled(newForm.isEnabled());
    form.setTemplate(newForm.getTemplate().template());
    form.setContent(newForm.getContent());
    form.setAssets(newForm.getAssets());
    form.setCreatedAt(new Date());
    form.setUpdatedAt(form.getCreatedAt());
    return formRepository.create(form);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Form, SingleSource<Form>>toJdkFunction((page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(page)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(formRepository.findById(referenceType, referenceId, formId)).switchIfEmpty(Mono.error(new FormNotFoundException(formId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete form: {}", formId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete form: %s", formId), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Form, CompletableSource>)(page)->{
    Event event = new Event(Type.FORM, new Payload(page.getId(), page.getReferenceType(), page.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(FormTemplateAuditBuilder.class).principal(principal).type(EventType.FORM_TEMPLATE_DELETED).form(page))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(formRepository.delete(formId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return domainRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a domain using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a domain using its ID: %s", id), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).switchIfEmpty(Mono.error(new DomainNotFoundException(hrid)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when trying to find a domain using its hrid: {}", hrid, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to find a domain using its hrid: %s", hrid), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((envId)->domainRepository.search(environmentId, query)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to search domains with query {} for environmentId {}", query, environmentId, ex);
});
1 | Flowable | RETURN_TYPE
1 | Flowable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Environment::getId)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(domainRepository::findAllByReferenceId))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred when trying to find domains by environment", ex);
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAll()).collectList()).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find all domains", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find all domains", ex)));
});
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(domainRepository.findByHrid(ReferenceType.ENVIRONMENT, environmentId, hrid)).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a domain", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<Domain>>toJdkFunction((empty)->{
    if (!empty) {
        throw new DomainAlreadyExistsException(newDomain.getName());
    } else {
        Domain domain = new Domain();
        domain.setId(RandomString.generate());
        domain.setHrid(hrid);
        domain.setPath(generateContextPath(newDomain.getName()));
        domain.setName(newDomain.getName());
        domain.setDescription(newDomain.getDescription());
        domain.setEnabled(false);
        domain.setAlertEnabled(false);
        domain.setOidc(OIDCSettings.defaultSettings());
        domain.setReferenceType(ReferenceType.ENVIRONMENT);
        domain.setReferenceId(environmentId);
        domain.setCreatedAt(new Date());
        domain.setUpdatedAt(domain.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((environment)->setDeployMode(domain, environment))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))).then().then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.create(domain)))));
    }
}).apply(v)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(y)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createSystemScopes).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction(this::createDefaultCertificate).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    if (principal == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(roleService.findSystemRole(SystemRole.DOMAIN_PRIMARY_OWNER, ReferenceType.DOMAIN)).switchIfEmpty(Mono.error(new InvalidRoleException("Cannot assign owner to the domain, owner role does not exist"))).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
        Membership membership = new Membership();
        membership.setDomain(domain.getId());
        membership.setMemberId(principal.getId());
        membership.setMemberType(MemberType.USER);
        membership.setReferenceId(domain.getId());
        membership.setReferenceType(ReferenceType.DOMAIN);
        membership.setRoleId(role.getId());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
    }).apply(t)))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Domain>>toJdkFunction((role)->{
    Membership membership = new Membership();
    membership.setDomain(domain.getId());
    membership.setMemberId(principal.getId());
    membership.setMemberType(MemberType.USER);
    membership.setReferenceId(domain.getId());
    membership.setReferenceType(ReferenceType.DOMAIN);
    membership.setRoleId(role.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership)).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->domain)));
}).apply(t)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain.getId(), ReferenceType.DOMAIN, domain.getId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(domain)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(domain)))));
})).flatMap((v)->RxJava2Adapter.singleToMono((Single<Domain>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, Single<Domain>>)(domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a domain", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((__)->{
    domain.setHrid(IdGenerator.generate(domain.getName()));
    domain.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(domain)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(domain)))));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(toPatch)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(toPatch)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to patch a domain", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to patch a domain", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((oldDomain)->{
    Domain toPatch = patchDomain.patch(oldDomain);
    final AccountSettings accountSettings = toPatch.getAccountSettings();
    if (AccountSettingsValidator.hasInvalidResetPasswordFields(accountSettings)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidParameterException("Unexpected forgot password field")));
    }
    toPatch.setHrid(IdGenerator.generate(toPatch.getName()));
    toPatch.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(validateDomain(toPatch)).then(Mono.defer(()->RxJava2Adapter.singleToMono(domainRepository.update(toPatch)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
        Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((domain1)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).oldValue(oldDomain).domain(domain1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Domain, SingleSource<Domain>>toJdkFunction((domain1)->{
    Event event = new Event(Type.DOMAIN, new Payload(domain1.getId(), ReferenceType.DOMAIN, domain1.getId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(domain1)));
}).apply(v)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(domainRepository.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete security domain {}", domainId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error occurs while trying to delete security domain " + domainId, ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(domain)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
        List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
        return Completable.concat(deleteApplicationsCompletable);
    }).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
        List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
        return Completable.concat(deleteRolesCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
        List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
        return Completable.concat(deleteScopesCompletable);
    }).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
        List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
        return Completable.concat(deletedResourceCompletable);
    }).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(applicationService.findByDomain(domainId)).flatMap((u)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))).then(RxJava2Adapter.flowableToFlux(certificateService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(identityProviderService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))).then()).then(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))).then()).then(RxJava2Adapter.singleToMono(roleService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(userService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))).then()).then(RxJava2Adapter.flowableToFlux(groupService.findByDomain(domainId)).flatMap((h)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))).then()).then(RxJava2Adapter.singleToMono(scopeService.findByDomain(domainId, 0, Integer.MAX_VALUE)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll(ReferenceType.DOMAIN, domainId)).flatMap((g)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))).then()).then(RxJava2Adapter.flowableToFlux(formService.findByDomain(domainId)).flatMap((e)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))).then()).then(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domainId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((f)->f.getId() != null)).flatMap((d)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))).then()).then(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domainId, ReferenceType.DOMAIN)).flatMap((c)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))).then()).then(RxJava2Adapter.flowableToFlux(factorService.findByDomain(domainId)).flatMap((b)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))).then()).then(RxJava2Adapter.singleToMono(resourceService.findByDomain(domainId)).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.flowableToFlux(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).flatMap((a)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))).then()).then(RxJava2Adapter.completableToMono(domainRepository.delete(domainId))).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(DomainAuditBuilder.class).principal(principal).type(EventType.DOMAIN_DELETED).domain(domain))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Application>, CompletableSource>toJdkFunction((applications)->{
    List<Completable> deleteApplicationsCompletable = applications.stream().map((a)->applicationService.delete(a.getId())).collect(Collectors.toList());
    return Completable.concat(deleteApplicationsCompletable);
}).apply(u)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteApplicationsCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Certificate, CompletableSource>toJdkFunction((certificate)->certificateService.delete(certificate.getId())).apply(b)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<IdentityProvider, CompletableSource>toJdkFunction((identityProvider)->identityProviderService.delete(domainId, identityProvider.getId())).apply(b)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, CompletableSource>toJdkFunction((extensionGrant)->extensionGrantService.delete(domainId, extensionGrant.getId())).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Role>, CompletableSource>toJdkFunction((roles)->{
    List<Completable> deleteRolesCompletable = roles.stream().map((r)->roleService.delete(ReferenceType.DOMAIN, domainId, r.getId())).collect(Collectors.toList());
    return Completable.concat(deleteRolesCompletable);
}).apply(a)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteRolesCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, CompletableSource>toJdkFunction((user)->userService.delete(user.getId())).apply(h)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Group, CompletableSource>toJdkFunction((group)->groupService.delete(ReferenceType.DOMAIN, domainId, group.getId())).apply(h)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.oauth2.Scope>, CompletableSource>toJdkFunction((scopes)->{
    List<Completable> deleteScopesCompletable = scopes.getData().stream().map((s)->scopeService.delete(s.getId(), true)).collect(Collectors.toList());
    return Completable.concat(deleteScopesCompletable);
}).apply(g)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deleteScopesCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Email, CompletableSource>toJdkFunction((emailTemplate)->emailTemplateService.delete(emailTemplate.getId())).apply(g)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Form, CompletableSource>toJdkFunction((formTemplate)->formService.delete(domainId, formTemplate.getId())).apply(e)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Reporter, CompletableSource>toJdkFunction((reporter)->reporterService.delete(reporter.getId())).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Flow, CompletableSource>toJdkFunction((flows)->flowService.delete(flows.getId())).apply(d)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((membership)->membershipService.delete(membership.getId())).apply(c)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Factor, CompletableSource>toJdkFunction((factor)->factorService.delete(domainId, factor.getId())).apply(b)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Set<Resource>, CompletableSource>toJdkFunction((resources)->{
    List<Completable> deletedResourceCompletable = resources.stream().map(resourceService::delete).collect(Collectors.toList());
    return Completable.concat(deletedResourceCompletable);
}).apply(a)))
1 | Completable | LOCAL_VARIABLE
1 | Completable | concat | METHOD_INVOCATION | return Completable.concat(deletedResourceCompletable);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertTrigger, CompletableSource>toJdkFunction((alertTrigger)->alertTriggerService.delete(alertTrigger.getReferenceType(), alertTrigger.getReferenceId(), alertTrigger.getId(), principal)).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<AlertNotifier, CompletableSource>toJdkFunction((alertNotifier)->alertNotifierService.delete(alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), alertNotifier.getId(), principal)).apply(a)))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(domainId, ReferenceType.DOMAIN, domainId, Action.DELETE)))))
1 | Single | RETURN_TYPE
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(Scope.values()).flatMapSingle((systemScope)->{
    final String scopeKey = systemScope.getKey();
    NewSystemScope scope = new NewSystemScope();
    scope.setKey(scopeKey);
    scope.setClaims(systemScope.getClaims());
    scope.setName(systemScope.getLabel());
    scope.setDescription(systemScope.getDescription());
    scope.setDiscovery(systemScope.isDiscovery());
    return scopeService.create(domain.getId(), scope);
}).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(Scope.values()).flatMapSingle
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Domain>, CompletableSource>)(optDomain)->{
    if (optDomain.isPresent() && !optDomain.get().getId().equals(domain.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new DomainAlreadyExistsException(domain.getName())));
    } else {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))).then());
    }
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Environment, CompletableSource>toJdkFunction((environment)->validateDomain(domain, environment)).apply(z)))
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Domain>, CompletableSource>toJdkFunction((domains)->VirtualHostValidator.validateDomainVhosts(domain, domains)).apply(y)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return roleRepository.findAll(ReferenceType.DOMAIN, domain).collect(HashSet::new, Set::add);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a role using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a role using its ID: %s", id), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.PLATFORM, Platform.DEFAULT, systemRole.name(), assignableType)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isSystem))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find system role : {} for type : {}", systemRole.name(), assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find system role : %s for type : %s", systemRole.name(), assignableType), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(roleRepository.findByNameAndAssignableType(ReferenceType.ORGANIZATION, organizationId, defaultRole.name(), assignableType)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Role::isDefaultRole))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find default role {} of organization {} for the type {}", defaultRole.name(), organizationId, assignableType, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find default role %s of organization %s for type %s", defaultRole.name(), organizationId, assignableType), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return roleRepository.findByIdIn(ids).collect(()->(Set<Role>)new HashSet<Role>(), Set::add).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find roles by ids", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to find roles by ids", ex)));
});
1 | Flowable | collect | METHOD_INVOCATION | roleRepository.findByIdIn(ids).collect(()->(Set<Role>)new HashSet<Role>(), Set::add).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(newRole.getName(), roleId, referenceType, referenceId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((__)->{
    Role role = new Role();
    role.setId(roleId);
    role.setReferenceType(referenceType);
    role.setReferenceId(referenceId);
    role.setName(newRole.getName());
    role.setDescription(newRole.getDescription());
    role.setAssignableType(newRole.getAssignableType());
    role.setPermissionAcls(new HashMap<>());
    role.setOauthScopes(new ArrayList<>());
    role.setCreatedAt(new Date());
    role.setUpdatedAt(role.getCreatedAt());
    return roleRepository.create(role);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Role>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Role, Single<Role>>)(oldRole)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(checkRoleUniqueness(updateRole.getName(), oldRole.getId(), referenceType, referenceId)).flatMap((t)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
        Role roleToUpdate = new Role(oldRole);
        roleToUpdate.setName(updateRole.getName());
        roleToUpdate.setDescription(updateRole.getDescription());
        roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
        roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
        roleToUpdate.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
            Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
        }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
    }).apply(t)))));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a role", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    if (role.isSystem()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new SystemRoleUpdateException(role.getName())));
    }
    if (role.isDefaultRole() && !role.getName().equals(updateRole.getName())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new DefaultRoleUpdateException(role.getName())));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(role));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Role>, SingleSource<Role>>toJdkFunction((irrelevant)->{
    Role roleToUpdate = new Role(oldRole);
    roleToUpdate.setName(updateRole.getName());
    roleToUpdate.setDescription(updateRole.getDescription());
    roleToUpdate.setPermissionAcls(Permission.unflatten(updateRole.getPermissions()));
    roleToUpdate.setOauthScopes(updateRole.getOauthScopes());
    roleToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(roleToUpdate)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
        Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
    }).apply(x)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).oldValue(oldRole).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_UPDATED).throwable(throwable)))));
}).apply(t)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role)->{
    Event event = new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role)));
}).apply(x)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(roleRepository.findById(referenceType, referenceId, roleId)).switchIfEmpty(Mono.error(new RoleNotFoundException(roleId))).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->{
    if (role.isSystem()) {
        throw new SystemRoleDeleteException(roleId);
    }
    return role;
})).flatMap((role)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).throwable(throwable))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete role: {}", roleId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete role: %s", roleId), ex)));
});
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(roleRepository.delete(roleId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).principal(principal).type(EventType.ROLE_DELETED).role(role))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.ROLE, new Payload(role.getId(), role.getReferenceType(), role.getReferenceId(), Action.DELETE)))))
1 | Completable | OTHER
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(roles).flatMapCompletable(this::upsert);
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(roles).flatMapCompletable
1 | Completable | OTHER
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(roles).flatMapCompletable(this::upsert);
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(roles).flatMapCompletable
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Role>, CompletableSource>)(optRole)->{
    if (!optRole.isPresent()) {
        LOGGER.debug("Create a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setCreatedAt(new Date());
        role.setUpdatedAt(role.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
    } else {
        Role currentRole = optRole.get();
        if (permissionsAreEquals(currentRole, role)) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        LOGGER.debug("Update a system role {}", role.getAssignableType() + ":" + role.getName());
        role.setId(currentRole.getId());
        role.setPermissionAcls(role.getPermissionAcls());
        role.setUpdatedAt(new Date());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
            Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof AbstractManagementException) {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
            LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
            return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
        })).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
    }
}).apply(y)))
1 | Single | toCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_CREATED).throwable(throwable))))).toCompletable();
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.create(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a role", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | Single | toCompletable | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
})).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((role1)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).oldValue(currentRole).role(role1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(RoleAuditBuilder.class).type(EventType.ROLE_UPDATED).throwable(throwable))))).toCompletable();
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleRepository.update(role)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a system role {}", role.getAssignableType() + ":" + role.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a role", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Role, SingleSource<Role>>toJdkFunction((role1)->{
    Event event = new Event(Type.ROLE, new Payload(role1.getId(), role1.getReferenceType(), role1.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(role1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(roleRepository.findAll(referenceType, referenceId).collect(HashSet<Role>::new, Set::add))
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return extensionGrantRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find an extension grant using its ID: {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find an extension grant using its ID: %s", id), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, newExtensionGrant.getName())).hasElement().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a extension grant", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<ExtensionGrant>>toJdkFunction((empty)->{
    if (!empty) {
        throw new ExtensionGrantAlreadyExistsException(newExtensionGrant.getName());
    } else {
        String extensionGrantId = RandomString.generate();
        ExtensionGrant extensionGrant = new ExtensionGrant();
        extensionGrant.setId(extensionGrantId);
        extensionGrant.setDomain(domain);
        extensionGrant.setName(newExtensionGrant.getName());
        extensionGrant.setGrantType(newExtensionGrant.getGrantType());
        extensionGrant.setIdentityProvider(newExtensionGrant.getIdentityProvider());
        extensionGrant.setCreateUser(newExtensionGrant.isCreateUser());
        extensionGrant.setUserExists(newExtensionGrant.isUserExists());
        extensionGrant.setType(newExtensionGrant.getType());
        extensionGrant.setConfiguration(newExtensionGrant.getConfiguration());
        extensionGrant.setCreatedAt(new Date());
        extensionGrant.setUpdatedAt(extensionGrant.getCreatedAt());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.create(extensionGrant)).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
            Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
        }).apply(x)))));
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant1)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant1.getId(), ReferenceType.DOMAIN, extensionGrant1.getDomain(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant1)));
}).apply(x)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v))))))).flatMap((v)->RxJava2Adapter.singleToMono((Single<ExtensionGrant>)RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, Single<ExtensionGrant>>)(oldExtensionGrant)->{
    ExtensionGrant extensionGrantToUpdate = new ExtensionGrant(oldExtensionGrant);
    extensionGrantToUpdate.setName(updateExtensionGrant.getName());
    extensionGrantToUpdate.setGrantType(updateExtensionGrant.getGrantType() != null ? updateExtensionGrant.getGrantType() : oldExtensionGrant.getGrantType());
    extensionGrantToUpdate.setIdentityProvider(updateExtensionGrant.getIdentityProvider());
    extensionGrantToUpdate.setCreateUser(updateExtensionGrant.isCreateUser());
    extensionGrantToUpdate.setUserExists(updateExtensionGrant.isUserExists());
    extensionGrantToUpdate.setConfiguration(updateExtensionGrant.getConfiguration());
    extensionGrantToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantRepository.update(extensionGrantToUpdate)).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
        Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
    }).apply(z)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((extensionGrant)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).oldValue(oldExtensionGrant).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_UPDATED).throwable(throwable)))));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a extension grant", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a extension grant", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(id)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(id)))).flatMapSingle((tokenGranter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(extensionGrantRepository.findByDomainAndName(domain, updateExtensionGrant.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).single().flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v)))))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<ExtensionGrant>, SingleSource<ExtensionGrant>>toJdkFunction((existingTokenGranter)->{
    if (existingTokenGranter.isPresent() && !existingTokenGranter.get().getId().equals(id)) {
        throw new ExtensionGrantAlreadyExistsException("Extension grant with the same name already exists");
    }
    return RxJava2Adapter.monoToSingle(Mono.just(tokenGranter));
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ExtensionGrant, SingleSource<ExtensionGrant>>toJdkFunction((extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrant.getId(), ReferenceType.DOMAIN, extensionGrant.getDomain(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(extensionGrant)));
}).apply(z)))
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))).flatMapSingle((extensionGrant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v))))))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to extension grant: {}", extensionGrantId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete extension grant: %s", extensionGrantId), ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantRepository.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrantId)))).flatMapSingle((extensionGrant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType() + "~" + extensionGrant.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v)))))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Set<Application>, SingleSource<ExtensionGrant>>toJdkFunction((applications)->{
    if (applications.size() > 0) {
        throw new ExtensionGrantWithApplicationsException();
    }
    return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
        if (clients1.size() == 0) {
            return extensionGrant;
        }
        Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
        if (extensionGrant.getCreatedAt().equals(minDate)) {
            throw new ExtensionGrantWithApplicationsException();
        } else {
            return extensionGrant;
        }
    });
}).apply(v)))
1 | Single | zip | METHOD_INVOCATION | return Single.zip(applicationService.findByDomainAndExtensionGrant(domain, extensionGrant.getGrantType()), RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(findByDomain(domain)).collectList()), (clients1,extensionGrants)->{
    if (clients1.size() == 0) {
        return extensionGrant;
    }
    Date minDate = Collections.min(extensionGrants.stream().map(ExtensionGrant::getCreatedAt).collect(Collectors.toList()));
    if (extensionGrant.getCreatedAt().equals(minDate)) {
        throw new ExtensionGrantWithApplicationsException();
    } else {
        return extensionGrant;
    }
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<ExtensionGrant, CompletableSource>)(extensionGrant)->{
    Event event = new Event(Type.EXTENSION_GRANT, new Payload(extensionGrantId, ReferenceType.DOMAIN, domain, Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete(()->auditService.report(AuditBuilder.builder(ExtensionGrantAuditBuilder.class).principal(principal).type(EventType.EXTENSION_GRANT_DELETED).extensionGrant(extensionGrant))))
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(extensionGrantRepository.delete(extensionGrantId)).then(RxJava2Adapter.singleToMono(eventService.create(event)))).toCompletable().doOnComplete
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(repository.findById(id)).switchIfEmpty(Mono.error(new InvalidPermissionTicketException()))).flatMapSingle((permissionTicket)->RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(repository.delete(permissionTicket.getId())).then(Mono.just(permissionTicket))));
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findAll(referenceType, referenceId, page, size).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find groups by {} {}", referenceType, referenceId, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users by %s %s", referenceType, referenceId), ex)));
});
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findByName(referenceType, referenceId, groupName).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its name: {} for the {} {}", groupName, referenceType, referenceId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its name: %s for the %s %s", groupName, referenceType, referenceId), ex)));
});
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(groupRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its id: %s", id), ex)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return groupRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a group using its ID: %s", id), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(findByName(referenceType, referenceId, newGroup.getName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new GroupAlreadyExistsException(newGroup.getName());
    } else {
        String groupId = RandomString.generate();
        Group group = new Group();
        group.setId(groupId);
        group.setReferenceType(referenceType);
        group.setReferenceId(referenceId);
        group.setName(newGroup.getName());
        group.setDescription(newGroup.getDescription());
        group.setMembers(newGroup.getMembers());
        group.setCreatedAt(new Date());
        group.setUpdatedAt(group.getCreatedAt());
        return group;
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to create a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a group", ex)));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(this::setMembers).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::create).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap((e)->RxJava2Adapter.maybeToMono(groupRepository.findByName(referenceType, referenceId, updateGroup.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
})))).flatMapSingle((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(setMembers(groupToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a group", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, id)).flatMap((e)->RxJava2Adapter.maybeToMono(groupRepository.findByName(referenceType, referenceId, updateGroup.getName())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Optional<io.gravitee.am.model.Group> optionalGroup)->{
    if (optionalGroup.isPresent() && !optionalGroup.get().getId().equals(id)) {
        throw new GroupAlreadyExistsException(updateGroup.getName());
    }
    return e;
})))).flatMapSingle((oldGroup)->{
    Group groupToUpdate = new Group(oldGroup);
    groupToUpdate.setName(updateGroup.getName());
    groupToUpdate.setDescription(updateGroup.getDescription());
    groupToUpdate.setMembers(updateGroup.getMembers());
    groupToUpdate.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(setMembers(groupToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::update).apply(v)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
        Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((group)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).oldValue(oldGroup).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction(groupRepository::update).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group)->{
    Event event = new Event(Type.GROUP, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.UPDATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(group)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(findById(referenceType, referenceId, groupId)).flatMap((group)->RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).throwable(throwable))))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
});
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(groupRepository.delete(groupId)).then(RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE))))))).doOnComplete(()->auditService.report(AuditBuilder.builder(GroupAuditBuilder.class).principal(principal).type(EventType.GROUP_DELETED).group(group))))
1 | Completable | fromSingle | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.fromSingle(eventService.create(new Event(Type.DOMAIN, new Payload(group.getId(), group.getReferenceType(), group.getReferenceId(), Action.DELETE)))))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable())
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(alertNotifierRepository.delete(alertNotifier.getId())).then(RxJava2Adapter.singleToMono(eventService.create(new Event(Type.ALERT_NOTIFIER, new Payload(alertNotifier.getId(), alertNotifier.getReferenceType(), alertNotifier.getReferenceId(), Action.DELETE)))).then())).doOnComplete(()->auditService.report(AuditBuilder.builder(AlertNotifierAuditBuilder.class).type(EventType.ALERT_NOTIFIER_DELETED).alertNotifier(alertNotifier).principal(deletedBy))).as
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(referenceType, referenceId, id).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its referenceType {}, referenceId {} and id {}", referenceType, referenceId, id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its referenceType %s, referenceId %s and id %s", referenceType, referenceId, id), ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return flowRepository.findById(id).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to find a flow using its id {}", id, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to find a flow using its id %s", id), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FlowNotFoundException(id)))).flatMapSingle((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.update(flowToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update a flow", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(flowRepository.findById(referenceType, referenceId, id)).switchIfEmpty(Mono.error(new FlowNotFoundException(id)))).flatMapSingle((oldFlow)->{
    if (flow.getType() != null && oldFlow.getType() != flow.getType()) {
        throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
    }
    Flow flowToUpdate = new Flow(oldFlow);
    flowToUpdate.setName(flow.getName());
    flowToUpdate.setEnabled(flow.isEnabled());
    flowToUpdate.setCondition(flow.getCondition());
    flowToUpdate.setPre(flow.getPre());
    flowToUpdate.setPost(flow.getPost());
    flowToUpdate.setUpdatedAt(new Date());
    if (flow.getOrder() != null) {
        flowToUpdate.setOrder(flow.getOrder());
    }
    if (Type.ROOT == flowToUpdate.getType()) {
        flowToUpdate.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.update(flowToUpdate)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
        Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
        if (Type.ROOT == flow1.getType()) {
            flow1.setPost(emptyList());
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
    }).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((flow1)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).oldValue(oldFlow).flow(flow1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_UPDATED).throwable(throwable)))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), flow1.getReferenceType(), flow1.getReferenceId(), Action.UPDATE));
    if (Type.ROOT == flow1.getType()) {
        flow1.setPost(emptyList());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(flowRepository.findById(id)).switchIfEmpty(Mono.error(new FlowNotFoundException(id))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to delete flow: {}", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error has occurred while trying to delete flow: %s", id), ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Flow, CompletableSource>)(flow)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow.getId(), flow.getReferenceType(), flow.getReferenceId(), Action.DELETE));
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).throwable(throwable)))));
}).apply(y)))
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(flowRepository.delete(id)).then(RxJava2Adapter.singleToMono(eventService.create(event))).then()).doOnComplete(()->auditService.report(AuditBuilder.builder(FlowAuditBuilder.class).principal(principal).type(EventType.FLOW_DELETED).flow(flow))))
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        InputStream resourceAsStream = this.getClass().getResourceAsStream(DEFINITION_PATH);
        String schema = IOUtils.toString(resourceAsStream, defaultCharset());
        emitter.onSuccess(schema);
    } catch (Exception e) {
        emitter.onError(new TechnicalManagementException("An error has occurred while trying load flow schema", e));
    }
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowRepository.findAll(referenceType, referenceId)).collectList().flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Flow>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Flow>, Single<List<Flow>>>)(existingFlows)->{
    final Map<String, Flow> mapOfExistingFlows = existingFlows.stream().filter((f)->(application == null && f.getApplication() == null) || (application != null && application.equals(f.getApplication()))).filter((f)->f.getId() != null).distinct().collect(Collectors.toMap(Flow::getId, java.util.function.Function.identity()));
    flows.forEach((flow)->{
        if (flow.getId() != null && mapOfExistingFlows.containsKey(flow.getId()) && mapOfExistingFlows.get(flow.getId()).getType() != flow.getType()) {
            throw new InvalidParameterException("Type of flow \'" + flow.getName() + "\' can\'t be updated");
        }
    });
    final List<String> flowIdsToDelete = new ArrayList<>(mapOfExistingFlows.keySet());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
        if (flowToCreateOrUpdate.getId() != null) {
            flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
        }
        if (existingFlows == null || existingFlows.isEmpty()) {
            return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
        }
        boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
        return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }).sorted(getFlowComparator()).toList()).flatMap((persistedFlows)->RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while trying to update flows", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to update flows", ex)));
}))
1 | Single | OTHER
1 | Single | OTHER
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList())
1 | Observable | sorted | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted(getFlowComparator()).toList
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle((flowToCreateOrUpdate)->{
    if (flowToCreateOrUpdate.getId() != null) {
        flowIdsToDelete.remove(flowToCreateOrUpdate.getId());
    }
    if (existingFlows == null || existingFlows.isEmpty()) {
        return create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
    }
    boolean updateRequired = flowToCreateOrUpdate.getId() != null && mapOfExistingFlows.containsKey(flowToCreateOrUpdate.getId());
    return updateRequired ? update(referenceType, referenceId, flowToCreateOrUpdate.getId(), flowToCreateOrUpdate) : create0(referenceType, referenceId, application, flowToCreateOrUpdate, principal);
}).sorted
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flows).flatMapSingle
1 | Completable | toSingleDefault | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault(persistedFlows))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | Observable.fromIterable(flowIdsToDelete).flatMapCompletable(this::delete).toSingleDefault
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flowIdsToDelete).flatMapCompletable
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(flowRepository.create(flow)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error has occurred while trying to create a flow", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while trying to create a flow", ex)));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Flow, SingleSource<Flow>>toJdkFunction((flow1)->{
    Event event = new Event(io.gravitee.am.common.event.Type.FLOW, new Payload(flow1.getId(), referenceType, referenceId, Action.CREATE));
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(eventService.create(event)).flatMap((__)->Mono.just(flow1)));
}).apply(v)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.findById(ENTRYPOINT_ID, ORGANIZATION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = cut.createDefaults(organization).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Entrypoint> obs = cut.createDefaults(organization).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.create(ORGANIZATION_ID, newEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.create(ORGANIZATION_ID, newEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, new UpdateEntrypoint(), user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Entrypoint> obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.update(ENTRYPOINT_ID, ORGANIZATION_ID, updateEntrypoint, user).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = cut.delete(ENTRYPOINT_ID, ORGANIZATION_ID, user).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> obs = cut.delete(ENTRYPOINT_ID, ORGANIZATION_ID, user).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Flowable | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.create(request, DOMAIN_ID, CLIENT_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.findById("id").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.remove("id").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<PermissionTicket> testObserver = service.remove("id").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = GrantTypeUtils.validateGrantTypes(application).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.findById("my-consent").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.findById("my-consent").test()
1 | Maybe | subscribe | METHOD_INVOCATION | scopeApprovalService.findById("my-consent").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ScopeApproval> testSubscriber = scopeApprovalService.findByDomainAndUser(DOMAIN, "userId").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<HashSet<ScopeApproval>> testObserver = scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").collect(HashSet<ScopeApproval>::new, Set::add).test()
1 | Flowable | collect | METHOD_INVOCATION | scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").collect(HashSet<ScopeApproval>::new, Set::add).test
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = scopeApprovalService.findByDomainAndUserAndClient(DOMAIN, "userId", "clientId").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.revokeByConsent("my-domain", "user-id", "my-consent").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeApprovalService.revokeByConsent("my-domain", "user-id", "my-consent").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUser("my-domain", "user-id", new DefaultUser("user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUser("my-domain", "user-id", new DefaultUser("user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUserAndClient("my-domain", "user-id", "client-id", new DefaultUser("user-id")).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = scopeApprovalService.revokeByUserAndClient("my-domain", "user-id", "client-id", new DefaultUser("user-id")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.findById("bot-detection").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.findById("bot-detection").test()
1 | Maybe | subscribe | METHOD_INVOCATION | botDetectionService.findById("bot-detection").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<BotDetection> testSubscriber = botDetectionService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = botDetectionService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.create(DOMAIN, newBotDetection).test()
1 | Single | subscribe | METHOD_INVOCATION | botDetectionService.create(DOMAIN, newBotDetection).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.update(DOMAIN, "bot-detection", updateBotDetection).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.update(DOMAIN, "bot-detection", updateBotDetection).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, "bot-detection").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, "bot-detection").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = botDetectionService.delete(DOMAIN, detection.getId()).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = groupService.findById("my-group").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = groupService.findById("my-group").test()
1 | Maybe | subscribe | METHOD_INVOCATION | groupService.findById("my-group").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Group>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(groupService.findByDomain(DOMAIN)).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = groupService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Group>> testObserver = groupService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | subscribe | METHOD_INVOCATION | groupService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.create(DOMAIN, newGroup).test()
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(DOMAIN, newGroup).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(DOMAIN, newGroup).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.update(DOMAIN, "my-group", updateGroup).test()
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(DOMAIN, "my-group", updateGroup).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(DOMAIN, "my-group", updateGroup).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").test()
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(ReferenceType.DOMAIN, DOMAIN, "my-group").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.assignRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.assignRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.revokeRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = groupService.revokeRoles(ReferenceType.DOMAIN, DOMAIN, group.getId(), rolesIds).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = groupService.findMembers(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Page<User>> observer = groupService.findMembers(ReferenceType.DOMAIN, DOMAIN, "group-id", 0, 0).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = domainService.findById("my-domain").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = domainService.findById("my-domain").test()
1 | Maybe | subscribe | METHOD_INVOCATION | domainService.findById("my-domain").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Domain>> testObserver = domainService.findAll().test()
1 | Single | subscribe | METHOD_INVOCATION | domainService.findAll().subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Domain> testSubscriber = domainService.findByIdIn(Arrays.asList("1", "2")).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = domainService.findByIdIn(Arrays.asList("1", "2")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain, new DefaultUser("username")).test()
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | domainService.create(ORGANIZATION_ID, ENVIRONMENT_ID, newDomain).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = domainService.patch("my-domain", patchDomain).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = domainService.delete(DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<Domain> obs = domainService.findAllByCriteria(criteria).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = resourceService.findById("my-resource").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = resourceService.findById("my-resource").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ServiceResource> testObserver = resourceService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.create(DOMAIN, resource, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.create(DOMAIN, resource, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.update(DOMAIN, record.getId(), resource, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<ServiceResource> testObserver = resourceService.update(DOMAIN, UUID.randomUUID().toString(), new UpdateServiceResource(), null).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, UUID.randomUUID().toString(), null).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, record.getId(), null).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = resourceService.delete(DOMAIN, record.getId(), null).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findById("my-user").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findById("my-user").test()
1 | Maybe | subscribe | METHOD_INVOCATION | userService.findById("my-user").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<User> testSubscriber = userService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = userService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<User>> testObserver = userService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | subscribe | METHOD_INVOCATION | userService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findByDomainAndUsername(DOMAIN, "my-user").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = userService.findByDomainAndUsername(DOMAIN, "my-user").test()
1 | Maybe | subscribe | METHOD_INVOCATION | userService.findByDomainAndUsername(DOMAIN, "my-user").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.create(DOMAIN, newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(DOMAIN, newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(DOMAIN, newUser).test()
1 | Single | subscribe | METHOD_INVOCATION | userService.create(DOMAIN, newUser).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | userService.create(DOMAIN, newUser).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(DOMAIN, "my-user", updateUser).test()
1 | Single | subscribe | METHOD_INVOCATION | userService.update(DOMAIN, "my-user", updateUser).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | userService.update(DOMAIN, "my-user", updateUser).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = formService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Form>> testObserver = formService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Form> obs = formService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.findByTimeFrame(0, 1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.findByTimeFrame(0, 1).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.create(newEvent).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = eventService.create(newEvent).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = membershipService.addOrUpdate(ORGANIZATION_ID, membership).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addEnvironmentUserRoleIfNecessary("orga#1", "env#1", membership, principal).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addEnvironmentUserRoleIfNecessary("orga#1", "env#1", membership, principal).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addDomainUserRoleIfNecessary("orga#1", "env#1", "domain#1", membership, principal).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> completable = membershipService.addDomainUserRoleIfNecessary("orga#1", "env#1", "domain#1", membership, principal).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Membership> obs = membershipService.setPlatformAdmin(userId).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.findById(ENVIRONMENT_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Environment> obs = cut.findAll(ORGANIZATION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createDefault().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createDefault().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Environment> obs = cut.createOrUpdate(ORGANIZATION_ID, ENVIRONMENT_ID, newEnvironment, createdBy).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.findById("my-credential").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.findById("my-credential").test()
1 | Maybe | subscribe | METHOD_INVOCATION | credentialService.findById("my-credential").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialService.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByUserId(ReferenceType.DOMAIN, DOMAIN, "user-id").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testObserver = credentialService.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByUsername(ReferenceType.DOMAIN, DOMAIN, "username").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Credential> testSubscriber = credentialService.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = credentialService.findByCredentialId(ReferenceType.DOMAIN, DOMAIN, "credentialId").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.create(newCredential).test()
1 | Single | subscribe | METHOD_INVOCATION | credentialService.create(newCredential).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.update(updateCredential).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = credentialService.delete("my-credential").test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.getById(ALERT_TRIGGER_ID).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.getById(ALERT_TRIGGER_ID).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertTrigger> obs = cut.findByDomainAndCriteria(DOMAIN_ID, criteria).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.createOrUpdate(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertTrigger> obs = cut.createOrUpdate(ReferenceType.DOMAIN, DOMAIN_ID, patchAlertTrigger, new DefaultUser(USERNAME)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = loginAttemptService.loginFailed(loginAttemptCriteria, accountSettings).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = loginAttemptService.loginFailed(loginAttemptCriteria, accountSettings).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findById("my-client").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findById("my-client").test()
1 | Maybe | subscribe | METHOD_INVOCATION | applicationService.findById("my-client").subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findByDomainAndClientId(DOMAIN, "my-client").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.findByDomainAndClientId(DOMAIN, "my-client").test()
1 | Maybe | subscribe | METHOD_INVOCATION | applicationService.findByDomainAndClientId(DOMAIN, "my-client").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findByDomain(DOMAIN).test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomain(DOMAIN).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationService.findByDomain(DOMAIN, 1, 1).test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomain(DOMAIN, 1, 1).subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testSubscriber = applicationService.findByIdentityProvider("client-idp").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = applicationService.findByIdentityProvider("client-idp").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Application> testObserver = applicationService.findByCertificate("client-certificate").test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSub = applicationService.findByCertificate("client-certificate").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant").test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findByDomainAndExtensionGrant(DOMAIN, "client-extension-grant").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Application>> testObserver = applicationService.findAll().test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findAll().subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Application>> testObserver = applicationService.findAll(1, 1).test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.findAll(1, 1).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = applicationService.countByDomain(DOMAIN).test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.countByDomain(DOMAIN).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = applicationService.count().test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.count().subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationService.create(DOMAIN, newClient, user).test()
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | applicationService.create(DOMAIN, newClient).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(new Application()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(toCreate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.create(DOMAIN, newClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Application> testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(new Application()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.update(toPatch).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete(existingClient.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete(existingClient.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.delete("my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.patch(DOMAIN, "my-client", patchClient).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = applicationService.renewClientSecret(DOMAIN, "my-client").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findById("my-role").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findById("my-role").test()
1 | Maybe | subscribe | METHOD_INVOCATION | roleService.findById("my-role").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = roleService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Role>> testObserver = roleService.findByIdIn(Arrays.asList("my-role")).test()
1 | Single | subscribe | METHOD_INVOCATION | roleService.findByIdIn(Arrays.asList("my-role")).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.create(DOMAIN, newRole).test()
1 | Single | subscribe | METHOD_INVOCATION | roleService.create(DOMAIN, newRole).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | roleService.create(DOMAIN, newRole).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(DOMAIN, "my-role", updateRole).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | roleService.update(DOMAIN, "my-role", updateRole).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = roleService.update(ReferenceType.ORGANIZATION, ORGANIZATION_ID, "my-role", updateRole, null).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = roleService.delete(ReferenceType.DOMAIN, DOMAIN, "my-role").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.findById("my-extension-grant").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.findById("my-extension-grant").test()
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantService.findById("my-extension-grant").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<ExtensionGrant> testSubscriber = extensionGrantService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = extensionGrantService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.create(DOMAIN, newExtensionGrant).test()
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | extensionGrantService.create(DOMAIN, newExtensionGrant).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.update(DOMAIN, "my-extension-grant", updateExtensionGrant).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, extensionGrant2.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = extensionGrantService.delete(DOMAIN, "my-extension-grant").test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(ReferenceType.ORGANIZATION, ORG, newUser).test()
1 | Single | subscribe | METHOD_INVOCATION | userService.create(ReferenceType.ORGANIZATION, ORG, newUser).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | userService.create(ReferenceType.ORGANIZATION, ORG, newUser).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).test()
1 | Single | subscribe | METHOD_INVOCATION | userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | userService.update(ReferenceType.ORGANIZATION, ORG, "my-user", updateUser).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.delete("my-user").test()
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete("my-user").subscribe(testObserver);
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.getById(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.getById(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = cut.findByDomainAndCriteria(DOMAIN_ID, criteria).test()
1 | Flowable | test | METHOD_INVOCATION | final TestSubscriber<AlertNotifier> obs = cut.findByReferenceAndCriteria(ReferenceType.DOMAIN, DOMAIN_ID, criteria).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.create(ReferenceType.DOMAIN, DOMAIN_ID, newAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.update(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<AlertNotifier> obs = cut.update(ReferenceType.DOMAIN, DOMAIN_ID, ALERT_NOTIFIER_ID, patchAlertNotifier, new DefaultUser(USERNAME)).test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, singletonList("constraint.gravitee.io")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = DomainValidator.validate(domain, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, emptyList()).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, singletonList(vhost.getHost())).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, singletonList(domainConstraint)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io", domainConstraint)).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validate(vhost, Arrays.asList("test.gravitee.io", "other.gravitee.io")).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = VirtualHostValidator.validateDomainVhosts(domain, otherDomains).blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = emailTemplateService.findAll(ReferenceType.DOMAIN, DOMAIN).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).test()
1 | Maybe | subscribe | METHOD_INVOCATION | emailTemplateService.findByDomainAndTemplate(DOMAIN, Template.LOGIN.template()).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.create(DOMAIN, newEmail).test()
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.create(DOMAIN, newEmail).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.create(DOMAIN, newEmail).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.update(DOMAIN, "my-email", updateEmail).test()
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.update(DOMAIN, "my-email", updateEmail).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | emailTemplateService.update(DOMAIN, "my-email", new UpdateEmail()).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete("my-email").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete("my-email").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = emailTemplateService.delete(email.getId()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Email>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid)).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Email> testSubscriber = emailTemplateService.copyFromClient(DOMAIN, sourceUid, targetUid).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = factorService.findById("my-factor").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = factorService.findById("my-factor").test()
1 | Maybe | subscribe | METHOD_INVOCATION | factorService.findById("my-factor").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Factor> testObserver = factorService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = factorService.findByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.create(DOMAIN, newFactor).test()
1 | Single | subscribe | METHOD_INVOCATION | factorService.create(DOMAIN, newFactor).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | factorService.create(DOMAIN, newFactor).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = factorService.update(DOMAIN, "my-factor", updateFactor).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, "my-factor").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, factor.getId()).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, "my-factor").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = factorService.delete(DOMAIN, factor.getId()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.findById("my-identity-provider").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.findById("my-identity-provider").test()
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById("my-identity-provider").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> testObserver = identityProviderService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = identityProviderService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<IdentityProvider> obs = identityProviderService.findAll(ReferenceType.ORGANIZATION).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.create(DOMAIN, newIdentityProvider).test()
1 | Single | subscribe | METHOD_INVOCATION | identityProviderService.create(DOMAIN, newIdentityProvider).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.update(DOMAIN, "my-identity-provider", updateIdentityProvider).test()
1 | Single | subscribe | METHOD_INVOCATION | identityProviderService.update(DOMAIN, "my-identity-provider", updateIdentityProvider).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = identityProviderService.delete(DOMAIN, "my-identity-provider").test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = userValidator.validate(user).blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList()).test()
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, DOMAIN)).collectList()).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.create(ReferenceType.DOMAIN, DOMAIN, newFlow).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.create(ReferenceType.DOMAIN, DOMAIN, newFlow).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.update(ReferenceType.DOMAIN, DOMAIN, ID, updateFlow).test()
1 | Single | subscribe | METHOD_INVOCATION | flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", updateFlow).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | flowService.update(ReferenceType.DOMAIN, DOMAIN, "my-flow", new Flow()).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = flowService.delete("my-flow").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(newFlow, newFlow2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow2)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow, updateFlow)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = flowService.createOrUpdate(ReferenceType.DOMAIN, DOMAIN, Arrays.asList(updateFlow2)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = tagService.findById("my-tag", Organization.DEFAULT).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = tagService.findById("my-tag", Organization.DEFAULT).test()
1 | Maybe | subscribe | METHOD_INVOCATION | tagService.findById("my-tag", Organization.DEFAULT).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = tagService.create(newTag, Organization.DEFAULT, null).test()
1 | Single | subscribe | METHOD_INVOCATION | tagService.create(newTag, Organization.DEFAULT, null).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | tagService.create(newTag, Organization.DEFAULT, null).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | tagService.delete("my-tag", Organization.DEFAULT, null).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | tagService.delete("my-tag", Organization.DEFAULT, null).subscribe(testObserver);
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid(null).test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("").test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid(null).test()
1 | Single | test | METHOD_INVOCATION | obs = reCaptchaService.isValid("").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = reCaptchaService.isValid("any").test()
1 | Single | RETURN_TYPE
1 | Single | fromFuture | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromFuture(spyHttpRequest))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.findById("my-scope").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.findById("my-scope").test()
1 | Maybe | subscribe | METHOD_INVOCATION | scopeService.findById("my-scope").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Scope>> testObserver = scopeService.findByDomain(DOMAIN, 0, Integer.MAX_VALUE).test()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.findByDomain(DOMAIN, 0, 1).subscribe(testObserver);
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeService.findByDomainAndKey(DOMAIN, "my-scope").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Scope> testObserver = scopeService.findByDomainAndKey(DOMAIN, "my-scope").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, Collections.emptyList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, searchingScopes).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Scope>> testObserver = scopeService.findByDomainAndKeys(DOMAIN, searchingScopes).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.create(DOMAIN, newScope).test()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | scopeService.create(DOMAIN, newScope).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, scopeId, patch).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, scopeId, patch).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.patch(DOMAIN, "toPatchId", new PatchScope()).test()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.patch(DOMAIN, "my-scope", patchScope).subscribe(testObserver);
1 | Single | subscribe | METHOD_INVOCATION | scopeService.patch(DOMAIN, "my-scope", patchScope).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, "toUpdateId", new UpdateScope()).test()
1 | Single | subscribe | METHOD_INVOCATION | scopeService.update(DOMAIN, "toUpdateId", updateScope).subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, scopeId, updateScope).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.update(DOMAIN, "toUpdateId", new UpdateSystemScope()).test()
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Completable | subscribe | METHOD_INVOCATION | scopeService.delete("my-scope", false).subscribe(testObserver);
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("my-scope", false).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("my-scope", false).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.delete("scope-id", false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, Arrays.asList("unknown")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> testObserver = scopeService.validateScope(DOMAIN, Arrays.asList("valid")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.findById("my-certificate").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.findById("my-certificate").test()
1 | Maybe | subscribe | METHOD_INVOCATION | certificateService.findById("my-certificate").subscribe(testObserver);
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Certificate> testSubscriber = certificateService.findByDomain(DOMAIN).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = certificateService.findByDomain(DOMAIN).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.delete("my-certificate").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = certificateService.create("my-domain").test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 1).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 1).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthenticationFlowContext> testObserver = service.loadContext(SESSION_ID, 2).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = service.clearContext(SESSION_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> testObserver = service.clearContext(null).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokensByDomain(DOMAIN).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TotalToken> testObserver = tokenService.findTotalTokens().test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = tokenService.deleteByUserId("userId").test()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test/subpath/subpath2_with-and.dot/AND_UPPERCASE").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate(null).blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/////test////").blockingGet()
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = PathValidator.validate("/test$:\\;,+").blockingGet()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.findById(ORGANIZATION_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createDefault().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.createOrUpdate(ORGANIZATION_ID, newOrganization, createdBy).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.update(ORGANIZATION_ID, patchOrganization, new DefaultUser("username")).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Organization> obs = cut.update(ORGANIZATION_ID, patchOrganization, new DefaultUser("username")).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.update(new NewResource(), DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(newResource, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.create(newResource, DOMAIN_ID, CLIENT_ID, USER_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<Resource> testSubscriber = service.listByDomainAndClientAndUser(DOMAIN_ID, CLIENT_ID, USER_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = service.findByDomain(DOMAIN_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<Resource>> testObserver = service.findByDomain(DOMAIN_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testObserver = service.findByResources(Collections.emptyList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClient(DOMAIN_ID, CLIENT_ID, 0, Integer.MAX_VALUE).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber testSubscriber = service.findByDomainAndClientAndResources(DOMAIN_ID, CLIENT_ID, Collections.emptyList()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = service.findByDomainAndClientResource(DOMAIN_ID, CLIENT_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Resource> testObserver = service.update(toUpdate).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.delete(toDelete).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID)).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testSubscriber = service.findAccessPolicies(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<AccessPolicy>> testObserver = RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(service.findAccessPoliciesByResources(resourceIds)).collectList()).test()
1 | Flowable | test | METHOD_INVOCATION | TestSubscriber<AccessPolicy> testObserver = service.findAccessPoliciesByResources(resourceIds).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = service.countAccessPolicyByResource(RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Long> testObserver = service.countAccessPolicyByResource(RESOURCE_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(POLICY_ID).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.findAccessPolicy(POLICY_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.createAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.createAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AccessPolicy> testObserver = service.updateAccessPolicy(accessPolicy, DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.deleteAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = service.deleteAccessPolicy(DOMAIN_ID, CLIENT_ID, USER_ID, RESOURCE_ID, POLICY_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(Collections.emptyList()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<String, Map<String, Object>>> testObserver = service.getMetadata(resources).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->jwtProcessor.process(idToken, null)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(ex.getMessage())));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(introspectionTokenService.introspect(token, offlineVerification)).flatMap((e)->RxJava2Adapter.maybeToMono(clientSyncService.findByDomainAndClientId(e.getDomain(), e.getAud())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.oidc.Client client)->new OAuth2AuthResponse(e, client))))).subscribe((accessToken)->handler.handle(Future.succeededFuture(accessToken)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderRepository.findAll(ReferenceType.DOMAIN, domain.getId()).blockingForEach(this::updateAuthenticationProvider);
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderRepository.findById(identityProviderId).subscribe((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for domain {}", identityProviderId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} identity provider for domain {}", eventType, domain.getName(), error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | subscribe | METHOD_INVOCATION | emailRepository.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe(this::updateEmail, (error)->logger.error("Unable to initialize emails for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | emailRepository.findById(emailId).subscribe((email)->{
    if (emails.containsKey(emailId) && !email.isEnabled()) {
        removeEmail(emailId);
    } else {
        updateEmail(email);
    }
    logger.info("Email {} {}d for domain {}", emailId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} email for domain {}", eventType, domain.getName(), error), ()->logger.error("No email found with id {}", emailId));
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
    RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain.getId())).collectList().flatMap((reporters)->RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe((tupleReportersContext)->{
        if (!tupleReportersContext.getT1().isEmpty()) {
            tupleReportersContext.getT1().forEach((reporter)->{
                startReporterProvider(reporter, tupleReportersContext.getT2());
            });
            logger.info("Reporters loaded for domain {}", domain.getName());
        } else {
            logger.info("\tThere is no reporter to start");
        }
    }, (err)->{
        logger.error("Reporter service can not be started", err);
    });
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterRepository.findByDomain(domain.getId())).collectList().flatMap((reporters)->RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Environment env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.utils.GraviteeContext ctx)->Tuples.of(reporters, ctx)))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe((tupleReportersContext)->{
    if (!tupleReportersContext.getT1().isEmpty()) {
        tupleReportersContext.getT1().forEach((reporter)->{
            startReporterProvider(reporter, tupleReportersContext.getT2());
        });
        logger.info("Reporters loaded for domain {}", domain.getName());
    } else {
        logger.info("\tThere is no reporter to start");
    }
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe((tupleReporterContext)->{
    updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx)))))).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe((tupleReporterContext)->{
    if (reporters.containsKey(reporterId)) {
        updateReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    } else {
        startReporterProvider(tupleReporterContext.getT1(), tupleReporterContext.getT2());
    }
    logger.info("Reporter {} {}d for domain {}", reporterId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} reporter for domain {}", eventType, domain.getName(), error));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(reporterRepository.findById(reporterId).flatMapSingle((reporter)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((ctx)->Tuples.of(reporter, ctx))))))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil((userAuthentication)->userAuthentication.getUser() != null || userAuthentication.getLastException() instanceof AccountLockedException).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->authenticate0(client, authentication, authProvider, preAuthenticated)).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.common.auth.user.impl.UserAuthenticationManagerImpl.UserAuthentication, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof BadCredentialsException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid", lastException)));
            } else if (lastException instanceof AccountStatusException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else if (lastException instanceof NegotiateContinueException) {
                return RxJava2Adapter.monoToSingle(Mono.error(lastException));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToSingle(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new BadCredentialsException("The credentials you entered are invalid")));
        }
    } else {
        return connect(user);
    }
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil((userAuthentication)->userAuthentication.getUser() != null).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe((authProvider)->loadUserByUsername0(client, authentication, authProvider, true)).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identities).flatMapMaybe
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<UserAuthenticationManagerImpl.UserAuthentication, MaybeSource<User>>)(userAuthentication)->{
    io.gravitee.am.identityprovider.api.User user = userAuthentication.getUser();
    if (user == null) {
        Throwable lastException = userAuthentication.getLastException();
        if (lastException != null) {
            if (lastException instanceof UsernameNotFoundException) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("Invalid or unknown user")));
            } else {
                logger.error("An error occurs during user authentication", lastException);
                return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("Unable to validate credentials. The user account you are trying to access may be experiencing a problem.", lastException)));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new UsernameNotFoundException("No user found for registered providers")));
        }
    } else {
        return userAuthenticationService.loadPreAuthenticatedUser(user);
    }
}).apply(e)))
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(authProvider)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to load authentication provider " + authProvider + ", an error occurred during the initialization stage"))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            }).apply(a)))));
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->{
    logger.debug("Successfully Authenticated: " + authentication.getPrincipal() + " with provider authentication provider " + authProvider);
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getId());
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return new UserAuthentication(user, null);
}))).onErrorResumeNext((error)->{
    logger.debug("Unable to authenticate [{}] with authentication provider [{}]", authentication.getPrincipal(), authProvider, error);
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserAuthentication(null, error)));
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((authenticationProvider)->{
    logger.debug("Authentication attempt using identity provider {} ({})", authenticationProvider, authenticationProvider.getClass().getName());
    return RxJava2Adapter.monoToMaybe(Mono.just(preAuthenticated).flatMap((y)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
        if (preAuth) {
            final String username = authentication.getPrincipal().toString();
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
                final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
                return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
            }).apply(a)))));
        } else {
            return authenticationProvider.loadUserByUsername(authentication);
        }
    }).apply(y)))).switchIfEmpty(Mono.error(new UsernameNotFoundException(authentication.getPrincipal().toString()))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((preAuth)->{
    if (preAuth) {
        final String username = authentication.getPrincipal().toString();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), username, authProvider)).switchIfEmpty(Mono.error(new UsernameNotFoundException(username))).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
            final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
            return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
        }).apply(a)))));
    } else {
        return authenticationProvider.loadUserByUsername(authentication);
    }
}).apply(y)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((user)->{
    final Authentication enhanceAuthentication = new EndUserAuthentication(user, null, authentication.getContext());
    return authenticationProvider.loadPreAuthenticatedUser(enhanceAuthentication);
}).apply(a)))
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<LoginAttempt>, CompletableSource>)(optLoginAttempt)->{
    if (optLoginAttempt.isPresent() && optLoginAttempt.get().isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        Map<String, String> details = new HashMap<>();
        details.put("attempt_id", optLoginAttempt.get().getId());
        return RxJava2Adapter.monoToCompletable(Mono.error(new AccountLockedException("User " + username + " is locked", details)));
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(loginAttemptService.loginFailed(criteria, accountSettings)).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
        if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
            return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
        }
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }).apply(z)))).then());
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<LoginAttempt, CompletableSource>toJdkFunction((loginAttempt)->{
    if (loginAttempt.isAccountLocked(accountSettings.getMaxLoginAttempts())) {
        return userAuthenticationService.lockAccount(criteria, accountSettings, client, user);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(z)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()).subscribe((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", client.getClientName(), domain.getName());
}, (error)->logger.error("An error has occurred when loading applications for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(applicationsSource).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(applicationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()).subscribe((client)->{
    clients.put(client.getId(), client);
    logger.info("Application {} loaded for domain {}", applicationId, domain.getName());
}, (error)->logger.error("An error has occurred when loading application {} for domain {}", applicationId, domain.getName(), error), ()->logger.error("No application found with id {}", applicationId));
1 | Maybe | subscribeOn | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationRepository.findById(applicationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Application::toClient))).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client))).flatMap((v)->RxJava2Adapter.singleToMono((Single<JWT>)RxJavaReactorMigrationUtil.toJdkFunction((Function<JWT, Single<JWT>>)(jwt)->{
    if (offlineVerification || Instant.now().isBefore(Instant.ofEpochSecond(jwt.getIat() + OFFLINE_VERIFICATION_TIMER_SECONDS))) {
        return RxJava2Adapter.monoToSingle(Mono.just(jwt));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(accessTokenRepository.findByToken(jwt.getJti())).switchIfEmpty(Mono.error(new InvalidTokenException("The token is invalid", "Token with JTI [" + jwt.getJti() + "] not found in the database", jwt))).map(RxJavaReactorMigrationUtil.toJdkFunction((accessToken)->{
        if (accessToken.getExpireAt().before(new Date())) {
            throw new InvalidTokenException("The token expired", "Token with JTI [" + jwt.getJti() + "] is expired", jwt);
        }
        return jwt;
    })));
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        LOGGER.debug("An error occurs while decoding JWT access token : {}", token, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    if (ex instanceof InvalidTokenException) {
        InvalidTokenException invalidTokenException = (InvalidTokenException)ex;
        String details = invalidTokenException.getDetails();
        JWT jwt = invalidTokenException.getJwt();
        LOGGER.debug("An error occurs while checking JWT access token validity: {}\n\t - details: {}\n\t - decoded jwt: {}", token, details != null ? details : "none", jwt != null ? jwt.toString() : "{}", invalidTokenException);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(token)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))).switchIfEmpty(Mono.error(new InvalidTokenException("Invalid or unknown client for this token")))).flatMapSingle((client)->jwtService.decodeAndVerify(token, client)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientService.findByDomainAndClientId(jwt.getDomain(), jwt.getAud())).apply(e)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | singlePageRendering.subscribe((params)->render(routingContext, client, params), (exception)->render(routingContext, client, errorParams));
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByDomainAndClientId(domain, clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new ClientNotFoundException(clientId))));
1 | Single | subscribe | METHOD_INVOCATION | flowManager.findByExtensionPoint(extensionPoint, (Client)executionContext.getAttribute(ConstantKeys.CLIENT_CONTEXT_KEY), FlowPredicate.from(executionContext)).subscribe((policies)->handler.handle(Future.succeededFuture(policies)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | authenticationFlowContextService.loadContext(transactionId, version).subscribe((ctx)->{
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_KEY, ctx);
    context.put(ConstantKeys.AUTH_FLOW_CONTEXT_ATTRIBUTES_KEY, ctx.getData());
    context.next();
}, (error)->{
    LOGGER.warn("AuthenticationFlowContext can\'t be loaded", error);
    if (exitOnError) {
        context.fail(error);
    } else {
        context.next();
    }
});
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | certificateRepository.findByDomain(domain.getId()).subscribeOn(Schedulers.io()).subscribe((certificate)->{
    certificateProviderManager.create(certificate);
    certificates.put(certificate.getId(), certificate);
    logger.info("Certificate {} loaded for domain {}", certificate.getName(), domain.getName());
}, (error)->logger.error("An error has occurred when loading certificates for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | certificateRepository.findByDomain(domain.getId()).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | certificateRepository.findById(certificateId).subscribeOn(Schedulers.io()).subscribe((certificate)->{
    try {
        certificateProviderManager.create(certificate);
        certificates.put(certificateId, certificate);
        logger.info("Certificate {} loaded for domain {}", certificateId, domain.getName());
    } catch (Exception ex) {
        logger.error("Unable to load certificate {} for domain {}", certificate.getName(), certificate.getDomain(), ex);
        certificates.remove(certificateId, certificate);
    }
}, (error)->logger.error("An error has occurred when loading certificate {} for domain {}", certificateId, domain.getName(), error), ()->logger.error("No certificate found with id {}", certificateId));
1 | Maybe | subscribeOn | METHOD_INVOCATION | certificateRepository.findById(certificateId).subscribeOn(Schedulers.io()).subscribe
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(userId)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->context.getDelegate().setUser(new User(user)))).flatMap((z)->RxJava2Adapter.singleToMono(userService.enhance(z))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->currentSession)).switchIfEmpty(RxJava2Adapter.singleToMono(cleanupSession(currentSession)))).onErrorResumeNext(cleanupSession(currentSession));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((t)->logger.warn("Unable to restore the session", t)))).doFinally(context::next).subscribe();
1 | Single | doFinally | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(sessionObs).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((t)->logger.warn("Unable to restore the session", t)))).doFinally(context::next).subscribe
1 | Single | RETURN_TYPE
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    currentSession.setValue(null);
    return RxJava2Adapter.monoToSingle(Mono.just(currentSession));
}))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getUserinfoSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(signedResponseAlg)).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->encode(jwt, certificateProvider));
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate())).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->decodeAndVerify(jwt, certificateProvider));
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        String json = new String(Base64.getDecoder().decode(jwt.split("\\.")[1]), "UTF-8");
        emitter.onSuccess(objectMapper.readValue(json, JWT.class));
    } catch (Exception ex) {
        logger.debug("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
});
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    try {
        String encodedToken = certificateProvider.getJwtBuilder().sign(jwt);
        emitter.onSuccess(encodedToken);
    } catch (Exception ex) {
        logger.error("Failed to sign JWT", ex);
        emitter.onError(new InvalidTokenException("The JWT token couldn\'t be signed", ex));
    }
}))
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        Map<String, Object> decodedPayload = certificateProvider.getJwtParser().parse(payload);
        emitter.onSuccess(decodedPayload);
    } catch (Exception ex) {
        logger.error("Failed to decode JWT", ex);
        emitter.onError(new InvalidTokenException("The access token is invalid", ex));
    }
});
1 | Single | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate(client, authentication).subscribe((user)->handler.handle(Future.succeededFuture(new User(user))), (error)->handler.handle(Future.failedFuture(error)));
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Single | subscribe | METHOD_INVOCATION | Single.zip(getClient(clientId), getClient(user.getClient()), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
}).subscribe((__)->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | zip | METHOD_INVOCATION | Single.zip(getClient(clientId), getClient(user.getClient()), (optRequestedClient,optUserClient)->{
    Client requestedClient = optRequestedClient.get();
    Client userClient = optUserClient.get();
    if (requestedClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient == null) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (userClient.getId().equals(requestedClient.getId())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (requestedClient.getIdentities() != null && requestedClient.getIdentities().contains(user.getSource())) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    throw new InvalidRequestException("User is not on a shared identity provider");
}).subscribe
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((io.gravitee.am.identityprovider.api.AuthenticationProvider authenticationProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(request);
    final Authentication authentication = new EndUserAuthentication(z, null, authenticationContext);
    return authenticationProvider.loadPreAuthenticatedUser(authentication);
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    Map<String, Object> additionalInformation = idpUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(idpUser.getAdditionalInformation());
    additionalInformation.put(SOURCE_FIELD, z.getSource());
    additionalInformation.put(Parameters.CLIENT_ID, z.getClient());
    ((DefaultUser)idpUser).setAdditionalInformation(additionalInformation);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(update(z, idpUser, false)).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(a)))
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (user1.getEmail() != null && accountSettings.isSendRecoverAccountEmail()) {
        new Thread(()->emailService.send(Template.BLOCKED_ACCOUNT, user1, client)).start();
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->update(existingUser, principal, afterAuthentication)).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return create(principal, afterAuthentication);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->update(existingUser, principal, afterAuthentication)).onErrorResumeNext
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | subscribe | METHOD_INVOCATION | factorService.findByDomain(domain.getId()).subscribe(this::updateFactor, (error)->logger.error("Unable to initialize factors for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | factorService.findById(factorId).subscribe(this::updateFactor, (error)->logger.error("Unable to load factor for domain {}", domain.getName(), error), ()->logger.error("No factor found with id {}", factorId));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | flowService.findById(flowId).subscribe((flow)->{
    loadFlow(flow);
    flows.put(flow.getId(), flow);
    logger.info("Flow {} has been deployed for domain {}", flowId, domain.getName());
}, (error)->logger.error("Unable to deploy flow {} for domain {}", flowId, domain.getName(), error), ()->logger.error("No flow found with id {}", flowId));
1 | Flowable | subscribe | METHOD_INVOCATION | flowService.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe((flow)->{
    if (flow != null && flow.getId() != null) {
        loadFlow(flow);
        flows.put(flow.getId(), flow);
        logger.info("Flow {} loaded for domain {}", flow.getType(), domain.getName());
    }
}, (error)->logger.error("Unable to initialize flows for domain {}", domain.getName(), error));
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jwtService.encode(new JWT(), client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jwtService.encodeUserinfo(new JWT(), client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userAuthenticationService.connect(user).test()
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findById("aa").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findById("aa").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientA").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientB").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Client>> test = clientSyncService.findTemplates().test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Client> test = clientSyncService.findByClientId("domainAClientA").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm(null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("unknown").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = certificateManager.findByAlgorithm("RS512").test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return null;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, null).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> observer = userAuthenticationManager.authenticate(client, new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return null;
    }
    
    @Override()
    public Object getPrincipal() {
        return "username";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, true).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = introspectionTokenService.introspect(token, false).test()
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.alwaysTrue()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<List<Policy>> obs = flowManager.findByExtensionPoint(ExtensionPoint.PRE_CONSENT, client, FlowPredicate.from(executionContext)).test()
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | enrichAuthFlowContext(context).subscribe((success)->policyChain.doNext(request, response), (error)->policyChain.failWith(PolicyResult.failure(GATEWAY_POLICY_ENRICH_AUTH_FLOW_ERROR_KEY, error.getMessage())));
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = inlineAuthenticationProvider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "ben";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "benspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return credentials;
    }
    
    @Override()
    public Object getPrincipal() {
        return principal;
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Document>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(this.createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCol.find(query).first()), BackpressureStrategy.BUFFER)
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(query).first()), BackpressureStrategy.BUFFER)
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.insertOne(document)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findById(id)).switchIfEmpty(Mono.error(new UserNotFoundException(id)))).flatMapSingle((oldUser)->{
    Document document = new Document();
    document.put(configuration.getUsernameField(), oldUser.getUsername());
    if (updateUser.getCredentials() != null) {
        if (configuration.isUseDedicatedSalt()) {
            byte[] salt = createSalt();
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials(), salt));
            document.put(configuration.getPasswordSaltAttribute(), binaryToTextEncoder.encode(salt));
        } else {
            document.put(configuration.getPasswordField(), passwordEncoder.encode(updateUser.getCredentials()));
        }
    } else {
        document.put(configuration.getPasswordField(), oldUser.getCredentials());
    }
    if (updateUser.getAdditionalInformation() != null) {
        document.putAll(updateUser.getAdditionalInformation());
    }
    document.put(FIELD_CREATED_AT, oldUser.getCreatedAt());
    document.put(FIELD_UPDATED_AT, new Date());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document))).flatMap((updateResult)->RxJava2Adapter.maybeToMono(findById(oldUser.getId())).single()));
});
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(usersCollection.replaceOne(eq(FIELD_ID, oldUser.getId()), document)))
1 | Completable | OTHER
1 | Observable | subscribe | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1))).subscribe();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(usersCollection.createIndex(new Document(configuration.getUsernameField(), 1))).subscribe
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(usersCollection.find(eq(FIELD_ID, userId)).first()), BackpressureStrategy.BUFFER)
1 | Observable | IMPORT
1 | Observable | blockingFirst | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc)).blockingFirst();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc)).blockingFirst
1 | Observable | blockingFirst | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc2)).blockingFirst();
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(collection.insertOne(doc2)).blockingFirst
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "BOB";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("urlHash", Collections.singletonList("#id_token=test")));
        return new DummyAuthenticationContext(Collections.singletonMap("id_token", "test"), dummyRequest);
    }
}).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = createResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while creating user {} from the remote HTTP identity provider", user.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while creating user from the remote HTTP identity provider", ex)));
});
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = updateResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(updateUser.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while updating user {} from the remote HTTP identity provider", updateUser.getUsername(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error has occurred while updating user from the remote HTTP identity provider", ex)));
});
1 | Completable | OTHER
1 | Single | LOCAL_VARIABLE
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(requestHandler).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while deleting user {} from the remote HTTP identity provider", id, ex);
    return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException("An error has occurred while deleting user from the remote HTTP identity provider", ex)));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<HttpResponse<Buffer>, CompletableSource>)(httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = deleteResourceConfiguration.getHttpResponseErrorConditions();
    try {
        processResponse(templateEngine, errorConditions, httpResponse);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    } catch (Exception ex) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    }
}).apply(y)))
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return convert(user.getUsername(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while searching user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred while searching user from the remote HTTP identity provider", ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = resourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authentication.getContext(), userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AuthenticationException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred while calling the remote HTTP identity provider {}", ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new InternalAuthenticationServiceException("An error has occurred while calling the remote HTTP identity provider", ex)));
});
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(requestHandler).map(RxJavaReactorMigrationUtil.toJdkFunction((httpResponse)->{
    final List<HttpResponseErrorCondition> errorConditions = readResourceConfiguration.getHttpResponseErrorConditions();
    Map<String, Object> userAttributes = processResponse(templateEngine, errorConditions, httpResponse);
    return createUser(authenticationContext, userAttributes);
}))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToMaybe(Mono.error(ex));
    }
    LOGGER.error("An error has occurred when loading pre-authenticated user {} from the remote HTTP identity provider", user.getUsername() != null ? user.getUsername() : user.getEmail(), ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error has occurred when loading pre-authenticated user from the remote HTTP identity provider", ex)));
}))
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("johndoe").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("johndoe").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("johndoe@mail.com").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("johndoe@mail.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.update("123456789", user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.update("123456789", user).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("123456789").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("123456789").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "johndoe";
    }
    
    @Override()
    public Object getPrincipal() {
        return "johndoepassword";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return new SimpleAuthenticationContext(new DummyRequest());
    }
}).test()
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(httpResponse.bodyAsJsonObject().getString(ACCESS_TOKEN), TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(convert(auth.getContext(), httpResponse.bodyAsJsonObject())));
}).apply(v)))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<Token>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    String[] tokenInfo = httpResponse.bodyAsString().split("&");
    String token = "";
    String secret = "";
    for (String pairString : tokenInfo) {
        String[] pair = pairString.split("=");
        if (pair.length > 1) {
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN)) {
                token = pair[1];
            }
            if (pair[0].equalsIgnoreCase(OAUTH_TOKEN_SECRET)) {
                secret = pair[1];
            }
        }
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new Token(token, secret, TokenTypeHint.ACCESS_TOKEN)));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<HttpResponse<Buffer>, MaybeSource<User>>toJdkFunction((httpResponse)->{
    if (httpResponse.statusCode() != 200) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException(httpResponse.bodyAsString())));
    }
    JsonObject jsonObject = httpResponse.bodyAsJsonObject();
    DefaultUser user = new DefaultUser(jsonObject.getString(TWITTER_SCREEN_NAME));
    user.setId(jsonObject.getString(TWITTER_ID));
    Map<String, Object> additionalInfos = new HashMap<>();
    additionalInfos.putAll(applyUserMapping(authentication.getContext(), jsonObject.getMap()));
    user.setAdditionalInformation(additionalInfos);
    user.setRoles(applyRoleMapping(authentication.getContext(), jsonObject.getMap()));
    return RxJava2Adapter.monoToMaybe(Mono.just(user));
}).apply(v)))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("wrong-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "__social__";
    }
    
    @Override()
    public Object getPrincipal() {
        return "__social__";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        DummyRequest dummyRequest = new DummyRequest();
        dummyRequest.setParameters(Collections.singletonMap("code", Arrays.asList("test-code")));
        return new DummyAuthenticationContext(Collections.singletonMap("redirect_uri", "http://redirect_uri"), dummyRequest);
    }
}).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Map<String, Object>>, MaybeSource<User>>)(users)->{
    if (users.isEmpty()) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    if (users.size() > 1) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new BadCredentialsException("Bad credentials")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(createUser(authentication.getContext(), users.get(0))));
}).apply(e)))
1 | Flowable | RETURN_TYPE
1 | Flowable | doFinally | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.from(statement.execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe());
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->RxJava2Adapter.fluxToFlowable(Flux.from(connection.createStatement(sql).bind(0, username).execute())).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).subscribe();
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction((total)->{
    if (total == 0) {
        return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
    } else {
        return RxJava2Adapter.fluxToFlowable(Flux.empty());
    }
}))).doOnError((error)->LOGGER.error("Unable to initialize Database", error)).subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.just(tableExists(configuration.getProtocol(), configuration.getUsersTable()))).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)))
1 | Flowable | first | METHOD_INVOCATION | (statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(Flux.fromIterable(sqlStatements)).flatMapSingle((statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0));
1 | Flowable | first | METHOD_INVOCATION | (statement)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(statement, new Object[0])).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create()))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | doFinally | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(selectUserByUsername(cnx, user.getUsername())).hasElement().flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x))))).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe());
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Boolean, SingleSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    } else {
        String sql;
        Object[] args;
        if (configuration.isUseDedicatedSalt()) {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getPasswordSaltAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getPasswordSaltAttribute()), getIndexParameter(5, configuration.getEmailAttribute()), getIndexParameter(6, configuration.getMetadataAttribute()));
            args = new Object[6];
            byte[] salt = createSalt();
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials(), salt) : null;
            args[3] = user.getCredentials() != null ? binaryToTextEncoder.encode(salt) : null;
            args[4] = user.getEmail();
            args[5] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        } else {
            sql = String.format("INSERT INTO %s (%s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s)", configuration.getUsersTable(), configuration.getIdentifierAttribute(), configuration.getUsernameAttribute(), configuration.getPasswordAttribute(), configuration.getEmailAttribute(), configuration.getMetadataAttribute(), getIndexParameter(1, configuration.getIdentifierAttribute()), getIndexParameter(2, configuration.getUsernameAttribute()), getIndexParameter(3, configuration.getPasswordAttribute()), getIndexParameter(4, configuration.getEmailAttribute()), getIndexParameter(5, configuration.getMetadataAttribute()));
            args = new Object[5];
            args[0] = user.getId();
            args[1] = user.getUsername();
            args[2] = user.getCredentials() != null ? passwordEncoder.encode(user.getCredentials()) : null;
            args[3] = user.getEmail();
            args[4] = user.getAdditionalInformation() != null ? objectMapper.writeValueAsString(user.getAdditionalInformation()) : null;
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0)).map(RxJavaReactorMigrationUtil.toJdkFunction((result)->user)));
    }
}).apply(x)))
1 | Flowable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(cnx, sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(cnx.close())).subscribe()
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(query(sql, args)).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(Result::getRowsUpdated))).first(0))
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connectionPool.create()))
1 | Flowable | doFinally | METHOD_INVOCATION | (connection)->query(connection, sql, args).doFinally(()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe())
1 | Completable | subscribe | METHOD_INVOCATION | ()->RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("bob").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("user01@acme.com").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("unknown").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByEmail("unknown@acme.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.create(user).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("userToUpdate").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.update("unknown", user).test()
1 | Completable | blockingGet | METHOD_INVOCATION | userProvider.delete(createdUser.getId()).blockingGet();
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = userProvider.findByUsername("userToDelete").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userProvider.delete("unknown").test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.from(connection.close())).subscribe();
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()).subscribe
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()).subscribe
1 | Single | subscribe | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute()).subscribe();
1 | Single | fromPublisher | METHOD_INVOCATION | Single.fromPublisher(connection.createStatement("insert into users values(\'2\', \'user01\', \'user01\', \'user01@acme.com\', null)").execute()).subscribe
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "user01";
    }
    
    @Override()
    public Object getPrincipal() {
        return "user01@acme.com";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "wrongpassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "bob";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> testObserver = authenticationProvider.loadUserByUsername(new Authentication(){
    
    () {
        super();
    }
    
    @Override()
    public Object getCredentials() {
        return "bobspassword";
    }
    
    @Override()
    public Object getPrincipal() {
        return "unknownUsername";
    }
    
    @Override()
    public AuthenticationContext getContext() {
        return null;
    }
}).test()
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("create table users(id varchar(256), username varchar(256), password varchar(256), email varchar(256), metadata text)").execute()))
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users values(\'1\', \'bob\', \'bobspassword\', null, null)").execute()))
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(connection.createStatement("insert into users(id, username, password, email, metadata) values( @id, @username, @password, @email , @metadata)").bind("id", "2").bind("username", "user01").bind("password", "user01").bind("email", "user01@acme.com").bindNull("metadata", String.class).execute()))
1 | Single | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.fromPublisher(rp.getRowsUpdated()))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = cut.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<User> obs = provider.loadUserByUsername(authentication).test()
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Observable | first | METHOD_INVOCATION | Single<Long> countOperation = Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L)
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query)).first
1 | Single | LOCAL_VARIABLE
1 | Observable | collect | METHOD_INVOCATION | Single<List<Audit>> auditsOperation = Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map(this::convert).collect(LinkedList::new, List::add)
1 | Observable | map | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map(this::convert).collect
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.find(query).sort(new BasicDBObject(FIELD_TIMESTAMP, -1)).skip(size * page).limit(size)).map
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(countOperation, auditsOperation, (count,audits)->new Page<>(audits, page, count)))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Observable | fromPublisher | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromPublisher(reportableCollection.find(and(eq(FIELD_REFERENCE_TYPE, referenceType.name()), eq(FIELD_REFERENCE_ID, referenceId), eq(FIELD_ID, id))).first()), BackpressureStrategy.BUFFER)
1 | Flowable | subscribe | METHOD_INVOCATION | disposable = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::bulk))).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable)).subscribe()
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::bulk))).doOnError((throwable)->logger.error("An error occurs while indexing data into MongoDB", throwable)).subscribe
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()))
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList())
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", new BasicDBObject("$subtract", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), new BasicDBObject("$mod", Arrays.asList(new BasicDBObject("$subtract", Arrays.asList("$timestamp", new Date(0))), criteria.interval()))))), Accumulators.sum(fieldSuccess, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.SUCCESS)), 1, 0))), Accumulators.sum(fieldFailure, new BasicDBObject("$cond", Arrays.asList(new BasicDBObject("$eq", Arrays.asList("$outcome.status", Status.FAILURE)), 1, 0))))), Document.class)).toList
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList())
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.aggregate(Arrays.asList(Aggregates.match(query), Aggregates.group(new BasicDBObject("_id", "$" + criteria.field()), Accumulators.sum("count", 1)), Aggregates.limit(criteria.size() != null ? criteria.size() : 50)), Document.class)).toList
1 | Single | RETURN_TYPE
1 | Observable | first | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromPublisher(reportableCollection.countDocuments(query)).first(0L))
1 | Observable | fromPublisher | METHOD_INVOCATION | Observable.fromPublisher(reportableCollection.countDocuments(query)).first
1 | Flowable | RETURN_TYPE
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.from(Flux.fromIterable(audits).flatMap(this::insertReport, 2))).doOnError((error)->LOGGER.error("Error during bulk loading", error)))
1 | Flowable | subscribe | METHOD_INVOCATION | disposable = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAuditReporter.this::bulk))).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error)).subscribe()
1 | Flowable | doOnError | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions())).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(JdbcAuditReporter.this::bulk))).doOnError((error)->LOGGER.error("An error occurs while indexing data into report_audits_{} table of {} database", configuration.getTableSuffix(), configuration.getDatabase(), error)).subscribe
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessor.buffer(configuration.getFlushInterval(), TimeUnit.SECONDS, configuration.getBulkActions()))
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationHistogram", criteria, Type.DATE_HISTO).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationGroupBy", criteria, Type.GROUP_BY).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Object, Object>> test = auditReporter.aggregate(ReferenceType.DOMAIN, "testReporter_aggregationCount", criteria, Type.COUNT).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_searchUser", criteria, 0, 20).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Page<Audit>> test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 20).test()
1 | Single | test | METHOD_INVOCATION | test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 0, 5).test()
1 | Single | test | METHOD_INVOCATION | test = auditReporter.search(ReferenceType.DOMAIN, "testReporter_search", new AuditReportableCriteria.Builder().build(), 1, 5).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<Audit> test = auditReporter.findById(audit.getReferenceType(), audit.getReferenceId(), audit.getId()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        final String otpCode = TOTP.generateTOTP(SharedSecret.base32Str2Hex(enrolledFactor.getSecurity().getValue()));
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | botDetectionManager.validate(context).subscribe((isValid)->{
    if (isValid) {
        LOGGER.debug("No bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.next();
    } else {
        LOGGER.warn("Bot detected for domain \'{}\' and client \'{}\'", domain.getId(), client.getId());
        routingContext.fail(BAD_REQUEST_400, new BotDetectedException(DEFAULT_ERROR_MSG));
    }
}, (error)->{
    LOGGER.error("BotDetection failed for domain \'{}\' and client \'{}\'", domain.getId(), client.getId(), error);
    routingContext.fail(INTERNAL_SERVER_ERROR_500, new TechnicalManagementException(DEFAULT_ERROR_MSG));
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(endUserAuthentication)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return userAuthenticationManager.connect(user);
}).subscribe((user)->{
    eventManager.publishEvent(AuthenticationEvent.SUCCESS, new AuthenticationDetails(endUserAuthentication, domain, client, user));
    resultHandler.handle(Future.succeededFuture(new User(user)));
}, (error)->{
    logger.error("Unable to authenticate social provider", error);
    eventManager.publishEvent(AuthenticationEvent.FAILURE, new AuthenticationDetails(endUserAuthentication, domain, client, error));
    resultHandler.handle(Future.failedFuture(error));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticationProvider.loadUserByUsername(endUserAuthentication)).switchIfEmpty(Mono.error(new BadCredentialsException("Unable to authenticate social provider, authentication provider has returned empty value")))).flatMapSingle((user)->{
    Map<String, Object> additionalInformation = user.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(user.getAdditionalInformation());
    additionalInformation.put("source", authProvider);
    additionalInformation.put(Parameters.CLIENT_ID, client.getClientId());
    if (client.isSingleSignOut() && endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY) != null) {
        logger.debug("Single SignOut enable for client \'{}\' store the id_token coming from the provider {} as additional information", client.getId(), authProvider);
        additionalInformation.put(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY, endUserAuthentication.getContext().get(ConstantKeys.ID_TOKEN_KEY));
    } else {
        additionalInformation.remove(ConstantKeys.OIDC_PROVIDER_ID_TOKEN_KEY);
    }
    ((DefaultUser)user).setAdditionalInformation(additionalInformation);
    return userAuthenticationManager.connect(user);
}).subscribe
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(domainRepository.findAllByReferenceId(domain.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((d)->!domain.getId().equals(d.getId()))).collectList()).subscribe((domains)->domains.forEach(clientManager::deployCrossDomain));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
}))).subscribe((stateJwt)->handler.handle(Future.succeededFuture(true)), (ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}, ()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderManager.get(providerId).subscribe((authenticationProvider)->handler.handle(Future.succeededFuture(authenticationProvider)), (ex)->{
    logger.error("An error occurs while getting identity provider {}", providerId, ex);
    handler.handle(Future.failedFuture(ex));
}, ()->{
    logger.error("Unknown identity provider {}", providerId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Single | subscribe | METHOD_INVOCATION | userService.confirmRegistration(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Single | subscribe | METHOD_INVOCATION | userService.register(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Maybe | subscribe | METHOD_INVOCATION | userAuthenticationManager.loadUserByUsername(client, username, request).subscribe((user)->handler.handle(Future.succeededFuture(user)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new UsernameNotFoundException(username))));
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getAuthorizeUrl(identityProvider.getId(), context)).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList().subscribe((socialProviderData)->resultHandler.handle(Future.succeededFuture(socialProviderData)), (error)->resultHandler.handle(Future.failedFuture(error)));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getAuthorizeUrl(identityProvider.getId(), context)).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList().subscribe
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe((identityProvider)->{
    identityProvider.setType(socialProviders.getOrDefault(identityProvider.getType(), identityProvider.getType()));
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(getAuthorizeUrl(identityProvider.getId(), context)).map(RxJavaReactorMigrationUtil.toJdkFunction((authorizeUrl)->new SocialProviderData(identityProvider, authorizeUrl))).defaultIfEmpty(new SocialProviderData(identityProvider, null)));
}).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(identityProviders).flatMapMaybe
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<String>>toJdkFunction((authenticationProvider)->{
    final JWT stateJwt = new JWT();
    stateJwt.put("p", identityProviderId);
    stateJwt.put("q", context.request().query());
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.encode(stateJwt, certificateManager.defaultCertificateProvider())).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
        String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
        Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
            if (HttpMethod.GET == request.getMethod()) {
                return request.getUri();
            } else {
                final Map<String, String> queryParams = getParams(request.getBody());
                queryParams.put(ACTION_KEY, request.getUri());
                return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
            }
        })));
    }).apply(e)))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<String, MaybeSource<String>>toJdkFunction((state)->{
    String redirectUri = UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/callback");
    Maybe<Request> signInURL = ((SocialAuthenticationProvider)authenticationProvider).asyncSignInUrl(redirectUri, state);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(signInURL).map(RxJavaReactorMigrationUtil.toJdkFunction((request)->{
        if (HttpMethod.GET == request.getMethod()) {
            return request.getUri();
        } else {
            final Map<String, String> queryParams = getParams(request.getBody());
            queryParams.put(ACTION_KEY, request.getUri());
            return UriBuilderRequest.resolveProxyRequest(context.request(), context.get(CONTEXT_PATH) + "/login/SSO/POST", queryParams);
        }
    })));
}).apply(e)))
1 | Maybe | LOCAL_VARIABLE
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.verify(factorContext).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | PARAM
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(enrolledFactor).flatMap((factor)->RxJava2Adapter.singleToMono(userService.addFactor(user.getId(), factor, new DefaultUser(user))))).subscribe((user1)->handler.handle(Future.succeededFuture(user1)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe
1 | Observable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(entry.getValue().enroll(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList().subscribe((factors)->handler.handle(Future.succeededFuture(factors)), (error)->handler.handle(Future.failedFuture(error)));
1 | Observable | toList | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(entry.getValue().enroll(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList().subscribe
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle((entry)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(entry.getValue().enroll(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->new Factor(entry.getKey(), enrollment))))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(providers.entrySet()).flatMapSingle
1 | Maybe | subscribe | METHOD_INVOCATION | userService.verifyToken(token).subscribe((userToken)->handler.handle(Future.succeededFuture(userToken)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new InvalidTokenException("The JWT token is invalid"))));
1 | Single | subscribe | METHOD_INVOCATION | userAuthenticationManager.authenticate(client, authentication, true).subscribe((user)->handler.handle(Future.succeededFuture(new io.gravitee.am.gateway.handler.common.vertx.web.auth.user.User(user))), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | credentialService.update(ReferenceType.DOMAIN, domain.getId(), credentialId, credential).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | userService.forgotPassword(parameters, client, getAuthenticatedUser(context)).subscribe(()->{
    queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
    redirectToPage(context, queryParams);
}, (error)->{
    if (error instanceof UserNotFoundException || error instanceof AccountStatusException) {
        queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        redirectToPage(context, queryParams);
    } else if (error instanceof EnforceUserIdentityException) {
        if (settings.isResetPasswordConfirmIdentity()) {
            queryParams.set(ConstantKeys.WARNING_PARAM_KEY, FORGOT_PASSWORD_CONFIRM);
        } else {
            queryParams.set(ConstantKeys.SUCCESS_PARAM_KEY, "forgot_password_completed");
        }
        redirectToPage(context, queryParams);
    } else {
        queryParams.set(ConstantKeys.ERROR_PARAM_KEY, "forgot_password_failed");
        redirectToPage(context, queryParams, error);
    }
});
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(fetchCredentials).flatMap((v)->RxJava2Adapter.singleToMono((Single<List<Authenticator>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, Single<List<Authenticator>>>)(credentials)->{
    if (credentials.isEmpty() && query.getUserName() != null) {
        return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            secureRandom.setSeed(part1.getBytes());
            int nbDevices = secureRandom.nextInt(3) + 1;
            int deviceType = secureRandom.nextInt(2) + 1;
            List<Authenticator> authenticators = new ArrayList<>(nbDevices);
            for (int i = 0; i < nbDevices; i++) {
                byte[] salt = new byte[16];
                secureRandom.nextBytes(salt);
                md.update(salt);
                String initialValue = shiftValue(part2, i);
                Authenticator authenticator = new Authenticator();
                authenticator.setUserName(query.getUserName());
                if (deviceType == 1) {
                    if (i < 2) {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    } else {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    }
                } else {
                    if (i < 2) {
                        authenticator.setCredID(createCredID(md, initialValue, part1));
                    } else {
                        if (initialValue.length() > 27) {
                            initialValue = initialValue.substring(0, 27);
                        }
                        authenticator.setCredID(initialValue);
                    }
                }
                authenticators.add(authenticator);
            }
            return authenticators;
        });
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(credentials.stream().map(this::convert).collect(Collectors.toList())));
    }
}).apply(v)))).subscribe(promise::complete, promise::fail);
1 | Single | OTHER
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | return Single.zip(generateCredID(query.getUserName(), Claims.sub), generateCredID(query.getUserName(), StandardClaims.PREFERRED_USERNAME), (part1,part2)->{
    MessageDigest md = MessageDigest.getInstance("SHA-512");
    SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
    secureRandom.setSeed(part1.getBytes());
    int nbDevices = secureRandom.nextInt(3) + 1;
    int deviceType = secureRandom.nextInt(2) + 1;
    List<Authenticator> authenticators = new ArrayList<>(nbDevices);
    for (int i = 0; i < nbDevices; i++) {
        byte[] salt = new byte[16];
        secureRandom.nextBytes(salt);
        md.update(salt);
        String initialValue = shiftValue(part2, i);
        Authenticator authenticator = new Authenticator();
        authenticator.setUserName(query.getUserName());
        if (deviceType == 1) {
            if (i < 2) {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            } else {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            }
        } else {
            if (i < 2) {
                authenticator.setCredID(createCredID(md, initialValue, part1));
            } else {
                if (initialValue.length() > 27) {
                    initialValue = initialValue.substring(0, 27);
                }
                authenticator.setCredID(initialValue);
            }
        }
        authenticators.add(authenticator);
    }
    return authenticators;
});
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(credentialService.findByCredentialId(ReferenceType.DOMAIN, domain.getId(), authenticator.getCredID())).collectList().flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
        });
    }
}).apply(y)))).then()).subscribe(promise::complete, (error)->promise.fail(error.getMessage()));
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Credential>, CompletableSource>)(credentials)->{
    if (credentials.isEmpty()) {
        return create(authenticator);
    } else {
        return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
            credential.setCounter(authenticator.getCounter());
            credential.setUpdatedAt(new Date());
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
        });
    }
}).apply(y)))
1 | Observable | flatMapCompletable | METHOD_INVOCATION | return Observable.fromIterable(credentials).flatMapCompletable((credential)->{
    credential.setCounter(authenticator.getCounter());
    credential.setUpdatedAt(new Date());
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(credentialService.update(credential)).then());
});
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(credentials).flatMapCompletable
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.create((emitter)->{
    String credID = jwtBuilder.sign(new JWT(Collections.singletonMap(claim, username))).split("\\.")[2];
    emitter.onSuccess(credID);
}))
1 | Maybe | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | resourceService.findByDomain(this.domain.getId()).subscribeOn(Schedulers.io()).subscribe((res)->{
    ResourceProvider provider = resourcePluginManager.create(res.getType(), res.getConfiguration());
    provider.start();
    resourceProviders.put(res.getId(), provider);
    logger.info("Resource {} loaded for domain {}", res.getName(), domain.getName());
}, (error)->logger.error("Unable to initialize resources for domain {}", domain.getName(), error));
1 | Flowable | subscribeOn | METHOD_INVOCATION | resourceService.findByDomain(this.domain.getId()).subscribeOn(Schedulers.io()).subscribe
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourceNotFoundException("Resource " + resourceId + " not found"))).map(RxJavaReactorMigrationUtil.toJdkFunction((res)->resourcePluginManager.create(res.getType(), res.getConfiguration())))).subscribe((provider)->{
    provider.start();
    this.resourceProviders.put(resourceId, provider);
}, (error)->logger.error("Initialization of Resource provider \'{}\' failed", error));
1 | Single | IMPORT
1 | Flowable | subscribe | METHOD_INVOCATION | botDetectionService.findByDomain(domain.getId()).subscribe((detection)->{
    updateBotDetection(detection);
    LOGGER.info("Bot detection {} loaded for domain {}", detection.getName(), domain.getName());
}, (error)->LOGGER.error("Unable to initialize bot detections for domain {}", domain.getName(), error));
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | botDetectionService.findById(pluginId).subscribe(this::updateBotDetection, (error)->LOGGER.error("Unable to load bot detection for domain {}", domain.getName(), error), ()->LOGGER.error("No bot detection found with id {}", pluginId));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(routingContext.session().get(ConstantKeys.TRANSACTION_ID_KEY)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | tokenService.deleteByUserId(user.getId()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(state, certificateManager.defaultCertificateProvider())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((stateJwt)->{
    final MultiMap initialQueryParams = RequestUtils.getQueryParams((String)stateJwt.getOrDefault("q", ""), false);
    context.put(ConstantKeys.PARAM_CONTEXT_KEY, initialQueryParams);
    context.put(ConstantKeys.PROVIDER_ID_PARAM_KEY, stateJwt.get("p"));
    context.put(Parameters.CLIENT_ID, stateJwt.get("c"));
}))).subscribe((stateJwt)->handler.handle(Future.succeededFuture(true)), (ex)->{
    logger.error("An error occurs verifying state on login callback", ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (ex)->{
    logger.error("An error occurs while getting client {}", clientId, ex);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
}, ()->{
    logger.error("Unknown client {}", clientId);
    handler.handle(Future.failedFuture(new BadClientCredentialsException()));
});
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<UserToken>>toJdkFunction((jwt)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(jwt.getSub())).zipWith(RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud()))), RxJavaReactorMigrationUtil.toJdkBiFunction((user,optionalClient)->{
        return new UserToken(user, optionalClient.orElse(null), jwt);
    })));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(clientSource(jwt.getAud())))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), user.getUsername(), source)).hasElement().flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->userProvider.create(convert(user))))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Boolean, MaybeSource<UserProvider>>toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new UserAlreadyExistsException(user.getUsername())));
    }
    return identityProviderManager.getUserProvider(source);
}).apply(e)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setSource(source);
    user.setReferenceType(ReferenceType.DOMAIN);
    user.setReferenceId(domain.getId());
    user.setInternal(true);
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    user.setCreatedAt(new Date());
    user.setUpdatedAt(user.getCreatedAt());
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.create(user);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userProvider.create(convert(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->userProvider.update(idpUser.getId(), convert(user))).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    user.setPassword(null);
    user.setRegistrationCompleted(true);
    user.setEnabled(true);
    user.setExternalId(idpUser.getId());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (accountSettings != null && accountSettings.isAutoLoginAfterRegistration()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(1L);
    }
    return userService.update(user);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(user.getPassword());
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        return userProvider.create(convert(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(user.getPassword());
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    extractAdditionalInformation(user, idpUser.getAdditionalInformation());
    if (accountSettings != null && accountSettings.isAutoLoginAfterResetPassword()) {
        user.setLoggedAt(new Date());
        user.setLoginsCount(user.getLoginsCount() + 1);
    }
    return userService.update(user);
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user1.getReferenceId()).client(user1.getClient()).username(user1.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(Mono.just(user1)));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user1)->{
    if (accountSettings != null && accountSettings.isDeletePasswordlessDevicesAfterResetPassword()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(credentialService.deleteByUserId(user1.getReferenceType(), user1.getReferenceId(), user1.getId())).then(Mono.just(user1)));
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | Completable | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<io.gravitee.am.model.User>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((users)->{
    List<User> foundUsers = new ArrayList<>(users);
    if (users.size() > 1) {
        if (client.getIdentities() != null && !client.getIdentities().isEmpty()) {
            foundUsers = users.stream().filter((u)->client.getIdentities().contains(u.getSource())).collect(Collectors.toList());
        }
        if (foundUsers.size() > 1) {
            List<User> filteredSourceUsers = users.stream().filter((u)->u.getClient() == null || client.getId().equals(u.getClient())).collect(Collectors.toList());
            if (!filteredSourceUsers.isEmpty()) {
                foundUsers = new ArrayList<>(filteredSourceUsers);
            }
        }
    }
    if (foundUsers.size() == 1 || (foundUsers.size() > 1 && !params.isConfirmIdentityEnabled())) {
        User user = foundUsers.get(0);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserInvalidException("User [ " + user.getUsername() + " ] cannot be updated because its identity provider does not support user provisioning"))).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
            if (user.isInactive() && !forceUserRegistration(domain, client)) {
                return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
                if (!optUser.isPresent()) {
                    return RxJava2Adapter.monoToSingle(Mono.just(user));
                }
                return userService.update(enhanceUser(user, optUser.get()));
            });
        }).apply(a)))));
    }
    if (foundUsers.size() > 1) {
        throw new EnforceUserIdentityException();
    }
    if (client.getIdentities() == null || client.getIdentities().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    if (StringUtils.isEmpty(params.getEmail()) & StringUtils.isEmpty(params.getUsername())) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email)));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
            final String username = params.getUsername();
            final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
        }).apply(a)))).defaultIfEmpty(Optional.empty()));
    }).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
        if (!optional.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
        }
        final UserAuthentication idpUser = optional.get();
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
            if (!optEndUser.isPresent()) {
                return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
            }
            return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
        });
    }).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, SingleSource<io.gravitee.am.model.User>>toJdkFunction((userProvider)->{
    if (user.isInactive() && !forceUserRegistration(domain, client)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new AccountInactiveException("User [ " + user.getUsername() + " ] needs to complete the activation process")));
    }
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
        if (!optUser.isPresent()) {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
        return userService.update(enhanceUser(user, optUser.get()));
    });
}).apply(a)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optUser)->{
    if (!optUser.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
    return userService.update(enhanceUser(user, optUser.get()));
});
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError()).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).apply(a))))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException(email != null ? email : params.getUsername()))));
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError())
1 | Observable | takeUntil | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil((Predicate<? super Optional<UserAuthentication>>)Optional::isPresent).lastOrError
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe((authProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(authProvider)).flatMap((a)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
        final String username = params.getUsername();
        final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
    }).apply(a)))).defaultIfEmpty(Optional.empty()));
}).takeUntil
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(client.getIdentities()).flatMapMaybe
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.UserProvider, MaybeSource<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>>>toJdkFunction((userProvider)->{
    final String username = params.getUsername();
    final Maybe<io.gravitee.am.identityprovider.api.User> findQuery = StringUtils.isEmpty(email) ? userProvider.findByUsername(username) : userProvider.findByEmail(email);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
}).apply(a)))
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | onErrorReturnItem | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(findQuery).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Optional.of(new UserAuthentication(user, authProvider)))).defaultIfEmpty(Optional.empty())).onErrorReturnItem(Optional.empty());
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Optional<io.gravitee.am.gateway.handler.root.service.user.impl.UserServiceImpl.UserAuthentication>, SingleSource<io.gravitee.am.model.User>>toJdkFunction((optional)->{
    if (!optional.isPresent()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UserNotFoundException()));
    }
    final UserAuthentication idpUser = optional.get();
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
        if (!optEndUser.isPresent()) {
            return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
        }
        return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
    });
}).apply(a)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUser().getUsername(), idpUser.getSource())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByDomainAndExternalIdAndSource(domain.getId(), idpUser.getUser().getId(), idpUser.getSource())))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty())).flatMapSingle((optEndUser)->{
    if (!optEndUser.isPresent()) {
        return userService.create(convert(idpUser.getUser(), idpUser.getSource()));
    }
    return userService.update(enhanceUser(optEndUser.get(), idpUser.getUser()));
});
1 | Single | RETURN_TYPE
1 | Flowable | subscribe | METHOD_INVOCATION | formRepository.findAll(ReferenceType.DOMAIN, domain.getId()).subscribe(this::updateForm, (error)->logger.error("Unable to initialize forms for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | formRepository.findById(formId).subscribe((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d for domain {}", formId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} form for domain {}", eventType, domain.getName(), error), ()->logger.error("No form found with id {}", formId));
1 | Single | subscribe | METHOD_INVOCATION | userService.resetPassword(client, user, principal).subscribe((response)->handler.handle(Future.succeededFuture(response)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextService.clearContext(context.session().get(ConstantKeys.TRANSACTION_ID_KEY)).as(RxJava2Adapter::completableToMono).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->LOGGER.info("Deletion of some authentication flow data fails \'{}\'", error.getMessage()))).as(RxJava2Adapter::monoToCompletable).subscribe();
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decode(idToken)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientSyncService.findByClientId(jwt.getAud())).apply(e)))).flatMap((z)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, z)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext((java.lang.Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as(RxJava2Adapter::maybeToMono))).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.succeededFuture()), ()->handler.handle(Future.succeededFuture()));
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction((jwt)->clientSyncService.findByClientId(jwt.getAud())).apply(e)))
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(idToken, z)).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.common.jwt.JWT __)->z))).onErrorResumeNext((java.lang.Throwable ex)->(ex instanceof ExpiredJWTException) ? RxJava2Adapter.monoToMaybe(Mono.just(z)) : RxJava2Adapter.monoToMaybe(Mono.error(ex))).as
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientSyncService.findById(endUser.getClient())).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(clientSyncService.findByClientId(endUser.getClient()))))).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.succeededFuture()), ()->handler.handle(Future.succeededFuture()));
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticationProviderMaybe).filter(RxJavaReactorMigrationUtil.toJdkPredicate((provider)->provider instanceof SocialAuthenticationProvider)).flatMap((z)->((SocialAuthenticationProvider)z).signOutUrl(authentication).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endpoint)->handler.handle(Future.succeededFuture(endpoint)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    LOGGER.warn("Unable to sign the end user out of the external OIDC \'{}\', only sign out of AM", client.getClientId(), err);
    handler.handle(Future.succeededFuture(Optional.empty()));
}))).subscribe();
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Optional<Request>, MaybeSource<Optional<String>>>toJdkFunction((optLogoutRequest)->{
    if (optLogoutRequest.isPresent()) {
        return generateLogoutCallback(routingContext, endUser, optLogoutRequest.get());
    } else {
        LOGGER.debug("No logout endpoint has been found in the Identity Provider configuration");
        return RxJava2Adapter.monoToMaybe(Mono.just(Optional.<String>empty()));
    }
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(new ForgotPasswordParameters(user.getEmail(), false, false), client, mock(io.gravitee.am.identityprovider.api.User.class)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(new ForgotPasswordParameters(user.getEmail(), true, true), client, mock(io.gravitee.am.identityprovider.api.User.class)).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.forgotPassword(user.getEmail(), client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = userService.resetPassword(client, user).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        final String otpCode = generateOTP(enrolledFactor);
        if (!code.equals(otpCode)) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        if (Instant.now().isAfter(Instant.ofEpochMilli(enrolledFactor.getSecurity().getData(FactorDataKeys.KEY_EXPIRE_AT, Long.class)))) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (Exception ex) {
        logger.error("An error occurs while validating 2FA code", ex);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<EnrolledFactor, SingleSource<io.gravitee.am.model.User>>toJdkFunction((ef)->{
    ef.setPrimary(true);
    ef.setStatus(FactorStatus.ACTIVATED);
    ef.getSecurity().putData(FactorDataKeys.KEY_EXPIRE_AT, emailWrapper.getExpireAt());
    return userService.addFactor(context.getUser().getId(), ef, new DefaultUser(context.getUser()));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.sendChallenge(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver<Void> test = cut.verify(factorContext).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        user.setPassword(null);
        return userRepository.update(user);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    if (user.getExternalId() == null) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestException("User does not exist in upstream IDP")));
    } else {
        return userProvider.update(user.getExternalId(), convert(user));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    return userRepository.update(user);
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | accountService.get(token.getSub()).subscribe((user)->{
    routingContext.put(ConstantKeys.USER_CONTEXT_KEY, user);
    routingContext.next();
}, (error)->{
    LOGGER.error("Unable to retrieve user for Id {}", token.getSub());
    routingContext.fail(error);
}, ()->routingContext.fail(new UserNotFoundException(token.getSub())));
1 | Single | subscribe | METHOD_INVOCATION | accountService.getActivity(user, criteria, page, size).subscribe((activities)->AccountResponseHandler.handleDefaultResponse(routingContext, activities), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(accountService.update(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((nestedResult)->AccountResponseHandler.handleUpdateUserResponse(routingContext))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((er)->AccountResponseHandler.handleUpdateUserResponse(routingContext, er.getMessage())))).subscribe();
1 | Single | subscribe | METHOD_INVOCATION | accountService.getFactors(user.getReferenceId()).subscribe((factors)->AccountResponseHandler.handleDefaultResponse(routingContext, factors), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | factorProvider.generateQrCode(user, enrolledFactor).subscribe((barCode)->AccountResponseHandler.handleDefaultResponse(routingContext, new JsonObject().put("qrCode", barCode)), routingContext::fail, ()->routingContext.fail(404));
1 | Single | subscribe | METHOD_INVOCATION | accountService.upsertFactor(user.getId(), enrolledFactor, new DefaultUser(user)).subscribe((__)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledFactor), routingContext::fail);
1 | Completable | subscribe | METHOD_INVOCATION | accountService.removeFactor(user.getId(), factorId, new DefaultUser(user)).subscribe(()->AccountResponseHandler.handleNoBodyResponse(routingContext), routingContext::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | accountService.getFactor(factorId).subscribe((factor)->handler.handle(Future.succeededFuture(factor)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new FactorNotFoundException(factorId))));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(factorProvider.enroll(endUser.getUsername())).map(RxJavaReactorMigrationUtil.toJdkFunction((enrollment)->{
    final EnrolledFactor enrolledFactor = buildEnrolledFactor(factor, enrollment, account, endUser);
    if (factorProvider.checkSecurityFactor(enrolledFactor)) {
        return enrolledFactor;
    }
    throw new InvalidFactorAttributeException("Invalid account information");
}))).subscribe((enrolledFactor)->handler.handle(Future.succeededFuture(enrolledFactor)), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.verify(new FactorContext(applicationContext, factorData)).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribe | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe(()->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Completable | subscribeOn | METHOD_INVOCATION | factorProvider.sendChallenge(factorContext).subscribeOn(Schedulers.io()).subscribe
1 | Single | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredentials(user).subscribe((enrolledCredentials)->AccountResponseHandler.handleDefaultResponse(routingContext, enrolledCredentials), routingContext::fail);
1 | Single | subscribe | METHOD_INVOCATION | accountService.getWebAuthnCredential(credentialId).subscribe((credential)->AccountResponseHandler.handleDefaultResponse(routingContext, credential), routingContext::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))).flatMapSingle((user)->enhance(user, accessToken))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->processClaims(user, accessToken))).flatMap((v)->RxJava2Adapter.singleToMono((Single<String>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Map<String, Object>, Single<String>>)(claims)->{
    if (!expectSignedOrEncryptedUserInfo(client)) {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
        return RxJava2Adapter.monoToSingle(Mono.just(Json.encodePrettily(claims)));
    } else {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JWT);
        JWT jwt = new JWT(claims);
        jwt.setIss(openIDDiscoveryService.getIssuer(UriBuilderRequest.resolveProxyRequest(context)));
        jwt.setSub(accessToken.getSub());
        jwt.setAud(accessToken.getAud());
        jwt.setIat(new Date().getTime() / 1000L);
        jwt.setExp(accessToken.getExp() / 1000L);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeUserinfo(jwt, client)).flatMap((userinfo)->RxJava2Adapter.singleToMono(jweService.encryptUserinfo(userinfo, client))));
    }
}).apply(v)))).subscribe((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(buffer), context::fail);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(subject)).switchIfEmpty(Mono.error(new InvalidTokenException("No user found for this token")))).flatMapSingle((user)->enhance(user, accessToken)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(token, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(refreshToken, client).onErrorResumeNext((ex)->{
    if (ex instanceof JWTException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidTokenException(ex.getMessage(), ex)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(jwtService.encode(accessToken, client), (refreshToken != null ? RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encode(refreshToken, client)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of))) : RxJava2Adapter.monoToSingle(Mono.just(Optional.<String>empty()))), (encodedAccessToken,optionalEncodedRefreshToken)->convert(accessToken, encodedAccessToken, optionalEncodedRefreshToken.orElse(null), oAuth2Request)))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(client.getAbs(UriBuilder.fromHttpUrl(jwksUri).build().toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(new JWKSetDeserializer()::convert)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e))))).onErrorResumeNext(RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientMetadataException("Unable to parse jwks from : " + jwksUri))));
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<JWKSet>, MaybeSource<JWKSet>>)(jwkSet)->{
    if (jwkSet != null && jwkSet.isPresent()) {
        return RxJava2Adapter.monoToMaybe(Mono.just(jwkSet.get()));
    }
    return RxJava2Adapter.monoToMaybe(Mono.empty());
}).apply(e)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthorizationCode, MaybeSource<AuthorizationCode>>toJdkFunction((authorizationCode)->{
    if (!authorizationCode.getClientId().equals(client.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("The authorization code " + code + " does not belong to the client " + client.getClientId() + ".")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(authorizationCode));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Observable | flatMapCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(accessTokenRepository.findByAuthorizationCode(code).flatMapCompletable((accessToken)->{
    Completable deleteAccessTokenAction = accessTokenRepository.delete(accessToken.getToken());
    if (accessToken.getRefreshToken() != null) {
        RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(deleteAccessTokenAction).then(RxJava2Adapter.completableToMono(refreshTokenRepository.delete(accessToken.getRefreshToken()))));
    }
    return deleteAccessTokenAction;
}))
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->authHandler.handle(Future.succeededFuture(client)), (error)->authHandler.handle(Future.failedFuture(new ServerErrorException("Server error: unable to find client with client_id " + clientId))), ()->authHandler.handle(Future.failedFuture(new InvalidRequestException("No client found for client_id " + clientId))));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | subscribe | METHOD_INVOCATION | revocationTokenService.revoke(createRequest(context), client).subscribe(()->context.response().setStatusCode(200).end(), context::fail);
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userAuthenticationManager.loadPreAuthenticatedUser(subject, tokenRequest).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}))
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->handleRequest(tokenRequest, client, user.orElse(null)));
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest1, client)).apply(e)))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    policyChainProcessorFactory.create(resolve(rules), executionContext).handler((executionContext1)->emitter.onComplete()).errorHandler((processorFailure)->emitter.onError(new PolicyChainException(processorFailure.message(), processorFailure.statusCode(), processorFailure.key(), processorFailure.parameters(), processorFailure.contentType()))).handle(executionContext);
});
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | subscribe | METHOD_INVOCATION | this.clientSyncService.findTemplates().subscribe((templates)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationTemplate.from(templates))), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | subscribe | METHOD_INVOCATION | accessTokenRepository.bulkWrite(accessTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Access tokens indexation completed"), (error)->logger.error("Unexpected error while indexing access tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | accessTokenRepository.bulkWrite(accessTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Single | subscribe | METHOD_INVOCATION | authorizationRequestResolver.resolve(authorizationRequest, client, endUser).subscribe((__)->handler.handle(Future.succeededFuture()), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return revokeRefreshToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return revokeAccessToken(token, client);
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
});
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | revokeRefreshToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
    }
    return revokeAccessToken(token, client);
}).onErrorResumeNext
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return revokeAccessToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return revokeRefreshToken(token, client);
}).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No refresh token {} found in the token store.", token);
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
});
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | revokeAccessToken(token, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof InvalidGrantException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(throwable));
    }
    if (throwable instanceof InvalidTokenException) {
        logger.debug("No access token {} found in the token store.", token);
    }
    return revokeRefreshToken(token, client);
}).onErrorResumeNext
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(accessToken)->{
    String tokenClientId = accessToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteAccessToken(accessToken.getValue());
}).apply(y)))
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, CompletableSource>)(refreshToken)->{
    String tokenClientId = refreshToken.getClientId();
    if (!client.getClientId().equals(tokenClientId)) {
        logger.debug("Revoke FAILED: requesting client = {}, token\'s client = {}.", client.getClientId(), tokenClientId);
        return RxJava2Adapter.monoToCompletable(Mono.error(new InvalidGrantException("Cannot revoke tokens issued to other clients.")));
    }
    return tokenService.deleteRefreshToken(refreshToken.getValue());
}).apply(y)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.encodeAuthorization(jwtException.build(), client)).flatMap((authorization)->RxJava2Adapter.singleToMono(jweService.encryptAuthorization(authorization, client)))).subscribe((jwt)->handler.handle(Future.succeededFuture(jwtException.buildRedirectUri(authorizationRequest.getRedirectUri(), authorizationRequest.getResponseType(), authorizationRequest.getResponseMode(), jwt))), (ex)->handler.handle(Future.failedFuture(ex)));
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(resourceService.findAccessPolicies(domain.getId(), client.getId(), accessToken.getSub(), resource)).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicy::getId)).collectList()).subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(response.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(response)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | resourceService.createAccessPolicy(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource).subscribe((p)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation(basePath, p)).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(p)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(resourceService.findAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId)).switchIfEmpty(Mono.error(new AccessPolicyNotFoundException(accessPolicyId)))).subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | resourceService.updateAccessPolicy(accessPolicy, domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicyId).subscribe((response)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(response)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | resourceService.deleteAccessPolicy(domain.getId(), client.getId(), accessToken.getSub(), resource, accessPolicy).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | subscribe | METHOD_INVOCATION | consentInformation.subscribe((scopes)->handler.handle(Future.succeededFuture(scopes)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | tokenGranter.grant(tokenRequest, client).subscribe((accessToken)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(accessToken)), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | singleOrError | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType())))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->flow.run(authorizationRequest, client, endUser)).singleOrError();
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType())))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle((flow)->flow.run(authorizationRequest, client, endUser)).singleOrError
1 | Observable | switchIfEmpty | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType())))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType()))).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER)
1 | Observable | error | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(flows), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((flow)->flow.handle(authorizationRequest.getResponseType())))).switchIfEmpty(Observable.error(new UnsupportedResponseTypeException("Unsupported response type: " + authorizationRequest.getResponseType())))
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<Client>>toJdkFunction(new Function<JWT, MaybeSource<Client>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<Client> apply(JWT jwt) throws Exception {
        if (JWSAlgorithm.Family.HMAC_SHA.contains(jwt.getHeader().getAlgorithm())) {
            return validateSignatureWithHMAC(jwt);
        } else {
            return validateSignatureWithPublicKey(jwt);
        }
    }
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.PRIVATE_KEY_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClientJwkSet(client)).switchIfEmpty(Mono.error(new InvalidClientException("No jwk keys available on client"))).flatMap((z)->jwkService.getKey(z, signedJWT.getHeader().getKeyID()).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientException("Unable to validate client, no matching key."))).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
            if (jwsService.isValidSignature(signedJWT, jwk)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
        }).apply(t)))));
    } else {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
    }
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWK, MaybeSource<Client>>toJdkFunction((jwk)->{
    if (jwsService.isValidSignature(signedJWT, jwk)) {
        return RxJava2Adapter.monoToMaybe(Mono.just(client));
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(t)))
1 | Maybe | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client)->{
    try {
        if (client.getTokenEndpointAuthMethod() == null || ClientAuthenticationMethod.CLIENT_SECRET_JWT.equalsIgnoreCase(client.getTokenEndpointAuthMethod())) {
            JWSVerifier verifier = new MACVerifier(client.getClientSecret());
            if (signedJWT.verify(verifier)) {
                return RxJava2Adapter.monoToMaybe(Mono.just(client));
            }
        } else {
            return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Invalid client: missing or unsupported authentication method")));
        }
    } catch (JOSEException josee) {
    }
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("Unable to validate client, assertion signature is not valid.")));
}).apply(v)))
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | clientSyncService.findByClientId(clientId).subscribe((client)->handler.handle(Future.succeededFuture(client)), (error)->handler.handle(Future.failedFuture(error)), ()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE))));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | subscribe | METHOD_INVOCATION | requestObject.subscribe((jwt)->{
    try {
        checkOAuthParameters(context, jwt);
        context.next();
    } catch (Exception ex) {
        context.fail(ex);
    }
}, context::fail, context::next);
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(tokenService.introspect(introspectionRequest.getToken())).flatMap((v)->RxJava2Adapter.singleToMono((Single<IntrospectionResponse>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Token, Single<IntrospectionResponse>>)(token)->{
    AccessToken accessToken = (AccessToken)token;
    if (accessToken.getSubject() != null && !accessToken.getSubject().equals(accessToken.getClientId())) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findById(accessToken.getSubject())).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->convert(accessToken, user))).defaultIfEmpty(convert(accessToken, null)).single());
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(convert(accessToken, null)));
    }
}).apply(v)))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(new IntrospectionResponse(false))));
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.create(request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Single | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub())).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect(JsonArray::new, JsonArray::add).subscribe((buffer)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(buffer.isEmpty() ? HttpStatusCode.NO_CONTENT_204 : HttpStatusCode.OK_200).end(Json.encodePrettily(buffer)), context::fail);
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(this.resourceService.listByDomainAndClientAndUser(domain.getId(), client.getId(), accessToken.getSub())).map(RxJavaReactorMigrationUtil.toJdkFunction(Resource::getId))).collect(JsonArray::new, JsonArray::add).subscribe
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(this.resourceService.create(request, domain.getId(), client.getId(), accessToken.getSub())))).subscribe((resource)->{
    final String resourceLocation = resourceLocation(basePath, resource);
    context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, resourceLocation).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(ResourceResponse.from(resource, resourceLocation)));
}, context::fail);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(this.resourceService.findByDomainAndClientAndUserAndResource(domain.getId(), client.getId(), accessToken.getSub(), resource_id)).switchIfEmpty(Mono.error(new ResourceNotFoundException(resource_id)))).subscribe((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource))), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(this.resourceService.update(request, domain.getId(), client.getId(), accessToken.getSub(), resource_id)))).subscribe((resource)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(ResourceResponse.from(resource))), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | this.resourceService.delete(domain.getId(), client.getId(), accessToken.getSub(), resource_id).subscribe(()->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JsonObject, SingleSource<JsonObject>>toJdkFunction(this::bodyValidation).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(introspectionService.introspect(createRequest(context))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((introspectionResponse)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(introspectionResponse))))).subscribe();
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jweService.decrypt(request, false).onErrorResumeNext((ex)->{
    if (ex instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.debug("JWT invalid for the request parameter", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException()));
}))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt id_token")));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt userinfo")));
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | LOCAL_VARIABLE
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(jwks.flatMapPublisher((jwkset)->RxJava2Adapter.fluxToFlowable(Flux.fromIterable(jwkset.getKeys()))))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return encrypt(jwe, client).onErrorResumeNext((throwable)->{
    if (throwable instanceof OAuth2Exception) {
        return RxJava2Adapter.monoToSingle(Mono.error(throwable));
    }
    LOGGER.error(throwable.getMessage(), throwable);
    return RxJava2Adapter.monoToSingle(Mono.error(new ServerErrorException("Unable to encrypt authorization")));
});
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).flatMap((z)->jwkService.filter(z, filter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new InvalidClientMetadataException("no matching key found to encrypt")))).flatMapSingle((jwk)->RxJava2Adapter.monoToSingle(Mono.just(function.apply(jwk)))))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
})).then(RxJava2Adapter.singleToMono(flow.run(request, client, endUser)))).subscribe((authorizationResponse)->{
    try {
        cleanSession(context);
        doRedirect(context, request, authorizationResponse);
    } catch (Exception e) {
        logger.error("Unable to redirect to client redirect_uri", e);
        context.fail(new ServerErrorException());
    }
}, context::fail);
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(parService.deleteRequestUri(uriIdentifier).onErrorResumeNext((err)->{
    logger.warn("Deletion of Pushed Authorization Request with id \'{}\' failed", uriIdentifier, err);
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((tokenGranter)->tokenGranter.handle(tokenRequest.getGrantType(), client))).next().switchIfEmpty(Mono.error(new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType())))).flatMapSingle((tokenGranter)->tokenGranter.grant(tokenRequest, client));
1 | Observable | fromIterable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(tokenGranters.values()), BackpressureStrategy.BUFFER)
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(parseRequest(tokenRequest, client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((user)->handleRequest(tokenRequest, client, user.orElse(null))))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<TokenRequest, MaybeSource<User>>toJdkFunction((tokenRequest1)->resolveResourceOwner(tokenRequest, client)).apply(e)))
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getClaimToken(), client)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<User>>toJdkFunction((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).apply(e)))).switchIfEmpty(Mono.error(RxJavaReactorMigrationUtil.callableAsSupplier(UserInvalidException::new)))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(UmaException.needInfoBuilder(tokenRequest.getTicket()).requiredClaims(Arrays.asList(new RequiredClaims(CLAIM_TOKEN).setFriendlyName("Malformed or expired claim_token"))).build()));
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWT, MaybeSource<User>>toJdkFunction((jwt)->userAuthenticationManager.loadPreAuthenticatedUser(jwt.getSub(), tokenRequest)).apply(e)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwtService.decodeAndVerify(tokenRequest.getRequestingPartyToken(), client)).flatMap((rpt)->RxJava2Adapter.singleToMono(this.checkRequestingPartyToken(rpt, client, endUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((rpt)->this.mergePermissions(rpt, requestedPermissions)))).onErrorResumeNext((throwable)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Requesting Party Token (rpt) not valid")))))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException("Policy conditions are not met for actual request parameters"))));
1 | Completable | toSingleDefault | METHOD_INVOCATION | rulesEngine.fire(rules, executionContext).toSingleDefault(oAuth2Request).onErrorResumeNext
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(jweService.decrypt(request, encRequired).onErrorResumeNext((err)->{
    if (err instanceof InvalidRequestObjectException) {
        return RxJava2Adapter.monoToSingle(Mono.error(err));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Malformed request object")));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<JWT>>toJdkFunction((Function<JWT, SingleSource<JWT>>)(jwt)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRequestObjectAlgorithm(jwt)).then(Mono.defer(()->RxJava2Adapter.singleToMono(validateSignature((SignedJWT)jwt, client)))));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<JWT, SingleSource<RequestObject>>toJdkFunction(new Function<JWT, SingleSource<RequestObject>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<RequestObject> apply(JWT jwt) throws Exception {
        RequestObject requestObject = new RequestObject();
        requestObject.setId(UUID.random().toString());
        requestObject.setClient(client.getId());
        requestObject.setDomain(client.getDomain());
        requestObject.setCreatedAt(new Date());
        Instant expirationInst = requestObject.getCreatedAt().toInstant().plus(Duration.ofDays(1));
        requestObject.setExpireAt(Date.from(expirationInst));
        requestObject.setPayload(request.getRequest());
        return requestObjectRepository.create(requestObject);
    }
}).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<RequestObject, SingleSource<RequestObjectRegistrationResponse>>toJdkFunction((Function<RequestObject, SingleSource<RequestObjectRegistrationResponse>>)(requestObject)->{
    RequestObjectRegistrationResponse response = new RequestObjectRegistrationResponse();
    response.setIss(openIDDiscoveryService.getIssuer(request.getOrigin()));
    response.setAud(client.getClientId());
    response.setRequestUri(RESOURCE_OBJECT_URN_PREFIX + requestObject.getId());
    response.setExp(requestObject.getExpireAt().getTime());
    return RxJava2Adapter.monoToSingle(Mono.just(response));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(client)).switchIfEmpty(Mono.error(new InvalidRequestObjectException())).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))).switchIfEmpty(Mono.error(new InvalidRequestObjectException("Invalid key ID")))).flatMapSingle(new Function<JWK, SingleSource<JWT>>(){
    
    () {
        super();
    }
    
    @Override()
    public SingleSource<JWT> apply(JWK jwk) throws Exception {
        if (!jwt.getHeader().getAlgorithm().getName().equals(client.getRequestObjectSigningAlg())) {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid request object signing algorithm")));
        } else if (jwsService.isValidSignature(jwt, jwk)) {
            return RxJava2Adapter.monoToSingle(Mono.just(jwt));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRequestObjectException("Invalid signature")));
        }
    }
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<JWKSet, MaybeSource<JWK>>toJdkFunction(new Function<JWKSet, MaybeSource<JWK>>(){
    
    () {
        super();
    }
    
    @Override()
    public MaybeSource<JWK> apply(JWKSet jwkSet) throws Exception {
        return jwkService.getKey(jwkSet, jwt.getHeader().getKeyID());
    }
}).apply(v)))
1 | Completable | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | idTokenService.extractUser(idToken, client).subscribe((user)->handler.handle(Future.succeededFuture(user)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(userAuthenticationManager.authenticate(client, new EndUserAuthentication(username, password, new SimpleAuthenticationContext(tokenRequest))).onErrorResumeNext((ex)->RxJava2Adapter.monoToSingle(Mono.error(new InvalidGrantException(ex.getMessage())))))
1 | Single | subscribe | METHOD_INVOCATION | requestObjectService.registerRequestObject(request, client).subscribe(new Consumer<RequestObjectRegistrationResponse>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(RequestObjectRegistrationResponse response) throws Exception {
        context.response().putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
    }
}, new Consumer<Throwable>(){
    
    () {
        super();
    }
    
    @Override()
    public void accept(Throwable throwable) throws Exception {
        context.fail(throwable);
    }
});
1 | Single | subscribe | METHOD_INVOCATION | scopeService.findByDomain(domain.getId(), 0, Integer.MAX_VALUE).subscribe((scopes)->{
    updateScopes(scopes);
    logger.info("Scopes loaded for domain {}", domain.getName());
}, (error)->logger.error("Unable to initialize scopes for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | scopeService.findById(scopeId).subscribe((scope)->{
    updateScopes(Collections.singleton(scope));
    logger.info("Scope {} {}d for domain {}", scopeId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} scope for domain {}", eventType, domain.getName(), error), ()->logger.error("No scope found with id {}", scopeId));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(authenticationFlowContextService.removeContext(z.getTransactionId(), z.getContextVersion()).onErrorResumeNext((java.lang.Throwable error)->(exitOnError) ? RxJava2Adapter.monoToMaybe(Mono.error(error)) : RxJava2Adapter.monoToMaybe(Mono.just(new AuthenticationFlowContext()))))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(userAuthenticationManager.loadPreAuthenticatedUser(tokenRequest.getSubject(), tokenRequest).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException()));
}))
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | jwkService.getKeys(client).subscribe((jwkSet)->{
    boolean match = jwkSet.getKeys().stream().anyMatch((jwk)->thumbprint256.equals(jwk.getX5tS256()) || thumbprint.equals(jwk.getX5t()));
    if (match) {
        handler.handle(Future.succeededFuture(client));
    } else {
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate")));
    }
}, (throwable)->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: invalid self-signed certificate"))), ()->handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: missing or unsupported JWK Set"))));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(jwkService.getKeys()).map(RxJavaReactorMigrationUtil.toJdkFunction(JWKConverter::convert))).subscribe((keys)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, "application/jwk-set+json; charset=UTF-8").end(Json.encodePrettily(keys)), (error)->context.response().setStatusCode(500).end());
1 | Flowable | subscribe | METHOD_INVOCATION | extensionGrantRepository.findByDomain(domain.getId()).subscribe((extensionGrant)->{
    minDate = minDate == null ? extensionGrant.getCreatedAt() : minDate.after(extensionGrant.getCreatedAt()) ? extensionGrant.getCreatedAt() : minDate;
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grants loaded for domain {}", domain.getName());
}, (error)->logger.error("Unable to initialize extension grants for domain {}", domain.getName(), error));
1 | Maybe | subscribe | METHOD_INVOCATION | extensionGrantRepository.findById(extensionGrantId).subscribe((extensionGrant)->{
    if (extensionGrants.isEmpty()) {
        minDate = extensionGrant.getCreatedAt();
    }
    updateExtensionGrantProvider(extensionGrant);
    logger.info("Extension grant {} {}d for domain {}", extensionGrantId, eventType, domain.getName());
}, (error)->logger.error("Unable to {} extension grant for domain {}", eventType, domain.getName(), error), ()->logger.error("No extension grant found with id {}", extensionGrantId));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantProvider.grant(convert(tokenRequest))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException(ex.getMessage())));
}))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, MaybeSource<User>>toJdkFunction((endUser)->{
    if (extensionGrant.isCreateUser()) {
        Map<String, Object> additionalInformation = endUser.getAdditionalInformation() == null ? new HashMap<>() : new HashMap<>(endUser.getAdditionalInformation());
        additionalInformation.put("source", extensionGrant.getIdentityProvider() != null ? extensionGrant.getIdentityProvider() : extensionGrant.getId());
        additionalInformation.put("client_id", client.getId());
        ((DefaultUser)endUser).setAdditionalInformation(additionalInformation);
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userAuthenticationManager.connect(endUser, false)));
    } else {
        if (extensionGrant.isUserExists()) {
            if (extensionGrant.getIdentityProvider() == null) {
                return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidGrantException("No identity_provider provided")));
            }
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.get(extensionGrant.getIdentityProvider())).flatMap((t)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
                SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
                final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
                return authProvider.loadPreAuthenticatedUser(authentication);
            }).apply(t)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
                User user = new User();
                user.setId(idpUser.getId());
                user.setUsername(endUser.getUsername());
                Map<String, Object> extraInformation = new HashMap<>(idpUser.getAdditionalInformation());
                if (user.getLoggedAt() != null) {
                    extraInformation.put(Claims.auth_time, user.getLoggedAt().getTime() / 1000);
                }
                extraInformation.put(StandardClaims.PREFERRED_USERNAME, user.getUsername());
                user.setAdditionalInformation(extraInformation);
                user.setCreatedAt(idpUser.getCreatedAt());
                user.setUpdatedAt(idpUser.getUpdatedAt());
                user.setRoles(idpUser.getRoles());
                return user;
            })).switchIfEmpty(Mono.error(new InvalidGrantException("Unknown user: " + endUser.getId()))));
        } else {
            User user = new User();
            user.setId(endUser.getId());
            user.setUsername(endUser.getUsername());
            user.setAdditionalInformation(endUser.getAdditionalInformation());
            return RxJava2Adapter.monoToMaybe(Mono.just(user));
        }
    }
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>toJdkFunction((Function<AuthenticationProvider, MaybeSource<io.gravitee.am.identityprovider.api.User>>)(authProvider)->{
    SimpleAuthenticationContext authenticationContext = new SimpleAuthenticationContext(tokenRequest);
    final Authentication authentication = new EndUserAuthentication(convert(endUser), null, authenticationContext);
    return authProvider.loadPreAuthenticatedUser(authentication);
}).apply(t)))
1 | Completable | subscribe | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(refreshTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe(()->logger.debug("Refresh tokens indexation completed"), (error)->logger.error("Unexpected error while indexing refresh tokens", error));
1 | Completable | retryWhen | METHOD_INVOCATION | refreshTokenRepository.bulkWrite(refreshTokens).retryWhen((t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)).subscribe
1 | Flowable | LOCAL_VARIABLE
1 | Flowable | delay | METHOD_INVOCATION | (t)->t.take(30).delay(1000, TimeUnit.MILLISECONDS)
1 | Flowable | take | METHOD_INVOCATION | t.take(30).delay
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), user.getId(), client.getClientId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((approval)->{
    Date today = new Date();
    return (approval.getExpiresAt().after(today) && approval.getStatus() == ScopeApproval.ApprovalStatus.APPROVED);
})).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeApproval::getScope))).collect(HashSet::new, Set::add);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | userConsentService.checkConsent(client, user).subscribe((result)->handler.handle(Future.succeededFuture(result)), (error)->handler.handle(Future.failedFuture(error)));
1 | Single | subscribe | METHOD_INVOCATION | parService.registerParameters(request, client).subscribe((response)->{
    context.response().setStatusCode(HttpStatusCode.CREATED_201).putHeader(io.gravitee.common.http.HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(io.gravitee.common.http.HttpHeaders.CACHE_CONTROL, "no-store").putHeader(io.gravitee.common.http.HttpHeaders.PRAGMA, "no-cache").end(Json.encodePrettily(response));
}, context::fail);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.findByAlgorithm(client.getIdTokenSignedResponseAlg())).switchIfEmpty(RxJava2Adapter.maybeToMono(certificateManager.get(client.getCertificate()))).defaultIfEmpty(certificateManager.defaultCertificateProvider())).flatMapSingle((certificateProvider)->{
    if (oAuth2Request.getContext() != null && !oAuth2Request.getContext().isEmpty()) {
        oAuth2Request.getContext().forEach((claimName,claimValue)->{
            if (claimValue != null) {
                CertificateMetadata certificateMetadata = certificateProvider.getProvider().certificateMetadata();
                String digestAlgorithm = defaultDigestAlgorithm;
                if (certificateMetadata != null && certificateMetadata.getMetadata() != null && certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME) != null) {
                    digestAlgorithm = (String)certificateMetadata.getMetadata().get(CertificateMetadata.DIGEST_ALGORITHM_NAME);
                }
                idToken.addAdditionalClaim(claimName, getHashValue((String)claimValue, digestAlgorithm));
            }
        });
    }
    return jwtService.encode(idToken, certificateProvider);
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<String, SingleSource<String>>toJdkFunction((signedIdToken)->{
    if (client.getIdTokenEncryptedResponseAlg() != null) {
        return jweService.encryptIdToken(signedIdToken, client);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(signedIdToken));
}).apply(z)))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(this.getClient(context)).map(RxJavaReactorMigrationUtil.toJdkFunction(DynamicClientRegistrationResponse::fromClient)).map(RxJavaReactorMigrationUtil.toJdkFunction((response)->{
    response.setRegistrationAccessToken(null);
    response.setRegistrationClientUri(null);
    return response;
}))).subscribe((result)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(result)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((client)->RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.patch(client, request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)))).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((client)->RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((request)->RxJava2Adapter.singleToMono(dcrService.update(client, request, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred)))).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just))
1 | Single | METHOD_REFERENCE | Single::just
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(dcrService::delete)).map(RxJavaReactorMigrationUtil.toJdkFunction(this.clientSyncService::removeDynamicClientRegistred))).subscribe((client)->context.response().setStatusCode(HttpStatusCode.NO_CONTENT_204).end(), context::fail);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(dcrService::delete))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just)).flatMap((toRenew)->RxJava2Adapter.singleToMono(dcrService.renewSecret(toRenew, UriBuilderRequest.resolveProxyRequest(context)))).map(RxJavaReactorMigrationUtil.toJdkFunction(clientSyncService::addDynamicClientRegistred))).subscribe((client)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.OK_200).end(Json.encodePrettily(DynamicClientRegistrationResponse.fromClient(client))), context::fail);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(this.getClient(context).flatMapSingle(Single::just))
1 | Single | METHOD_REFERENCE | Single::just
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientAssertionService.assertClient(clientAssertionType, clientAssertion, basePath)).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v))))).subscribe((client1)->handler.handle(Future.succeededFuture(client1)), (throwable)->{
    if (throwable instanceof InvalidClientException) {
        logger.debug("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(throwable));
    } else {
        logger.error("Failed to authenticate client with assertion method", throwable);
        handler.handle(Future.failedFuture(new InvalidClientException("Invalid client: Failed to authenticate client with assertion method", throwable)));
    }
}, ()->handler.handle(Future.failedFuture(new InvalidClientException(ClientAuthHandler.GENERIC_ERROR_MESSAGE))));
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Client, MaybeSource<Client>>toJdkFunction((client1)->{
    if (clientId != null && !clientId.equals(client1.getClientId())) {
        return RxJava2Adapter.monoToMaybe(Mono.error(new InvalidClientException("client_id parameter does not match with assertion")));
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(client1));
}).apply(v)))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | toSingleDefault | METHOD_INVOCATION | return this.clientService.delete(toDelete.getId()).toSingleDefault(toDelete);
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultIdentityProvider).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyDefaultCertificateProvider).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(this::applyAccessTokenValidity).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(clientService.findById(request.getSoftwareId().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No template found for software_id " + request.getSoftwareId().get())))).flatMapSingle(this::sanitizeTemplate))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Client, SingleSource<Client>>toJdkFunction(clientService::create).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateScopes).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateGrantType).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateResponseType).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSubjectType).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestUri).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSectorIdentifierUri).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateJKWs).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoSigningAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateUserinfoEncryptionAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenSigningAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateIdTokenEncryptionAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateTlsClientAuth).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateSelfSignedClientAuth).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationSigningAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateAuthorizationEncryptionAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectSigningAlgorithm).apply(v)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<DynamicClientRegistrationRequest, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction(this::validateRequestObjectEncryptionAlgorithm).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect(HashSet::new, HashSet::add))
1 | Flowable | cast | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString()))))).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction(Flowable::fromIterable))).cast(String.class).collect
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.getAbs(uri.toString()).rxSend()).map(RxJavaReactorMigrationUtil.toJdkFunction(HttpResponse::bodyAsString)).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonArray::new))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.error(new InvalidClientMetadataException("Unable to parse sector_identifier_uri : " + uri.toString())))))
1 | Flowable | METHOD_REFERENCE | Flowable::fromIterable
1 | Observable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((java.lang.String redirectUri)->!allowedRedirectUris.contains(redirectUri)))).collect(ArrayList<String>::new, ArrayList::add))
1 | Observable | fromIterable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(request.getRedirectUris().get()), BackpressureStrategy.BUFFER)
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<ArrayList<String>, SingleSource<DynamicClientRegistrationRequest>>toJdkFunction((java.util.ArrayList<java.lang.String> missing)->{
    if (!missing.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidRedirectUriException("redirect uris are not allowed according to sector_identifier_uri: " + String.join(" ", missing))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(request));
    }
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(jwkService.getKeys(request.getJwksUri().get())).switchIfEmpty(Mono.error(new InvalidClientMetadataException("No JWK found behind jws uri...")))).flatMapSingle((jwkSet)->{
    return RxJava2Adapter.monoToSingle(Mono.just(request));
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(this.extractRequest(context)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<PermissionTicketRequest>, SingleSource<List<PermissionTicketRequest>>>toJdkFunction(this::bodyValidation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::toPermissionRequest)).flatMap((permissionRequests)->RxJava2Adapter.singleToMono(permissionTicketService.create(permissionRequests, domain.getId(), client.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction(PermissionTicketResponse::from))).subscribe((permission)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).setStatusCode(HttpStatusCode.CREATED_201).end(Json.encodePrettily(permission)), context::fail);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<PermissionTicketRequest>, SingleSource<List<PermissionTicketRequest>>>toJdkFunction(this::bodyValidation).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | userConsentService.saveConsent(client, approvals, getAuthenticatedUser(request, endUser)).subscribe((approvals1)->handler.handle(Future.succeededFuture(approvals1)), (error)->handler.handle(Future.failedFuture(error)));
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((accessTokens)->accessTokens != null && !accessTokens.isEmpty()))).subscribe(new AccessTokenBulkProcessor(accessTokenRepository));
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions))
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorAccessToken.onBackpressureBuffer().observeOn
1 | Flowable | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((refreshTokens)->refreshTokens != null && !refreshTokens.isEmpty()))).subscribe(new RefreshTokenBulkProcessor(refreshTokenRepository));
1 | Flowable | buffer | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer(flushInterval, TimeUnit.SECONDS, bulkActions))
1 | Flowable | observeOn | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn(Schedulers.io()).buffer
1 | Flowable | onBackpressureBuffer | METHOD_INVOCATION | bulkProcessorRefreshToken.onBackpressureBuffer().observeOn
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = umaTokenGranter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = umaTokenGranter.resolveRequest(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = scopeService.getAll().test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = revocationTokenService.revoke(revocationTokenRequest, client).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.create(authorizationRequest, user).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Observable | fromIterable | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(anyString())).thenReturn(Observable.fromIterable(tokens))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Observable | fromIterable | METHOD_INVOCATION | when(accessTokenRepository.findByAuthorizationCode(anyString())).thenReturn(Observable.fromIterable(tokens))
1 | Maybe | test | METHOD_INVOCATION | TestObserver<AuthorizationCode> testObserver = authorizationCodeService.remove(authorizationCode.getCode(), client).test()
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<PushedAuthorizationRequestResponse> observer = cut.registerParameters(par, client).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI("invalideuri", createClient(), new OpenIDProviderMetadata()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, createClient(), new OpenIDProviderMetadata()).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<JWT> testObserver = cut.readFromURI(requestUri, client, new OpenIDProviderMetadata()).test()
1 | Maybe | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient("", null, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient("unsupported", null, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, "", null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientAssertionService.assertClient(JWT_BEARER_TYPE, assertion, basePath).test()
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenEnhancer.enhance(accessToken, oAuth2Request, client, null, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenEnhancer.enhance(accessToken, oAuth2Request, client, null, null).test()
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = rulesEngine.fire(Collections.emptyList(), executionContext).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(null, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.patch(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.patch(new Client(), request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.update(new Client(), new DynamicClientRegistrationRequest(), BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.update(new Client(), request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.delete(new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.renewSecret(toRenew, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Client> testObserver = dcrService.create(request, BASE_PATH).test()
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientService.findById("my-client").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = clientService.findById("my-client").test()
1 | Maybe | subscribe | METHOD_INVOCATION | clientService.findById("my-client").subscribe(testObserver);
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(toCreate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.create(toCreate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.update(toUpdate).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = clientService.delete("my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = clientService.renewClientSecret(DOMAIN, "my-client").test()
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = granter.grant(tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | granter.grant(tokenRequest, client).test().assertError
1 | Single | test | METHOD_INVOCATION | granter.grant(tokenRequest, client).test().assertError
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = requestObjectService.readRequestObject(request, client, false).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWT> testObserver = requestObjectService.readRequestObject(request, client, false).test()
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null, executionContext).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<String> testObserver = idTokenService.create(oAuth2Request, client, user).test()
1 | Single | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo(jwt, new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo(JWT, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken(jwt, new Client()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken(JWT, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(tokenRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<TokenRequest> testObserver = tokenRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.create(oAuth2Request, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh("encoded", tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = tokenService.refresh(refreshToken.getToken(), tokenRequest, client).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptIdToken("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = jweService.encryptUserinfo("JWT", client).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<AuthorizationRequest> testObserver = authorizationRequestResolver.resolve(authorizationRequest, client, user).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<IntrospectionResponse> testObserver = introspectionService.introspect(introspectionRequest).test()
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys("blabla").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(JWKS_URI).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, "expectedKid").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKey(jwkSet, "expectedKid").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(new Client()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(client).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.getKeys(client).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, null).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.RSA_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.parse("none"))).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A128GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A192GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256KW)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(jwkSet, JWKFilter.OCT_KEY_ENCRYPTION(JWEAlgorithm.A256GCMKW)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A128CBC_HS256)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A192CBC_HS384)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256GCM)).test()
1 | Maybe | test | METHOD_INVOCATION | testObserver = jwkService.filter(JWK_SET, JWKFilter.OCT_KEY_ENCRYPTION(EncryptionMethod.A256CBC_HS512)).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(rsaSet, JWKFilter.RSA_KEY_ENCRYPTION()).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver testObserver = jwkService.filter(okpSet, JWKFilter.CURVE_KEY_ENCRYPTION()).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Single | test | METHOD_INVOCATION | TestObserver<JWKSet> testObserver = jwkService.getKeys().test()
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Token> testObserver = granter.grant(tokenRequest, client).test()
1 | Single | subscribe | METHOD_INVOCATION | groupService.list(page - 1, size, location(context.request())).subscribe((groups)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(groups)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | groupService.create(group, location(context.request())).subscribe((group1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(groupRepository.findAll(ReferenceType.DOMAIN, domain.getId(), page, size)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find groups by domain {}", domain, ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find groups by domain %s", domain), ex)));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.Group>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.Group>>>toJdkFunction((groupPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<Group>(null, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((groups)->new ListResponse<>(groups, groupPage.getCurrentPage() + 1, groupPage.getTotalCount(), groups.size()))));
    }
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle((group)->setMembers(group, baseUrl)).toList
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map((group)->convert(group, baseUrl, true)).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(groupPage.getData()).map
1 | Flowable | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->convert(group, baseUrl, false))).flatMap((z)->RxJava2Adapter.singleToMono(setMembers(z, baseUrl)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a group using its ID", groupId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", groupId), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.singleToMono(setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, true))).flatMap((group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl)))).onErrorResumeNext((ex)->{
    if (ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to router a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to router a group", ex)));
    }
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupModel = convert(group1);
    groupModel.setId(RandomString.generate());
    groupModel.setReferenceType(ReferenceType.DOMAIN);
    groupModel.setReferenceId(domain.getId());
    groupModel.setCreatedAt(new Date());
    groupModel.setUpdatedAt(groupModel.getCreatedAt());
    return groupRepository.create(groupModel);
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))).flatMapSingle((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->convert(group1, baseUrl, false))).flatMap((group1)->RxJava2Adapter.singleToMono(setMembers(group1, baseUrl)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException || ex instanceof SCIMException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to update a group", ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a group", ex)));
    }
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId)))).flatMapSingle((existingGroup)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v)))))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(groupRepository.findByName(ReferenceType.DOMAIN, domain.getId(), group.getDisplayName())).map(RxJavaReactorMigrationUtil.toJdkFunction((group1)->{
    if (!existingGroup.getId().equals(group1.getId())) {
        throw new UniquenessException("Group with display name [" + group.getDisplayName() + "] already exists");
    }
    return existingGroup;
})).defaultIfEmpty(existingGroup)).flatMapSingle((irrelevant)->setMembers(group, baseUrl)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.gateway.handler.scim.model.Group, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    io.gravitee.am.model.Group groupToUpdate = convert(group1);
    groupToUpdate.setId(existingGroup.getId());
    groupToUpdate.setReferenceType(existingGroup.getReferenceType());
    groupToUpdate.setReferenceId(existingGroup.getReferenceId());
    groupToUpdate.setCreatedAt(existingGroup.getCreatedAt());
    groupToUpdate.setUpdatedAt(new Date());
    return groupRepository.update(groupToUpdate);
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(get(groupId, baseUrl)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Group>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Group, Single<Group>>)(group)->{
    ObjectNode node = objectMapper.convertValue(group, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    return update(groupId, objectMapper.treeToValue(node, Group.class), baseUrl);
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to delete group: %s", groupId), ex)));
    }
});
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(groupRepository.findById(groupId)).switchIfEmpty(Mono.error(new GroupNotFoundException(groupId))).flatMap((user)->RxJava2Adapter.completableToMono(groupRepository.delete(groupId))).then()).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete group: {}", groupId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete group: %s", groupId), ex)));
    }
});
1 | Single | RETURN_TYPE
1 | Single | subscribe | METHOD_INVOCATION | userService.list(filter, page - 1, size, location(context.request())).subscribe((users)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(users)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | userService.create(user, location(context.request())).subscribe((user1)->context.response().setStatusCode(201).putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Maybe | subscribe | METHOD_INVOCATION | groupService.get(groupId, location(context.request())).subscribe((group)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group)), context::fail, ()->context.fail(new GroupNotFoundException(groupId)));
1 | Single | subscribe | METHOD_INVOCATION | groupService.update(groupId, group, location(context.request())).subscribe((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | groupService.patch(groupId, patchOp, location(context.request())).subscribe((group1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, group1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(group1)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | groupService.delete(groupId).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | userService.get(userId, location(context.request())).subscribe((user)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user)), context::fail, ()->context.fail(new UserNotFoundException(userId)));
1 | Single | subscribe | METHOD_INVOCATION | userService.update(userId, user, location(context.request())).subscribe((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Single | subscribe | METHOD_INVOCATION | userService.patch(userId, patchOp, location(context.request())).subscribe((user1)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).putHeader(HttpHeaders.LOCATION, user1.getMeta().getLocation()).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(user1)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | userService.delete(userId).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findUsers).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v))))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find users for the security domain {}", domain.getName(), ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find users the security domain %s", domain.getName()), ex)));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<ListResponse<io.gravitee.am.gateway.handler.scim.model.User>>>toJdkFunction((userPage)->{
    if (size <= 0) {
        return RxJava2Adapter.monoToSingle(Mono.just(new ListResponse<User>(null, userPage.getCurrentPage() + 1, userPage.getTotalCount(), 0)));
    } else {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList()).map(RxJavaReactorMigrationUtil.toJdkFunction((users)->new ListResponse<>(users, userPage.getCurrentPage() + 1, userPage.getTotalCount(), users.size()))));
    }
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle(this::setGroups).toList
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map((user1)->convert(user1, baseUrl, true)).flatMapSingle
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(userPage.getData()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((z)->RxJava2Adapter.singleToMono(setGroups(z)))).onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to find a user using its ID {}", userId, ex);
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to find a user using its ID: %s", userId), ex)));
});
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, true)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof SCIMException || ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to create a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to create a user", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findByUsernameAndSource(ReferenceType.DOMAIN, domain.getId(), user.getUserName(), source)).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((isEmpty)->{
    if (!isEmpty) {
        throw new UniquenessException("User with username [" + user.getUserName() + "] already exists");
    }
    return true;
})).flatMap((__)->RxJava2Adapter.completableToMono(checkRoles(user.getRoles()))).then().then(Mono.defer(()->RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(source)))).switchIfEmpty(Mono.error(new UserProviderNotFoundException(source)))).flatMapSingle((userProvider)->{
    io.gravitee.am.model.User userModel = convert(user);
    userModel.setId(RandomString.generate());
    userModel.setReferenceType(ReferenceType.DOMAIN);
    userModel.setReferenceId(domain.getId());
    userModel.setSource(source);
    userModel.setInternal(true);
    userModel.setCreatedAt(new Date());
    userModel.setUpdatedAt(userModel.getCreatedAt());
    userModel.setEnabled(userModel.getPassword() != null);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userModel)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userModel.setPassword(null);
        userModel.setExternalId(idpUser.getId());
        return userRepository.create(userModel);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userProvider.create(convert(userModel))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new UniquenessException("User with username [" + user.getUserName() + "] already exists")));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userModel.setPassword(null);
    userModel.setExternalId(idpUser.getId());
    return userRepository.create(userModel);
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((existingUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
})).map(RxJavaReactorMigrationUtil.toJdkFunction((user1)->convert(user1, baseUrl, false))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)this::setGroups).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof SCIMException || ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    if (ex instanceof AbstractNotFoundException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException(ex.getMessage())));
    }
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
    LOGGER.error("An error occurs while trying to update a user", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to update a user", ex)));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userRepository.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((existingUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkRoles(user.getRoles())).then(RxJava2Adapter.singleToMono(Single.defer(()->{
        io.gravitee.am.model.User userToUpdate = convert(user);
        userToUpdate.setId(existingUser.getId());
        userToUpdate.setExternalId(existingUser.getExternalId());
        userToUpdate.setUsername(existingUser.getUsername());
        userToUpdate.setReferenceType(existingUser.getReferenceType());
        userToUpdate.setReferenceId(existingUser.getReferenceId());
        userToUpdate.setSource(existingUser.getSource());
        userToUpdate.setCreatedAt(existingUser.getCreatedAt());
        userToUpdate.setUpdatedAt(new Date());
        userToUpdate.setFactors(existingUser.getFactors());
        UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
            if (userToUpdate.getExternalId() == null) {
                return userProvider.create(convert(userToUpdate));
            } else {
                return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
            }
        })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            userToUpdate.setPassword(null);
            userToUpdate.setExternalId(idpUser.getId());
            if (user.getPassword() != null) {
                userToUpdate.setLastPasswordReset(new Date());
            }
            return userRepository.update(userToUpdate);
        }).apply(v))))).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
                userToUpdate.setPassword(null);
                return userRepository.update(userToUpdate);
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }))));
    }))));
}))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    io.gravitee.am.model.User userToUpdate = convert(user);
    userToUpdate.setId(existingUser.getId());
    userToUpdate.setExternalId(existingUser.getExternalId());
    userToUpdate.setUsername(existingUser.getUsername());
    userToUpdate.setReferenceType(existingUser.getReferenceType());
    userToUpdate.setReferenceId(existingUser.getReferenceId());
    userToUpdate.setSource(existingUser.getSource());
    userToUpdate.setCreatedAt(existingUser.getCreatedAt());
    userToUpdate.setUpdatedAt(new Date());
    userToUpdate.setFactors(existingUser.getFactors());
    UserFactorUpdater.updateFactors(existingUser.getFactors(), existingUser, userToUpdate);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToUpdate)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
        if (userToUpdate.getExternalId() == null) {
            return userProvider.create(convert(userToUpdate));
        } else {
            return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
        }
    })).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        userToUpdate.setPassword(null);
        userToUpdate.setExternalId(idpUser.getId());
        if (user.getPassword() != null) {
            userToUpdate.setLastPasswordReset(new Date());
        }
        return userRepository.update(userToUpdate);
    }).apply(v))))).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
            userToUpdate.setPassword(null);
            return userRepository.update(userToUpdate);
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }))));
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
})).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v))))).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException || ex instanceof UserInvalidException) {
        userToUpdate.setPassword(null);
        return userRepository.update(userToUpdate);
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(userToUpdate.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(userToUpdate.getSource())))).flatMapSingle((userProvider)->{
    if (userToUpdate.getExternalId() == null) {
        return userProvider.create(convert(userToUpdate));
    } else {
        return userProvider.update(userToUpdate.getExternalId(), convert(userToUpdate));
    }
}))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    userToUpdate.setPassword(null);
    userToUpdate.setExternalId(idpUser.getId());
    if (user.getPassword() != null) {
        userToUpdate.setLastPasswordReset(new Date());
    }
    return userRepository.update(userToUpdate);
}).apply(v)))
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(get(userId, baseUrl)).switchIfEmpty(Mono.error(new UserNotFoundException(userId))).flatMap((v)->RxJava2Adapter.singleToMono((Single<User>)RxJavaReactorMigrationUtil.toJdkFunction((Function<User, Single<User>>)(user)->{
    ObjectNode node = objectMapper.convertValue(user, ObjectNode.class);
    patchOp.getOperations().forEach((operation)->operation.apply(node));
    User userToPatch = objectMapper.treeToValue(node, User.class);
    if (isInvalidUserPassword(userToPatch)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new InvalidValueException("Field [password] is invalid")));
    }
    return update(userId, userToPatch, baseUrl);
}).apply(v)))).onErrorResumeNext((ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    } else {
        LOGGER.error("An error has occurred when trying to patch user: {}", userId, ex);
        return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException(String.format("An error has occurred when trying to patch user: %s", userId), ex)));
    }
});
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | OTHER
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof AbstractManagementException) {
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    } else {
        LOGGER.error("An error occurs while trying to delete user: {}", userId, ex);
        return RxJava2Adapter.monoToCompletable(Mono.error(new TechnicalManagementException(String.format("An error occurs while trying to delete user: %s", userId), ex)));
    }
}))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource()))).flatMap((userProvider)->RxJava2Adapter.completableToMono(userProvider.delete(user.getExternalId()))).then(RxJava2Adapter.completableToMono(userRepository.delete(userId)))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return userRepository.delete(userId);
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | subscribe | METHOD_INVOCATION | serviceProviderConfigService.get().subscribe((config)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(config)), context::fail);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.create(newUser, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.update(existingUser.getId(), scimUser, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = userService.patch(userId, patchOp, "/").test()
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "https://mydomain/scim/Groups").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.create(newGroup, "/").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Group> testObserver = groupService.patch(groupId, patchOp, "/").test()
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return scopeApprovalService.findByDomainAndUser(domain.getId(), userId).collect(HashSet::new, Set::add);
1 | Single | RETURN_TYPE
1 | Flowable | collect | METHOD_INVOCATION | return scopeApprovalService.findByDomainAndUserAndClient(domain.getId(), userId, clientId).collect(HashSet::new, Set::add);
1 | Maybe | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | userService.consent(consentId).subscribe((scopeApproval)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApproval)), context::fail);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((principal)->RxJava2Adapter.completableToMono(userService.revokeConsent(userId, consentId, principal))).then()).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(Mono.just(Optional.ofNullable(clientId)).flatMap((v)->RxJava2Adapter.singleToMono((Single<Set<ScopeApproval>>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, Single<Set<ScopeApproval>>>)(optClient)->{
    if (optClient.isPresent()) {
        return userService.consents(userId, optClient.get());
    }
    return userService.consents(userId);
}).apply(v)))).subscribe((scopeApprovals)->context.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache").putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON).end(Json.encodePrettily(scopeApprovals)), context::fail);
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(Mono.just(Optional.ofNullable(clientId)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))).then());
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))).then());
}).apply(y)))).then()).subscribe(()->context.response().setStatusCode(204).end(), context::fail);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<String>, CompletableSource>)(optClient)->{
    if (optClient.isPresent()) {
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))).then());
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(getPrincipal(context)).flatMap((t)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))).then());
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, optClient.get(), principal)).apply(t)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((principal)->userService.revokeConsents(userId, principal)).apply(t)))
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Set<ScopeApproval>> testObserver = userService.consents(userId).test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = userService.consent("consentId").test()
1 | Maybe | test | METHOD_INVOCATION | TestObserver<ScopeApproval> testObserver = userService.consent("consentId").test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.revokeConsents(userId).test()
1 | Completable | test | METHOD_INVOCATION | TestObserver testObserver = userService.revokeConsent(userId, consentId).test()
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | serviceProviderService.metadata(providerId, basePath).subscribe((result)->{
    HttpServerResponse response = routingContext.response().putHeader(HttpHeaders.CACHE_CONTROL, "no-store").putHeader(HttpHeaders.PRAGMA, "no-cache");
    if (result.getHeaders() != null) {
        result.getHeaders().forEach(response::putHeader);
    }
    response.setStatusCode(HttpStatusCode.OK_200).end(result.getBody());
}, (error)->routingContext.response().setStatusCode(error instanceof AbstractManagementException ? ((AbstractManagementException)error).getHttpStatusCode() : 500).end());
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Metadata> testObserver = serviceProviderService.metadata("provider-id", "https://idp.example.com").test()
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
}, (err)->{
    logger.error("Unable to start HTTP server", err.getCause());
    Runtime.getRuntime().exit(1);
});
1 | Single | subscribe | METHOD_INVOCATION | client.rxConnect(port, host).doFinally(client::close).subscribe((socket)->future.complete(Result.healthy()), (error)->future.complete(Result.unhealthy(error.getCause())));
1 | Single | doFinally | METHOD_INVOCATION | client.rxConnect(port, host).doFinally(client::close).subscribe
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        Verification verification = Verification.creator(configuration.getSid(), target.getTarget(), channel).create();
        LOGGER.debug("Twilio Verification code asked with ID \'{}\'", verification.getSid());
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
});
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        VerificationCheck verification = VerificationCheck.creator(configuration.getSid(), challenge.getCode()).setTo(challenge.getTarget()).create();
        LOGGER.debug("Twilio Verification code with ID \'{}\' verified with status \'{}\'", verification.getSid(), verification.getStatus());
        if (!APPROVED.equalsIgnoreCase(verification.getStatus())) {
            emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
        }
        emitter.onComplete();
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    try {
        TfaStartAuthenticationResponse sendCodeResponse = this.tfaApi.sendTfaPinCodeOverSms(true, new TfaStartAuthenticationRequest().applicationId(applicationId).messageId(messageId).from("InfoSMS").to(this.to));
        boolean isSuccessful = sendCodeResponse.getSmsStatus().equals("MESSAGE_SENT");
        if (!isSuccessful) {
            emitter.onError(new SendChallengeException("Message not sent"));
        } else {
            this.pinId = sendCodeResponse.getPinId();
            LOGGER.debug("Infobip Verification code asked with ID \'{}\'", sendCodeResponse.getPinId());
            emitter.onComplete();
        }
    } catch (ApiException e) {
        this.LOGGER.error("Challenge emission fails", e);
        emitter.onError(new SendChallengeException("Unable to send challenge"));
    }
});
1 | Completable | OTHER
1 | Completable | create | METHOD_INVOCATION | return Completable.create((emitter)->{
    String pin = challenge.getCode();
    try {
        TfaVerifyPinResponse verifyResponse = this.tfaApi.verifyTfaPhoneNumber(pinId, new TfaVerifyPinRequest().pin(pin));
        boolean verified = verifyResponse.getVerified();
        LOGGER.debug("Infobip Verification code with ID \'{}\' verified with status \'{}\'", this.pinId, verified);
        if (!verified) {
            emitter.onError(new InvalidCodeException("Challenger not verified"));
        } else {
            emitter.onComplete();
        }
    } catch (ApiException e) {
        LOGGER.error("Challenge verification fails", e);
        emitter.onError(new InvalidCodeException("Invalid 2FA Code"));
    }
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(client.post(URI.create(configuration.getServiceUrl()).toString()).rxSendForm(MultiMap.caseInsensitiveMultiMap().set("secret", configuration.getSecretKey()).set("response", token))).map(RxJavaReactorMigrationUtil.toJdkFunction((buffer)->{
    if (buffer.statusCode() != 200) {
        LOGGER.error("An error occurred when trying to validate ReCaptcha token. (status={}/message={})", buffer.statusCode(), buffer.statusMessage());
        return false;
    }
    final JsonObject response = buffer.bodyAsJsonObject();
    Boolean success = response.getBoolean("success", false);
    Double score = response.getDouble("score", 0.0);
    LOGGER.debug("ReCaptchaService success: {} score: {}", success, score);
    return (success && score >= configuration.getMinScore());
}))).onErrorResumeNext((throwable)->{
    LOGGER.error("An error occurred when trying to validate ReCaptcha token.", throwable);
    return RxJava2Adapter.monoToSingle(Mono.just(false));
});
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", null, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> testCall = cut.validate(new BotDetectionContext("plugin_id", multiMap, null)).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | create | METHOD_INVOCATION | return Single.create((emitter)->{
    try {
        emitter.onSuccess(extensionGrantPluginManager.getAll().stream().map(this::convert).collect(Collectors.toSet()));
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to list all extension grant plugins", ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to list all extension grant plugins", ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin extensionGrant = extensionGrantPluginManager.findById(extensionGrantPluginId);
        if (extensionGrant != null) {
            emitter.onSuccess(convert(extensionGrant));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get extension grant plugin : {}", extensionGrantPluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get extension grant plugin : " + extensionGrantPluginId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = extensionGrantPluginManager.getSchema(extensionGrantPluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for extension grant plugin {}", extensionGrantPluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for extension grant plugin " + extensionGrantPluginId, e));
    }
});
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::prepareAETriggers))).flatMapSingle(this::registerAETrigger).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system.", count), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system", throwable));
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::prepareAETriggers))).flatMapSingle(this::registerAETrigger).count().subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName()))).flatMap(RxJavaReactorMigrationUtil.toJdkFunction(this::prepareAETriggers))).flatMapSingle(this::registerAETrigger).count
1 | Flowable | doOnNext | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(domainService.findAllByCriteria(new DomainCriteria()).doOnNext((domain)->LOGGER.info("Sending alert triggers for domain {}", domain.getName())))
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}].", count, payload.getReferenceId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}]", payload.getReferenceId(), throwable));
1 | Flowable | count | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count().subscribe
1 | Flowable | flatMapSingle | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle(this::registerAETrigger).count
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapPublisher(this::prepareAETriggers).flatMapSingle
1 | Single | subscribe | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerService.getById(payload.getId())).flatMap((alertTrigger)->RxJava2Adapter.singleToMono(this.prepareAETrigger(domain, alertTrigger))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)this::registerAETrigger).apply(v))))).subscribe((aeTrigger)->LOGGER.info("Alert trigger [{}] synchronized with the alerting system.", aeTrigger.getId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert trigger [{}] with alerting system", payload.getId(), throwable));
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(payload.getReferenceId()).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertTriggerService.getById(payload.getId())).flatMap((alertTrigger)->RxJava2Adapter.singleToMono(this.prepareAETrigger(domain, alertTrigger))).flatMap((v)->RxJava2Adapter.singleToMono((Single<Trigger>)RxJavaReactorMigrationUtil.toJdkFunction((Function<Trigger, Single<Trigger>>)this::registerAETrigger).apply(v))))).subscribe
1 | Single | OTHER
1 | Single | OTHER
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(payload.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled()))).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count().subscribe((count)->LOGGER.info("{} alert triggers synchronized with the alerting system for domain [{}] after the update of alert notifier [{}].", count, payload.getReferenceId(), payload.getId()), (throwable)->LOGGER.error("An error occurred when trying to synchronize alert triggers with alerting system for domain [{}] after the alert notifier {} event [{}].", payload.getReferenceId(), event.type().name().toLowerCase(), payload.getId(), throwable));
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(payload.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled()))).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count().subscribe
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(payload.getReferenceId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((domain)->domain.isEnabled() && domain.isAlertEnabled()))).flatMapPublisher((domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)).count
1 | Flowable | flatMapSingle | METHOD_INVOCATION | (domain)->this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle(this::registerAETrigger)
1 | Flowable | flatMapSingle | METHOD_INVOCATION | this.alertTriggerService.findByDomainAndCriteria(domain.getId(), alertTriggerCriteria).flatMapSingle((alertTrigger)->prepareAETrigger(domain, alertTrigger)).flatMapSingle
1 | Single | RETURN_TYPE
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    triggerProvider.register(trigger);
    LOGGER.debug("Alert trigger [{}] has been pushed to alert system.", trigger.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(trigger));
}))
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(alertTriggerService.findByDomainAndCriteria(domain.getId(), new AlertTriggerCriteria()).flatMapSingle((alertTrigger)->this.prepareAETrigger(domain, alertTrigger)))
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | resolveProperties((ResolvePropertyCommand)command).subscribe((result)->resultHandler.handle((T)result), (error)->resultHandler.handle(null));
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | domainService.findById(domainId).flatMapSingle((domain)->{
    properties.put("id", domain.getId());
    properties.put("name", domain.getName());
    properties.put("description", domain.getDescription());
    properties.put("tags", domain.getTags());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(properties))))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | applicationService.findById(applicationId).flatMapSingle((application)->{
    properties.put("id", application.getId());
    properties.put("name", application.getName());
    properties.put("description", application.getDescription());
    properties.put("type", application.getType());
    properties.put("metadata", application.getMetadata());
    return RxJava2Adapter.monoToSingle(Mono.just(properties));
}).onErrorResumeNext
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(policyPluginManager.getAll()).map((policyPlugin)->convert(policyPlugin, expand)).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(policyPluginManager.getAll()).map((policyPlugin)->convert(policyPlugin, expand)).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(policyPluginManager.getAll()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        PolicyPlugin policy = convert(policyPluginManager.get(policyId));
        if (policy != null) {
            emitter.onSuccess(policy);
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get policy plugin : {}", policyId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get policy plugin : " + policyId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = policyPluginManager.getSchema(policyId);
        if (schema != null) {
            JsonNode schemaNode = objectMapper.readTree(schema);
            if (schemaNode.has("properties")) {
                ObjectNode properties = (ObjectNode)schemaNode.get("properties");
                properties.remove("scope");
                properties.remove("onResponseScript");
                properties.remove("onRequestContentScript");
                properties.remove("onResponseContentScript");
            }
            emitter.onSuccess(objectMapper.writeValueAsString(schemaNode));
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for policy plugin " + policyId, e));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = policyPluginManager.getIcon(policyId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for policy plugin " + policyId, e));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String documentation = policyPluginManager.getDocumentation(policyId);
        if (documentation != null) {
            emitter.onSuccess(documentation);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get documentation for policy plugin {}", policyId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get documentation for policy plugin " + policyId, e));
    }
});
1 | Maybe | subscribe | METHOD_INVOCATION | getSchema(plugin.getId()).subscribe(plugin::setSchema);
1 | Maybe | subscribe | METHOD_INVOCATION | getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Flowable | collect | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToFlowable(Flux.merge(roleService.findRolesByName(ReferenceType.PLATFORM, Platform.DEFAULT, ReferenceType.ORGANIZATION, roleNames), roleService.findRolesByName(ReferenceType.ORGANIZATION, Organization.DEFAULT, ReferenceType.ORGANIZATION, roleNames))).collect(HashMap<String, Role>::new, (acc,role)->{
    acc.put(role.getName(), role);
}))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderService.findAll().blockingForEach((identityProvider)->{
    logger.info("\tInitializing user provider: {} [{}]", identityProvider.getName(), identityProvider.getType());
    loadUserProvider(identityProvider);
});
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById(identityProviderId).subscribe(this::loadUserProvider, (error)->logger.error("Unable to deploy user provider  {}", identityProviderId, error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.addAdditionalInformation(Collections.singletonMap(COCKPIT_INSTALLATION_STATUS, DELETED_STATUS))).flatMap((installation)->Mono.just(new GoodbyeReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Installation has been removed."))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when deleting installation.", error)))).onErrorReturn((throwable)->new GoodbyeReply(command.getId(), CommandStatus.ERROR));
1 | Single | IMPORT
1 | Flowable | blockingForEach | METHOD_INVOCATION | reporterService.findAll().blockingForEach((reporter)->{
    logger.info("Initializing audit reporter : {} for domain {}", reporter.getName(), reporter.getDomain());
    try {
        AuditReporterLauncher launcher = new AuditReporterLauncher(reporter);
        RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
            if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
                return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
            } else {
                return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
            }
        })).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe(launcher);
    } catch (Exception ex) {
        logger.error("An error has occurred while loading audit reporter: {} [{}]", reporter.getName(), reporter.getType(), ex);
        removeReporter(reporter.getId());
    }
});
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe(launcher);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
}))
1 | Maybe | subscribe | METHOD_INVOCATION | reporterService.findById(reporterId).subscribe(this::loadReporter, (error)->logger.error("Unable to deploy reporter {}", reporterId, error), ()->logger.error("No reporter found with id {}", reporterId));
1 | Maybe | subscribe | METHOD_INVOCATION | reporterService.findById(reporterId).subscribe((reporter)->{
    logger.debug("Reload reporter: {} after configuration update", reporter.getName());
    Optional<Reporter> optionalAuditReporter = auditReporters.entrySet().stream().filter((entry)->reporter.getId().equals(entry.getKey().getId())).map(Entry::getValue).findFirst();
    if (optionalAuditReporter.isPresent()) {
        try {
            Reporter auditReporter = optionalAuditReporter.get();
            if (reporter.isEnabled()) {
                auditReporter.stop();
                auditReporters.entrySet().removeIf((entry)->entry.getKey().getId().equals(reporter.getId()));
                loadReporter(reporter);
            } else {
                logger.info("Reporter: {} has been disabled", reporter.getName());
                ((EventBusReporterWrapper)auditReporter).unregister();
                if (!auditReporter.canSearch()) {
                    auditReporter.stop();
                }
            }
        } catch (Exception e) {
            logger.error("An error occurs while reloading reporter: {}", reporter.getName(), e);
        }
    } else {
        logger.info("There is no reporter to reload");
    }
}, (error)->logger.error("Unable to reload reporter {}", reporterId, error), ()->logger.error("No reporter found with id {}", reporterId));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
})).subscribeOn(reactor.core.scheduler.Schedulers.boundedElastic())).subscribe(launcher);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(reporter.getDomain()).flatMapSingle((domain)->{
    if (ReferenceType.ENVIRONMENT == domain.getReferenceType()) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(domain.getReferenceId())).map(RxJavaReactorMigrationUtil.toJdkFunction((env)->new GraviteeContext(env.getOrganizationId(), env.getId(), domain.getId()))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new EnvironmentNotFoundException("Domain " + reporter.getDomain() + " should be lined to an Environment")));
    }
}))
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | deployment.subscribe((id)->{
    deploymentId = id;
    if (!reporters.isEmpty()) {
        for (io.gravitee.reporter.api.Reporter reporter : reporters) {
            try {
                logger.info("Starting reporter: {}", reporter);
                reporter.start();
            } catch (Exception ex) {
                logger.error("Unexpected error while starting reporter", ex);
            }
        }
    } else {
        logger.info("\tThere is no reporter to start");
    }
}, (err)->{
    logger.error("Reporter service can not be started", err);
});
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.createOrUpdate(ReferenceType.ORGANIZATION, userPayload.getOrganizationId(), newUser)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->logger.info("User [{}] created with id [{}].", user.getUsername(), user.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new UserReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when creating user [{}] for organization [{}].", userPayload.getUsername(), userPayload.getOrganizationId(), error)))).onErrorReturn((throwable)->new UserReply(command.getId(), CommandStatus.ERROR));
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((app)->app.getSettings() != null && app.getSettings().getOauth() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList
1 | Maybe | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(applicationService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((applications)->applications != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER)
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Application, ObservableSource<String>>toJdkFunction((app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())).apply(z)), BackpressureStrategy.BUFFER)
1 | Observable | fromIterable | METHOD_INVOCATION | (app)->Observable.fromIterable(app.getSettings().getOauth().getScopes())
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((role)->role.getOauthScopes() != null)).flatMap((z)->RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER))).flatMapSingle((scope)->createScope(domain.getId(), scope)).toList
1 | Maybe | flatMapObservable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(roleService.findByDomain(domain.getId())).filter(RxJavaReactorMigrationUtil.toJdkPredicate((roles)->roles != null))).flatMapObservable(Observable::fromIterable), BackpressureStrategy.BUFFER)
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Observable | wrap | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.wrap(RxJavaReactorMigrationUtil.<Role, ObservableSource<String>>toJdkFunction((role)->Observable.fromIterable(role.getOauthScopes())).apply(z)), BackpressureStrategy.BUFFER)
1 | Observable | fromIterable | METHOD_INVOCATION | (role)->Observable.fromIterable(role.getOauthScopes())
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.createOrUpdate(environmentPayload.getOrganizationId(), environmentPayload.getId(), newEnvironment, null)).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new EnvironmentReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Environment [{}] handled with id [{}].", environmentPayload.getName(), environmentPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling environment [{}] with id [{}].", environmentPayload.getName(), environmentPayload.getId(), error)))).onErrorReturn((throwable)->new EnvironmentReply(command.getId(), CommandStatus.ERROR));
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        Application client = optClient.orElse(null);
        newUser.setDomain(domain.getId());
        newUser.setClient(client != null ? client.getId() : null);
        newUser.setInternal(true);
        if (newUser.isPreRegistration()) {
            newUser.setPassword(null);
            newUser.setRegistrationCompleted(false);
            newUser.setEnabled(false);
        } else {
            String password = newUser.getPassword();
            if (password != null && isInvalidUserPassword(password, client, domain)) {
                return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
            }
            newUser.setRegistrationCompleted(true);
            newUser.setEnabled(true);
            newUser.setDomain(domain.getId());
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
            newUser.setPassword(null);
            newUser.setExternalId(idpUser.getId());
            return newUser;
        }))).onErrorResumeNext((ex)->{
            if (ex instanceof UserAlreadyExistsException) {
                return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
                    if (!empty) {
                        throw new UserAlreadyExistsException(newUser.getUsername());
                    } else {
                        newUser.setPassword(null);
                        newUser.setExternalId(idpUser.getId());
                        newUser.setUsername(idpUser.getUsername());
                        return newUser;
                    }
                }))));
            } else {
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            }
        })).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
            User user = transform(newUser1);
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
                user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
                user.setRegistrationAccessToken(getUserRegistrationToken(user));
            }
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
        }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
            AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
            if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
                return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
            } else {
                return RxJava2Adapter.monoToSingle(Mono.just(user));
            }
        }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    });
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), newUser.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
    Application client = optClient.orElse(null);
    newUser.setDomain(domain.getId());
    newUser.setClient(client != null ? client.getId() : null);
    newUser.setInternal(true);
    if (newUser.isPreRegistration()) {
        newUser.setPassword(null);
        newUser.setRegistrationCompleted(false);
        newUser.setEnabled(false);
    } else {
        String password = newUser.getPassword();
        if (password != null && isInvalidUserPassword(password, client, domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        newUser.setRegistrationCompleted(true);
        newUser.setEnabled(true);
        newUser.setDomain(domain.getId());
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        return newUser;
    }))).onErrorResumeNext((ex)->{
        if (ex instanceof UserAlreadyExistsException) {
            return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
                if (!empty) {
                    throw new UserAlreadyExistsException(newUser.getUsername());
                } else {
                    newUser.setPassword(null);
                    newUser.setExternalId(idpUser.getId());
                    newUser.setUsername(idpUser.getUsername());
                    return newUser;
                }
            }))));
        } else {
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        }
    })).flatMap((x)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
        User user = transform(newUser1);
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
            user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
            user.setRegistrationAccessToken(getUserRegistrationToken(user));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
    }).apply(x)))).flatMap((z)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
        AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
        if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
            return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
        } else {
            return RxJava2Adapter.monoToSingle(Mono.just(user));
        }
    }).apply(z)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
});
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(transform(newUser))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser)))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
    newUser.setPassword(null);
    newUser.setExternalId(idpUser.getId());
    return newUser;
}))).onErrorResumeNext((ex)->{
    if (ex instanceof UserAlreadyExistsException) {
        return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
            if (!empty) {
                throw new UserAlreadyExistsException(newUser.getUsername());
            } else {
                newUser.setPassword(null);
                newUser.setExternalId(idpUser.getId());
                newUser.setUsername(idpUser.getUsername());
                return newUser;
            }
        }))));
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    }
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return userProvider.findByUsername(newUser.getUsername()).flatMapSingle((idpUser)->RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(userService.findByDomainAndUsernameAndSource(domain.getId(), idpUser.getUsername(), newUser.getSource())).hasElement().map(RxJavaReactorMigrationUtil.toJdkFunction((empty)->{
    if (!empty) {
        throw new UserAlreadyExistsException(newUser.getUsername());
    } else {
        newUser.setPassword(null);
        newUser.setExternalId(idpUser.getId());
        newUser.setUsername(idpUser.getUsername());
        return newUser;
    }
}))));
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.service.model.NewUser, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newUser1)->{
    User user = transform(newUser1);
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && accountSettings != null && accountSettings.isDynamicUserRegistration()) {
        user.setRegistrationUserUri(domainService.buildUrl(domain, "/confirmRegistration"));
        user.setRegistrationAccessToken(getUserRegistrationToken(user));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(user)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(x)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    AccountSettings accountSettings = AccountSettings.getInstance(domain, client);
    if (newUser.isPreRegistration() && (accountSettings == null || !accountSettings.isDynamicUserRegistration())) {
        return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.just(user));
    }
}).apply(z)))
1 | Completable | toSingleDefault | METHOD_INVOCATION | return sendRegistrationConfirmation(user.getReferenceId(), user.getId(), principal).toSingleDefault(user);
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
        if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
            return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
        }
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
            return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
                ((DefaultUser)idpUser).setCredentials(password);
                return userProvider.update(idpUser.getId(), idpUser);
            }).onErrorResumeNext((ex)->{
                if (ex instanceof UserNotFoundException) {
                    user.setPassword(password);
                    return userProvider.create(convert(user));
                }
                return RxJava2Adapter.monoToSingle(Mono.error(ex));
            });
        })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
            if (user.isPreRegistration()) {
                user.setRegistrationCompleted(true);
                user.setEnabled(true);
            }
            user.setPassword(null);
            user.setExternalId(idpUser.getId());
            user.setLastPasswordReset(new Date());
            user.setUpdatedAt(new Date());
            return userService.update(user);
        }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
    });
}).apply(v)))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(checkClientFunction().apply(domain.getId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optClient)->{
    if (isInvalidUserPassword(password, optClient.orElse(null), domain)) {
        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
            ((DefaultUser)idpUser).setCredentials(password);
            return userProvider.update(idpUser.getId(), idpUser);
        }).onErrorResumeNext((ex)->{
            if (ex instanceof UserNotFoundException) {
                user.setPassword(password);
                return userProvider.create(convert(user));
            }
            return RxJava2Adapter.monoToSingle(Mono.error(ex));
        });
    })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
        if (user.isPreRegistration()) {
            user.setRegistrationCompleted(true);
            user.setEnabled(true);
        }
        user.setPassword(null);
        user.setExternalId(idpUser.getId());
        user.setLastPasswordReset(new Date());
        user.setUpdatedAt(new Date());
        return userService.update(user);
    }).apply(a)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_PASSWORD_RESET).throwable(throwable)))));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((userProvider)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
        ((DefaultUser)idpUser).setCredentials(password);
        return userProvider.update(idpUser.getId(), idpUser);
    }).onErrorResumeNext((ex)->{
        if (ex instanceof UserNotFoundException) {
            user.setPassword(password);
            return userProvider.create(convert(user));
        }
        return RxJava2Adapter.monoToSingle(Mono.error(ex));
    });
}))
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        user.setPassword(password);
        return userProvider.create(convert(user));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((idpUser)->{
    ((DefaultUser)idpUser).setCredentials(password);
    return userProvider.update(idpUser.getId(), idpUser);
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((idpUser)->{
    if (user.isPreRegistration()) {
        user.setRegistrationCompleted(true);
        user.setEnabled(true);
    }
    user.setPassword(null);
    user.setExternalId(idpUser.getId());
    user.setLastPasswordReset(new Date());
    user.setUpdatedAt(new Date());
    return userService.update(user);
}).apply(a)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<User, CompletableSource>)(user)->{
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return loginAttemptService.reset(criteria);
}).apply(y)))
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<User, CompletableSource>toJdkFunction((io.gravitee.am.model.User user)->{
    if (!user.isPreRegistration()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Pre-registration is disabled for the user " + userId)));
    }
    if (user.isPreRegistration() && user.isRegistrationCompleted()) {
        return RxJava2Adapter.monoToCompletable(Mono.error(new UserInvalidException("Registration is completed for the user " + userId)));
    }
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(checkClientFunction().apply(user.getReferenceId(), user.getClient())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty()).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> optClient)->new Thread(()->emailService.send(domain1, optClient.orElse(null), Template.REGISTRATION_CONFIRMATION, user)).start())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((java.util.Optional<io.gravitee.am.model.Application> __)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).user(user)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((java.lang.Throwable throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.REGISTRATION_CONFIRMATION_REQUESTED).throwable(throwable)))).then());
}).apply(y)))
1 | Completable | OTHER
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setAccountNonLocked(true);
    user.setAccountLockedAt(null);
    user.setAccountLockedUntil(null);
    LoginAttemptCriteria criteria = new LoginAttemptCriteria.Builder().domain(user.getReferenceId()).client(user.getClient()).username(user.getUsername()).build();
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(loginAttemptService.reset(criteria)).then(RxJava2Adapter.singleToMono(userService.update(user))));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((oldUser)->{
    User userToUpdate = new User(oldUser);
    userToUpdate.setFactors(factors);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(userToUpdate)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).user(user1).oldValue(oldUser)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_UPDATED).throwable(throwable)))));
});
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | OTHER
1 | Completable | OTHER
1 | Single | toCompletable | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(roles)).map(RxJavaReactorMigrationUtil.toJdkFunction((roles1)->{
    if (roles1.size() != roles.size()) {
        roles.removeAll(roles1.stream().map(Role::getId).collect(Collectors.toList()));
        throw new RoleNotFoundException(String.join(",", roles));
    }
    return roles1;
}))).toCompletable())
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
})).flatMap((userProvider)->RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v))))).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(user.getSource())))).flatMapSingle((io.gravitee.am.identityprovider.api.UserProvider userProvider)->{
    String client = updateUser.getClient() != null ? updateUser.getClient() : user.getClient();
    if (client != null && referenceType == ReferenceType.DOMAIN) {
        return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
            updateUser.setClient(client1.getId());
            return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
        });
    }
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return checkClient.apply(referenceId, client).flatMapSingle((io.gravitee.am.model.Application client1)->{
    updateUser.setClient(client1.getId());
    return RxJava2Adapter.monoToSingle(Mono.just(userProvider));
});
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userProvider.findByUsername(user.getUsername())).switchIfEmpty(Mono.error(new UserNotFoundException(user.getUsername())))).flatMapSingle((io.gravitee.am.identityprovider.api.User idpUser)->userProvider.update(idpUser.getId(), convert(user.getUsername(), updateUser))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.identityprovider.api.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((io.gravitee.am.identityprovider.api.User idpUser)->{
    updateUser.setExternalId(idpUser.getId());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getUserService().update(referenceType, referenceId, id, updateUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus)));
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEnabled(status);
    return getUserService().update(user);
}).apply(v)))
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | RxJava2Adapter.completableToMono(RxJava2Adapter.monoToCompletable(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(user.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))).then(RxJava2Adapter.completableToMono(getUserService().delete(userId))).then(RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then()))))).doOnComplete(()->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_DELETED).user(user))))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<UserProvider>, CompletableSource>)(java.util.Optional<io.gravitee.am.identityprovider.api.UserProvider> optUserProvider)->{
    if (!optUserProvider.isPresent()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    if (user.getExternalId() == null || user.getExternalId().isEmpty()) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
        if (ex instanceof UserNotFoundException) {
            return RxJava2Adapter.monoToCompletable(Mono.empty());
        }
        return RxJava2Adapter.monoToCompletable(Mono.error(ex));
    });
}).apply(y)))
1 | Completable | onErrorResumeNext | METHOD_INVOCATION | return optUserProvider.get().delete(user.getExternalId()).onErrorResumeNext((java.lang.Throwable ex)->{
    if (ex instanceof UserNotFoundException) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    return RxJava2Adapter.monoToCompletable(Mono.error(ex));
});
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap((ReferenceType.ORGANIZATION != referenceType) ? RxJava2Adapter.monoToCompletable(Mono.empty()) : RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(membershipService.findByMember(userId, MemberType.USER)).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))).then())))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<Membership, CompletableSource>toJdkFunction((io.gravitee.am.model.Membership membership)->membershipService.delete(membership.getId())).apply(y)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Flowable | blockingIterable | METHOD_INVOCATION | certificateService.findAll().blockingIterable().forEach
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | subscribe | METHOD_INVOCATION | certificateService.findById(certificateId).subscribe(this::loadCertificate, (error)->logger.error("Unable to deploy certificate {}", certificateId, error), ()->logger.error("No certificate found with id {}", certificateId));
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::createOrUpdateSystemScopes).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::createOrUpdateSystemScopes).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Observable | lastOrError | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle((scope)->createSystemScope(domain.getId(), scope)).lastOrError
1 | Observable | fromArray | METHOD_INVOCATION | Observable.fromArray(io.gravitee.am.common.oidc.Scope.values()).flatMapSingle
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, systemScope.getKey())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::of)).defaultIfEmpty(Optional.empty())).flatMapSingle((optScope)->{
    if (!optScope.isPresent()) {
        logger.info("Create a new system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        NewSystemScope scope = new NewSystemScope();
        scope.setKey(systemScope.getKey());
        scope.setClaims(systemScope.getClaims());
        scope.setName(systemScope.getLabel());
        scope.setDescription(systemScope.getDescription());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.create(domain, scope);
    } else if (shouldUpdateSystemScope(optScope, systemScope)) {
        logger.info("Update a system scope key[{}] for domain[{}]", systemScope.getKey(), domain);
        final Scope existingScope = optScope.get();
        UpdateSystemScope scope = new UpdateSystemScope();
        scope.setName(existingScope.getName() != null ? existingScope.getName() : systemScope.getLabel());
        scope.setDescription(existingScope.getDescription() != null ? existingScope.getDescription() : systemScope.getDescription());
        scope.setClaims(systemScope.getClaims());
        scope.setExpiresIn(existingScope.getExpiresIn());
        scope.setDiscovery(systemScope.isDiscovery());
        return scopeService.update(domain, optScope.get().getId(), scope);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(optScope.get()));
}))
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(policyRepository.collectionExists()).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
        }).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection())));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))).then()).subscribe(()->LOGGER.info("Policies to flows upgrade, done."), (error)->LOGGER.error("An error occurs while updating policies to flows", error));
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(collectionExists)->{
    if (collectionExists) {
        LOGGER.info("Policies collection exists, upgrading policies to flows");
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policyRepository.findAll()).groupBy(RxJavaReactorMigrationUtil.toJdkFunction(Policy::getDomain)).map(RxJavaReactorMigrationUtil::groupedFluxToGroupedFlowable).flatMap((z)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
            final String domain = policiesPerDomain.getKey();
            return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
        }).apply(z)))).then().then(RxJava2Adapter.completableToMono(policyRepository.deleteCollection())));
    } else {
        LOGGER.info("Policies collection doesn\'t exist, skip upgrade");
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
}).apply(y)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<GroupedFlowable<String, Policy>, CompletableSource>toJdkFunction((policiesPerDomain)->{
    final String domain = policiesPerDomain.getKey();
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.flowableToFlux(policiesPerDomain).collectList().flatMap((x)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))).then());
}).apply(z)))
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.<List<Policy>, CompletableSource>toJdkFunction((policies)->migrateToFlows(policies, domain)).apply(x)))
1 | Completable | OTHER
1 | Completable | doOnComplete | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete(()->LOGGER.info("Policies migrated to flows for domain {}", domain)).as
1 | Observable | flatMapCompletable | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable((flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()).doOnComplete
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(flows.values()).flatMapCompletable
1 | Single | toCompletable | METHOD_INVOCATION | (flow)->flowService.create(ReferenceType.DOMAIN, domain, flow).toCompletable()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | blockingGet | METHOD_INVOCATION | domainService.delete(ADMIN_DOMAIN).blockingGet();
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | blockingFirst | METHOD_INVOCATION | Membership member = RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((membership)->membership.getMemberType() == MemberType.USER))).blockingFirst(null)
1 | Flowable | count | METHOD_INVOCATION | RxJava2Adapter.singleToMono(membershipService.findByCriteria(ReferenceType.ORGANIZATION, Organization.DEFAULT, criteria).count())
1 | Completable | blockingGet | METHOD_INVOCATION | Throwable throwable = roleService.createOrUpdateSystemRoles().blockingGet()
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.model.User>>toJdkFunction((existingUser)->{
    updateInfos(existingUser, newUser);
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(userService.update(existingUser)));
}).apply(v)))
1 | Single | defer | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    User user = transform(newUser, referenceType, referenceId);
    return userService.create(user);
}))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Maybe | flatMapSingle | METHOD_INVOCATION | return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderManager.getUserProvider(newUser.getSource())).switchIfEmpty(Mono.error(new UserProviderNotFoundException(newUser.getSource())))).flatMapSingle((userProvider)->{
    newUser.setDomain(null);
    newUser.setClient(null);
    newUser.setInternal(true);
    String password = newUser.getPassword();
    if (password == null || !passwordValidator.isValid(password)) {
        return RxJava2Adapter.monoToSingle(Mono.error(InvalidPasswordException.of("Field [password] is invalid", "invalid_password_value")));
    }
    newUser.setRegistrationCompleted(true);
    newUser.setEnabled(true);
    final User userToPersist = transform(newUser, ReferenceType.ORGANIZATION, organization.getId());
    userToPersist.setReferenceId(organization.getId());
    userToPersist.setReferenceType(ReferenceType.ORGANIZATION);
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(userValidator.validate(userToPersist)).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))).then(RxJava2Adapter.singleToMono(userProvider.create(convert(newUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((idpUser)->{
        userToPersist.setPassword(PWD_ENCODER.encode(newUser.getPassword()));
        userToPersist.setId(RandomString.generate());
        userToPersist.setExternalId(userToPersist.getId());
        return userToPersist;
    })).flatMap((a)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
    }).apply(a)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::setInternalStatus))));
});
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((newOrgUser)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newOrgUser)).flatMap((newlyCreatedUser)->RxJava2Adapter.completableToMono(userService.setRoles(newlyCreatedUser)).then(Mono.just(newlyCreatedUser))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user1)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).user(user1)))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((throwable)->auditService.report(AuditBuilder.builder(UserAuditBuilder.class).principal(principal).type(EventType.USER_CREATED).throwable(throwable)))));
}).apply(a)))
1 | Completable | OTHER
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | RETURN_TYPE
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(notifierPluginManager.findAll())).flatMapSingle((plugin)->convert(plugin, expand)))
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.findById(notifierId))).flatMap((z)->RxJava2Adapter.singleToMono(convert(z)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get notifier plugin " + notifierId, throwable)));
}))
1 | Single | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getSchema(notifierId))).map(RxJavaReactorMigrationUtil.toJdkFunction(objectMapper::readTree)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((jsonSchema)->{
    final JsonNode propertiesNode = jsonSchema.get("properties");
    JsonNode messageNode = null;
    if (propertiesNode instanceof ObjectNode) {
        if (propertiesNode.has("message")) {
            messageNode = propertiesNode.get("message");
        } else if (propertiesNode.has("body")) {
            messageNode = propertiesNode.get("body");
        }
    }
    if (messageNode instanceof ObjectNode) {
        ((ObjectNode)messageNode).put("default", DEFAULT_NOTIFIER_MESSAGE);
    }
})).map(RxJavaReactorMigrationUtil.toJdkFunction(JsonNode::toString))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get schema for notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getIcon(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get incon for notifier plugin " + notifierId, throwable)));
}))
1 | Maybe | RETURN_TYPE
1 | Maybe | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(RxJava2Adapter.monoToMaybe(Mono.fromSupplier(RxJavaReactorMigrationUtil.callableAsSupplier(()->notifierPluginManager.getDocumentation(notifierId)))).onErrorResumeNext((throwable)->{
    return RxJava2Adapter.monoToMaybe(Mono.error(new TechnicalManagementException("An error occurs while trying to get documentation for notifier plugin " + notifierId, throwable)));
}))
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
})).flatMap((membership)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(membershipPayload.getOrganizationId(), membership))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((membership)->logger.info("Role [{}] assigned on {} [{}] for user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membership.getMemberId(), membershipPayload.getOrganizationId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->new MembershipReply(command.getId(), CommandStatus.SUCCEEDED))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when trying to assign role [{}] on {} [{}] for cockpit user [{}] and organization [{}].", membershipPayload.getRole(), membershipPayload.getReferenceType(), membershipPayload.getReferenceId(), membershipPayload.getUserId(), membershipPayload.getOrganizationId(), error)))).onErrorReturn((throwable)->new MembershipReply(command.getId(), CommandStatus.ERROR));
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(roleObs, userObs, (role,userId)->{
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(userId);
    membership.setReferenceType(assignableType);
    membership.setReferenceId(membershipPayload.getReferenceId());
    membership.setRoleId(role.getId());
    return membership;
}))
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(pluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(pluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pluginManager.getAll()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin resource = pluginManager.findById(pluginId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get bot detection plugin : {}", pluginId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get bot detection plugin : " + pluginId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = pluginManager.getSchema(pluginId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for bot detection plugin {}", pluginId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for bot detection plugin " + pluginId, e));
    }
});
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::updateDefaultIdp).subscribe();
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::updateDefaultIdp).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Flowable | blockingIterable | METHOD_INVOCATION | RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(emailTemplateService.findAll()).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Email::isEnabled))).blockingIterable().forEach
1 | Maybe | subscribe | METHOD_INVOCATION | emailTemplateService.findById(emailId).subscribe(this::loadEmail, (error)->logger.error("Unable to deploy email {}", emailId, error), ()->logger.error("No email found with id {}", emailId));
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(factorPluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(factorPluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(factorPluginManager.getAll()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin authenticator = factorPluginManager.findById(factorId);
        if (authenticator != null) {
            emitter.onSuccess(convert(authenticator));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get factor plugin : {}", factorId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get factor plugin : " + factorId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = factorPluginManager.getSchema(factorId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for factor plugin {}", factorId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for factor plugin " + factorId, e));
    }
});
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(Single.merge(obs)).all(RxJavaReactorMigrationUtil.toJdkPredicate((consistent)->consistent))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))))
1 | Single | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Single.merge(obs))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(applicationService.findById(applicationId).flatMapSingle((application)->{
    if (domainId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(application.getDomain().equals(domainId)));
    } else {
        return isDomainIdConsistent(application.getDomain(), environmentId, organizationId);
    }
}))
1 | Single | RETURN_TYPE
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(domainService.findById(domainId).flatMapSingle((domain)->{
    if (environmentId != null) {
        return RxJava2Adapter.monoToSingle(Mono.just(domain.getReferenceId().equals(environmentId) && domain.getReferenceType() == ReferenceType.ENVIRONMENT));
    } else {
        return isEnvironmentIdConsistent(domain.getReferenceId(), organizationId);
    }
}))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(environmentService.findById(environmentId, organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction((environment)->true))).onErrorResumeNext(RxJava2Adapter.monoToSingle(Mono.just(false))))
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | OTHER
1 | Flowable | merge | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Flowable.merge(referenceStream.map((p)->membershipService.findByCriteria(p.getKey(), p.getValue(), criteria)).collect(Collectors.toList())))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<List<Membership>, SingleSource<Map<Membership, Map<Permission, Set<Acl>>>>>toJdkFunction((allMemberships)->{
    if (allMemberships.isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyMap()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findByIdIn(allMemberships.stream().map(Membership::getRoleId).collect(Collectors.toList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((allRoles)->permissionsPerMembership(allMemberships, allRoles))));
}).apply(z)))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | return RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external()))).map((entry)->convert(entry.getValue(), expand)).toList().onErrorResumeNext((ex)->{
    LOGGER.error("An error occurs while trying to list all identity provider plugins", ex);
    return RxJava2Adapter.monoToSingle(Mono.error(new TechnicalManagementException("An error occurs while trying to list all identity provider plugins", ex)));
});
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external()))).map((entry)->convert(entry.getValue(), expand)).toList().onErrorResumeNext
1 | Observable | map | METHOD_INVOCATION | RxJava2Adapter.fluxToObservable(RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER).filter(RxJavaReactorMigrationUtil.toJdkPredicate((entry)->(external != null && external) == entry.getKey().external()))).map((entry)->convert(entry.getValue(), expand)).toList
1 | Observable | fromIterable | METHOD_INVOCATION | RxJava2Adapter.observableToFlux(Observable.fromIterable(identityProviderPluginManager.getAll().entrySet()), BackpressureStrategy.BUFFER)
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin identityProvider = identityProviderPluginManager.findById(identityProviderId);
        if (identityProvider != null) {
            emitter.onSuccess(convert(identityProvider));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get identity provider plugin : {}", identityProviderId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get identity provider plugin : " + identityProviderId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = identityProviderPluginManager.getSchema(identityProviderId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for identity provider plugin " + identityProviderId, e));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = identityProviderPluginManager.getIcon(identityProviderId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get icon for identity provider plugin {}", identityProviderId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get icon for identity provider plugin " + identityProviderId, e));
    }
});
1 | Maybe | subscribe | METHOD_INVOCATION | this.getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList())
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(values.keySet()).flatMapMaybe((appId)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(applicationService.findById((String)appId)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->{
    Map<String, Object> data = new HashMap<>();
    data.put("name", application.getName());
    data.put("domain", application.getDomain());
    return Collections.singletonMap((String)appId, data);
})).defaultIfEmpty(Collections.singletonMap((String)appId, getGenericMetadata("Deleted application", true))))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(values.keySet()).flatMapMaybe
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList().subscribe();
1 | Observable | toList | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList().subscribe
1 | Observable | flatMapSingle | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle(this::upgradeDomain).toList
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapSingle
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Single | retryWhen | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(TASK_ID)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.singleToMono(createSystemTask(instanceOperationId)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v))))).retryWhen(new RetryWithDelay(3, 5000)))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((task)->{
    switch (SystemTaskStatus.valueOf(task.getStatus())) {
    case INITIALIZED: 
        return processUpgrade(instanceOperationId, task, instanceOperationId);
    
    case FAILURE: 
        String previousOperationId = task.getOperationId();
        task.setOperationId(instanceOperationId);
        return processUpgrade(instanceOperationId, task, previousOperationId);
    
    case ONGOING: 
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("ONGOING task " + TASK_ID + " : trigger a retry")));
    
    default: 
        return RxJava2Adapter.monoToSingle(Mono.just(true));
    
    }
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<SystemTask, SingleSource<Boolean>>toJdkFunction((updatedTask)->{
    if (updatedTask.getOperationId().equals(instanceOperationId)) {
        return migrateScopeSettings(updatedTask);
    } else {
        return RxJava2Adapter.monoToSingle(Mono.error(new IllegalStateException("Task " + TASK_ID + " already processed by another instance : trigger a retry")));
    }
}).apply(v)))
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(systemTaskRepository.create(systemTask).onErrorResumeNext((err)->{
    logger.warn("SystemTask {} can\'t be created due to \'{}\'", TASK_ID, err.getMessage());
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(systemTaskRepository.findById(systemTask.getId())).single());
}))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
})).ignoreElements().then().doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe())).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
})))).onErrorResumeNext((err)->{
    logger.error("Unable to migrate scope options for applications: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}))
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(applicationRepository.findAll().flatMapSingle((app)->{
    logger.debug("Process application \'{}\'", app.getId());
    if (app.getSettings() != null && app.getSettings().getOauth() != null) {
        final ApplicationOAuthSettings oauthSettings = app.getSettings().getOauth();
        List<ApplicationScopeSettings> scopeSettings = new ArrayList<>();
        if (oauthSettings.getScopes() != null && !oauthSettings.getScopes().isEmpty()) {
            logger.debug("Process scope options for application \'{}\'", app.getId());
            for (String scope : oauthSettings.getScopes()) {
                ApplicationScopeSettings setting = new ApplicationScopeSettings();
                setting.setScope(scope);
                setting.setDefaultScope(oauthSettings.getDefaultScopes() != null && oauthSettings.getDefaultScopes().contains(scope));
                if (oauthSettings.getScopeApprovals() != null && oauthSettings.getScopeApprovals().containsKey(scope)) {
                    setting.setScopeApproval(oauthSettings.getScopeApprovals().get(scope));
                }
                scopeSettings.add(setting);
            }
            oauthSettings.setScopeSettings(scopeSettings);
            oauthSettings.setScopes(null);
            oauthSettings.setDefaultScopes(null);
            oauthSettings.setScopeApprovals(null);
            logger.debug("Update settings for application \'{}\'", app.getId());
            return applicationRepository.update(app);
        } else {
            logger.debug("No scope to process for application \'{}\'", app.getId());
        }
    } else {
        logger.debug("No scope to process for application \'{}\'", app.getId());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(app));
}))
1 | Single | subscribe | METHOD_INVOCATION | (err)->updateSystemTask(task, (SystemTaskStatus.FAILURE), task.getOperationId()).subscribe()
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(updateSystemTask(task, SystemTaskStatus.SUCCESS, task.getOperationId())).map(RxJavaReactorMigrationUtil.toJdkFunction((__)->true))).onErrorResumeNext((err)->{
    logger.error("Unable to update status for migrate scope options task: {}", err.getMessage());
    return RxJava2Adapter.monoToSingle(Mono.just(false));
}))
1 | Flowable | OTHER
1 | Flowable | PARAM
1 | Flowable | timer | METHOD_INVOCATION | return Flowable.timer(retryDelayMillis * (retryCount + 1), TimeUnit.MILLISECONDS);
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(reporterPluginManager.getAll()).map(this::convert).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(reporterPluginManager.getAll()).map(this::convert).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(reporterPluginManager.getAll()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin reporter = reporterPluginManager.findById(reporterId);
        if (reporter != null) {
            emitter.onSuccess(convert(reporter));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get reporter plugin : {}", reporterId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get reporter plugin : " + reporterId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = reporterPluginManager.getSchema(reporterId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for reporter plugin {}", reporterId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for reporter plugin " + reporterId, e));
    }
});
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(resourcePluginManager.getAll()).map((plugin)->convert(plugin, expand)).toList();
1 | Observable | map | METHOD_INVOCATION | Observable.fromIterable(resourcePluginManager.getAll()).map((plugin)->convert(plugin, expand)).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(resourcePluginManager.getAll()).map
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        Plugin resource = resourcePluginManager.findById(resourceId);
        if (resource != null) {
            emitter.onSuccess(convert(resource));
        } else {
            emitter.onComplete();
        }
    } catch (Exception ex) {
        LOGGER.error("An error occurs while trying to get resource plugin : {}", resourceId, ex);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get resource plugin : " + resourceId, ex));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String schema = resourcePluginManager.getSchema(resourceId);
        if (schema != null) {
            emitter.onSuccess(schema);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error occurs while trying to get schema for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error occurs while trying to get schema for resource plugin " + resourceId, e));
    }
});
1 | Maybe | RETURN_TYPE
1 | Maybe | create | METHOD_INVOCATION | return Maybe.create((emitter)->{
    try {
        String icon = resourcePluginManager.getIcon(resourceId);
        if (icon != null) {
            emitter.onSuccess(icon);
        } else {
            emitter.onComplete();
        }
    } catch (Exception e) {
        LOGGER.error("An error has occurred when trying to get icon for resource plugin {}", resourceId, e);
        emitter.onError(new TechnicalManagementException("An error has occurred when trying to get icon for resource plugin " + resourceId, e));
    }
});
1 | Maybe | subscribe | METHOD_INVOCATION | this.getIcon(plugin.getId()).subscribe(plugin::setIcon);
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(installationService.getOrInitialize()).map(RxJavaReactorMigrationUtil.toJdkFunction(Installation::getAdditionalInformation)).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((additionalInfos)->additionalInfos.put(Installation.COCKPIT_INSTALLATION_STATUS, installationPayload.getStatus()))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))).map(RxJavaReactorMigrationUtil.toJdkFunction((installation)->new InstallationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installation)->logger.info("Installation status is [{}].", installationPayload.getStatus()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.info("Error occurred when updating installation status.", error)))).onErrorReturn((throwable)->new InstallationReply(command.getId(), CommandStatus.ERROR));
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Map<String, String>, SingleSource<Installation>>toJdkFunction(installationService::setAdditionalInformation).apply(v)))
1 | Completable | IMPORT
1 | Observable | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable(this::updateDefaultReporter).subscribe();
1 | Observable | flatMapCompletable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable(this::updateDefaultReporter).subscribe
1 | Single | flatMapObservable | METHOD_INVOCATION | domainService.findAll().flatMapObservable(Observable::fromIterable).flatMapCompletable
1 | Observable | METHOD_REFERENCE | Observable::fromIterable
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<List<Reporter>, CompletableSource>)(reporters)->{
    if (reporters == null || reporters.isEmpty()) {
        logger.info("No default reporter found for domain {}, update domain", domain.getName());
        return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).then());
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | onErrorReturn | METHOD_INVOCATION | return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(organizationService.createOrUpdate(organizationPayload.getId(), newOrganization, null)).map(RxJavaReactorMigrationUtil.toJdkFunction((organization)->new OrganizationReply(command.getId(), CommandStatus.SUCCEEDED))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((reply)->logger.info("Organization [{}] handled with id [{}].", organizationPayload.getName(), organizationPayload.getId()))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((error)->logger.error("Error occurred when handling organization [{}] with id [{}].", organizationPayload.getName(), organizationPayload.getId(), error)))).onErrorReturn((throwable)->new OrganizationReply(command.getId(), CommandStatus.ERROR));
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<UserReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<GoodbyeReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<InstallationReply> obs = cut.handle(command).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | test | METHOD_INVOCATION | organizationUserService.delete(ReferenceType.ORGANIZATION, organization, userId).test().assertComplete
1 | Completable | test | METHOD_INVOCATION | organizationUserService.delete(ReferenceType.ORGANIZATION, organization, userId).test().assertComplete
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(organization, newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(organization, newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> testObserver = organizationUserService.createGraviteeUser(new Organization(), newUser, null).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<User> obs = organizationUserService.createOrUpdate(ReferenceType.ORGANIZATION, "orga#1", newUser).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", new User(), null, null).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", new User(), "simple", null).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", user, "Test123!", null).test()
1 | Completable | test | METHOD_INVOCATION | final TestObserver<Void> testObserver = organizationUserService.resetPassword("org#1", user, "Test123!", null).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.update(domain, id, updateUser).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.update(domain, id, updateUser).test().assertNotComplete
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertComplete
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.assignRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.assignRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.revokeRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertComplete
1 | Single | test | METHOD_INVOCATION | userService.revokeRoles(ReferenceType.DOMAIN, DOMAIN_ID, user.getId(), rolesIds).test().assertNotComplete
1 | Single | test | METHOD_INVOCATION | userService.create(domain, newUser, null).test().assertNotComplete
1 | Completable | test | METHOD_INVOCATION | userService.resetPassword(domain, user.getId(), password, null).test().assertNotComplete
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(command).test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<HelloCommand> obs = cut.prepare(new HelloCommand()).test()
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<MembershipReply> obs = cut.handle(command).test()
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<EnvironmentReply> obs = cut.handle(command).test()
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, and(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, DOMAIN, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, Permission.DOMAIN, CREATE))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.hasPermission(user, of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, Permission.ORGANIZATION, READ, CREATE)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Map<Permission, Set<Acl>>> obs = cut.findAllPermissions(user, ReferenceType.ORGANIZATION, ORGANIZATION_ID).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ)).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<Boolean> obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Single | test | METHOD_INVOCATION | obs = cut.haveConsistentReferenceIds(or(of(ReferenceType.ORGANIZATION, ORGANIZATION_ID, APPLICATION, READ), of(ReferenceType.ENVIRONMENT, ENVIRONMENT_ID, APPLICATION, READ), of(ReferenceType.DOMAIN, DOMAIN_ID, APPLICATION, READ), of(ReferenceType.APPLICATION, APPLICATION_ID, APPLICATION, READ))).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | fromArray | METHOD_INVOCATION | when(applicationRepository.findAll()).thenReturn(Flowable.fromArray(appNoSettings, appNoOauthSetings, appNoScopes, appScopes, appScopesWithOptions))
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Single | test | METHOD_INVOCATION | TestObserver<OrganizationReply> obs = cut.handle(command).test()
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = cut.isAlertingAvailable().test()
1 | Single | test | METHOD_INVOCATION | final TestObserver<Boolean> obs = cut.isAlertingAvailable().test()
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | accessTokenRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | authorizationCodeRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | refreshTokenRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | requestObjectRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | scopeApprovalRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | loginAttemptRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | permissionTicketRepository.purgeExpiredData().subscribe();
1 | Completable | subscribe | METHOD_INVOCATION | authenticationFlowContextRepository.purgeExpiredData().subscribe();
1 | Completable | IMPORT
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)this::checkPermission).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Completable | OTHER
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | OTHER
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(permissionObs, (objects)->{
    Map<ReferenceType, Map<Permission, Set<Acl>>> permissionsPerType = new HashMap<>();
    permissionsPerType.put(ReferenceType.APPLICATION, (Map<Permission, Set<Acl>>)objects[0]);
    permissionsPerType.put(ReferenceType.DOMAIN, (Map<Permission, Set<Acl>>)objects[1]);
    permissionsPerType.put(ReferenceType.ENVIRONMENT, (Map<Permission, Set<Acl>>)objects[2]);
    permissionsPerType.put(ReferenceType.ORGANIZATION, (Map<Permission, Set<Acl>>)objects[3]);
    return permissionsPerType;
}))
1 | Completable | OTHER
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.LIST)).thenMany(environmentService.findAll(organizationId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEnvironmentInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(response::resume, response::resume);
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Environment, MaybeSource<Environment>>toJdkFunction((environment)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.ENVIRONMENT, environment.getId(), Permission.ENVIRONMENT, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.ENVIRONMENT, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->environment)))).apply(e)))
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.LIST)).then(RxJava2Adapter.singleToMono(auditService.search(ReferenceType.ORGANIZATION, organizationId, queryBuilder.build(), param.getPage(), param.getSize())).flatMap((auditPage)->RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.flowableToFlux(membershipService.findByReference(organization.getId(), ReferenceType.ORGANIZATION)).collectList()).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((membership1)->Response.created(URI.create("/organizations/" + organizationId + "/members/" + membership1.getId())).entity(membership1).build())))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.LIST)).thenMany(tagService.findAll(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterTagInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.CREATE)).then(RxJava2Adapter.singleToMono(tagService.create(newTag, organizationId, authenticatedUser)))).subscribe((tag)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/tags/" + tag.getId())).entity(tag).build()), response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.LIST)).thenMany(entrypointService.findAll(organizationId)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterEntrypointInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(entrypointService.create(organizationId, newEntrypoint, authenticatedUser)))).subscribe((entrypoint)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/entrypoints/" + entrypoint.getId())).entity(entrypoint).build()), response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(roleService.findAllAssignable(ReferenceType.ORGANIZATION, organizationId, type)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterRoleInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(roleService.create(ReferenceType.ORGANIZATION, organizationId, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/roles/" + role.getId())).entity(role).build())))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.LIST)).then(RxJava2Adapter.singleToMono(groupService.findAll(ReferenceType.ORGANIZATION, organizationId, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.CREATE)).then(RxJava2Adapter.singleToMono(groupService.create(ReferenceType.ORGANIZATION, organizationId, newGroup, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/groups/" + group.getId())).entity(group).build())))).subscribe(response::resume, response::resume);
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(identityProviderService.findAll(ReferenceType.ORGANIZATION, organizationId)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(identityProviderService.create(ReferenceType.ORGANIZATION, organizationId, newIdentityProvider, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))).subscribe(response::resume, response::resume);
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ORGANIZATION, organizationId)).flatMap((organizationPermissions)->RxJava2Adapter.completableToMono(checkPermission(organizationPermissions, Permission.ORGANIZATION_USER, Acl.LIST)).then(RxJava2Adapter.singleToMono(searchUsers(ReferenceType.ORGANIZATION, organizationId, query, filter, page, size)).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))))).subscribe(response::resume, response::resume);
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(organizationPermissions, user)).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(organizationPermissions, user)).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((organization)->RxJava2Adapter.singleToMono(organizationUserService.createGraviteeUser(organization, newUser, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/users/" + user.getId())).entity(user).build())))).subscribe(response::resume, response::resume);
1 | Single | RETURN_TYPE
1 | Single | IMPORT
1 | Single | RETURN_TYPE
1 | Single | RETURN_TYPE
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
}).onErrorResumeNext((ex)->{
    if (ex instanceof IllegalArgumentException) {
        return RxJava2Adapter.monoToSingle(Mono.error(new BadRequestException(ex.getMessage())));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Single | defer | METHOD_INVOCATION | Single.defer(()->{
    FilterCriteria filterCriteria = FilterCriteria.convert(SCIMFilterParser.parse(filter));
    return service.search(referenceType, referenceId, filterCriteria, page, Integer.min(size, MAX_USERS_SIZE_PER_PAGE));
}).onErrorResumeNext
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.READ)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_SETTINGS, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationService.update(organizationId, patchOrganization, authenticatedUser)))).subscribe((organization)->response.resume(Response.ok(organization).build()), response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(formService.findByTemplate(ReferenceType.ORGANIZATION, organizationId, formTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((page)->Response.ok(page).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(formService.create(ReferenceType.ORGANIZATION, organizationId, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/forms/" + form.getId())).entity(form).build())))).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(formService.update(ReferenceType.ORGANIZATION, organizationId, form, updateForm, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(ReferenceType.ORGANIZATION, organizationId, form, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).map(RxJavaReactorMigrationUtil.toJdkFunction(UserEntity::new)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, SingleSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, SingleSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.update(ReferenceType.ORGANIZATION, organizationId, user, updateUser, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.updateStatus(ReferenceType.ORGANIZATION, organizationId, user, status.isEnabled(), authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(organizationUserService.delete(ReferenceType.ORGANIZATION, organizationId, user, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(organizationUserService.findById(ReferenceType.ORGANIZATION, organizationId, user)).filter(RxJavaReactorMigrationUtil.toJdkPredicate((existingUser)->IdentityProviderManagerImpl.IDP_GRAVITEE.equals(existingUser.getSource()))).switchIfEmpty(Mono.error(new UserInvalidException("Unable to reset password"))).flatMap((existingUser)->RxJava2Adapter.completableToMono(organizationUserService.resetPassword(organizationId, existingUser, password.getPassword(), authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.READ)).then(RxJava2Adapter.singleToMono(identityProviderService.findById(ReferenceType.ORGANIZATION, organizationId, identityProvider)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(identityProviderService.update(ReferenceType.ORGANIZATION, organizationId, identity, updateIdentityProvider, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(ReferenceType.ORGANIZATION, organizationId, identity, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.DELETE)).then(RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.ORGANIZATION, organizationId, group, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(groupService.findMembers(ReferenceType.ORGANIZATION, organizationId, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page<io.gravitee.am.model.User>>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page<>(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap((group1)->RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v))))))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(groupService.findById(ReferenceType.ORGANIZATION, organizationId, group)).flatMap((group1)->RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, userId)).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v))))))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.Group>>toJdkFunction((io.gravitee.am.model.User user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList(group1.getMembers()) : new ArrayList();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(ReferenceType.ORGANIZATION, organizationId, group, updateGroup, authenticatedUser);
}).apply(v)))
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.READ)).then(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.ORGANIZATION, organizationId, role)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(roleService.update(ReferenceType.ORGANIZATION, organizationId, role, updateRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.ORGANIZATION, organizationId, role, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.READ)).then(RxJava2Adapter.singleToMono(entrypointService.findById(entrypointId, organizationId)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(entrypointService.update(entrypointId, organizationId, entrypointToUpdate, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_ENTRYPOINT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(entrypointService.delete(entrypointId, organizationId, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(tagService.findById(tagId, organizationId)).switchIfEmpty(Mono.error(new TagNotFoundException(tagId)))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(tagService.update(tagId, organizationId, tagToUpdate, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_TAG, Acl.DELETE)).then(RxJava2Adapter.completableToMono(tagService.delete(tag, organizationId, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_MEMBER, Acl.DELETE)).then(RxJava2Adapter.singleToMono(organizationService.findById(organizationId)).flatMap((irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).then(RxJava2Adapter.singleToMono(auditService.findById(ReferenceType.ORGANIZATION, organizationId, audit)))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.ENVIRONMENT, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.ENVIRONMENT, environmentId)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.LIST)).thenMany(query != null ? domainService.search(organizationId, environmentId, query) : domainService.findAllByEnvironment(organizationId, environmentId)).flatMap((e)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterDomainInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((domains)->new Page<Domain>(domains.stream().skip((long)page * size).limit(size).collect(Collectors.toList()), page, domains.size())))).subscribe(response::resume, response::resume);
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Domain, MaybeSource<Domain>>toJdkFunction((domain)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, or(of(ReferenceType.DOMAIN, domain.getId(), Permission.DOMAIN, Acl.READ), of(ReferenceType.ENVIRONMENT, environmentId, Permission.DOMAIN, Acl.READ), of(ReferenceType.ORGANIZATION, organizationId, Permission.DOMAIN, Acl.READ)))).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((permit)->domain)))).apply(e)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN, Acl.CREATE)).then(RxJava2Adapter.singleToMono(domainService.create(organizationId, environmentId, newDomain, authenticatedUser)).flatMap((domain)->RxJava2Adapter.singleToMono(identityProviderManager.create(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.IdentityProvider __)->domain))).flatMap((domain)->RxJava2Adapter.singleToMono(reporterService.createDefault(domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((io.gravitee.am.model.Reporter __)->domain))))).subscribe((domain)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain.getId())).entity(domain).build()), response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(domainService.findByHrid(environmentId, hrid)).flatMap((domain)->RxJava2Adapter.completableToMono(checkAnyPermission(authenticatedUser, organizationId, environmentId, domain.getId(), Permission.DOMAIN, Acl.READ)).then(Mono.defer(()->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(domain, userPermissions))))))).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions)))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterDomainInfos(domain, userPermissions))))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.DELETE)).then(RxJava2Adapter.completableToMono(domainService.delete(domain, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain)))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(entrypointService.findAll(organizationId)).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((entrypoints)->filterEntrypoints(entrypoints, domain))))))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(domainService.patch(domainId, patchDomain, authenticatedUser)).flatMap((v)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domainId)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterDomainInfos(v, userPermissions)))))).subscribe(response::resume, response::resume);
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(requiredPermissions.stream().map((permission)->checkAnyPermission(organizationId, environmentId, domainId, permission, Acl.UPDATE)).collect(Collectors.toList())))
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
})).flatMap((pagedApplications)->RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList()))).sort((io.gravitee.am.model.Application a1, io.gravitee.am.model.Application a2)->a2.getUpdatedAt().compareTo(a1.getUpdatedAt())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.Application> applications)->new Page<>(applications.stream().skip(page * size).limit(size).collect(Collectors.toList()), page, applications.size())))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->{
    if (query != null) {
        return applicationService.search(domain, query, 0, Integer.MAX_VALUE);
    } else {
        return applicationService.findByDomain(domain, 0, Integer.MAX_VALUE);
    }
}))
1 | Maybe | concat | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(Maybe.concat(pagedApplications.getData().stream().map((io.gravitee.am.model.Application application)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, application.getId(), Permission.APPLICATION, Acl.READ)).filter(RxJavaReactorMigrationUtil.toJdkPredicate(Boolean::booleanValue)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean __)->filterApplicationInfos(application))))).collect(Collectors.toList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.create(domain, newApplication, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((application)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application.getId())).entity(application).build())))))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((identityProvider)->{
    if (userProvider) {
        return identityProviderManager.userProviderExists(identityProvider.getId());
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterIdentityProviderInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())).subscribe(response::resume, response::resume);
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->identityProviderService.findByDomain(domain)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/identities/" + identityProvider.getId())).entity(identityProvider).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.create(domain, newIdentityProvider, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain(domain))).filter(RxJavaReactorMigrationUtil.toJdkPredicate((c)->{
    if (!StringUtils.isEmpty(use)) {
        final JsonObject config = JsonObject.mapFrom(Json.decodeValue(c.getConfiguration(), HashMap.class));
        if (config != null && config.getJsonArray("use") != null) {
            return config.getJsonArray("use").contains(use);
        }
    }
    return true;
})).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterCertificateInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList().map(RxJavaReactorMigrationUtil.toJdkFunction((sortedCertificates)->Response.ok(sortedCertificates).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->certificateService.findByDomain(domain)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate)->{
    return Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/certificates/" + certificate.getId())).entity(certificate).build();
})))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.create(domain, newCertificate, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->searchRoles(domain, query, page, size))).map(RxJavaReactorMigrationUtil.toJdkFunction((pagedRoles)->{
    List<Role> roles = pagedRoles.getData().stream().map(this::filterRoleInfos).sorted(Comparator.comparing(Role::getName)).collect(Collectors.toList());
    return new Page<>(roles, pagedRoles.getCurrentPage(), pagedRoles.getTotalCount());
}))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.LIST)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))))).flatMapSingle((__)->searchRoles(domain, query, page, size)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.create(domain, newRole, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((role)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/roles/" + role.getId())).entity(role).build())))))
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size))).flatMap((pagedUsers)->RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).flatMap((hasPermission)->RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.List<io.gravitee.am.model.User> users)->new Page<>(users, pagedUsers.getCurrentPage(), pagedUsers.getTotalCount()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->searchUsers(ReferenceType.DOMAIN, domain, query, filter, page, size)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(hasPermission, user)).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle((io.gravitee.am.model.User user)->filterUserInfos(hasPermission, user)).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedUsers.getData()).flatMapSingle
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((user)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domainId + "/users/" + user.getId())).entity(user).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId)))).flatMapSingle((domain)->userService.create(domain, newUser, authenticatedUser)))
1 | Single | RETURN_TYPE
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList()))).map(RxJavaReactorMigrationUtil.toJdkFunction((sortedExtensionGrants)->Response.ok(sortedExtensionGrants).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(extensionGrantService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterExtensionGrantInfos)).sort((o1,o2)->String.CASE_INSENSITIVE_ORDER.compare(o1.getName(), o2.getName())).collectList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantService.create(domain, newExtensionGrant, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/extensionGrants/" + extensionGrant.getId())).entity(extensionGrant).build())))))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.LIST)).then(RxJava2Adapter.singleToMono(Single.wrap(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))))).map(RxJavaReactorMigrationUtil.toJdkFunction((searchPage)->new Page(searchPage.getData().stream().map(this::filterScopeInfos).sorted(Comparator.comparing(Scope::getKey)).collect(Collectors.toList()), searchPage.getCurrentPage(), searchPage.getTotalCount())))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(query != null ? scopeService.search(domain, query, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE)) : scopeService.findByDomain(domain, page, Math.min(size, MAX_SCOPES_SIZE_PER_PAGE))))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(scopeService.create(domain, newScope, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/scopes/" + scope.getId())).entity(scope).build())))))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndTemplate(domain, formTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, formTemplate.template())).build())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build()))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(formService.create(domain, newForm, authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/forms/" + form.getId())).entity(form).build())))))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE)))).map(RxJavaReactorMigrationUtil.toJdkFunction((groupPage)->new Page<>(groupPage.getData().stream().map(this::filterGroupInfos).collect(Collectors.toList()), groupPage.getCurrentPage(), groupPage.getTotalCount()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findByDomain(domain, page, Integer.min(size, MAX_GROUPS_SIZE_PER_PAGE))))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((group)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/groups/" + group.getId())).entity(group).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.create(domain, newGroup, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.READ)).then(RxJava2Adapter.maybeToMono(emailTemplateService.findByDomainAndTemplate(domain, emailTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/emails/" + email.getId())).entity(email).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.create(domain, newEmail, authenticatedUser)))
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.LIST)).then(RxJava2Adapter.singleToMono(auditService.search(domain, queryBuilder.build(), param.getPage(), param.getSize())).flatMap((auditPage)->RxJava2Adapter.singleToMono(hasPermission(authenticatedUser, ReferenceType.ORGANIZATION, organizationId, Permission.ORGANIZATION_AUDIT, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return auditPage;
    } else {
        return new Page<>(auditPage.getData().stream().map(FilterUtils::filterAuditInfos).collect(Collectors.toList()), auditPage.getCurrentPage(), auditPage.getTotalCount());
    }
}))))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList())))).flatMap((reporters)->RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.lang.Boolean hasPermission)->{
    if (hasPermission) {
        return reporters;
    }
    return reporters.stream().map(this::filterReporterInfos).collect(Collectors.toList());
})))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(reporterService.findByDomain(domain)).collectList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser))))).subscribe((reporter)->response.resume(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/reporters/" + reporter.getId())).entity(reporter).build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->reporterService.create(domain, newReporter, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList()))).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(domain1.getId(), ReferenceType.DOMAIN)).collectList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap((membership1)->RxJava2Adapter.completableToMono(membershipService.addEnvironmentUserRoleIfNecessary(organizationId, environmentId, newMembership, authenticatedUser)).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/members/" + membership1.getId())).entity(membership1).build()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.DOMAIN, domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(analyticsService.execute(query)))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())).subscribe(response::resume, response::resume);
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->factorService.findByDomain(domain)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/factors/" + factor.getId())).entity(factor).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.create(domain, newFactor, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.LIST)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain(domain))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterFactorInfos)).collectList())).subscribe(response::resume, response::resume);
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((___)->resourceService.findByDomain(domain)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((resource)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/resources/" + resource.getId())).entity(resource).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.create(domain, newResource, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.LIST)).then(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findAll(ReferenceType.DOMAIN, domain, true)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, convert(flows), authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((___)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(botDetectionService.findByDomain(domain)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::filterBotDetectionInfos)).collectList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/bot-detections/" + botDetection.getId())).entity(botDetection).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.create(domain, newBotDetection, authenticatedUser)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->botDetectionService.findById(botDetectionId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new BotDetectionNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((botDetection)->{
    if (!botDetection.getReferenceId().equalsIgnoreCase(domain) && botDetection.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("BotDetection does not belong to domain");
    }
    return Response.ok(botDetection).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->botDetectionService.update(domain, botDetection, updateBotDetection, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_BOT_DETECTION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(botDetectionService.delete(domain, botDetectionId, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Flowable | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.LIST)).thenMany(alertTriggerService.findByDomainAndCriteria(domainId, new AlertTriggerCriteria())).sort(Comparator.comparingInt((o)->o.getType().getOrder())).collectList()).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser))).collectList()).subscribe(response::resume, response::resume);
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.fluxToFlowable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).thenMany(RxJava2Adapter.fluxToFlowable(Flux.fromIterable(patchAlertTriggers)))).flatMapSingle((patchAlertTrigger)->alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).thenMany(alertNotifierService.findByDomainAndCriteria(domainId, new AlertNotifierCriteria())).sort(Comparator.comparing(AlertNotifier::getCreatedAt)).collectList()).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.create(ReferenceType.DOMAIN, domainId, newAlertNotifier, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.singleToMono(alertNotifierService.getById(ReferenceType.DOMAIN, domainId, notifierId)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertNotifierService.update(ReferenceType.DOMAIN, domainId, notifierId, patchAlertNotifier, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT_NOTIFIER, Acl.LIST)).then(RxJava2Adapter.completableToMono(alertNotifierService.delete(ReferenceType.DOMAIN, domainId, notifierId, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(flowService.findById(ReferenceType.DOMAIN, domain, flow)).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->resourceService.findById(resource).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new FactorNotFoundException(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction((res1)->{
    if (!res1.getReferenceId().equalsIgnoreCase(domain) && res1.getReferenceType() != ReferenceType.DOMAIN) {
        throw new BadRequestException("Resource does not belong to domain");
    }
    return Response.ok(res1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->resourceService.update(domain, resource, updateResource, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_RESOURCE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(resourceService.delete(domain, resource, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->factorService.findById(factor).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new FactorNotFoundException(factor))).map(RxJavaReactorMigrationUtil.toJdkFunction((factor1)->{
    if (!factor1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Factor does not belong to domain");
    }
    return Response.ok(factor1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->factorService.update(domain, factor, updateFactor, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FACTOR, Acl.DELETE)).then(RxJava2Adapter.completableToMono(factorService.delete(domain, factor, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_MEMBER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById(reporter).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ReporterNotFoundException(reporter))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporter1)->{
    if (!reporter1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Reporter does not belong to domain");
    }
    return Response.ok(reporter1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->reporterService.update(domain, reporter, updateReporter, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_REPORTER, Acl.READ)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->reporterService.findById(reporter).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).switchIfEmpty(Mono.just(Optional.empty())).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Optional<Reporter>, CompletableSource>)(reporter1)->{
    if (reporter1.isPresent()) {
        if (!reporter1.get().getDomain().equalsIgnoreCase(domain)) {
            throw new BadRequestException("Reporter does not belong to domain");
        }
        return reporterService.delete(reporter, authenticatedUser);
    }
    return RxJava2Adapter.monoToCompletable(Mono.empty());
}).apply(y)))
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_AUDIT, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(auditService.findById(domain, audit))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->emailTemplateService.update(domain, email, updateEmail, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v))))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.Group, MaybeSource<io.gravitee.am.model.Group>>toJdkFunction((group1)->{
    if (group1.getReferenceType() == ReferenceType.DOMAIN && !group1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Group does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(group1));
}).apply(v)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.update(domain, group, updateGroup, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(groupService.delete(ReferenceType.DOMAIN, domain, group, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->groupService.findMembers(ReferenceType.DOMAIN, domain, group, page, Integer.min(size, MAX_MEMBERS_SIZE_PER_PAGE))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<io.gravitee.am.model.User>, SingleSource<Page>>toJdkFunction((pagedMembers)->{
    if (pagedMembers.getData() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(pagedMembers));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
        if (member.getSource() != null) {
            return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
                member.setSource(idP.getName());
                return member;
            })).defaultIfEmpty(member).single());
        }
        return RxJava2Adapter.monoToSingle(Mono.just(member));
    }).toSortedList(Comparator.comparing(User::getUsername))).map(RxJavaReactorMigrationUtil.toJdkFunction((members)->new Page(members, pagedMembers.getCurrentPage(), pagedMembers.getTotalCount()))));
}).apply(v)))
1 | Observable | toSortedList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList(Comparator.comparing(User::getUsername)))
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle((member)->{
    if (member.getSource() != null) {
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(identityProviderService.findById(member.getSource())).map(RxJavaReactorMigrationUtil.toJdkFunction((idP)->{
            member.setSource(idP.getName());
            return member;
        })).defaultIfEmpty(member).single());
    }
    return RxJava2Adapter.monoToSingle(Mono.just(member));
}).toSortedList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedMembers.getData()).flatMapSingle
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(group1.getRoles());
})))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->{
    if (group1.getRoles() == null || group1.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(group1.getRoles());
}))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.assignRoles(ReferenceType.DOMAIN, domain, group, roles, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((domain1)->groupService.revokeRoles(ReferenceType.DOMAIN, domain, group, Collections.singletonList(role), authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() != null && group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberAlreadyExistsException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.add(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_GROUP, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
}))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->groupService.findById(group).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new GroupNotFoundException(group)))).flatMapSingle((group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | (group1)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(userId)).switchIfEmpty(Mono.error(new UserNotFoundException(userId)))).flatMapSingle((user)->{
    if (group1.getMembers() == null || !group1.getMembers().contains(userId)) {
        return RxJava2Adapter.monoToSingle(Mono.error(new MemberNotFoundException(userId)));
    }
    List<String> groupMembers = group1.getMembers() != null ? new ArrayList<>(group1.getMembers()) : new ArrayList<>();
    groupMembers.remove(userId);
    UpdateGroup updateGroup = new UpdateGroup();
    updateGroup.setName(group1.getName());
    updateGroup.setDescription(group1.getDescription());
    updateGroup.setRoles(group1.getRoles());
    updateGroup.setMembers(groupMembers);
    return groupService.update(domain, group, updateGroup, authenticatedUser);
})
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->formService.update(domain, form, updateForm, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeService.findById(scopeId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeNotFoundException(scopeId))).map(RxJavaReactorMigrationUtil.toJdkFunction((scope)->{
    if (!scope.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Scope does not belong to domain");
    }
    return Response.ok(scope).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.patch(domain, scope, patchScope, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->scopeService.update(domain, scope, updateScope, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_SCOPE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(scopeService.delete(scope, false, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->extensionGrantService.findById(extensionGrant).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ExtensionGrantNotFoundException(extensionGrant))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrant1)->{
    if (!extensionGrant1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Extension grant does not belong to domain");
    }
    return Response.ok(extensionGrant1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->extensionGrantService.update(domain, extensionGrant, updateExtensionGrant, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_EXTENSION_GRANT, Acl.DELETE)).then(RxJava2Adapter.completableToMono(extensionGrantService.delete(domain, extensionGrant, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceClient).apply(v))))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction((user1)->{
    if (user1.getReferenceType() == ReferenceType.DOMAIN && !user1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("User does not belong to domain");
    }
    return RxJava2Adapter.monoToMaybe(Mono.just(new UserEntity(user1)));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceIdentityProvider).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.management.handlers.management.api.model.UserEntity, MaybeSource<io.gravitee.am.management.handlers.management.api.model.UserEntity>>toJdkFunction(this::enhanceClient).apply(v)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.update(ReferenceType.DOMAIN, domain, user, updateUser, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->userService.updateStatus(ReferenceType.DOMAIN, domain, user, status.isEnabled(), authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(userService.delete(ReferenceType.DOMAIN, domain, user, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domainId, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domainId)).switchIfEmpty(Mono.error(new DomainNotFoundException(domainId))).flatMap((domain)->RxJava2Adapter.completableToMono(userService.resetPassword(domain, user, password.getPassword(), authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.completableToMono(userService.sendRegistrationConfirmation(domain, user, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((irrelevant)->RxJava2Adapter.completableToMono(userService.unlock(ReferenceType.DOMAIN, domain, user, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | RETURN_TYPE
1 | Maybe | RETURN_TYPE
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
})))))).collectList())).subscribe(response::resume, response::resume);
1 | Flowable | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.flowableToFlux(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).zipWith(RxJava2Adapter.singleToMono(getScope(scopeApproval.getDomain(), scopeApproval.getScope())), RxJavaReactorMigrationUtil.toJdkBiFunction(((clientEntity,scopeEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    scopeApprovalEntity.setScopeEntity(scopeEntity);
    return scopeApprovalEntity;
}))))))
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.findByDomainAndUser(domain, user);
    }
    return scopeApprovalService.findByDomainAndUserAndClient(domain, user, clientId);
}).flatMapSingle
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((y)->RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
}).apply(y)))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Domain, CompletableSource>)(__)->{
    if (clientId == null || clientId.isEmpty()) {
        return scopeApprovalService.revokeByUser(domain, user, authenticatedUser);
    }
    return scopeApprovalService.revokeByUserAndClient(domain, user, clientId, authenticatedUser);
}).apply(y)))
1 | Single | RETURN_TYPE
1 | Single | cache | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(applicationService.findByDomainAndClientId(domain, clientId)).map(RxJavaReactorMigrationUtil.toJdkFunction(ApplicationEntity::new)).defaultIfEmpty(new ApplicationEntity("unknown-id", clientId, "unknown-client-name")).single()).cache())
1 | Single | RETURN_TYPE
1 | Single | cache | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToSingle(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, scopeKey)).switchIfEmpty(RxJava2Adapter.maybeToMono(scopeService.findByDomainAndKey(domain, getScopeBase(scopeKey))).map(RxJavaReactorMigrationUtil.toJdkFunction((entity)->{
    entity.setId("unknown-id");
    entity.setKey(scopeKey);
    return entity;
}))).map(RxJavaReactorMigrationUtil.toJdkFunction(ScopeEntity::new)).defaultIfEmpty(new ScopeEntity("unknown-id", scopeKey, "unknown-scope-name", "unknown-scope-description")).single()).cache())
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(endUser.getRoles());
})))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((endUser)->{
    if (endUser.getRoles() == null || endUser.getRoles().isEmpty()) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return roleService.findByIdIn(endUser.getRoles());
}))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.assignRoles(ReferenceType.DOMAIN, domain, user, roles, authenticatedUser)))
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
})))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() == null) {
        return RxJava2Adapter.monoToSingle(Mono.just(Collections.emptyList()));
    }
    return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
        EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
        enrolledFactorEntity.setType(factor.getType());
        enrolledFactorEntity.setName(factor.getName());
        return enrolledFactorEntity;
    })).defaultIfEmpty(unknown(enrolledFactor)))).toList();
}))
1 | Observable | toList | METHOD_INVOCATION | return Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))).toList();
1 | Observable | flatMapMaybe | METHOD_INVOCATION | Observable.fromIterable(user1.getFactors()).flatMapMaybe((enrolledFactor)->RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(factorService.findById(enrolledFactor.getFactorId())).map(RxJavaReactorMigrationUtil.toJdkFunction((factor)->{
    EnrolledFactorEntity enrolledFactorEntity = new EnrolledFactorEntity(enrolledFactor);
    enrolledFactorEntity.setType(factor.getType());
    enrolledFactorEntity.setName(factor.getName());
    return enrolledFactorEntity;
})).defaultIfEmpty(unknown(enrolledFactor)))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(user1.getFactors()).flatMapMaybe
1 | Maybe | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).thenMany(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user))).collectList()).subscribe(response::resume, response::resume);
1 | Maybe | flatMapPublisher | METHOD_INVOCATION | RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).thenMany(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapPublisher((__)->credentialService.findByUserId(ReferenceType.DOMAIN, domain, user)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->credentialService.findById(credential).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new CredentialNotFoundException(credential)))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->RxJava2Adapter.completableToMono(credentialService.delete(credential))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
})))).subscribe((__)->response.resume(Response.noContent().build()), response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->userService.findById(user).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new UserNotFoundException(user)))).flatMapSingle((user1)->{
    if (user1.getFactors() != null) {
        List<EnrolledFactor> enrolledFactors = user1.getFactors().stream().filter((enrolledFactor)->!factor.equals(enrolledFactor.getFactorId())).collect(Collectors.toList());
        return userService.enrollFactors(user, enrolledFactors, authenticatedUser);
    }
    return RxJava2Adapter.monoToSingle(Mono.just(user1));
}))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((endUser)->userService.revokeRoles(ReferenceType.DOMAIN, domain, user, Collections.singletonList(role), authenticatedUser)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById(consent).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
}))))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->scopeApprovalService.findById(consent).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ScopeApprovalNotFoundException(consent)))).flatMapSingle((scopeApproval)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(getClient(scopeApproval.getDomain(), scopeApproval.getClientId())).map(RxJavaReactorMigrationUtil.toJdkFunction((clientEntity)->{
    ScopeApprovalEntity scopeApprovalEntity = new ScopeApprovalEntity(scopeApproval);
    scopeApprovalEntity.setClientEntity(clientEntity);
    return scopeApprovalEntity;
})))))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_USER, Acl.UPDATE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((__)->RxJava2Adapter.completableToMono(scopeApprovalService.revokeByConsent(domain, user, consent, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | RETURN_TYPE
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->roleService.findById(role).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new RoleNotFoundException(role))).map(RxJavaReactorMigrationUtil.toJdkFunction((role1)->{
    if (role1.getReferenceType() == ReferenceType.DOMAIN && !role1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Role does not belong to domain");
    }
    return Response.ok(convert(role1)).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert)))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((irrelevant)->roleService.update(domain, role, convert(updateRole), authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_ROLE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(roleService.delete(ReferenceType.DOMAIN, domain, role, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->certificateService.findById(certificate).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new CertificateNotFoundException(certificate))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->{
    if (!certificate1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Certificate does not belong to domain");
    }
    return Response.ok(certificate1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKey)))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKey))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKeys)))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificateManager.getCertificateProvider(certificate)).switchIfEmpty(Mono.error(new BadRequestException("No certificate provider found for the certificate " + certificate)))).flatMapSingle(CertificateProvider::publicKeys))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificate1)->Response.ok(certificate1).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((schema)->certificateService.update(domain, certificate, updateCertificate, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_CERTIFICATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(certificateService.delete(certificate, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->identityProviderService.findById(identityProvider).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new IdentityProviderNotFoundException(identityProvider))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProvider1)->{
    if (identityProvider1.getReferenceType() == ReferenceType.DOMAIN && !identityProvider1.getReferenceId().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Identity provider does not belong to domain");
    }
    return Response.ok(identityProvider1).build();
}))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->identityProviderService.update(domain, identity, updateIdentityProvider, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.DOMAIN_IDENTITY_PROVIDER, Acl.DELETE)).then(RxJava2Adapter.completableToMono(identityProviderService.delete(domain, identity, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((app)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))))).map(RxJavaReactorMigrationUtil.toJdkFunction((application1)->{
    if (!application1.getDomain().equalsIgnoreCase(domain)) {
        throw new BadRequestException("Application does not belong to domain");
    }
    return Response.ok(application1).build();
}))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((app)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((userPermissions)->filterApplicationInfos(app, userPermissions))))))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(applicationService.updateType(domain, application, patchApplicationType.getType(), authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.DELETE)).then(RxJava2Adapter.completableToMono(applicationService.delete(application, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_OPENID, Acl.READ)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->applicationService.renewClientSecret(domain, application, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList()))).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap((updatedApplication)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions))))))))).subscribe(response::resume, response::resume);
1 | Completable | merge | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.merge(patchApplication.getRequiredPermissions().stream().map((permission)->checkAnyPermission(organizationId, environmentId, domain, application, permission, Acl.UPDATE)).collect(Collectors.toList())))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((patch)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(applicationService.patch(domain, application, patchApplication, authenticatedUser)).flatMap((updatedApplication)->RxJava2Adapter.singleToMono(findAllPermissions(authenticatedUser, organizationId, environmentId, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<io.gravitee.am.model.ReferenceType, java.util.Map<io.gravitee.am.model.permissions.Permission, java.util.Set<io.gravitee.am.model.Acl>>> userPermissions)->filterApplicationInfos(updatedApplication, userPermissions)))))))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(emailTemplateService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template())).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.ok(email).build())).defaultIfEmpty(Response.ok(new Email(false, emailTemplate.template())).build())).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((email)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/emails/" + email.getId())).entity(email).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.create(domain, application, newEmail, authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.READ)).then(RxJava2Adapter.maybeToMono(formService.findByDomainAndClientAndTemplate(domain, application, emailTemplate.template()))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.ok(form).build())).defaultIfEmpty(Response.ok(new Form(false, emailTemplate.template())).build())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((form)->Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/forms/" + form.getId())).entity(form).build())))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.create(domain, application, newForm, authenticatedUser)))
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList()))).flatMap((memberships)->RxJava2Adapter.singleToMono(membershipService.getMetadata(memberships)).map(RxJavaReactorMigrationUtil.toJdkFunction((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> metadata)->new MembershipListItem(memberships, metadata)))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(membershipService.findByReference(application1.getId(), ReferenceType.APPLICATION)).collectList())))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.CREATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser))).flatMap((membership1)->RxJava2Adapter.completableToMono(membershipService.addDomainUserRoleIfNecessary(organizationId, environmentId, domain, newMembership, authenticatedUser)).then(Mono.just(Response.created(URI.create("/organizations/" + organizationId + "/environments/" + environmentId + "/domains/" + domain + "/applications/" + application + "/members/" + membership1.getId())).entity(membership1).build()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->membershipService.addOrUpdate(organizationId, membership, authenticatedUser)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION, Acl.READ)).then(RxJava2Adapter.singleToMono(permissionService.findAllPermissions(authenticatedUser, ReferenceType.APPLICATION, application)).map(RxJavaReactorMigrationUtil.toJdkFunction(Permission::flatten)))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Observable | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.LIST)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size)))).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((application1)->resourceService.findByDomainAndClient(domain, application1.getId(), page, Integer.min(MAX_RESOURCES_SIZE_PER_PAGE, size))))
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<Page<Resource>, SingleSource<Page>>toJdkFunction((pagedResources)->{
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setPolicies(policies);
        return resourceEntity;
    })))).toList()).zipWith(RxJava2Adapter.singleToMono(resourceService.getMetadata((List<Resource>)pagedResources.getData())), RxJavaReactorMigrationUtil.toJdkBiFunction((v1,v2)->{
        return new Page(Collections.singletonList(new ResourceListItem(v1, v2)), page, pagedResources.getTotalCount());
    })));
}).apply(v)))
1 | Observable | toList | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList())
1 | Observable | flatMapSingle | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData()).flatMapSingle((r)->RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourceService.countAccessPolicyByResource(r.getId())).map(RxJavaReactorMigrationUtil.toJdkFunction((policies)->{
    ResourceEntity resourceEntity = new ResourceEntity(r);
    resourceEntity.setPolicies(policies);
    return resourceEntity;
})))).toList
1 | Observable | fromIterable | METHOD_INVOCATION | Observable.fromIterable(pagedResources.getData()).flatMapSingle
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_ANALYTICS, Acl.READ)).then(RxJava2Adapter.singleToMono(applicationAnalyticsService.execute(query)))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.LIST)).then(RxJava2Adapter.singleToMono(hasAnyPermission(authenticatedUser, organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ)).flatMapMany(RxJavaReactorMigrationUtil.toJdkFunction((hasPermission)->RxJava2Adapter.fluxToFlowable(RxJava2Adapter.flowableToFlux(flowService.findByApplication(ReferenceType.DOMAIN, domain, application)).map(RxJavaReactorMigrationUtil.toJdkFunction((flow)->filterFlowInfos(hasPermission, flow)))))).collectList())).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser))).map(RxJavaReactorMigrationUtil.toJdkFunction((updatedFlows)->updatedFlows.stream().map(FlowEntity::new).collect(Collectors.toList()))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain)))).flatMapSingle((__)->flowService.createOrUpdate(ReferenceType.DOMAIN, domain, application, convert(flows), authenticatedUser)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(flowService.findById(ReferenceType.DOMAIN, domain, flow)).switchIfEmpty(Mono.error(new FlowNotFoundException(flow))).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, Permission.APPLICATION_FLOW, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(flowService.update(ReferenceType.DOMAIN, domain, flow, convert(updateFlow), authenticatedUser)).map(RxJavaReactorMigrationUtil.toJdkFunction(FlowEntity::new)))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((v)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findByDomainAndClientResource(domain, application1.getId(), resource)).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v))))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Application, MaybeSource<ResourceEntity>>toJdkFunction((application1)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourceService.findByDomainAndClientResource(domain, application1.getId(), resource)).flatMap((n)->RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
        return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
            ResourceEntity resourceEntity = new ResourceEntity(r);
            resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
            return resourceEntity;
        })));
    }).apply(n)))));
}).apply(v)))
1 | Maybe | wrap | METHOD_INVOCATION | RxJava2Adapter.maybeToMono(Maybe.wrap(RxJavaReactorMigrationUtil.<Resource, MaybeSource<ResourceEntity>>toJdkFunction((r)->{
    return RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findById(r.getUserId())).map(RxJavaReactorMigrationUtil.toJdkFunction(Optional::ofNullable)).defaultIfEmpty(Optional.empty()).map(RxJavaReactorMigrationUtil.toJdkFunction((optUser)->{
        ResourceEntity resourceEntity = new ResourceEntity(r);
        resourceEntity.setUserDisplayName(optUser.isPresent() ? optUser.get().getDisplayName() : "Unknown user");
        return resourceEntity;
    })));
}).apply(n)))
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((application1)->RxJava2Adapter.flowableToFlux(resourceService.findAccessPoliciesByResources(Collections.singletonList(resource))).map(RxJavaReactorMigrationUtil.toJdkFunction(AccessPolicyListItem::new)).collectList()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_RESOURCE, Acl.READ).as(RxJava2Adapter::completableToMono).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((z)->resourceService.findAccessPolicy(policy).as(RxJava2Adapter::maybeToMono))).as(RxJava2Adapter::monoToMaybe).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_MEMBER, Acl.DELETE)).then(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application))).flatMap((__)->RxJava2Adapter.completableToMono(membershipService.delete(membershipId, authenticatedUser))).then())).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((irrelevant)->formService.update(domain, application, form, updateForm, authenticatedUser)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_FORM, Acl.DELETE)).then(RxJava2Adapter.completableToMono(formService.delete(domain, form, authenticatedUser)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail))))).subscribe(response::resume, response::resume);
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(domainService.findById(domain)).switchIfEmpty(Mono.error(new DomainNotFoundException(domain))).flatMap((z)->applicationService.findById(application).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ApplicationNotFoundException(application)))).flatMapSingle((__)->emailTemplateService.update(domain, application, email, updateEmail)))
1 | Completable | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToCompletable(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, domain, application, Permission.APPLICATION_EMAIL_TEMPLATE, Acl.DELETE)).then(RxJava2Adapter.completableToMono(emailTemplateService.delete(email)))).subscribe(()->response.resume(Response.noContent().build()), response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(certificatePluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePlugins)->certificatePlugins.stream().sorted(Comparator.comparing(CertificatePlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(certificateId).build())).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId)))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(certificatePluginService.findById(certificateId)).switchIfEmpty(Mono.error(new CertificatePluginNotFoundException(certificateId))).flatMap((z)->certificatePluginService.getSchema(certificateId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new CertificatePluginSchemaNotFoundException(certificateId))).map(RxJavaReactorMigrationUtil.toJdkFunction((certificatePluginSchema)->Response.ok(certificatePluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPlugin)->Response.ok(notifierPlugin).build()))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(notifierPluginService.findById(notifierId)).flatMap((notifierPlugin)->RxJava2Adapter.singleToMono(notifierPluginService.getSchema(notifierPlugin.getId()))).map(RxJavaReactorMigrationUtil.toJdkFunction((notifierPluginSchema)->Response.ok(notifierPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkAnyPermission(organizationId, environmentId, Permission.DOMAIN_ALERT, Acl.UPDATE)).then(RxJava2Adapter.singleToMono(alertTriggerService.createOrUpdate(ReferenceType.DOMAIN, domainId, patchAlertTrigger, authenticatedUser)))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(policyPluginService.findAll(expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugins)->policyPlugins.stream().sorted(Comparator.comparing(PolicyPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getSchema(policyId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new PolicyPluginSchemaNotFoundException(policyId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(policyPluginService.findById(policyId)).switchIfEmpty(Mono.error(new PolicyPluginNotFoundException(policyId))).flatMap((z)->policyPluginService.getDocumentation(policyId).as(RxJava2Adapter::maybeToMono)).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginDocumentation)->Response.ok(policyPluginDocumentation).build()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | LOCAL_VARIABLE
1 | Flowable | subscribe | METHOD_INVOCATION | formService.findAll(ReferenceType.ORGANIZATION).subscribe((form)->{
    updateForm(form);
    logger.info("Forms loaded");
}, (error)->logger.error("Unable to initialize forms", error));
1 | Maybe | subscribe | METHOD_INVOCATION | formService.findById(formId).subscribe((form)->{
    if (forms.containsKey(formId) && !form.isEnabled()) {
        removeForm(formId);
    } else {
        updateForm(form);
    }
    logger.info("Form {} {}d", formId, eventType);
}, (error)->logger.error("Unable to {} form {}", eventType, formId, error), ()->logger.error("No form found with id {}", formId));
1 | Single | subscribe | METHOD_INVOCATION | flowService.getSchema().subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(alertService.isAlertingAvailable()).map(RxJavaReactorMigrationUtil.toJdkFunction(AlertServiceStatusEntity::new))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | spelService.getGrammar().subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(authenticatorPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((authenticatorPlugins)->authenticatorPlugins.stream().sorted(Comparator.comparing(FactorPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(authenticatorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(authenticatorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(authenticatorPluginService.findById(factorId)).switchIfEmpty(Mono.error(new AuthenticatorPluginNotFoundException(factorId))).flatMap((z)->authenticatorPluginService.getSchema(factorId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new AuthenticatorPluginSchemaNotFoundException(factorId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, organizationId, authenticatedUser.getId())).flatMap((v)->RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).apply(v)))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((endUser)->{
    Map<String, Object> object = new HashMap<>();
    object.put("email", endUser.getEmail());
    newsletterService.subscribe(object);
}))).subscribe(response::resume, response::resume);
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction((user)->{
    user.setEmail(emailValue.getEmail());
    user.setNewsletter(true);
    return userService.update(user);
}).apply(v)))
1 | Single | subscribe | METHOD_INVOCATION | newsletterService.getTaglines().subscribe(response::resume, (error)->{
    LOGGER.error("An error has occurred when reading the newsletter taglines response", error);
    response.resume(Collections.emptyList());
});
1 | Flowable | blockingForEach | METHOD_INVOCATION | identityProviderService.findAll(ReferenceType.ORGANIZATION).blockingForEach(this::updateAuthenticationProvider);
1 | Maybe | subscribe | METHOD_INVOCATION | identityProviderService.findById(identityProviderId).subscribe((identityProvider)->{
    updateAuthenticationProvider(identityProvider);
    logger.info("Identity provider {} {}d for organization {}", identityProviderId, eventType, organizationId);
}, (error)->logger.error("Unable to {} identity provider for organization {}", eventType, organizationId, error), ()->logger.error("No identity provider found with id {}", identityProviderId));
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(roleService.findById(ReferenceType.PLATFORM, Platform.DEFAULT, role)).map(RxJavaReactorMigrationUtil.toJdkFunction(this::convert))).subscribe(response::resume, response::resume);
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.completableToMono(checkPermission(ReferenceType.PLATFORM, Platform.DEFAULT, Permission.INSTALLATION, Acl.READ)).then(RxJava2Adapter.singleToMono(installationService.get()).map(RxJavaReactorMigrationUtil.toJdkFunction(InstallationEntity::new))).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((installationEntity)->installationEntity.getAdditionalInformation().put(Installation.COCKPIT_URL, environment.getProperty("cockpit.url", DEFAULT_COCKPIT_URL))))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(identityProviderPluginService.findAll(external, expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugins)->identityProviderPlugins.stream().filter((identityProvider)->!GRAVITEE_AM_IDP.equals(identityProvider.getId())).sorted(Comparator.comparing(IdentityProviderPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(extensionGrantPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugins)->extensionGrantPlugins.stream().sorted(Comparator.comparing(ExtensionGrantPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(reporterPluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugins)->reporterPlugins.stream().sorted(Comparator.comparing(ReporterPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(resourcePluginService.findAll(expand)).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugins)->resourcePlugins.stream().sorted(Comparator.comparing(ResourcePlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.flowableToFlux(notifierPluginService.findAll(expand.toArray(new String[0]))).sort(Comparator.comparing(AbstractPlugin::getName)).collectList()).subscribe(response::resume, response::resume);
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(pluginService.findAll()).map(RxJavaReactorMigrationUtil.toJdkFunction((plugins)->plugins.stream().sorted(Comparator.comparing(BotDetectionPlugin::getName)).collect(Collectors.toList())))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(pluginService.findById(botDetectionId)).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetectionId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPlugin)->Response.ok(policyPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(pluginService.findById(botDetection)).switchIfEmpty(Mono.error(new BotDetectionPluginNotFoundException(botDetection))).flatMap((z)->pluginService.getSchema(botDetection).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new BotDetectionPluginSchemaNotFoundException(botDetection))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((resourcePlugin)->Response.ok(resourcePlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(resourcePluginService.findById(resourceId)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).flatMap((z)->resourcePluginService.getSchema(resourceId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ResourcePluginNotFoundException(resourceId))).map(RxJavaReactorMigrationUtil.toJdkFunction((policyPluginSchema)->Response.ok(policyPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPlugin)->Response.ok(reporterPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(reporterPluginService.findById(reporterId)).switchIfEmpty(Mono.error(new ReporterPluginNotFoundException(reporterId))).flatMap((z)->reporterPluginService.getSchema(reporterId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ReporterPluginSchemaNotFoundException(reporterId))).map(RxJavaReactorMigrationUtil.toJdkFunction((reporterPluginSchema)->Response.ok(reporterPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPlugin)->Response.ok(extensionGrantPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(extensionGrantPluginService.findById(extensionGrantId)).switchIfEmpty(Mono.error(new ExtensionGrantPluginNotFoundException(extensionGrantId))).flatMap((z)->extensionGrantPluginService.getSchema(extensionGrantId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new ExtensionGrantPluginSchemaNotFoundException(extensionGrantId))).map(RxJavaReactorMigrationUtil.toJdkFunction((extensionGrantPluginSchema)->Response.ok(extensionGrantPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Maybe | IMPORT
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPlugin)->Response.ok(identityProviderPlugin).build()))).subscribe(response::resume, response::resume);
1 | Maybe | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(identityProviderPluginService.findById(identityProviderId)).switchIfEmpty(Mono.error(new IdentityProviderPluginNotFoundException(identityProviderId))).flatMap((z)->identityProviderPluginService.getSchema(identityProviderId).as(RxJava2Adapter::maybeToMono)).switchIfEmpty(Mono.error(new IdentityProviderPluginSchemaNotFoundException(identityProviderId))).map(RxJavaReactorMigrationUtil.toJdkFunction((identityProviderPluginSchema)->Response.ok(identityProviderPluginSchema).build()))).subscribe(response::resume, response::resume);
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | onErrorResumeNext | METHOD_INVOCATION | RxJava2Adapter.singleToMono(RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(existingUser)).flatMap((user)->RxJava2Adapter.completableToMono(updateRoles(principal, existingUser)).then(Mono.just(user))));
}).onErrorResumeNext((ex)->{
    if (ex instanceof UserNotFoundException) {
        final io.gravitee.am.model.User newUser = new io.gravitee.am.model.User();
        newUser.setInternal(false);
        newUser.setExternalId(principal.getId());
        newUser.setUsername(principal.getUsername());
        newUser.setSource(details.get(SOURCE));
        newUser.setReferenceType(ReferenceType.ORGANIZATION);
        newUser.setReferenceId(organizationId);
        newUser.setLoggedAt(new Date());
        newUser.setLoginsCount(1L);
        newUser.setAdditionalInformation(principal.getAdditionalInformation());
        return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.create(newUser)).flatMap((user)->RxJava2Adapter.completableToMono(userService.setRoles(principal, user)).then(Mono.just(user))));
    }
    return RxJava2Adapter.monoToSingle(Mono.error(ex));
}))
1 | Maybe | flatMapSingle | METHOD_INVOCATION | RxJava2Adapter.monoToMaybe(RxJava2Adapter.maybeToMono(userService.findByExternalIdAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getId(), source)).switchIfEmpty(Mono.defer(()->RxJava2Adapter.maybeToMono(userService.findByUsernameAndSource(ReferenceType.ORGANIZATION, organizationId, principal.getUsername(), source)))).switchIfEmpty(Mono.error(new UserNotFoundException(principal.getUsername())))).flatMapSingle((existingUser)->{
    existingUser.setSource(details.get(SOURCE));
    existingUser.setLoggedAt(new Date());
    existingUser.setLoginsCount(existingUser.getLoginsCount() + 1);
    if (existingUser.getAdditionalInformation() != null) {
        existingUser.getAdditionalInformation().putAll(principal.getAdditionalInformation());
    } else {
        existingUser.setAdditionalInformation(new HashMap<>(principal.getAdditionalInformation()));
    }
    return RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.update(existingUser)).flatMap((user)->RxJava2Adapter.completableToMono(updateRoles(principal, existingUser)).then(Mono.just(user))));
}).onErrorResumeNext
1 | Single | wrap | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.wrap(RxJavaReactorMigrationUtil.<io.gravitee.am.model.User, SingleSource<io.gravitee.am.model.User>>toJdkFunction(userService::enhance).apply(v)))
1 | Completable | OTHER
1 | Completable | wrap | METHOD_INVOCATION | RxJava2Adapter.completableToMono(Completable.wrap(RxJavaReactorMigrationUtil.toJdkFunction((Function<Boolean, CompletableSource>)(mustChangeOrganizationRole)->{
    if (!mustChangeOrganizationRole) {
        return RxJava2Adapter.monoToCompletable(Mono.empty());
    }
    Membership membership = new Membership();
    membership.setMemberType(MemberType.USER);
    membership.setMemberId(existingUser.getId());
    membership.setReferenceType(existingUser.getReferenceType());
    membership.setReferenceId(existingUser.getReferenceId());
    membership.setRoleId(roleId);
    return RxJava2Adapter.monoToCompletable(RxJava2Adapter.singleToMono(roleService.findById(existingUser.getReferenceType(), existingUser.getReferenceId(), roleId)).flatMap((__)->RxJava2Adapter.singleToMono(membershipService.addOrUpdate(existingUser.getReferenceId(), membership))).then());
}).apply(y)))
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(userService.findById(ReferenceType.ORGANIZATION, (String)jwt.get("org"), (String)jwt.getSub())).doOnSuccess(RxJavaReactorMigrationUtil.toJdkConsumer((user)->auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).user(user).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent())))).doOnError(RxJavaReactorMigrationUtil.toJdkConsumer((err)->{
    logger.warn("Unable to read user information, trace logout with minimal data", err);
    auditService.report(AuditBuilder.builder(LogoutAuditBuilder.class).principal(new EndUserAuthentication(jwt.get("username"), null, new SimpleAuthenticationContext())).referenceType(ReferenceType.ORGANIZATION).referenceId((String)jwt.get("org")).ipAddress(details.getRemoteAddress()).userAgent(details.getUserAgent()));
}))).subscribe();
1 | Single | IMPORT
1 | Single | LOCAL_VARIABLE
1 | Single | LOCAL_VARIABLE
1 | Single | subscribe | METHOD_INVOCATION | RxJava2Adapter.monoToSingle(RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
})).map(RxJavaReactorMigrationUtil.toJdkFunction((permissions)->{
    Map<String, Object> profile = new HashMap<>(authenticatedUser.getAdditionalInformation());
    profile.put("permissions", permissions);
    profile.put("newsletter_enabled", newsletterEnabled);
    profile.remove(CustomClaims.ROLES);
    return profile;
}))).subscribe(response::resume, response::resume);
1 | Single | zip | METHOD_INVOCATION | RxJava2Adapter.singleToMono(Single.zip(platformPermissions, organizationPermissions, (p,o)->{
    Set<String> allPermissions = new HashSet<>();
    allPermissions.addAll(p);
    allPermissions.addAll(o);
    return allPermissions;
}))
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Flowable | IMPORT
1 | Single | IMPORT
1 | Completable | IMPORT
1 | Flowable | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Single | IMPORT
1 | Maybe | IMPORT
1 | Completable | IMPORT
1 | Completable | OTHER
1 | Completable | OTHER
